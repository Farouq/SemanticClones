<clones>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="137" endline="150">
<![CDATA[
internal static Type[] ReadMethodSpec(ModuleReader module, ByteReader br, IGenericContext context)
{
if (br.ReadByte() != GENERICINST)
{
throw new BadImageFormatException();
}
Type[] args = new Type[br.ReadCompressedInt()];
for (int i = 0; i < args.Length; i++)
{
args[i] = ReadType(module, br, context);
}
for (int i = 0; i < args.Length; i++)
{
args[i] = ReadType(module, br, context);
}
return args;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="760" endline="773">
<![CDATA[
protected static Type[][] BindTypeParameters(IGenericBinder binder, Type[][] types)
{
if (types == null)
{
return null;
}
Type[][] expanded = new Type[types.Length][];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
return expanded;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="137" endline="150">
<![CDATA[
internal static Type[] ReadMethodSpec(ModuleReader module, ByteReader br, IGenericContext context)
{
if (br.ReadByte() != GENERICINST)
{
throw new BadImageFormatException();
}
Type[] args = new Type[br.ReadCompressedInt()];
for (int i = 0; i < args.Length; i++)
{
args[i] = ReadType(module, br, context);
}
for (int i = 0; i < args.Length; i++)
{
args[i] = ReadType(module, br, context);
}
return args;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="774" endline="787">
<![CDATA[
protected static Type[][][] BindTypeParameters(IGenericBinder binder, Type[][][] types)
{
if (types == null)
{
return null;
}
Type[][][] expanded = new Type[types.Length][][];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
return expanded;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="137" endline="150">
<![CDATA[
internal static Type[] ReadMethodSpec(ModuleReader module, ByteReader br, IGenericContext context)
{
if (br.ReadByte() != GENERICINST)
{
throw new BadImageFormatException();
}
Type[] args = new Type[br.ReadCompressedInt()];
for (int i = 0; i < args.Length; i++)
{
args[i] = ReadType(module, br, context);
}
for (int i = 0; i < args.Length; i++)
{
args[i] = ReadType(module, br, context);
}
return args;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="97" endline="110">
<![CDATA[
internal static Type[][] Copy(Type[][] types)
{
if (types == null || types.Length == 0)
{
return types;
}
Type[][] newArray = new Type[types.Length][];
for (int i = 0; i < newArray.Length; i++)
{
newArray[i] = Copy(types[i]);
}
for (int i = 0; i < newArray.Length; i++)
{
newArray[i] = Copy(types[i]);
}
return newArray;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="137" endline="150">
<![CDATA[
internal static Type[] ReadMethodSpec(ModuleReader module, ByteReader br, IGenericContext context)
{
if (br.ReadByte() != GENERICINST)
{
throw new BadImageFormatException();
}
Type[] args = new Type[br.ReadCompressedInt()];
for (int i = 0; i < args.Length; i++)
{
args[i] = ReadType(module, br, context);
}
for (int i = 0; i < args.Length; i++)
{
args[i] = ReadType(module, br, context);
}
return args;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="111" endline="124">
<![CDATA[
internal static T[] ToArray<T, V>(List<V> list, T[] empty) where V
{
if (list == null || list.Count == 0)
{
return empty;
}
T[] array = new T[list.Count];
for (int i = 0; i < array.Length; i++)
{
array[i] = list[i];
}
for (int i = 0; i < array.Length; i++)
{
array[i] = list[i];
}
return array;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="167" endline="179">
<![CDATA[
private static Type ReadTypeOrVoid(ModuleReader module, ByteReader br, IGenericContext context)
{
if (br.PeekByte() == ELEMENT_TYPE_VOID)
{
br.ReadByte();
return module.universe.System_Void;
}
else
{
return ReadType(module, br, context);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="305" endline="316">
<![CDATA[
protected static Type ReadParam(ModuleReader module, ByteReader br, IGenericContext context)
{
switch (br.PeekByte())
{
case ELEMENT_TYPE_TYPEDBYREF
br.ReadByte();
return module.universe.System_TypedReference;
default
return ReadTypeOrByRef(module, br, context);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="167" endline="179">
<![CDATA[
private static Type ReadTypeOrVoid(ModuleReader module, ByteReader br, IGenericContext context)
{
if (br.PeekByte() == ELEMENT_TYPE_VOID)
{
br.ReadByte();
return module.universe.System_Void;
}
else
{
return ReadType(module, br, context);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="439" endline="478">
<![CDATA[
private sealed class TrackingGenericContext
{
private readonly IGenericContext context;
private bool used;
internal TrackingGenericContext(IGenericContext context)
{
this.context = context;
}
internal bool IsUsed
{
get { return used; }
}
public Type GetGenericTypeArgument(int index)
{
used = true;
return context.GetGenericTypeArgument(index);
}
public Type GetGenericMethodArgument(int index)
{
used = true;
return context.GetGenericMethodArgument(index);
}
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
if ((metadataToken >> 24) == TypeSpecTable.Index)
{
return ResolveType(metadataToken, new GenericContext(genericTypeArguments, genericMethodArguments));
}
else
{
return ResolveType(metadataToken, null);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="167" endline="179">
<![CDATA[
private static Type ReadTypeOrVoid(ModuleReader module, ByteReader br, IGenericContext context)
{
if (br.PeekByte() == ELEMENT_TYPE_VOID)
{
br.ReadByte();
return module.universe.System_Void;
}
else
{
return ReadType(module, br, context);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="570" endline="581">
<![CDATA[
public static IList<CustomAttributeData> __GetDeclarativeSecurity(Type type)
{
if ((type.Attributes & TypeAttributes.HasSecurity) != 0)
{
return type.Module.GetDeclarativeSecurity(type.MetadataToken);
}
else
{
return EmptyList;
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="167" endline="179">
<![CDATA[
private static Type ReadTypeOrVoid(ModuleReader module, ByteReader br, IGenericContext context)
{
if (br.PeekByte() == ELEMENT_TYPE_VOID)
{
br.ReadByte();
return module.universe.System_Void;
}
else
{
return ReadType(module, br, context);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="582" endline="593">
<![CDATA[
public static IList<CustomAttributeData> __GetDeclarativeSecurity(MethodBase method)
{
if ((method.Attributes & MethodAttributes.HasSecurity) != 0)
{
return method.Module.GetDeclarativeSecurity(method.MetadataToken);
}
else
{
return EmptyList;
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="710" endline="719">
<![CDATA[
internal static void WriteMethodSpec(ModuleBuilder module, ByteBuffer bb, Type[] genArgs)
{
bb.Write(GENERICINST);
bb.WriteCompressedInt(genArgs.Length);
foreach (Type arg in genArgs)
{
WriteType(module, bb, arg);
}
foreach (Type arg in genArgs)
{
WriteType(module, bb, arg);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="301" endline="311">
<![CDATA[
internal void AddTypeForwarder(Type type)
{
ExportType(type);
foreach (Type nested in type.GetNestedTypes(BindingFlags.Public | BindingFlags.NonPublic))
{
AddTypeForwarder(nested);
}
foreach (Type nested in type.GetNestedTypes(BindingFlags.Public | BindingFlags.NonPublic))
{
AddTypeForwarder(nested);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="746" endline="759">
<![CDATA[
protected static Type[] BindTypeParameters(IGenericBinder binder, Type[] types)
{
if (types == null || types.Length == 0)
{
return Type.EmptyTypes;
}
Type[] expanded = new Type[types.Length];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = types[i].BindTypeParameters(binder);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = types[i].BindTypeParameters(binder);
}
return expanded;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="760" endline="773">
<![CDATA[
protected static Type[][] BindTypeParameters(IGenericBinder binder, Type[][] types)
{
if (types == null)
{
return null;
}
Type[][] expanded = new Type[types.Length][];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
return expanded;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="746" endline="759">
<![CDATA[
protected static Type[] BindTypeParameters(IGenericBinder binder, Type[] types)
{
if (types == null || types.Length == 0)
{
return Type.EmptyTypes;
}
Type[] expanded = new Type[types.Length];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = types[i].BindTypeParameters(binder);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = types[i].BindTypeParameters(binder);
}
return expanded;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="774" endline="787">
<![CDATA[
protected static Type[][][] BindTypeParameters(IGenericBinder binder, Type[][][] types)
{
if (types == null)
{
return null;
}
Type[][][] expanded = new Type[types.Length][][];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
return expanded;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="746" endline="759">
<![CDATA[
protected static Type[] BindTypeParameters(IGenericBinder binder, Type[] types)
{
if (types == null || types.Length == 0)
{
return Type.EmptyTypes;
}
Type[] expanded = new Type[types.Length];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = types[i].BindTypeParameters(binder);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = types[i].BindTypeParameters(binder);
}
return expanded;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="97" endline="110">
<![CDATA[
internal static Type[][] Copy(Type[][] types)
{
if (types == null || types.Length == 0)
{
return types;
}
Type[][] newArray = new Type[types.Length][];
for (int i = 0; i < newArray.Length; i++)
{
newArray[i] = Copy(types[i]);
}
for (int i = 0; i < newArray.Length; i++)
{
newArray[i] = Copy(types[i]);
}
return newArray;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="760" endline="773">
<![CDATA[
protected static Type[][] BindTypeParameters(IGenericBinder binder, Type[][] types)
{
if (types == null)
{
return null;
}
Type[][] expanded = new Type[types.Length][];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
return expanded;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="97" endline="110">
<![CDATA[
internal static Type[][] Copy(Type[][] types)
{
if (types == null || types.Length == 0)
{
return types;
}
Type[][] newArray = new Type[types.Length][];
for (int i = 0; i < newArray.Length; i++)
{
newArray[i] = Copy(types[i]);
}
for (int i = 0; i < newArray.Length; i++)
{
newArray[i] = Copy(types[i]);
}
return newArray;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="760" endline="773">
<![CDATA[
protected static Type[][] BindTypeParameters(IGenericBinder binder, Type[][] types)
{
if (types == null)
{
return null;
}
Type[][] expanded = new Type[types.Length][];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
return expanded;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="111" endline="124">
<![CDATA[
internal static T[] ToArray<T, V>(List<V> list, T[] empty) where V
{
if (list == null || list.Count == 0)
{
return empty;
}
T[] array = new T[list.Count];
for (int i = 0; i < array.Length; i++)
{
array[i] = list[i];
}
for (int i = 0; i < array.Length; i++)
{
array[i] = list[i];
}
return array;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="774" endline="787">
<![CDATA[
protected static Type[][][] BindTypeParameters(IGenericBinder binder, Type[][][] types)
{
if (types == null)
{
return null;
}
Type[][][] expanded = new Type[types.Length][][];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
return expanded;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="97" endline="110">
<![CDATA[
internal static Type[][] Copy(Type[][] types)
{
if (types == null || types.Length == 0)
{
return types;
}
Type[][] newArray = new Type[types.Length][];
for (int i = 0; i < newArray.Length; i++)
{
newArray[i] = Copy(types[i]);
}
for (int i = 0; i < newArray.Length; i++)
{
newArray[i] = Copy(types[i]);
}
return newArray;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="774" endline="787">
<![CDATA[
protected static Type[][][] BindTypeParameters(IGenericBinder binder, Type[][][] types)
{
if (types == null)
{
return null;
}
Type[][][] expanded = new Type[types.Length][][];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
return expanded;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="111" endline="124">
<![CDATA[
internal static T[] ToArray<T, V>(List<V> list, T[] empty) where V
{
if (list == null || list.Count == 0)
{
return empty;
}
T[] array = new T[list.Count];
for (int i = 0; i < array.Length; i++)
{
array[i] = list[i];
}
for (int i = 0; i < array.Length; i++)
{
array[i] = list[i];
}
return array;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="788" endline="796">
<![CDATA[
protected static Type[] BindTypeParameters(IGenericBinder binder, Type[][][] types, int index, int optOrReq)
{
if (types == null || types[index] == null)
{
return null;
}
return BindTypeParameters(binder, types[index][optOrReq]);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="482" endline="490">
<![CDATA[
private static Type[] NormalizeAndCopy(Type[][] array, int index)
{
if (array == null || array.Length == 0)
{
return null;
}
return NormalizeAndCopy(array[index]);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ModuleWriter.cs" startline="301" endline="319">
<![CDATA[
private static int ComputeStrongNameSignatureLength(byte[] publicKey)
{
if (publicKey == null)
{
return 0;
}
else if (publicKey.Length == 16)
{
return 128;
}
else
{
return publicKey.Length - 32;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="210" endline="222">
<![CDATA[
internal static bool TypeEquals(Type t1, Type t2)
{
if (t1 == t2)
{
return true;
}
if (t1 == null)
{
return false;
}
return t1.Equals(t2);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\MetadataRW.cs" startline="87" endline="99">
<![CDATA[
private static bool IsBig(int bitsUsed, params Table[] tables)
{
int limit = 1 << (16 - bitsUsed);
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="265" endline="283">
<![CDATA[
}
public virtual bool ContainsGenericParameters
{
get
{
if (this.IsGenericParameter)
{
return true;
}
foreach (Type arg in this.GetGenericArguments())
{
if (arg.ContainsGenericParameters)
{
return true;
}
}
foreach (Type arg in this.GetGenericArguments())
{
if (arg.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\MetadataRW.cs" startline="87" endline="99">
<![CDATA[
private static bool IsBig(int bitsUsed, params Table[] tables)
{
int limit = 1 << (16 - bitsUsed);
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\MetadataRW.cs" startline="87" endline="99">
<![CDATA[
private static bool IsBig(int bitsUsed, params Table[] tables)
{
int limit = 1 << (16 - bitsUsed);
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\MetadataRW.cs" startline="87" endline="99">
<![CDATA[
private static bool IsBig(int bitsUsed, params Table[] tables)
{
int limit = 1 << (16 - bitsUsed);
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\MetadataRW.cs" startline="87" endline="99">
<![CDATA[
private static bool IsBig(int bitsUsed, params Table[] tables)
{
int limit = 1 << (16 - bitsUsed);
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\MetadataRW.cs" startline="87" endline="99">
<![CDATA[
private static bool IsBig(int bitsUsed, params Table[] tables)
{
int limit = 1 << (16 - bitsUsed);
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\MetadataRW.cs" startline="87" endline="99">
<![CDATA[
private static bool IsBig(int bitsUsed, params Table[] tables)
{
int limit = 1 << (16 - bitsUsed);
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="909" endline="924">
<![CDATA[
public Type GetInterface(string name, bool ignoreCase)
{
if (ignoreCase)
{
throw new NotImplementedException();
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\MetadataRW.cs" startline="87" endline="99">
<![CDATA[
private static bool IsBig(int bitsUsed, params Table[] tables)
{
int limit = 1 << (16 - bitsUsed);
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\MetadataRW.cs" startline="87" endline="99">
<![CDATA[
private static bool IsBig(int bitsUsed, params Table[] tables)
{
int limit = 1 << (16 - bitsUsed);
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2150" endline="2168">
<![CDATA[
}
public override bool IsVisible
{
get
{
if (base.IsVisible)
{
foreach (Type arg in args)
{
if (!arg.IsVisible)
{
return false;
}
}
foreach (Type arg in args)
{
if (!arg.IsVisible)
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\MetadataRW.cs" startline="87" endline="99">
<![CDATA[
private static bool IsBig(int bitsUsed, params Table[] tables)
{
int limit = 1 << (16 - bitsUsed);
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
foreach (Table table in tables)
{
if (table.RowCount >= limit)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="186" endline="213">
<![CDATA[
internal void WriteTypeDefOrRef(int token)
{
switch (token >> 24)
{
case 0
break;
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case TypeSpecTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
if (bigTypeDefOrRef)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="240" endline="262">
<![CDATA[
internal void WriteCustomAttributeType(int token)
{
switch (token >> 24)
{
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 3 | 2;
break;
case MemberRefTable.Index
token = (token & 0xFFFFFF) << 3 | 3;
break;
default
throw new InvalidOperationException();
}
if (bigCustomAttributeType)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="186" endline="213">
<![CDATA[
internal void WriteTypeDefOrRef(int token)
{
switch (token >> 24)
{
case 0
break;
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case TypeSpecTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
if (bigTypeDefOrRef)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="420" endline="442">
<![CDATA[
internal void WriteMethodDefOrRef(int token)
{
switch (token >> 24)
{
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 1 | 0;
break;
case MemberRefTable.Index
token = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
if (bigMethodDefOrRef)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="186" endline="213">
<![CDATA[
internal void WriteTypeDefOrRef(int token)
{
switch (token >> 24)
{
case 0
break;
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case TypeSpecTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
if (bigTypeDefOrRef)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="527" endline="549">
<![CDATA[
internal void WriteMemberForwarded(int token)
{
switch (token >> 24)
{
case FieldTable.Index
token = (token & 0xFFFFFF) << 1 | 0;
break;
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
if (bigMemberForwarded)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="240" endline="262">
<![CDATA[
internal void WriteCustomAttributeType(int token)
{
switch (token >> 24)
{
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 3 | 2;
break;
case MemberRefTable.Index
token = (token & 0xFFFFFF) << 3 | 3;
break;
default
throw new InvalidOperationException();
}
if (bigCustomAttributeType)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="359" endline="387">
<![CDATA[
internal void WriteResolutionScope(int token)
{
switch (token >> 24)
{
case ModuleTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case ModuleRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case AssemblyRefTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 2 | 3;
break;
default
throw new InvalidOperationException();
}
if (bigResolutionScope)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="240" endline="262">
<![CDATA[
internal void WriteCustomAttributeType(int token)
{
switch (token >> 24)
{
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 3 | 2;
break;
case MemberRefTable.Index
token = (token & 0xFFFFFF) << 3 | 3;
break;
default
throw new InvalidOperationException();
}
if (bigCustomAttributeType)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="471" endline="498">
<![CDATA[
internal void WriteImplementation(int token)
{
switch (token >> 24)
{
case 0
break;
case FileTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case AssemblyRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case ExportedTypeTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
if (bigImplementation)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="388" endline="419">
<![CDATA[
internal void WriteMemberRefParent(int token)
{
switch (token >> 24)
{
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 3 | 0;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 3 | 1;
break;
case ModuleRefTable.Index
token = (token & 0xFFFFFF) << 3 | 2;
break;
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 3 | 3;
break;
case TypeSpecTable.Index
token = (token & 0xFFFFFF) << 3 | 4;
break;
default
throw new InvalidOperationException();
}
if (bigMemberRefParent)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="471" endline="498">
<![CDATA[
internal void WriteImplementation(int token)
{
switch (token >> 24)
{
case 0
break;
case FileTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case AssemblyRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case ExportedTypeTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
if (bigImplementation)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="420" endline="442">
<![CDATA[
internal void WriteMethodDefOrRef(int token)
{
switch (token >> 24)
{
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 1 | 0;
break;
case MemberRefTable.Index
token = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
if (bigMethodDefOrRef)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="471" endline="498">
<![CDATA[
internal void WriteImplementation(int token)
{
switch (token >> 24)
{
case 0
break;
case FileTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case AssemblyRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case ExportedTypeTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
if (bigImplementation)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="471" endline="498">
<![CDATA[
internal void WriteImplementation(int token)
{
switch (token >> 24)
{
case 0
break;
case FileTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case AssemblyRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case ExportedTypeTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
if (bigImplementation)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="527" endline="549">
<![CDATA[
internal void WriteMemberForwarded(int token)
{
switch (token >> 24)
{
case FieldTable.Index
token = (token & 0xFFFFFF) << 1 | 0;
break;
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
if (bigMemberForwarded)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="62" endline="77">
<![CDATA[
}
public abstract Type BaseType
{
get;
}
public abstract TypeAttributes Attributes
{
get;
}
public virtual Type GetElementType()
{
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="49" endline="394">
<![CDATA[
protected abstract int GetRowSize(RowSizeCalc rsc);
protected sealed class RowSizeCalc
{
private readonly MetadataWriter mw;
private int size;
internal RowSizeCalc(MetadataWriter mw)
{
this.mw = mw;
}
internal RowSizeCalc AddFixed(int size)
{
this.size += size;
return this;
}
internal RowSizeCalc WriteStringIndex()
{
if (mw.bigStrings)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteGuidIndex()
{
if (mw.bigGuids)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteBlobIndex()
{
if (mw.bigBlobs)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeDefOrRef()
{
if (mw.bigTypeDefOrRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteField()
{
if (mw.bigField)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteMethodDef()
{
if (mw.bigMethodDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteParam()
{
if (mw.bigParam)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteResolutionScope()
{
if (mw.bigResolutionScope)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMemberRefParent()
{
if (mw.bigMemberRefParent)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasCustomAttribute()
{
if (mw.bigHasCustomAttribute)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteCustomAttributeType()
{
if (mw.bigCustomAttributeType)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasConstant()
{
if (mw.bigHasConstant)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeDef()
{
if (mw.bigTypeDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMethodDefOrRef()
{
if (mw.bigMethodDefOrRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteEvent()
{
if (mw.bigEvent)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteProperty()
{
if (mw.bigProperty)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasSemantics()
{
if (mw.bigHasSemantics)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteImplementation()
{
if (mw.bigImplementation)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeOrMethodDef()
{
if (mw.bigTypeOrMethodDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteGenericParam()
{
if (mw.bigGenericParam)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasDeclSecurity()
{
if (mw.bigHasDeclSecurity)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMemberForwarded()
{
if (mw.bigMemberForwarded)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteModuleRef()
{
if (mw.bigModuleRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasFieldMarshal()
{
if (mw.bigHasFieldMarshal)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal int Value
{
get { return size; }
}
}
}
abstract class Table<T>
{
internal T[] records = new T[1];
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="62" endline="77">
<![CDATA[
}
public abstract Type BaseType
{
get;
}
public abstract TypeAttributes Attributes
{
get;
}
public virtual Type GetElementType()
{
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="126" endline="133">
<![CDATA[
}
internal uint StrongNameSignatureLength
{
get
{
return strongNameSignatureLength;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="265" endline="283">
<![CDATA[
}
public virtual bool ContainsGenericParameters
{
get
{
if (this.IsGenericParameter)
{
return true;
}
foreach (Type arg in this.GetGenericArguments())
{
if (arg.ContainsGenericParameters)
{
return true;
}
}
foreach (Type arg in this.GetGenericArguments())
{
if (arg.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="909" endline="924">
<![CDATA[
public Type GetInterface(string name, bool ignoreCase)
{
if (ignoreCase)
{
throw new NotImplementedException();
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="265" endline="283">
<![CDATA[
}
public virtual bool ContainsGenericParameters
{
get
{
if (this.IsGenericParameter)
{
return true;
}
foreach (Type arg in this.GetGenericArguments())
{
if (arg.ContainsGenericParameters)
{
return true;
}
}
foreach (Type arg in this.GetGenericArguments())
{
if (arg.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="265" endline="283">
<![CDATA[
}
public virtual bool ContainsGenericParameters
{
get
{
if (this.IsGenericParameter)
{
return true;
}
foreach (Type arg in this.GetGenericArguments())
{
if (arg.ContainsGenericParameters)
{
return true;
}
}
foreach (Type arg in this.GetGenericArguments())
{
if (arg.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="144" endline="165">
<![CDATA[
}
public override bool ContainsGenericParameters
{
get
{
if (declaringType.ContainsGenericParameters)
{
return true;
}
if (methodArgs != null)
{
foreach (Type type in methodArgs)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in methodArgs)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="265" endline="283">
<![CDATA[
}
public virtual bool ContainsGenericParameters
{
get
{
if (this.IsGenericParameter)
{
return true;
}
foreach (Type arg in this.GetGenericArguments())
{
if (arg.ContainsGenericParameters)
{
return true;
}
}
foreach (Type arg in this.GetGenericArguments())
{
if (arg.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2150" endline="2168">
<![CDATA[
}
public override bool IsVisible
{
get
{
if (base.IsVisible)
{
foreach (Type arg in args)
{
if (!arg.IsVisible)
{
return false;
}
}
foreach (Type arg in args)
{
if (!arg.IsVisible)
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="265" endline="283">
<![CDATA[
}
public virtual bool ContainsGenericParameters
{
get
{
if (this.IsGenericParameter)
{
return true;
}
foreach (Type arg in this.GetGenericArguments())
{
if (arg.ContainsGenericParameters)
{
return true;
}
}
foreach (Type arg in this.GetGenericArguments())
{
if (arg.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="299" endline="310">
<![CDATA[
}
public virtual Type GetEnumUnderlyingType()
{
if (!this.IsEnum)
{
throw new ArgumentException();
}
CheckBaked();
return GetEnumUnderlyingTypeImpl();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1153" endline="1161">
<![CDATA[
public Type __MakeGenericType(Type[] typeArguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
if (!this.IsGenericTypeDefinition)
{
throw new InvalidOperationException();
}
return GenericTypeInstance.Make(this, Util.Copy(typeArguments), Util.Copy(requiredCustomModifiers), Util.Copy(optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="311" endline="323">
<![CDATA[
internal Type GetEnumUnderlyingTypeImpl()
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="311" endline="323">
<![CDATA[
internal Type GetEnumUnderlyingTypeImpl()
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="311" endline="323">
<![CDATA[
internal Type GetEnumUnderlyingTypeImpl()
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="311" endline="323">
<![CDATA[
internal Type GetEnumUnderlyingTypeImpl()
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="311" endline="323">
<![CDATA[
internal Type GetEnumUnderlyingTypeImpl()
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="311" endline="323">
<![CDATA[
internal Type GetEnumUnderlyingTypeImpl()
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="311" endline="323">
<![CDATA[
internal Type GetEnumUnderlyingTypeImpl()
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="311" endline="323">
<![CDATA[
internal Type GetEnumUnderlyingTypeImpl()
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="311" endline="323">
<![CDATA[
internal Type GetEnumUnderlyingTypeImpl()
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (!field.IsStatic)
{
return field.FieldType;
}
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="416" endline="426">
<![CDATA[
private static void AddMembers(List<MemberInfo> list, MemberFilter filter, object filterCriteria, MemberInfo[] members)
{
foreach (MemberInfo member in members)
{
if (filter == null || filter(member, filterCriteria))
{
list.Add(member);
}
}
foreach (MemberInfo member in members)
{
if (filter == null || filter(member, filterCriteria))
{
list.Add(member);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="228" endline="239">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
PopulateTypeDef();
foreach (TypeDefImpl type in typeDefs)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (TypeDefImpl type in typeDefs)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="909" endline="924">
<![CDATA[
public Type GetInterface(string name, bool ignoreCase)
{
if (ignoreCase)
{
throw new NotImplementedException();
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1473" endline="1484">
<![CDATA[
internal MethodBase FindMethod(string name, MethodSignature signature)
{
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1485" endline="1496">
<![CDATA[
internal FieldInfo FindField(string name, FieldSignature signature)
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="909" endline="924">
<![CDATA[
public Type GetInterface(string name, bool ignoreCase)
{
if (ignoreCase)
{
throw new NotImplementedException();
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1473" endline="1484">
<![CDATA[
internal MethodBase FindMethod(string name, MethodSignature signature)
{
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1485" endline="1496">
<![CDATA[
internal FieldInfo FindField(string name, FieldSignature signature)
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="562" endline="571">
<![CDATA[
public Type[] GetInterfaces()
{
List<Type> list = new List<Type>();
for (Type type = this; type != null; type = type.BaseType)
{
AddInterfaces(list, type);
}
for (Type type = this; type != null; type = type.BaseType)
{
AddInterfaces(list, type);
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1634" endline="1644">
<![CDATA[
internal MethodInfo[] GetMethods(Module module, int token, bool nonPublic, short semantics)
{
List<MethodInfo> methods = new List<MethodInfo>();
MethodInfo method;
for (int i = 0; (method = GetNextMethod(module, token, nonPublic, semantics, ref i)) != null; )
{
methods.Add(method);
}
for (int i = 0; (method = GetNextMethod(module, token, nonPublic, semantics, ref i)) != null; )
{
methods.Add(method);
}
return methods.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="572" endline="584">
<![CDATA[
private static void AddInterfaces(List<Type> list, Type type)
{
type.CheckBaked();
foreach (Type iface in type.__GetDeclaredInterfaces())
{
if (!list.Contains(iface))
{
list.Add(iface);
AddInterfaces(list, iface);
}
}
foreach (Type iface in type.__GetDeclaredInterfaces())
{
if (!list.Contains(iface))
{
list.Add(iface);
AddInterfaces(list, iface);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="228" endline="239">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
PopulateTypeDef();
foreach (TypeDefImpl type in typeDefs)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (TypeDefImpl type in typeDefs)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="621" endline="632">
<![CDATA[
private static bool FindMethod(List<MethodInfo> methods, MethodInfo method)
{
foreach (MethodInfo m in methods)
{
if (m.Name == method.Name && m.MethodSignature.Equals(method.MethodSignature))
{
return true;
}
}
foreach (MethodInfo m in methods)
{
if (m.Name == method.Name && m.MethodSignature.Equals(method.MethodSignature))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="590" endline="604">
<![CDATA[
private Assembly GetDynamicAssembly(string refname)
{
foreach (AssemblyBuilder asm in dynamicAssemblies)
{
AssemblyComparisonResult result;
if (CompareAssemblyIdentity(refname, false, asm.FullName, false, out result) && result != AssemblyComparisonResult.EquivalentFXUnified)
{
return asm;
}
}
foreach (AssemblyBuilder asm in dynamicAssemblies)
{
AssemblyComparisonResult result;
if (CompareAssemblyIdentity(refname, false, asm.FullName, false, out result) && result != AssemblyComparisonResult.EquivalentFXUnified)
{
return asm;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="909" endline="924">
<![CDATA[
public Type GetInterface(string name, bool ignoreCase)
{
if (ignoreCase)
{
throw new NotImplementedException();
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1473" endline="1484">
<![CDATA[
internal MethodBase FindMethod(string name, MethodSignature signature)
{
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1485" endline="1496">
<![CDATA[
internal FieldInfo FindField(string name, FieldSignature signature)
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="909" endline="924">
<![CDATA[
public Type GetInterface(string name, bool ignoreCase)
{
if (ignoreCase)
{
throw new NotImplementedException();
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1473" endline="1484">
<![CDATA[
internal MethodBase FindMethod(string name, MethodSignature signature)
{
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1485" endline="1496">
<![CDATA[
internal FieldInfo FindField(string name, FieldSignature signature)
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="760" endline="773">
<![CDATA[
public Type[] GetNestedTypes(BindingFlags bindingAttr)
{
CheckBaked();
List<Type> list = new List<Type>();
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="909" endline="924">
<![CDATA[
public Type GetInterface(string name, bool ignoreCase)
{
if (ignoreCase)
{
throw new NotImplementedException();
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="760" endline="773">
<![CDATA[
public Type[] GetNestedTypes(BindingFlags bindingAttr)
{
CheckBaked();
List<Type> list = new List<Type>();
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="228" endline="239">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
PopulateTypeDef();
foreach (TypeDefImpl type in typeDefs)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (TypeDefImpl type in typeDefs)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="760" endline="773">
<![CDATA[
public Type[] GetNestedTypes(BindingFlags bindingAttr)
{
CheckBaked();
List<Type> list = new List<Type>();
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="125" endline="139">
<![CDATA[
}
public override Module[] GetLoadedModules(bool getResourceModules)
{
List<Module> list = new List<Module>();
list.Add(manifestModule);
foreach (Module m in externalModules)
{
if (m != null)
{
list.Add(m);
}
}
foreach (Module m in externalModules)
{
if (m != null)
{
list.Add(m);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="909" endline="924">
<![CDATA[
public Type GetInterface(string name, bool ignoreCase)
{
if (ignoreCase)
{
throw new NotImplementedException();
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1473" endline="1484">
<![CDATA[
internal MethodBase FindMethod(string name, MethodSignature signature)
{
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1485" endline="1496">
<![CDATA[
internal FieldInfo FindField(string name, FieldSignature signature)
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="827" endline="843">
<![CDATA[
public PropertyInfo GetProperty(string name, Type returnType)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && prop.PropertyType.Equals(returnType))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && prop.PropertyType.Equals(returnType))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1473" endline="1484">
<![CDATA[
internal MethodBase FindMethod(string name, MethodSignature signature)
{
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="827" endline="843">
<![CDATA[
public PropertyInfo GetProperty(string name, Type returnType)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && prop.PropertyType.Equals(returnType))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && prop.PropertyType.Equals(returnType))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1485" endline="1496">
<![CDATA[
internal FieldInfo FindField(string name, FieldSignature signature)
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="861" endline="876">
<![CDATA[
private static bool MatchParameterTypes(ParameterInfo[] parameters, Type[] types)
{
if (parameters.Length == types.Length)
{
for (int i = 0; i < parameters.Length; i++)
{
if (!parameters[i].ParameterType.Equals(types[i]))
{
return false;
}
}
for (int i = 0; i < parameters.Length; i++)
{
if (!parameters[i].ParameterType.Equals(types[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="369" endline="384">
<![CDATA[
private static bool IsEqual(byte[] b1, byte[] b2)
{
if (b1.Length != b2.Length)
{
return false;
}
for (int i = 0; i < b1.Length; i++)
{
if (b1[i] != b2[i])
{
return false;
}
}
for (int i = 0; i < b1.Length; i++)
{
if (b1[i] != b2[i])
{
return false;
}
}
return true;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="909" endline="924">
<![CDATA[
public Type GetInterface(string name, bool ignoreCase)
{
if (ignoreCase)
{
throw new NotImplementedException();
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2150" endline="2168">
<![CDATA[
}
public override bool IsVisible
{
get
{
if (base.IsVisible)
{
foreach (Type arg in args)
{
if (!arg.IsVisible)
{
return false;
}
}
foreach (Type arg in args)
{
if (!arg.IsVisible)
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="909" endline="924">
<![CDATA[
public Type GetInterface(string name, bool ignoreCase)
{
if (ignoreCase)
{
throw new NotImplementedException();
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
foreach (Type type in GetInterfaces())
{
if (type.FullName == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="228" endline="239">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
PopulateTypeDef();
foreach (TypeDefImpl type in typeDefs)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (TypeDefImpl type in typeDefs)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="125" endline="139">
<![CDATA[
}
public override Module[] GetLoadedModules(bool getResourceModules)
{
List<Module> list = new List<Module>();
list.Add(manifestModule);
foreach (Module m in externalModules)
{
if (m != null)
{
list.Add(m);
}
}
foreach (Module m in externalModules)
{
if (m != null)
{
list.Add(m);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="942" endline="964">
<![CDATA[
}
public bool IsPrimitive
{
get
{
Universe u = this.Module.universe;
return this == u.System_Boolean
|| this == u.System_Byte
|| this == u.System_SByte
|| this == u.System_Int16
|| this == u.System_UInt16
|| this == u.System_Int32
|| this == u.System_UInt32
|| this == u.System_Int64
|| this == u.System_UInt64
|| this == u.System_IntPtr
|| this == u.System_UIntPtr
|| this == u.System_Char
|| this == u.System_Double
|| this == u.System_Single
;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1515" endline="1536">
<![CDATA[
}
internal bool IsPseudoCustomAttribute
{
get
{
Universe u = this.Module.universe;
return this == u.System_NonSerializedAttribute
|| this == u.System_SerializableAttribute
|| this == u.System_Runtime_InteropServices_DllImportAttribute
|| this == u.System_Runtime_InteropServices_FieldOffsetAttribute
|| this == u.System_Runtime_InteropServices_InAttribute
|| this == u.System_Runtime_InteropServices_MarshalAsAttribute
|| this == u.System_Runtime_InteropServices_OutAttribute
|| this == u.System_Runtime_InteropServices_StructLayoutAttribute
|| this == u.System_Runtime_InteropServices_OptionalAttribute
|| this == u.System_Runtime_InteropServices_PreserveSigAttribute
|| this == u.System_Runtime_InteropServices_ComImportAttribute
|| this == u.System_Runtime_CompilerServices_SpecialNameAttribute
|| this == u.System_Runtime_CompilerServices_MethodImplAttribute
;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1473" endline="1484">
<![CDATA[
internal MethodBase FindMethod(string name, MethodSignature signature)
{
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1485" endline="1496">
<![CDATA[
internal FieldInfo FindField(string name, FieldSignature signature)
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367">
<![CDATA[
private bool IsDirectlyImplementedInterface(Type interfaceType)
{
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
foreach (Type iface in __GetDeclaredInterfaces())
{
if (interfaceType.IsAssignableFrom(iface))
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1465" endline="1472">
<![CDATA[
internal static void InplaceBindTypeParameters(IGenericBinder binder, Type[] types)
{
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1354" endline="1366">
<![CDATA[
}
sealed class StandAloneSigTable
{
internal const int Index = 0x11;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1465" endline="1472">
<![CDATA[
internal static void InplaceBindTypeParameters(IGenericBinder binder, Type[] types)
{
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1367" endline="1374">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1465" endline="1472">
<![CDATA[
internal static void InplaceBindTypeParameters(IGenericBinder binder, Type[] types)
{
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1746" endline="1758">
<![CDATA[
}
sealed class ModuleRefTable
{
internal const int Index = 0x1A;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1465" endline="1472">
<![CDATA[
internal static void InplaceBindTypeParameters(IGenericBinder binder, Type[] types)
{
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1759" endline="1766">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteStringIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteStringIndex(records[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1465" endline="1472">
<![CDATA[
internal static void InplaceBindTypeParameters(IGenericBinder binder, Type[] types)
{
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1786" endline="1798">
<![CDATA[
}
sealed class TypeSpecTable
{
internal const int Index = 0x1B;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1465" endline="1472">
<![CDATA[
internal static void InplaceBindTypeParameters(IGenericBinder binder, Type[] types)
{
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1799" endline="1806">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1465" endline="1472">
<![CDATA[
internal static void InplaceBindTypeParameters(IGenericBinder binder, Type[] types)
{
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
for (int i = 0; i < types.Length; i++)
{
types[i] = types[i].BindTypeParameters(binder);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="230" endline="237">
<![CDATA[
public void AddArguments(Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
for (int i = 0; i < arguments.Length; i++)
{
AddArgument(arguments[i], false, requiredCustomModifiers[i], optionalCustomModifiers[i]);
}
for (int i = 0; i < arguments.Length; i++)
{
AddArgument(arguments[i], false, requiredCustomModifiers[i], optionalCustomModifiers[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1473" endline="1484">
<![CDATA[
internal MethodBase FindMethod(string name, MethodSignature signature)
{
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1485" endline="1496">
<![CDATA[
internal FieldInfo FindField(string name, FieldSignature signature)
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1497" endline="1514">
<![CDATA[
internal bool IsAllowMultipleCustomAttribute
{
get
{
IList<CustomAttributeData> cad = GetCustomAttributesData(this.Module.universe.System_AttributeUsageAttribute);
if (cad.Count == 1)
{
foreach (CustomAttributeNamedArgument arg in cad[0].NamedArguments)
{
if (arg.MemberInfo.Name == "AllowMultiple")
{
return (bool)arg.TypedValue.Value;
}
}
foreach (CustomAttributeNamedArgument arg in cad[0].NamedArguments)
{
if (arg.MemberInfo.Name == "AllowMultiple")
{
return (bool)arg.TypedValue.Value;
}
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="594" endline="610">
<![CDATA[
private static bool IsInheritableAttribute(Type attribute)
{
Type attributeUsageAttribute = attribute.Module.universe.System_AttributeUsageAttribute;
IList<CustomAttributeData> attr = attribute.GetCustomAttributesData(attributeUsageAttribute);
if (attr.Count != 0)
{
foreach (CustomAttributeNamedArgument named in attr[0].NamedArguments)
{
if (named.MemberInfo.Name == "Inherited")
{
return (bool)named.TypedValue.Value;
}
}
foreach (CustomAttributeNamedArgument named in attr[0].NamedArguments)
{
if (named.MemberInfo.Name == "Inherited")
{
return (bool)named.TypedValue.Value;
}
}
}
return true;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157">
<![CDATA[
}
public override GenericParameterAttributes GenericParameterAttributes
{
get
{
if (type != null)
{
type.CheckBaked();
}
else
{
method.CheckBaked();
}
return attr;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157">
<![CDATA[
}
public override GenericParameterAttributes GenericParameterAttributes
{
get
{
if (type != null)
{
type.CheckBaked();
}
else
{
method.CheckBaked();
}
return attr;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157">
<![CDATA[
}
public override GenericParameterAttributes GenericParameterAttributes
{
get
{
if (type != null)
{
type.CheckBaked();
}
else
{
method.CheckBaked();
}
return attr;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157">
<![CDATA[
}
public override GenericParameterAttributes GenericParameterAttributes
{
get
{
if (type != null)
{
type.CheckBaked();
}
else
{
method.CheckBaked();
}
return attr;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157">
<![CDATA[
}
public override GenericParameterAttributes GenericParameterAttributes
{
get
{
if (type != null)
{
type.CheckBaked();
}
else
{
method.CheckBaked();
}
return attr;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157">
<![CDATA[
}
public override GenericParameterAttributes GenericParameterAttributes
{
get
{
if (type != null)
{
type.CheckBaked();
}
else
{
method.CheckBaked();
}
return attr;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157">
<![CDATA[
}
public override GenericParameterAttributes GenericParameterAttributes
{
get
{
if (type != null)
{
type.CheckBaked();
}
else
{
method.CheckBaked();
}
return attr;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157">
<![CDATA[
}
public override GenericParameterAttributes GenericParameterAttributes
{
get
{
if (type != null)
{
type.CheckBaked();
}
else
{
method.CheckBaked();
}
return attr;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157">
<![CDATA[
}
public override GenericParameterAttributes GenericParameterAttributes
{
get
{
if (type != null)
{
type.CheckBaked();
}
else
{
method.CheckBaked();
}
return attr;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157">
<![CDATA[
}
public override GenericParameterAttributes GenericParameterAttributes
{
get
{
if (type != null)
{
type.CheckBaked();
}
else
{
method.CheckBaked();
}
return attr;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157">
<![CDATA[
}
public override GenericParameterAttributes GenericParameterAttributes
{
get
{
if (type != null)
{
type.CheckBaked();
}
else
{
method.CheckBaked();
}
return attr;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157">
<![CDATA[
}
public override GenericParameterAttributes GenericParameterAttributes
{
get
{
if (type != null)
{
type.CheckBaked();
}
else
{
method.CheckBaked();
}
return attr;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1319" endline="1330">
<![CDATA[
}
internal override MethodSignature MethodSignature
{
get
{
if (methodSignature == null)
{
methodSignature = MethodSignature.MakeFromBuilder(returnType, parameterTypes, null, callingConvention, 0);
}
return methodSignature;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="158" endline="166">
<![CDATA[
}
private void AddConstraint(Type type)
{
GenericParamConstraintTable.Record rec = new GenericParamConstraintTable.Record();
rec.Owner = paramPseudoIndex;
rec.Constraint = this.ModuleBuilder.GetTypeTokenForMemberRef(type);
this.ModuleBuilder.GenericParamConstraint.AddRecord(rec);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="196" endline="204">
<![CDATA[
private void AddMethodSemantics(short semantics, int methodToken, int propertyToken)
{
MethodSemanticsTable.Record rec = new MethodSemanticsTable.Record();
rec.Semantics = semantics;
rec.Method = methodToken;
rec.Association = propertyToken;
typeBuilder.ModuleBuilder.MethodSemantics.AddRecord(rec);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="158" endline="166">
<![CDATA[
}
private void AddConstraint(Type type)
{
GenericParamConstraintTable.Record rec = new GenericParamConstraintTable.Record();
rec.Owner = paramPseudoIndex;
rec.Constraint = this.ModuleBuilder.GetTypeTokenForMemberRef(type);
this.ModuleBuilder.GenericParamConstraint.AddRecord(rec);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="221" endline="229">
<![CDATA[
private void AddMethodSemantics(short semantics, int methodToken, int propertyToken)
{
MethodSemanticsTable.Record rec = new MethodSemanticsTable.Record();
rec.Semantics = semantics;
rec.Method = methodToken;
rec.Association = propertyToken;
typeBuilder.ModuleBuilder.MethodSemantics.AddRecord(rec);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="158" endline="166">
<![CDATA[
}
private void AddConstraint(Type type)
{
GenericParamConstraintTable.Record rec = new GenericParamConstraintTable.Record();
rec.Owner = paramPseudoIndex;
rec.Constraint = this.ModuleBuilder.GetTypeTokenForMemberRef(type);
this.ModuleBuilder.GenericParamConstraint.AddRecord(rec);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="431" endline="439">
<![CDATA[
public void AddResourceFile(string name, string fileName, ResourceAttributes attribs)
{
ResourceFile resfile = new ResourceFile();
resfile.Name = name;
resfile.FileName = fileName;
resfile.Attributes = attribs;
resourceFiles.Add(resfile);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="173" endline="180">
<![CDATA[
public void SetInterfaceConstraints(params Type[] interfaceConstraints)
{
foreach (Type type in interfaceConstraints)
{
AddConstraint(type);
}
foreach (Type type in interfaceConstraints)
{
AddConstraint(type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="301" endline="311">
<![CDATA[
internal void AddTypeForwarder(Type type)
{
ExportType(type);
foreach (Type nested in type.GetNestedTypes(BindingFlags.Public | BindingFlags.NonPublic))
{
AddTypeForwarder(nested);
}
foreach (Type nested in type.GetNestedTypes(BindingFlags.Public | BindingFlags.NonPublic))
{
AddTypeForwarder(nested);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="478" endline="490">
<![CDATA[
}
internal CustomAttributeBuilder DecodeBlob(Assembly asm)
{
if (blob == null)
{
return this;
}
else
{
return ToData(asm).__ToBuilder();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220">
<![CDATA[
internal override Type BindTypeParameters(IGenericBinder binder)
{
if (type != null)
{
return binder.BindTypeParameter(this);
}
else
{
return binder.BindMethodParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="523" endline="533">
<![CDATA[
public override Module ManifestModule
{
get
{
if (pseudoManifestModule == null)
{
pseudoManifestModule = new ManifestModule(this);
}
return pseudoManifestModule;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="298" endline="305">
<![CDATA[
private MethodBuilder CreateMethodBuilder(string name, MethodAttributes attributes, CallingConventions callingConvention)
{
this.ModuleBuilder.MethodDef.AddVirtualRecord();
MethodBuilder mb = new MethodBuilder(this, name, attributes, callingConvention);
methods.Add(mb);
return mb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="369" endline="375">
<![CDATA[
public FieldBuilder DefineField(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes)
{
FieldBuilder fb = new FieldBuilder(this, fieldName, type, requiredCustomModifiers, optionalCustomModifiers, attributes);
fields.Add(fb);
return fb;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="298" endline="305">
<![CDATA[
private MethodBuilder CreateMethodBuilder(string name, MethodAttributes attributes, CallingConventions callingConvention)
{
this.ModuleBuilder.MethodDef.AddVirtualRecord();
MethodBuilder mb = new MethodBuilder(this, name, attributes, callingConvention);
methods.Add(mb);
return mb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="753" endline="759">
<![CDATA[
private AssemblyBuilder DefineDynamicAssemblyImpl(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
{
AssemblyBuilder asm = new AssemblyBuilder(this, name, dir, requiredPermissions, optionalPermissions, refusedPermissions);
dynamicAssemblies.Add(asm);
return asm;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="298" endline="305">
<![CDATA[
private MethodBuilder CreateMethodBuilder(string name, MethodAttributes attributes, CallingConventions callingConvention)
{
this.ModuleBuilder.MethodDef.AddVirtualRecord();
MethodBuilder mb = new MethodBuilder(this, name, attributes, callingConvention);
methods.Add(mb);
return mb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="205" endline="211">
<![CDATA[
public ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo)
{
ModuleBuilder module = new ModuleBuilder(this, name, fileName, emitSymbolInfo);
modules.Add(module);
return module;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="326" endline="332">
<![CDATA[
public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
{
MethodBuilder mb = CreateMethodBuilder(name, attributes, callingConvention);
mb.SetSignature(returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
return mb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="381" endline="387">
<![CDATA[
public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
{
return DefinePropertyImpl(name, attributes, CallingConventions.Standard, true, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers,
parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="326" endline="332">
<![CDATA[
public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
{
MethodBuilder mb = CreateMethodBuilder(name, attributes, callingConvention);
mb.SetSignature(returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
return mb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="388" endline="395">
<![CDATA[
public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention,
Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
{
return DefinePropertyImpl(name, attributes, callingConvention, false, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers,
parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="355" endline="363">
<![CDATA[
public void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration)
{
MethodImplTable.Record rec = new MethodImplTable.Record();
rec.Class = token;
rec.MethodBody = this.ModuleBuilder.GetMethodToken(methodInfoBody).Token;
rec.MethodDeclaration = this.ModuleBuilder.GetMethodToken(methodInfoDeclaration).Token;
this.ModuleBuilder.MethodImpl.AddRecord(rec);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="855" endline="866">
<![CDATA[
public void MarkSequencePoint(ISymbolDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn)
{
SequencePoint sp = new SequencePoint();
sp.document = document;
sp.offset = code.Position;
sp.startLine = startLine;
sp.startColumn = startColumn;
sp.endLine = endLine;
sp.endColumn = endColumn;
sequencePoints.Add(sp);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="369" endline="375">
<![CDATA[
public FieldBuilder DefineField(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes)
{
FieldBuilder fb = new FieldBuilder(this, fieldName, type, requiredCustomModifiers, optionalCustomModifiers, attributes);
fields.Add(fb);
return fb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="205" endline="211">
<![CDATA[
public ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo)
{
ModuleBuilder module = new ModuleBuilder(this, name, fileName, emitSymbolInfo);
modules.Add(module);
return module;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="369" endline="375">
<![CDATA[
public FieldBuilder DefineField(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes)
{
FieldBuilder fb = new FieldBuilder(this, fieldName, type, requiredCustomModifiers, optionalCustomModifiers, attributes);
fields.Add(fb);
return fb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="589" endline="595">
<![CDATA[
public Module __AddModule(RawModule module)
{
Module mod = module.ToModule(this);
addedModules.Add(mod);
return mod;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="381" endline="387">
<![CDATA[
public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
{
return DefinePropertyImpl(name, attributes, CallingConventions.Standard, true, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers,
parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="388" endline="395">
<![CDATA[
public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention,
Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
{
return DefinePropertyImpl(name, attributes, callingConvention, false, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers,
parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="381" endline="387">
<![CDATA[
public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
{
return DefinePropertyImpl(name, attributes, CallingConventions.Standard, true, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers,
parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="745" endline="752">
<![CDATA[
#if NET_4_0
[Obsolete]
#endif
public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
{
return DefineDynamicAssemblyImpl(name, access, dir, requiredPermissions, optionalPermissions, refusedPermissions);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="388" endline="395">
<![CDATA[
public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention,
Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
{
return DefinePropertyImpl(name, attributes, callingConvention, false, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers,
parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="745" endline="752">
<![CDATA[
#if NET_4_0
[Obsolete]
#endif
public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
{
return DefineDynamicAssemblyImpl(name, access, dir, requiredPermissions, optionalPermissions, refusedPermissions);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="396" endline="410">
<![CDATA[
private PropertyBuilder DefinePropertyImpl(string name, PropertyAttributes attributes, CallingConventions callingConvention, bool patchCallingConvention,
Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
{
if (properties == null)
{
properties = new List<PropertyBuilder>();
}
PropertySignature sig = PropertySignature.Create(callingConvention, returnType, returnTypeOptionalCustomModifiers, returnTypeRequiredCustomModifiers,
parameterTypes, parameterTypeOptionalCustomModifiers, parameterTypeRequiredCustomModifiers);
PropertyBuilder pb = new PropertyBuilder(this, name, attributes, sig, patchCallingConvention);
properties.Add(pb);
return pb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="411" endline="421">
<![CDATA[
public EventBuilder DefineEvent(string name, EventAttributes attributes, Type eventtype)
{
if (events == null)
{
events = new List<EventBuilder>();
}
EventBuilder eb = new EventBuilder(this, name, attributes, eventtype);
events.Add(eb);
return eb;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="432" endline="441">
<![CDATA[
public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineNestedType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="241" endline="253">
<![CDATA[
internal static int GetHashCode(Type[][] types)
{
int h = 0;
if (types != null)
{
foreach (Type[] array in types)
{
h ^= GetHashCode(array);
}
foreach (Type[] array in types)
{
h ^= GetHashCode(array);
}
}
return h;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="432" endline="441">
<![CDATA[
public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineNestedType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="254" endline="266">
<![CDATA[
internal static int GetHashCode(Type[][][] types)
{
int h = 0;
if (types != null)
{
foreach (Type[][] array in types)
{
h ^= GetHashCode(array);
}
foreach (Type[][] array in types)
{
h ^= GetHashCode(array);
}
}
return h;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="432" endline="441">
<![CDATA[
public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineNestedType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="432" endline="441">
<![CDATA[
public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineNestedType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="432" endline="441">
<![CDATA[
public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineNestedType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="84" endline="96">
<![CDATA[
public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, Signature.PROPERTY);
sig.returnType = returnType;
sig.returnTypeOptionalCustomModifiers = Type.EmptyTypes;
sig.returnTypeRequiredCustomModifiers = Type.EmptyTypes;
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
return sig;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="432" endline="441">
<![CDATA[
public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineNestedType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="140" endline="151">
<![CDATA[
public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, 0);
sig.returnType = returnType;
sig.callingConvention = CallingConventions.Standard;
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
return sig;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="432" endline="441">
<![CDATA[
public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineNestedType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="301" endline="311">
<![CDATA[
internal void AddTypeForwarder(Type type)
{
ExportType(type);
foreach (Type nested in type.GetNestedTypes(BindingFlags.Public | BindingFlags.NonPublic))
{
AddTypeForwarder(nested);
}
foreach (Type nested in type.GetNestedTypes(BindingFlags.Public | BindingFlags.NonPublic))
{
AddTypeForwarder(nested);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="465" endline="473">
<![CDATA[
public void AddInterfaceImplementation(Type interfaceType)
{
if (interfaces == null)
{
interfaces = new List<Type>();
}
interfaces.Add(interfaceType);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="134" endline="141">
<![CDATA[
internal void FixupToken(int parameterToken)
{
if (lazyPseudoToken != 0)
{
moduleBuilder.RegisterTokenFixup(lazyPseudoToken, parameterToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="465" endline="473">
<![CDATA[
public void AddInterfaceImplementation(Type interfaceType)
{
if (interfaces == null)
{
interfaces = new List<Type>();
}
interfaces.Add(interfaceType);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="465" endline="473">
<![CDATA[
public void AddInterfaceImplementation(Type interfaceType)
{
if (interfaces == null)
{
interfaces = new List<Type>();
}
interfaces.Add(interfaceType);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="465" endline="473">
<![CDATA[
public void AddInterfaceImplementation(Type interfaceType)
{
if (interfaces == null)
{
interfaces = new List<Type>();
}
interfaces.Add(interfaceType);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="523" endline="533">
<![CDATA[
public override Module ManifestModule
{
get
{
if (pseudoManifestModule == null)
{
pseudoManifestModule = new ManifestModule(this);
}
return pseudoManifestModule;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="474" endline="487">
<![CDATA[
public int Size
{
get
{
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return this.ModuleBuilder.ClassLayout.records[i].ClassSize;
}
}
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return this.ModuleBuilder.ClassLayout.records[i].ClassSize;
}
}
return 0;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="488" endline="502">
<![CDATA[
}
public PackingSize PackingSize
{
get
{
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return (PackingSize)this.ModuleBuilder.ClassLayout.records[i].PackingSize;
}
}
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return (PackingSize)this.ModuleBuilder.ClassLayout.records[i].PackingSize;
}
}
return PackingSize.Unspecified;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="474" endline="487">
<![CDATA[
public int Size
{
get
{
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return this.ModuleBuilder.ClassLayout.records[i].ClassSize;
}
}
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return this.ModuleBuilder.ClassLayout.records[i].ClassSize;
}
}
return 0;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1231" endline="1255">
<![CDATA[
}
sealed class ClassLayoutTable
{
internal const int Index = 0x0f;
internal struct Record
{
internal short PackingSize;
internal int ClassSize;
internal int Parent;
}
internal void AddOrReplaceRecord(Record rec)
{
for (int i = 0; i < records.Length; i++)
{
if (records[i].Parent == rec.Parent)
{
records[i] = rec;
return;
}
}
for (int i = 0; i < records.Length; i++)
{
if (records[i].Parent == rec.Parent)
{
records[i] = rec;
return;
}
}
AddRecord(rec);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="474" endline="487">
<![CDATA[
public int Size
{
get
{
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return this.ModuleBuilder.ClassLayout.records[i].ClassSize;
}
}
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return this.ModuleBuilder.ClassLayout.records[i].ClassSize;
}
}
return 0;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2369" endline="2381">
<![CDATA[
internal int FindFirstByOwner(int token)
{
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
return -1;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="474" endline="487">
<![CDATA[
public int Size
{
get
{
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return this.ModuleBuilder.ClassLayout.records[i].ClassSize;
}
}
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return this.ModuleBuilder.ClassLayout.records[i].ClassSize;
}
}
return 0;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="861" endline="872">
<![CDATA[
internal ManifestResourceInfo GetManifestResourceInfo(string resourceName)
{
for (int i = 0; i < ManifestResource.records.Length; i++)
{
if (resourceName == GetString(ManifestResource.records[i].Name))
{
return new ManifestResourceInfo(this, i);
}
}
for (int i = 0; i < ManifestResource.records.Length; i++)
{
if (resourceName == GetString(ManifestResource.records[i].Name))
{
return new ManifestResourceInfo(this, i);
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="488" endline="502">
<![CDATA[
}
public PackingSize PackingSize
{
get
{
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return (PackingSize)this.ModuleBuilder.ClassLayout.records[i].PackingSize;
}
}
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return (PackingSize)this.ModuleBuilder.ClassLayout.records[i].PackingSize;
}
}
return PackingSize.Unspecified;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1231" endline="1255">
<![CDATA[
}
sealed class ClassLayoutTable
{
internal const int Index = 0x0f;
internal struct Record
{
internal short PackingSize;
internal int ClassSize;
internal int Parent;
}
internal void AddOrReplaceRecord(Record rec)
{
for (int i = 0; i < records.Length; i++)
{
if (records[i].Parent == rec.Parent)
{
records[i] = rec;
return;
}
}
for (int i = 0; i < records.Length; i++)
{
if (records[i].Parent == rec.Parent)
{
records[i] = rec;
return;
}
}
AddRecord(rec);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="488" endline="502">
<![CDATA[
}
public PackingSize PackingSize
{
get
{
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return (PackingSize)this.ModuleBuilder.ClassLayout.records[i].PackingSize;
}
}
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return (PackingSize)this.ModuleBuilder.ClassLayout.records[i].PackingSize;
}
}
return PackingSize.Unspecified;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2369" endline="2381">
<![CDATA[
internal int FindFirstByOwner(int token)
{
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
return -1;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="488" endline="502">
<![CDATA[
}
public PackingSize PackingSize
{
get
{
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return (PackingSize)this.ModuleBuilder.ClassLayout.records[i].PackingSize;
}
}
for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
{
if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
{
return (PackingSize)this.ModuleBuilder.ClassLayout.records[i].PackingSize;
}
}
return PackingSize.Unspecified;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="861" endline="872">
<![CDATA[
internal ManifestResourceInfo GetManifestResourceInfo(string resourceName)
{
for (int i = 0; i < ManifestResource.records.Length; i++)
{
if (resourceName == GetString(ManifestResource.records[i].Name))
{
return new ManifestResourceInfo(this, i);
}
}
for (int i = 0; i < ManifestResource.records.Length; i++)
{
if (resourceName == GetString(ManifestResource.records[i].Name))
{
return new ManifestResourceInfo(this, i);
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="726" endline="740">
<![CDATA[
}
public override string Name
{
get
{
if (this.IsNested)
{
return nameOrFullName;
}
else
{
return base.Name;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="726" endline="740">
<![CDATA[
}
public override string Name
{
get
{
if (this.IsNested)
{
return nameOrFullName;
}
else
{
return base.Name;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="726" endline="740">
<![CDATA[
}
public override string Name
{
get
{
if (this.IsNested)
{
return nameOrFullName;
}
else
{
return base.Name;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="726" endline="740">
<![CDATA[
}
public override string Name
{
get
{
if (this.IsNested)
{
return nameOrFullName;
}
else
{
return base.Name;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="726" endline="740">
<![CDATA[
}
public override string Name
{
get
{
if (this.IsNested)
{
return nameOrFullName;
}
else
{
return base.Name;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="726" endline="740">
<![CDATA[
}
public override string Name
{
get
{
if (this.IsNested)
{
return nameOrFullName;
}
else
{
return base.Name;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="726" endline="740">
<![CDATA[
}
public override string Name
{
get
{
if (this.IsNested)
{
return nameOrFullName;
}
else
{
return base.Name;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="726" endline="740">
<![CDATA[
}
public override string Name
{
get
{
if (this.IsNested)
{
return nameOrFullName;
}
else
{
return base.Name;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="726" endline="740">
<![CDATA[
}
public override string Name
{
get
{
if (this.IsNested)
{
return nameOrFullName;
}
else
{
return base.Name;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="152" endline="163">
<![CDATA[
}
internal uint DebugDirectoryLength
{
get
{
if (DebugDirectoryContentsLength != 0)
{
return 28;
}
return 0;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="901" endline="908">
<![CDATA[
internal void WriteMethodDefRecords(int baseRVA, MetadataWriter mw, ref int paramList)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="921" endline="928">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="901" endline="908">
<![CDATA[
internal void WriteMethodDefRecords(int baseRVA, MetadataWriter mw, ref int paramList)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="929" endline="936">
<![CDATA[
internal void WriteFieldRecords(MetadataWriter mw)
{
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="901" endline="908">
<![CDATA[
internal void WriteMethodDefRecords(int baseRVA, MetadataWriter mw, ref int paramList)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="193" endline="201">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="901" endline="908">
<![CDATA[
internal void WriteMethodDefRecords(int baseRVA, MetadataWriter mw, ref int paramList)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="290" endline="297">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="901" endline="908">
<![CDATA[
internal void WriteMethodDefRecords(int baseRVA, MetadataWriter mw, ref int paramList)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="115" endline="125">
<![CDATA[
internal void PopulatePropertyAndEventTables()
{
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="901" endline="908">
<![CDATA[
internal void WriteMethodDefRecords(int baseRVA, MetadataWriter mw, ref int paramList)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="126" endline="135">
<![CDATA[
internal void WriteTypeDefTable(MetadataWriter mw)
{
int fieldList = 1;
int methodList = 1;
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="901" endline="908">
<![CDATA[
internal void WriteMethodDefRecords(int baseRVA, MetadataWriter mw, ref int paramList)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144">
<![CDATA[
internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
{
int paramList = 1;
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="901" endline="908">
<![CDATA[
internal void WriteMethodDefRecords(int baseRVA, MetadataWriter mw, ref int paramList)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="145" endline="152">
<![CDATA[
internal void WriteParamTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="901" endline="908">
<![CDATA[
internal void WriteMethodDefRecords(int baseRVA, MetadataWriter mw, ref int paramList)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="153" endline="160">
<![CDATA[
internal void WriteFieldTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="901" endline="908">
<![CDATA[
internal void WriteMethodDefRecords(int baseRVA, MetadataWriter mw, ref int paramList)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="441" endline="451">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="909" endline="920">
<![CDATA[
internal void ResolveMethodAndFieldTokens(ref int methodToken, ref int fieldToken, ref int parameterToken)
{
foreach (MethodBuilder method in methods)
{
method.FixupToken(methodToken++, ref parameterToken);
}
foreach (MethodBuilder method in methods)
{
method.FixupToken(methodToken++, ref parameterToken);
}
foreach (FieldBuilder field in fields)
{
field.FixupToken(fieldToken++);
}
foreach (FieldBuilder field in fields)
{
field.FixupToken(fieldToken++);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="760" endline="775">
<![CDATA[
internal void RenameAssembly(Assembly assembly, AssemblyName oldName)
{
List<string> remove = new List<string>();
foreach (KeyValuePair<string, Assembly> kv in assembliesByName)
{
if (kv.Value == assembly)
{
remove.Add(kv.Key);
}
}
foreach (KeyValuePair<string, Assembly> kv in assembliesByName)
{
if (kv.Value == assembly)
{
remove.Add(kv.Key);
}
}
foreach (string key in remove)
{
assembliesByName.Remove(key);
}
foreach (string key in remove)
{
assembliesByName.Remove(key);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="921" endline="928">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="193" endline="201">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="921" endline="928">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="290" endline="297">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="921" endline="928">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="115" endline="125">
<![CDATA[
internal void PopulatePropertyAndEventTables()
{
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="921" endline="928">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="126" endline="135">
<![CDATA[
internal void WriteTypeDefTable(MetadataWriter mw)
{
int fieldList = 1;
int methodList = 1;
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="921" endline="928">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144">
<![CDATA[
internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
{
int paramList = 1;
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="921" endline="928">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="441" endline="451">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="929" endline="936">
<![CDATA[
internal void WriteFieldRecords(MetadataWriter mw)
{
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="193" endline="201">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="929" endline="936">
<![CDATA[
internal void WriteFieldRecords(MetadataWriter mw)
{
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="290" endline="297">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="929" endline="936">
<![CDATA[
internal void WriteFieldRecords(MetadataWriter mw)
{
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="115" endline="125">
<![CDATA[
internal void PopulatePropertyAndEventTables()
{
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="929" endline="936">
<![CDATA[
internal void WriteFieldRecords(MetadataWriter mw)
{
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="126" endline="135">
<![CDATA[
internal void WriteTypeDefTable(MetadataWriter mw)
{
int fieldList = 1;
int methodList = 1;
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="929" endline="936">
<![CDATA[
internal void WriteFieldRecords(MetadataWriter mw)
{
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144">
<![CDATA[
internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
{
int paramList = 1;
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="929" endline="936">
<![CDATA[
internal void WriteFieldRecords(MetadataWriter mw)
{
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="441" endline="451">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="956" endline="969">
<![CDATA[
}
internal MethodBase LookupMethod(int token)
{
foreach (MethodBuilder method in methods)
{
if (method.MetadataToken == token)
{
return method;
}
}
foreach (MethodBuilder method in methods)
{
if (method.MetadataToken == token)
{
return method;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="590" endline="604">
<![CDATA[
private Assembly GetDynamicAssembly(string refname)
{
foreach (AssemblyBuilder asm in dynamicAssemblies)
{
AssemblyComparisonResult result;
if (CompareAssemblyIdentity(refname, false, asm.FullName, false, out result) && result != AssemblyComparisonResult.EquivalentFXUnified)
{
return asm;
}
}
foreach (AssemblyBuilder asm in dynamicAssemblies)
{
AssemblyComparisonResult result;
if (CompareAssemblyIdentity(refname, false, asm.FullName, false, out result) && result != AssemblyComparisonResult.EquivalentFXUnified)
{
return asm;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="956" endline="969">
<![CDATA[
}
internal MethodBase LookupMethod(int token)
{
foreach (MethodBuilder method in methods)
{
if (method.MetadataToken == token)
{
return method;
}
}
foreach (MethodBuilder method in methods)
{
if (method.MetadataToken == token)
{
return method;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="441" endline="451">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="86" endline="93">
<![CDATA[
internal void Write(byte[] value)
{
if (pos + value.Length > buffer.Length)
Grow(value.Length);
Buffer.BlockCopy(value, 0, buffer, pos, value.Length);
pos += value.Length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="197" endline="204">
<![CDATA[
internal void Write(ByteBuffer bb)
{
if (pos + bb.Length > buffer.Length)
Grow(bb.Length);
Buffer.BlockCopy(bb.buffer, 0, buffer, pos, bb.Length);
pos += bb.Length;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="276" endline="287">
<![CDATA[
internal bool Match(int pos, ByteBuffer bb2, int pos2, int len)
{
for (int i = 0; i < len; i++)
{
if (buffer[pos + i] != bb2.buffer[pos2 + i])
{
return false;
}
}
for (int i = 0; i < len; i++)
{
if (buffer[pos + i] != bb2.buffer[pos2 + i])
{
return false;
}
}
return true;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2369" endline="2381">
<![CDATA[
internal int FindFirstByOwner(int token)
{
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
return -1;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="288" endline="299">
<![CDATA[
internal int Hash()
{
int hash = 0;
int len = this.Length;
for (int i = 0; i < len; i++)
{
hash *= 37;
hash ^= buffer[i];
}
for (int i = 0; i < len; i++)
{
hash *= 37;
hash ^= buffer[i];
}
return hash;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368">
<![CDATA[
internal int[] GetIndexFixup()
{
int[] array = new int[rowCount];
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
return array;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="288" endline="299">
<![CDATA[
internal int Hash()
{
int hash = 0;
int len = this.Length;
for (int i = 0; i < len; i++)
{
hash *= 37;
hash ^= buffer[i];
}
for (int i = 0; i < len; i++)
{
hash *= 37;
hash ^= buffer[i];
}
return hash;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="288" endline="299">
<![CDATA[
internal int Hash()
{
int hash = 0;
int len = this.Length;
for (int i = 0; i < len; i++)
{
hash *= 37;
hash ^= buffer[i];
}
for (int i = 0; i < len; i++)
{
hash *= 37;
hash ^= buffer[i];
}
return hash;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="92" endline="117">
<![CDATA[
internal int ReadResolutionScope()
{
int codedIndex;
if (bigResolutionScope)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (ModuleTable.Index << 24) + (codedIndex >> 2);
case 1
return (ModuleRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 3
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="142" endline="169">
<![CDATA[
internal int ReadMemberRefParent()
{
int codedIndex;
if (bigMemberRefParent)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 3);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 3);
case 2
return (ModuleRefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 4
return (TypeSpecTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="92" endline="117">
<![CDATA[
internal int ReadResolutionScope()
{
int codedIndex;
if (bigResolutionScope)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (ModuleTable.Index << 24) + (codedIndex >> 2);
case 1
return (ModuleRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 3
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="228" endline="249">
<![CDATA[
internal int ReadCustomAttributeType()
{
int codedIndex;
if (bigCustomAttributeType)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 2
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MemberRefTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="92" endline="117">
<![CDATA[
internal int ReadResolutionScope()
{
int codedIndex;
if (bigResolutionScope)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (ModuleTable.Index << 24) + (codedIndex >> 2);
case 1
return (ModuleRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 3
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="250" endline="271">
<![CDATA[
internal int ReadMethodDefOrRef()
{
int codedIndex;
if (bigMethodDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MemberRefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="92" endline="117">
<![CDATA[
internal int ReadResolutionScope()
{
int codedIndex;
if (bigResolutionScope)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (ModuleTable.Index << 24) + (codedIndex >> 2);
case 1
return (ModuleRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 3
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="296" endline="317">
<![CDATA[
internal int ReadHasSemantics()
{
int codedIndex;
if (bigHasSemantics)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (EventTable.Index << 24) + (codedIndex >> 1);
case 1
return (PropertyTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="92" endline="117">
<![CDATA[
internal int ReadResolutionScope()
{
int codedIndex;
if (bigResolutionScope)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (ModuleTable.Index << 24) + (codedIndex >> 2);
case 1
return (ModuleRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 3
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="318" endline="339">
<![CDATA[
internal int ReadHasFieldMarshal()
{
int codedIndex;
if (bigHasFieldMarshal)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="92" endline="117">
<![CDATA[
internal int ReadResolutionScope()
{
int codedIndex;
if (bigResolutionScope)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (ModuleTable.Index << 24) + (codedIndex >> 2);
case 1
return (ModuleRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 3
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="364" endline="385">
<![CDATA[
internal int ReadTypeOrMethodDef()
{
int codedIndex;
if (bigTypeOrMethodDef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="92" endline="117">
<![CDATA[
internal int ReadResolutionScope()
{
int codedIndex;
if (bigResolutionScope)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (ModuleTable.Index << 24) + (codedIndex >> 2);
case 1
return (ModuleRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 3
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="386" endline="407">
<![CDATA[
internal int ReadMemberForwarded()
{
int codedIndex;
if (bigMemberForwarded)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="118" endline="141">
<![CDATA[
internal int ReadTypeDefOrRef()
{
int codedIndex;
if (bigTypeDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (TypeSpecTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="142" endline="169">
<![CDATA[
internal int ReadMemberRefParent()
{
int codedIndex;
if (bigMemberRefParent)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 3);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 3);
case 2
return (ModuleRefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 4
return (TypeSpecTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="118" endline="141">
<![CDATA[
internal int ReadTypeDefOrRef()
{
int codedIndex;
if (bigTypeDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (TypeSpecTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="228" endline="249">
<![CDATA[
internal int ReadCustomAttributeType()
{
int codedIndex;
if (bigCustomAttributeType)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 2
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MemberRefTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="142" endline="169">
<![CDATA[
internal int ReadMemberRefParent()
{
int codedIndex;
if (bigMemberRefParent)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 3);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 3);
case 2
return (ModuleRefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 4
return (TypeSpecTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="272" endline="295">
<![CDATA[
internal int ReadHasConstant()
{
int codedIndex;
if (bigHasConstant)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 2);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 2);
case 2
return (PropertyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="142" endline="169">
<![CDATA[
internal int ReadMemberRefParent()
{
int codedIndex;
if (bigMemberRefParent)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 3);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 3);
case 2
return (ModuleRefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 4
return (TypeSpecTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="340" endline="363">
<![CDATA[
internal int ReadHasDeclSecurity()
{
int codedIndex;
if (bigHasDeclSecurity)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="142" endline="169">
<![CDATA[
internal int ReadMemberRefParent()
{
int codedIndex;
if (bigMemberRefParent)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 3);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 3);
case 2
return (ModuleRefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 4
return (TypeSpecTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="408" endline="431">
<![CDATA[
internal int ReadImplementation()
{
int codedIndex;
if (bigImplementation)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FileTable.Index << 24) + (codedIndex >> 2);
case 1
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="228" endline="249">
<![CDATA[
internal int ReadCustomAttributeType()
{
int codedIndex;
if (bigCustomAttributeType)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 2
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MemberRefTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="250" endline="271">
<![CDATA[
internal int ReadMethodDefOrRef()
{
int codedIndex;
if (bigMethodDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MemberRefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="228" endline="249">
<![CDATA[
internal int ReadCustomAttributeType()
{
int codedIndex;
if (bigCustomAttributeType)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 2
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MemberRefTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="272" endline="295">
<![CDATA[
internal int ReadHasConstant()
{
int codedIndex;
if (bigHasConstant)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 2);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 2);
case 2
return (PropertyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="228" endline="249">
<![CDATA[
internal int ReadCustomAttributeType()
{
int codedIndex;
if (bigCustomAttributeType)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 2
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MemberRefTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="296" endline="317">
<![CDATA[
internal int ReadHasSemantics()
{
int codedIndex;
if (bigHasSemantics)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (EventTable.Index << 24) + (codedIndex >> 1);
case 1
return (PropertyTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="228" endline="249">
<![CDATA[
internal int ReadCustomAttributeType()
{
int codedIndex;
if (bigCustomAttributeType)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 2
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MemberRefTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="318" endline="339">
<![CDATA[
internal int ReadHasFieldMarshal()
{
int codedIndex;
if (bigHasFieldMarshal)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="228" endline="249">
<![CDATA[
internal int ReadCustomAttributeType()
{
int codedIndex;
if (bigCustomAttributeType)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 2
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MemberRefTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="340" endline="363">
<![CDATA[
internal int ReadHasDeclSecurity()
{
int codedIndex;
if (bigHasDeclSecurity)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="228" endline="249">
<![CDATA[
internal int ReadCustomAttributeType()
{
int codedIndex;
if (bigCustomAttributeType)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 2
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MemberRefTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="364" endline="385">
<![CDATA[
internal int ReadTypeOrMethodDef()
{
int codedIndex;
if (bigTypeOrMethodDef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="228" endline="249">
<![CDATA[
internal int ReadCustomAttributeType()
{
int codedIndex;
if (bigCustomAttributeType)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 2
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MemberRefTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="386" endline="407">
<![CDATA[
internal int ReadMemberForwarded()
{
int codedIndex;
if (bigMemberForwarded)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="228" endline="249">
<![CDATA[
internal int ReadCustomAttributeType()
{
int codedIndex;
if (bigCustomAttributeType)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 7)
{
case 2
return (MethodDefTable.Index << 24) + (codedIndex >> 3);
case 3
return (MemberRefTable.Index << 24) + (codedIndex >> 3);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="408" endline="431">
<![CDATA[
internal int ReadImplementation()
{
int codedIndex;
if (bigImplementation)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FileTable.Index << 24) + (codedIndex >> 2);
case 1
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="44" endline="50">
<![CDATA[
internal EventBuilder(TypeBuilder typeBuilder, string name, EventAttributes attributes, Type eventtype)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.eventtype = typeBuilder.ModuleBuilder.GetTypeTokenForMemberRef(eventtype);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="41" endline="48">
<![CDATA[
private MethodSignature(Type returnType, Type[] parameterTypes, Type[][][] modifiers, CallingConventions callingConvention, int genericParamCount)
{
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.modifiers = modifiers;
this.callingConvention = callingConvention;
this.genericParamCount = genericParamCount;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="44" endline="51">
<![CDATA[
internal PropertyBuilder(TypeBuilder typeBuilder, string name, PropertyAttributes attributes, PropertySignature sig, bool patchCallingConvention)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.sig = sig;
this.patchCallingConvention = patchCallingConvention;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41">
<![CDATA[
internal ByteReader(byte[] buffer, int offset, int length)
{
this.buffer = buffer;
this.pos = offset;
this.end = pos + length;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="42" endline="49">
<![CDATA[
internal static ByteReader FromBlob(byte[] blobHeap, int blob)
{
ByteReader br = new ByteReader(blobHeap, blob, 4);
int length = br.ReadCompressedInt();
br.end = br.pos + length;
return br;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="123" endline="131">
<![CDATA[
public static SignatureHelper GetMethodSigHelper(Module mod, CallingConvention unmanagedCallConv, Type returnType)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, 0);
sig.returnType = returnType;
sig.unmanaged = true;
sig.unmanagedCallConv = unmanagedCallConv;
return sig;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="54" endline="61">
<![CDATA[
}
internal byte PeekByte()
{
if (pos == end)
throw new BadImageFormatException();
return buffer[pos];
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="152" endline="160">
<![CDATA[
public byte[] GetSignature()
{
if (module == null)
{
throw new NotSupportedException();
}
return GetSignature(module).ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="54" endline="61">
<![CDATA[
}
internal byte PeekByte()
{
if (pos == end)
throw new BadImageFormatException();
return buffer[pos];
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="52" endline="61">
<![CDATA[
public override string ToString()
{
string str = name.ToString();
if (culture != null)
{
str = str.Replace("Culture=neutral", "Culture=" + culture);
}
return str;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="148" endline="160">
<![CDATA[
}
public string FullName
{
get
{
string str = name.FullName;
if (culture != null)
{
str = str.Replace("Culture=neutral", "Culture=" + culture);
}
return str;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="49" endline="90">
<![CDATA[
internal void Read(BinaryReader br)
{
Signature = br.ReadUInt32();
if (Signature != IMAGE_NT_HEADERS.MAGIC_SIGNATURE)
{
throw new BadImageFormatException();
}
FileHeader.Read(br);
OptionalHeader.Read(br);
}
}
sealed class IMAGE_FILE_HEADER
{
public const WORD IMAGE_FILE_MACHINE_I386 = 0x014c;
public const WORD IMAGE_FILE_MACHINE_IA64 = 0x0200;
public const WORD IMAGE_FILE_MACHINE_AMD64 = 0x8664;
public const WORD IMAGE_FILE_32BIT_MACHINE = 0x0100;
public const WORD IMAGE_FILE_EXECUTABLE_IMAGE = 0x0002;
public const WORD IMAGE_FILE_LARGE_ADDRESS_AWARE = 0x0020;
public const WORD IMAGE_FILE_DLL = 0x2000;
public WORD Machine;
public WORD NumberOfSections;
public DWORD TimeDateStamp;
public DWORD PointerToSymbolTable;
public DWORD NumberOfSymbols;
public WORD SizeOfOptionalHeader;
public WORD Characteristics;
internal void Read(BinaryReader br)
{
Machine = br.ReadUInt16();
NumberOfSections = br.ReadUInt16();
TimeDateStamp = br.ReadUInt32();
PointerToSymbolTable = br.ReadUInt32();
NumberOfSymbols = br.ReadUInt32();
SizeOfOptionalHeader = br.ReadUInt16();
Characteristics = br.ReadUInt16();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="325" endline="351">
<![CDATA[
}
struct RESOURCEHEADER
{
internal int DataSize;
internal int HeaderSize;
internal OrdinalOrName TYPE;
internal OrdinalOrName NAME;
internal int DataVersion;
internal ushort MemoryFlags;
internal ushort LanguageId;
internal int Version;
internal int Characteristics;
internal RESOURCEHEADER(ByteReader br)
{
DataSize = br.ReadInt32();
HeaderSize = br.ReadInt32();
TYPE = ReadOrdinalOrName(br);
NAME = ReadOrdinalOrName(br);
br.Align(4);
DataVersion = br.ReadInt32();
MemoryFlags = br.ReadUInt16();
LanguageId = br.ReadUInt16();
Version = br.ReadInt32();
Characteristics = br.ReadInt32();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="32" endline="45">
<![CDATA[
}
public abstract EventAttributes Attributes { get; }
public abstract MethodInfo GetAddMethod(bool nonPublic);
public abstract MethodInfo GetRaiseMethod(bool nonPublic);
public abstract MethodInfo GetRemoveMethod(bool nonPublic);
public abstract MethodInfo[] GetOtherMethods(bool nonPublic);
public abstract Type EventHandlerType { get; }
internal abstract bool IsPublic { get; }
internal abstract bool IsStatic { get; }
public bool IsSpecialName
{
get { return (Attributes & EventAttributes.SpecialName) != 0; }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="50" endline="64">
<![CDATA[
public abstract string Name { get; }
public abstract Type ParameterType { get; }
public abstract ParameterAttributes Attributes { get; }
public abstract int Position { get; }
public abstract object RawDefaultValue { get; }
public abstract Type[] GetOptionalCustomModifiers();
public abstract Type[] GetRequiredCustomModifiers();
public abstract MemberInfo Member { get; }
public abstract int MetadataToken { get; }
internal abstract Module Module { get; }
public bool IsIn
{
get { return (Attributes & ParameterAttributes.In) != 0; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="340" endline="351">
<![CDATA[
}
sealed class GenericParameterInfoImpl
{
private readonly GenericMethodInstance method;
private readonly ParameterInfo parameterInfo;
internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
{
this.method = method;
this.parameterInfo = parameterInfo;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="523" endline="534">
<![CDATA[
}
sealed class GenericEventInfo
{
private readonly Type typeInstance;
private readonly EventInfo eventInfo;
internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
{
this.typeInstance = typeInstance;
this.eventInfo = eventInfo;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41">
<![CDATA[
internal ResourceModule(Assembly assembly, string scopeName, string location)
{
this.assembly = assembly;
this.scopeName = scopeName;
this.location = location;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="100" endline="291">
<![CDATA[
private readonly int position;
private sealed class DummyModule
{
internal DummyModule()
{
}
public override bool Equals(object obj)
{
throw new InvalidOperationException();
}
public override int GetHashCode()
{
throw new InvalidOperationException();
}
public override string ToString()
{
throw new InvalidOperationException();
}
public override int MDStreamVersion
{
get { throw new InvalidOperationException(); }
}
public override Assembly Assembly
{
get { throw new InvalidOperationException(); }
}
internal override Type GetTypeImpl(string typeName)
{
throw new InvalidOperationException();
}
internal override void GetTypesImpl(List<Type> list)
{
throw new InvalidOperationException();
}
public override string FullyQualifiedName
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override Guid ModuleVersionId
{
get { throw new InvalidOperationException(); }
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override string ResolveString(int metadataToken)
{
throw new InvalidOperationException();
}
public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
{
throw new InvalidOperationException();
}
public override string ScopeName
{
get { throw new InvalidOperationException(); }
}
public override AssemblyName[] __GetReferencedAssemblies()
{
throw new InvalidOperationException();
}
internal override Type GetModuleType()
{
throw new InvalidOperationException();
}
internal override ByteReader GetBlob(int blobIndex)
{
throw new InvalidOperationException();
}
}
internal static Type Make(int position)
{
return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
}
private UnboundGenericMethodParameter(int position)
{
this.position = position;
}
public override bool Equals(object obj)
{
UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
return other != null && other.position == position;
}
public override int GetHashCode()
{
return position;
}
public override string Namespace
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override int MetadataToken
{
get { throw new InvalidOperationException(); }
}
public override Module Module
{
get { return module; }
}
public override int GenericParameterPosition
{
get { return position; }
}
public override Type DeclaringType
{
get { return null; }
}
public override MethodBase DeclaringMethod
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetGenericParameterConstraints()
{
throw new InvalidOperationException();
}
public override GenericParameterAttributes GenericParameterAttributes
{
get { throw new InvalidOperationException(); }
}
internal override Type BindTypeParameters(IGenericBinder binder)
{
return binder.BindMethodParameter(this);
}
}
sealed class GenericTypeParameter
{
private readonly ModuleReader module;
private readonly int index;
internal GenericTypeParameter(ModuleReader module, int index)
{
this.module = module;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="95" endline="101">
<![CDATA[
public void SetLocalSymInfo(string name, int startOffset, int endOffset)
{
this.name = name;
this.startOffset = startOffset;
this.endOffset = endOffset;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45">
<![CDATA[
internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="106" endline="117">
<![CDATA[
}
internal override bool IsPublic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isPublic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="118" endline="129">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isStatic;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="106" endline="117">
<![CDATA[
}
internal override bool IsPublic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isPublic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="124" endline="135">
<![CDATA[
}
internal override bool IsPublic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isPublic;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="106" endline="117">
<![CDATA[
}
internal override bool IsPublic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isPublic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="136" endline="147">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isStatic;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="106" endline="117">
<![CDATA[
}
internal override bool IsPublic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isPublic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="106" endline="117">
<![CDATA[
}
internal override bool IsPublic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isPublic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="118" endline="129">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isStatic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="124" endline="135">
<![CDATA[
}
internal override bool IsPublic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isPublic;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="118" endline="129">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isStatic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="136" endline="147">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isStatic;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="118" endline="129">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isStatic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="118" endline="129">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isStatic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="130" endline="136">
<![CDATA[
}
private void ComputeFlags()
{
module.MethodSemantics.ComputeFlags(module, this.MetadataToken, out isPublic, out isStatic);
flagsCached = true;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="148" endline="154">
<![CDATA[
}
private void ComputeFlags()
{
module.MethodSemantics.ComputeFlags(module, this.MetadataToken, out isPublic, out isStatic);
flagsCached = true;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="38" endline="48">
<![CDATA[
}
internal abstract int RowCount { get; set; }
internal abstract void Write(MetadataWriter mw);
internal abstract void Read(MetadataReader mr);
internal int GetLength(MetadataWriter md)
{
return RowCount * GetRowSize(new RowSizeCalc(md));
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1669" endline="1680">
<![CDATA[
protected abstract string GetSuffix();
protected abstract Type Wrap(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers);
}
sealed class ArrayType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new ArrayType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="38" endline="48">
<![CDATA[
}
internal abstract int RowCount { get; set; }
internal abstract void Write(MetadataWriter mw);
internal abstract void Read(MetadataReader mr);
internal int GetLength(MetadataWriter md)
{
return RowCount * GetRowSize(new RowSizeCalc(md));
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1757" endline="1766">
<![CDATA[
}
sealed class MultiArrayType
{
private readonly int rank;
internal static Type Make(Type type, int rank, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new MultiArrayType(type, rank, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="38" endline="48">
<![CDATA[
}
internal abstract int RowCount { get; set; }
internal abstract void Write(MetadataWriter mw);
internal abstract void Read(MetadataReader mr);
internal int GetLength(MetadataWriter md)
{
return RowCount * GetRowSize(new RowSizeCalc(md));
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1886" endline="1958">
<![CDATA[
}
private sealed class ParameterInfoImpl
{
private readonly MethodInfo method;
private readonly Type type;
private readonly int pos;
internal ParameterInfoImpl(MethodInfo method, Type type, int pos)
{
this.method = method;
this.type = type;
this.pos = pos;
}
public override Type ParameterType
{
get { return type; }
}
public override string Name
{
get { return null; }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return pos; }
}
public override object RawDefaultValue
{
get { return null; }
}
public override Type[] GetOptionalCustomModifiers()
{
return Empty<Type>.Array;
}
public override Type[] GetRequiredCustomModifiers()
{
return Empty<Type>.Array;
}
public override MemberInfo Member
{
get { return method.IsConstructor ? (MethodBase)new ConstructorInfoImpl(method)
}
public override int MetadataToken
{
get { return 0x8000000; }
}
internal override Module Module
{
get { return method.Module; }
}
}
}
sealed class ByRefType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new ByRefType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="38" endline="48">
<![CDATA[
}
internal abstract int RowCount { get; set; }
internal abstract void Write(MetadataWriter mw);
internal abstract void Read(MetadataReader mr);
internal int GetLength(MetadataWriter md)
{
return RowCount * GetRowSize(new RowSizeCalc(md));
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1999" endline="2006">
<![CDATA[
}
sealed class PointerType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new PointerType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="49" endline="394">
<![CDATA[
protected abstract int GetRowSize(RowSizeCalc rsc);
protected sealed class RowSizeCalc
{
private readonly MetadataWriter mw;
private int size;
internal RowSizeCalc(MetadataWriter mw)
{
this.mw = mw;
}
internal RowSizeCalc AddFixed(int size)
{
this.size += size;
return this;
}
internal RowSizeCalc WriteStringIndex()
{
if (mw.bigStrings)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteGuidIndex()
{
if (mw.bigGuids)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteBlobIndex()
{
if (mw.bigBlobs)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeDefOrRef()
{
if (mw.bigTypeDefOrRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteField()
{
if (mw.bigField)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteMethodDef()
{
if (mw.bigMethodDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteParam()
{
if (mw.bigParam)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteResolutionScope()
{
if (mw.bigResolutionScope)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMemberRefParent()
{
if (mw.bigMemberRefParent)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasCustomAttribute()
{
if (mw.bigHasCustomAttribute)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteCustomAttributeType()
{
if (mw.bigCustomAttributeType)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasConstant()
{
if (mw.bigHasConstant)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeDef()
{
if (mw.bigTypeDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMethodDefOrRef()
{
if (mw.bigMethodDefOrRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteEvent()
{
if (mw.bigEvent)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteProperty()
{
if (mw.bigProperty)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasSemantics()
{
if (mw.bigHasSemantics)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteImplementation()
{
if (mw.bigImplementation)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeOrMethodDef()
{
if (mw.bigTypeOrMethodDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteGenericParam()
{
if (mw.bigGenericParam)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasDeclSecurity()
{
if (mw.bigHasDeclSecurity)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMemberForwarded()
{
if (mw.bigMemberForwarded)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteModuleRef()
{
if (mw.bigModuleRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasFieldMarshal()
{
if (mw.bigHasFieldMarshal)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal int Value
{
get { return size; }
}
}
}
abstract class Table<T>
{
internal T[] records = new T[1];
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="37" endline="58">
<![CDATA[
public abstract Type[] GetTypes();
public abstract string FullName { get; }
public abstract AssemblyName GetName();
public abstract string ImageRuntimeVersion { get; }
public abstract Module ManifestModule { get; }
public abstract MethodInfo EntryPoint { get; }
public abstract string Location { get; }
public abstract AssemblyName[] GetReferencedAssemblies();
public abstract Module[] GetModules(bool getResourceModules);
public abstract Module[] GetLoadedModules(bool getResourceModules);
public abstract Module GetModule(string name);
public abstract string[] GetManifestResourceNames();
public abstract ManifestResourceInfo GetManifestResourceInfo(string resourceName);
public abstract System.IO.Stream GetManifestResourceStream(string resourceName);
internal abstract Type GetTypeImpl(string typeName);
public Module[] GetModules()
{
return GetModules(true);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="49" endline="394">
<![CDATA[
protected abstract int GetRowSize(RowSizeCalc rsc);
protected sealed class RowSizeCalc
{
private readonly MetadataWriter mw;
private int size;
internal RowSizeCalc(MetadataWriter mw)
{
this.mw = mw;
}
internal RowSizeCalc AddFixed(int size)
{
this.size += size;
return this;
}
internal RowSizeCalc WriteStringIndex()
{
if (mw.bigStrings)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteGuidIndex()
{
if (mw.bigGuids)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteBlobIndex()
{
if (mw.bigBlobs)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeDefOrRef()
{
if (mw.bigTypeDefOrRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteField()
{
if (mw.bigField)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteMethodDef()
{
if (mw.bigMethodDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteParam()
{
if (mw.bigParam)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteResolutionScope()
{
if (mw.bigResolutionScope)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMemberRefParent()
{
if (mw.bigMemberRefParent)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasCustomAttribute()
{
if (mw.bigHasCustomAttribute)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteCustomAttributeType()
{
if (mw.bigCustomAttributeType)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasConstant()
{
if (mw.bigHasConstant)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeDef()
{
if (mw.bigTypeDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMethodDefOrRef()
{
if (mw.bigMethodDefOrRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteEvent()
{
if (mw.bigEvent)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteProperty()
{
if (mw.bigProperty)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasSemantics()
{
if (mw.bigHasSemantics)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteImplementation()
{
if (mw.bigImplementation)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeOrMethodDef()
{
if (mw.bigTypeOrMethodDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteGenericParam()
{
if (mw.bigGenericParam)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasDeclSecurity()
{
if (mw.bigHasDeclSecurity)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMemberForwarded()
{
if (mw.bigMemberForwarded)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteModuleRef()
{
if (mw.bigModuleRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasFieldMarshal()
{
if (mw.bigHasFieldMarshal)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal int Value
{
get { return size; }
}
}
}
abstract class Table<T>
{
internal T[] records = new T[1];
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="126" endline="133">
<![CDATA[
}
internal uint StrongNameSignatureLength
{
get
{
return strongNameSignatureLength;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="49" endline="394">
<![CDATA[
protected abstract int GetRowSize(RowSizeCalc rsc);
protected sealed class RowSizeCalc
{
private readonly MetadataWriter mw;
private int size;
internal RowSizeCalc(MetadataWriter mw)
{
this.mw = mw;
}
internal RowSizeCalc AddFixed(int size)
{
this.size += size;
return this;
}
internal RowSizeCalc WriteStringIndex()
{
if (mw.bigStrings)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteGuidIndex()
{
if (mw.bigGuids)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteBlobIndex()
{
if (mw.bigBlobs)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeDefOrRef()
{
if (mw.bigTypeDefOrRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteField()
{
if (mw.bigField)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteMethodDef()
{
if (mw.bigMethodDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteParam()
{
if (mw.bigParam)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteResolutionScope()
{
if (mw.bigResolutionScope)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMemberRefParent()
{
if (mw.bigMemberRefParent)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasCustomAttribute()
{
if (mw.bigHasCustomAttribute)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteCustomAttributeType()
{
if (mw.bigCustomAttributeType)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasConstant()
{
if (mw.bigHasConstant)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeDef()
{
if (mw.bigTypeDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMethodDefOrRef()
{
if (mw.bigMethodDefOrRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteEvent()
{
if (mw.bigEvent)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteProperty()
{
if (mw.bigProperty)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasSemantics()
{
if (mw.bigHasSemantics)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteImplementation()
{
if (mw.bigImplementation)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeOrMethodDef()
{
if (mw.bigTypeOrMethodDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteGenericParam()
{
if (mw.bigGenericParam)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasDeclSecurity()
{
if (mw.bigHasDeclSecurity)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMemberForwarded()
{
if (mw.bigMemberForwarded)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteModuleRef()
{
if (mw.bigModuleRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasFieldMarshal()
{
if (mw.bigHasFieldMarshal)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal int Value
{
get { return size; }
}
}
}
abstract class Table<T>
{
internal T[] records = new T[1];
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="49" endline="394">
<![CDATA[
protected abstract int GetRowSize(RowSizeCalc rsc);
protected sealed class RowSizeCalc
{
private readonly MetadataWriter mw;
private int size;
internal RowSizeCalc(MetadataWriter mw)
{
this.mw = mw;
}
internal RowSizeCalc AddFixed(int size)
{
this.size += size;
return this;
}
internal RowSizeCalc WriteStringIndex()
{
if (mw.bigStrings)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteGuidIndex()
{
if (mw.bigGuids)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteBlobIndex()
{
if (mw.bigBlobs)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeDefOrRef()
{
if (mw.bigTypeDefOrRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteField()
{
if (mw.bigField)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteMethodDef()
{
if (mw.bigMethodDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteParam()
{
if (mw.bigParam)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteResolutionScope()
{
if (mw.bigResolutionScope)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMemberRefParent()
{
if (mw.bigMemberRefParent)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasCustomAttribute()
{
if (mw.bigHasCustomAttribute)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteCustomAttributeType()
{
if (mw.bigCustomAttributeType)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasConstant()
{
if (mw.bigHasConstant)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeDef()
{
if (mw.bigTypeDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMethodDefOrRef()
{
if (mw.bigMethodDefOrRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteEvent()
{
if (mw.bigEvent)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteProperty()
{
if (mw.bigProperty)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasSemantics()
{
if (mw.bigHasSemantics)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteImplementation()
{
if (mw.bigImplementation)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeOrMethodDef()
{
if (mw.bigTypeOrMethodDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteGenericParam()
{
if (mw.bigGenericParam)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasDeclSecurity()
{
if (mw.bigHasDeclSecurity)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMemberForwarded()
{
if (mw.bigMemberForwarded)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteModuleRef()
{
if (mw.bigModuleRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasFieldMarshal()
{
if (mw.bigHasFieldMarshal)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal int Value
{
get { return size; }
}
}
}
abstract class Table<T>
{
internal T[] records = new T[1];
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="59" endline="78">
<![CDATA[
#else
if (runningOnMono)
{
#if MONO
return new MdbWriter(moduleBuilder);
#else
throw new NotSupportedException("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols.");
#endif
}
else
{
return new PdbWriter(moduleBuilder);
}
#endif
}
internal static byte[] GetDebugInfo(ISymbolWriterImpl writer, ref IMAGE_DEBUG_DIRECTORY idd)
{
return writer.GetDebugInfo(ref idd);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="49" endline="394">
<![CDATA[
protected abstract int GetRowSize(RowSizeCalc rsc);
protected sealed class RowSizeCalc
{
private readonly MetadataWriter mw;
private int size;
internal RowSizeCalc(MetadataWriter mw)
{
this.mw = mw;
}
internal RowSizeCalc AddFixed(int size)
{
this.size += size;
return this;
}
internal RowSizeCalc WriteStringIndex()
{
if (mw.bigStrings)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteGuidIndex()
{
if (mw.bigGuids)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteBlobIndex()
{
if (mw.bigBlobs)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeDefOrRef()
{
if (mw.bigTypeDefOrRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteField()
{
if (mw.bigField)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteMethodDef()
{
if (mw.bigMethodDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteParam()
{
if (mw.bigParam)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteResolutionScope()
{
if (mw.bigResolutionScope)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMemberRefParent()
{
if (mw.bigMemberRefParent)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasCustomAttribute()
{
if (mw.bigHasCustomAttribute)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteCustomAttributeType()
{
if (mw.bigCustomAttributeType)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasConstant()
{
if (mw.bigHasConstant)
{
size += 4;
}
else
{
size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeDef()
{
if (mw.bigTypeDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMethodDefOrRef()
{
if (mw.bigMethodDefOrRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteEvent()
{
if (mw.bigEvent)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteProperty()
{
if (mw.bigProperty)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasSemantics()
{
if (mw.bigHasSemantics)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteImplementation()
{
if (mw.bigImplementation)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteTypeOrMethodDef()
{
if (mw.bigTypeOrMethodDef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteGenericParam()
{
if (mw.bigGenericParam)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasDeclSecurity()
{
if (mw.bigHasDeclSecurity)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteMemberForwarded()
{
if (mw.bigMemberForwarded)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteModuleRef()
{
if (mw.bigModuleRef)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal RowSizeCalc WriteHasFieldMarshal()
{
if (mw.bigHasFieldMarshal)
{
this.size += 4;
}
else
{
this.size += 2;
}
return this;
}
internal int Value
{
get { return size; }
}
}
}
abstract class Table<T>
{
internal T[] records = new T[1];
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="59" endline="147">
<![CDATA[
}
}
public enum AssemblyComparisonResult
{
Unknown = 0,
EquivalentFullMatch = 1,
EquivalentWeakNamed = 2,
EquivalentFXUnified = 3,
EquivalentUnified = 4,
NonEquivalentVersion = 5,
NonEquivalent = 6,
EquivalentPartialMatch = 7,
EquivalentPartialWeakNamed = 8,
EquivalentPartialUnified = 9,
EquivalentPartialFXUnified = 10,
NonEquivalentPartialVersion = 11,
}
public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args);
public sealed class Universe
{
internal readonly Dictionary<Type, Type> canonicalizedTypes = new Dictionary<Type, Type>();
private readonly List<Assembly> assemblies = new List<Assembly>();
private readonly List<AssemblyBuilder> dynamicAssemblies = new List<AssemblyBuilder>();
private readonly Dictionary<string, Assembly> assembliesByName = new Dictionary<string, Assembly>();
private readonly Dictionary<System.Type, Type> importedTypes = new Dictionary<System.Type, Type>();
private Type typeof_System_Object;
private Type typeof_System_ValueType;
private Type typeof_System_Enum;
private Type typeof_System_Void;
private Type typeof_System_Boolean;
private Type typeof_System_Char;
private Type typeof_System_SByte;
private Type typeof_System_Byte;
private Type typeof_System_Int16;
private Type typeof_System_UInt16;
private Type typeof_System_Int32;
private Type typeof_System_UInt32;
private Type typeof_System_Int64;
private Type typeof_System_UInt64;
private Type typeof_System_Single;
private Type typeof_System_Double;
private Type typeof_System_String;
private Type typeof_System_IntPtr;
private Type typeof_System_UIntPtr;
private Type typeof_System_TypedReference;
private Type typeof_System_Type;
private Type typeof_System_Array;
private Type typeof_System_DateTime;
private Type typeof_System_DBNull;
private Type typeof_System_Decimal;
private Type typeof_System_NonSerializedAttribute;
private Type typeof_System_SerializableAttribute;
private Type typeof_System_AttributeUsageAttribute;
private Type typeof_System_Reflection_AssemblyCultureAttribute;
private Type typeof_System_Runtime_InteropServices_DllImportAttribute;
private Type typeof_System_Runtime_InteropServices_FieldOffsetAttribute;
private Type typeof_System_Runtime_InteropServices_InAttribute;
private Type typeof_System_Runtime_InteropServices_MarshalAsAttribute;
private Type typeof_System_Runtime_InteropServices_UnmanagedType;
private Type typeof_System_Runtime_InteropServices_VarEnum;
private Type typeof_System_Runtime_InteropServices_OutAttribute;
private Type typeof_System_Runtime_InteropServices_StructLayoutAttribute;
private Type typeof_System_Runtime_InteropServices_OptionalAttribute;
private Type typeof_System_Runtime_InteropServices_PreserveSigAttribute;
private Type typeof_System_Runtime_InteropServices_ComImportAttribute;
private Type typeof_System_Runtime_CompilerServices_DecimalConstantAttribute;
private Type typeof_System_Runtime_CompilerServices_SpecialNameAttribute;
private Type typeof_System_Runtime_CompilerServices_MethodImplAttribute;
private Type typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute;
private Type typeof_System_Reflection_AssemblyCopyrightAttribute;
private Type typeof_System_Reflection_AssemblyTrademarkAttribute;
private Type typeof_System_Reflection_AssemblyProductAttribute;
private Type typeof_System_Reflection_AssemblyCompanyAttribute;
private Type typeof_System_Reflection_AssemblyDescriptionAttribute;
private Type typeof_System_Reflection_AssemblyTitleAttribute;
private Type typeof_System_Reflection_AssemblyInformationalVersionAttribute;
private Type typeof_System_Reflection_AssemblyFileVersionAttribute;
private Type typeof_System_Security_Permissions_CodeAccessSecurityAttribute;
private Type typeof_System_Security_Permissions_HostProtectionAttribute;
private Type typeof_System_Security_Permissions_PermissionSetAttribute;
private Type typeof_System_Security_Permissions_SecurityAction;
private List<ResolveEventHandler> resolvers = new List<ResolveEventHandler>();
internal Assembly Mscorlib
{
get { return Load("mscorlib"); }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="390" endline="449">
<![CDATA[
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
set { rowCount = value; records = new T[value]; }
}
protected override int GetRowSize(RowSizeCalc rsc)
{
throw new InvalidOperationException();
}
internal int AddRecord(T newRecord)
{
if (rowCount == records.Length)
{
T[] newarr = new T[records.Length * 2];
Array.Copy(records, newarr, records.Length);
records = newarr;
}
records[rowCount++] = newRecord;
return rowCount;
}
internal int AddVirtualRecord()
{
return ++rowCount;
}
internal override void Write(MetadataWriter mw)
{
throw new InvalidOperationException();
}
}
sealed class ModuleTable
{
internal const int Index = 0x00;
internal struct Record
{
internal short Generation;
internal int Name; // -> StringHeap
internal int Mvid; // -> GuidHeap
internal int EncId; // -> GuidHeap
internal int EncBaseId; // -> GuidHeap
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="450" endline="461">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="390" endline="449">
<![CDATA[
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
set { rowCount = value; records = new T[value]; }
}
protected override int GetRowSize(RowSizeCalc rsc)
{
throw new InvalidOperationException();
}
internal int AddRecord(T newRecord)
{
if (rowCount == records.Length)
{
T[] newarr = new T[records.Length * 2];
Array.Copy(records, newarr, records.Length);
records = newarr;
}
records[rowCount++] = newRecord;
return rowCount;
}
internal int AddVirtualRecord()
{
return ++rowCount;
}
internal override void Write(MetadataWriter mw)
{
throw new InvalidOperationException();
}
}
sealed class ModuleTable
{
internal const int Index = 0x00;
internal struct Record
{
internal short Generation;
internal int Name; // -> StringHeap
internal int Mvid; // -> GuidHeap
internal int EncId; // -> GuidHeap
internal int EncBaseId; // -> GuidHeap
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2138" endline="2149">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="450" endline="461">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2112" endline="2137">
<![CDATA[
}
sealed class ExportedTypeTable
{
internal const int Index = 0x27;
internal struct Record
{
internal int Flags;
internal int TypeDefId;
internal int TypeName;
internal int TypeNamespace;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="563" endline="574">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteStringIndex()
.WriteTypeDefOrRef()
.WriteField()
.WriteMethodDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.WriteGuidIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="473" endline="483">
<![CDATA[
internal void Add(short generation, int name, int mvid, int encid, int encbaseid)
{
Record record = new Record();
record.Generation = generation;
record.Name = name;
record.Mvid = mvid;
record.EncId = encid;
record.EncBaseId = encbaseid;
AddRecord(record);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="196" endline="204">
<![CDATA[
private void AddMethodSemantics(short semantics, int methodToken, int propertyToken)
{
MethodSemanticsTable.Record rec = new MethodSemanticsTable.Record();
rec.Semantics = semantics;
rec.Method = methodToken;
rec.Association = propertyToken;
typeBuilder.ModuleBuilder.MethodSemantics.AddRecord(rec);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="473" endline="483">
<![CDATA[
internal void Add(short generation, int name, int mvid, int encid, int encbaseid)
{
Record record = new Record();
record.Generation = generation;
record.Name = name;
record.Mvid = mvid;
record.EncId = encid;
record.EncBaseId = encbaseid;
AddRecord(record);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="221" endline="229">
<![CDATA[
private void AddMethodSemantics(short semantics, int methodToken, int propertyToken)
{
MethodSemanticsTable.Record rec = new MethodSemanticsTable.Record();
rec.Semantics = semantics;
rec.Method = methodToken;
rec.Association = propertyToken;
typeBuilder.ModuleBuilder.MethodSemantics.AddRecord(rec);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="473" endline="483">
<![CDATA[
internal void Add(short generation, int name, int mvid, int encid, int encbaseid)
{
Record record = new Record();
record.Generation = generation;
record.Name = name;
record.Mvid = mvid;
record.EncId = encid;
record.EncBaseId = encbaseid;
AddRecord(record);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="855" endline="866">
<![CDATA[
public void MarkSequencePoint(ISymbolDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn)
{
SequencePoint sp = new SequencePoint();
sp.document = document;
sp.offset = code.Position;
sp.startLine = startLine;
sp.startColumn = startColumn;
sp.endLine = endLine;
sp.endColumn = endColumn;
sequencePoints.Add(sp);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="473" endline="483">
<![CDATA[
internal void Add(short generation, int name, int mvid, int encid, int encbaseid)
{
Record record = new Record();
record.Generation = generation;
record.Name = name;
record.Mvid = mvid;
record.EncId = encid;
record.EncBaseId = encbaseid;
AddRecord(record);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="431" endline="439">
<![CDATA[
public void AddResourceFile(string name, string fileName, ResourceAttributes attribs)
{
ResourceFile resfile = new ResourceFile();
resfile.Name = name;
resfile.FileName = fileName;
resfile.Attributes = attribs;
resourceFiles.Add(resfile);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteResolutionScope()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="563" endline="574">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteStringIndex()
.WriteTypeDefOrRef()
.WriteField()
.WriteMethodDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="563" endline="574">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteStringIndex()
.WriteTypeDefOrRef()
.WriteField()
.WriteMethodDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="563" endline="574">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteStringIndex()
.WriteTypeDefOrRef()
.WriteField()
.WriteMethodDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="563" endline="574">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteStringIndex()
.WriteTypeDefOrRef()
.WriteField()
.WriteMethodDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="563" endline="574">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteStringIndex()
.WriteTypeDefOrRef()
.WriteField()
.WriteMethodDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteBlobIndex()
.WriteParam()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMemberRefParent()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasConstant()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasCustomAttribute()
.WriteCustomAttributeType()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteHasFieldMarshal()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1130" endline="1150">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
int token = moduleBuilder.ResolvePseudoToken(records[i].Parent);
switch (token >> 24)
{
case FieldTable.Index
records[i].Parent = (token & 0xFFFFFF) << 1 | 0;
break;
case ParamTable.Index
records[i].Parent = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
}
for (int i = 0; i < rowCount; i++)
{
int token = moduleBuilder.ResolvePseudoToken(records[i].Parent);
switch (token >> 24)
{
case FieldTable.Index
records[i].Parent = (token & 0xFFFFFF) << 1 | 0;
break;
case ParamTable.Index
records[i].Parent = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1857" endline="1868">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].MemberForwarded))
{
records[i].MemberForwarded = moduleBuilder.ResolvePseudoToken(records[i].MemberForwarded);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].MemberForwarded))
{
records[i].MemberForwarded = moduleBuilder.ResolvePseudoToken(records[i].MemberForwarded);
}
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteHasDeclSecurity()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1231" endline="1255">
<![CDATA[
}
sealed class ClassLayoutTable
{
internal const int Index = 0x0f;
internal struct Record
{
internal short PackingSize;
internal int ClassSize;
internal int Parent;
}
internal void AddOrReplaceRecord(Record rec)
{
for (int i = 0; i < records.Length; i++)
{
if (records[i].Parent == rec.Parent)
{
records[i] = rec;
return;
}
}
for (int i = 0; i < records.Length; i++)
{
if (records[i].Parent == rec.Parent)
{
records[i] = rec;
return;
}
}
AddRecord(rec);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2369" endline="2381">
<![CDATA[
internal int FindFirstByOwner(int token)
{
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
return -1;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(6)
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302">
<![CDATA[
internal void GetLayout(int token, ref int pack, ref int size)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Parent == token)
{
pack = records[i].PackingSize;
size = records[i].ClassSize;
break;
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1354" endline="1366">
<![CDATA[
}
sealed class StandAloneSigTable
{
internal const int Index = 0x11;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1367" endline="1374">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1354" endline="1366">
<![CDATA[
}
sealed class StandAloneSigTable
{
internal const int Index = 0x11;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1759" endline="1766">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteStringIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteStringIndex(records[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1354" endline="1366">
<![CDATA[
}
sealed class StandAloneSigTable
{
internal const int Index = 0x11;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1799" endline="1806">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1367" endline="1374">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1746" endline="1758">
<![CDATA[
}
sealed class ModuleRefTable
{
internal const int Index = 0x1A;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1367" endline="1374">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1786" endline="1798">
<![CDATA[
}
sealed class TypeSpecTable
{
internal const int Index = 0x1B;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1380" endline="1391">
<![CDATA[
internal int FindOrAddRecord(int blob)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i] == blob)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i] == blob)
{
return i + 1;
}
}
return AddRecord(blob);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2369" endline="2381">
<![CDATA[
internal int FindFirstByOwner(int token)
{
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
return -1;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteEvent()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteProperty()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMethodDef()
.WriteHasSemantics()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1597" endline="1622">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
int token = records[i].Association;
switch (token >> 24)
{
case EventTable.Index
token = (token & 0xFFFFFF) << 1 | 0;
break;
case PropertyTable.Index
token = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
records[i].Association = token;
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
int token = records[i].Association;
switch (token >> 24)
{
case EventTable.Index
token = (token & 0xFFFFFF) << 1 | 0;
break;
case PropertyTable.Index
token = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
records[i].Association = token;
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1725" endline="1740">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].MethodBody))
{
records[i].MethodBody = moduleBuilder.ResolvePseudoToken(records[i].MethodBody);
}
if (moduleBuilder.IsPseudoToken(records[i].MethodDeclaration))
{
records[i].MethodDeclaration = moduleBuilder.ResolvePseudoToken(records[i].MethodDeclaration);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].MethodBody))
{
records[i].MethodBody = moduleBuilder.ResolvePseudoToken(records[i].MethodBody);
}
if (moduleBuilder.IsPseudoToken(records[i].MethodDeclaration))
{
records[i].MethodDeclaration = moduleBuilder.ResolvePseudoToken(records[i].MethodDeclaration);
}
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteMethodDefOrRef()
.WriteMethodDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1725" endline="1740">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].MethodBody))
{
records[i].MethodBody = moduleBuilder.ResolvePseudoToken(records[i].MethodBody);
}
if (moduleBuilder.IsPseudoToken(records[i].MethodDeclaration))
{
records[i].MethodDeclaration = moduleBuilder.ResolvePseudoToken(records[i].MethodDeclaration);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].MethodBody))
{
records[i].MethodBody = moduleBuilder.ResolvePseudoToken(records[i].MethodBody);
}
if (moduleBuilder.IsPseudoToken(records[i].MethodDeclaration))
{
records[i].MethodDeclaration = moduleBuilder.ResolvePseudoToken(records[i].MethodDeclaration);
}
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1911" endline="1923">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder, int sdataRVA)
{
for (int i = 0; i < rowCount; i++)
{
records[i].RVA += sdataRVA;
if (moduleBuilder.IsPseudoToken(records[i].Field))
{
records[i].Field = moduleBuilder.ResolvePseudoToken(records[i].Field);
}
}
for (int i = 0; i < rowCount; i++)
{
records[i].RVA += sdataRVA;
if (moduleBuilder.IsPseudoToken(records[i].Field))
{
records[i].Field = moduleBuilder.ResolvePseudoToken(records[i].Field);
}
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1746" endline="1758">
<![CDATA[
}
sealed class ModuleRefTable
{
internal const int Index = 0x1A;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1759" endline="1766">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteStringIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteStringIndex(records[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1746" endline="1758">
<![CDATA[
}
sealed class ModuleRefTable
{
internal const int Index = 0x1A;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1799" endline="1806">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1759" endline="1766">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteStringIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteStringIndex(records[i]);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1786" endline="1798">
<![CDATA[
}
sealed class TypeSpecTable
{
internal const int Index = 0x1B;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="37" endline="58">
<![CDATA[
public abstract Type[] GetTypes();
public abstract string FullName { get; }
public abstract AssemblyName GetName();
public abstract string ImageRuntimeVersion { get; }
public abstract Module ManifestModule { get; }
public abstract MethodInfo EntryPoint { get; }
public abstract string Location { get; }
public abstract AssemblyName[] GetReferencedAssemblies();
public abstract Module[] GetModules(bool getResourceModules);
public abstract Module[] GetLoadedModules(bool getResourceModules);
public abstract Module GetModule(string name);
public abstract string[] GetManifestResourceNames();
public abstract ManifestResourceInfo GetManifestResourceInfo(string resourceName);
public abstract System.IO.Stream GetManifestResourceStream(string resourceName);
internal abstract Type GetTypeImpl(string typeName);
public Module[] GetModules()
{
return GetModules(true);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="122" endline="130">
<![CDATA[
}
public override ParameterInfo ReturnParameter
{
get
{
PopulateParameters();
return returnParameter;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="59" endline="78">
<![CDATA[
#else
if (runningOnMono)
{
#if MONO
return new MdbWriter(moduleBuilder);
#else
throw new NotSupportedException("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols.");
#endif
}
else
{
return new PdbWriter(moduleBuilder);
}
#endif
}
internal static byte[] GetDebugInfo(ISymbolWriterImpl writer, ref IMAGE_DEBUG_DIRECTORY idd)
{
return writer.GetDebugInfo(ref idd);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="59" endline="147">
<![CDATA[
}
}
public enum AssemblyComparisonResult
{
Unknown = 0,
EquivalentFullMatch = 1,
EquivalentWeakNamed = 2,
EquivalentFXUnified = 3,
EquivalentUnified = 4,
NonEquivalentVersion = 5,
NonEquivalent = 6,
EquivalentPartialMatch = 7,
EquivalentPartialWeakNamed = 8,
EquivalentPartialUnified = 9,
EquivalentPartialFXUnified = 10,
NonEquivalentPartialVersion = 11,
}
public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args);
public sealed class Universe
{
internal readonly Dictionary<Type, Type> canonicalizedTypes = new Dictionary<Type, Type>();
private readonly List<Assembly> assemblies = new List<Assembly>();
private readonly List<AssemblyBuilder> dynamicAssemblies = new List<AssemblyBuilder>();
private readonly Dictionary<string, Assembly> assembliesByName = new Dictionary<string, Assembly>();
private readonly Dictionary<System.Type, Type> importedTypes = new Dictionary<System.Type, Type>();
private Type typeof_System_Object;
private Type typeof_System_ValueType;
private Type typeof_System_Enum;
private Type typeof_System_Void;
private Type typeof_System_Boolean;
private Type typeof_System_Char;
private Type typeof_System_SByte;
private Type typeof_System_Byte;
private Type typeof_System_Int16;
private Type typeof_System_UInt16;
private Type typeof_System_Int32;
private Type typeof_System_UInt32;
private Type typeof_System_Int64;
private Type typeof_System_UInt64;
private Type typeof_System_Single;
private Type typeof_System_Double;
private Type typeof_System_String;
private Type typeof_System_IntPtr;
private Type typeof_System_UIntPtr;
private Type typeof_System_TypedReference;
private Type typeof_System_Type;
private Type typeof_System_Array;
private Type typeof_System_DateTime;
private Type typeof_System_DBNull;
private Type typeof_System_Decimal;
private Type typeof_System_NonSerializedAttribute;
private Type typeof_System_SerializableAttribute;
private Type typeof_System_AttributeUsageAttribute;
private Type typeof_System_Reflection_AssemblyCultureAttribute;
private Type typeof_System_Runtime_InteropServices_DllImportAttribute;
private Type typeof_System_Runtime_InteropServices_FieldOffsetAttribute;
private Type typeof_System_Runtime_InteropServices_InAttribute;
private Type typeof_System_Runtime_InteropServices_MarshalAsAttribute;
private Type typeof_System_Runtime_InteropServices_UnmanagedType;
private Type typeof_System_Runtime_InteropServices_VarEnum;
private Type typeof_System_Runtime_InteropServices_OutAttribute;
private Type typeof_System_Runtime_InteropServices_StructLayoutAttribute;
private Type typeof_System_Runtime_InteropServices_OptionalAttribute;
private Type typeof_System_Runtime_InteropServices_PreserveSigAttribute;
private Type typeof_System_Runtime_InteropServices_ComImportAttribute;
private Type typeof_System_Runtime_CompilerServices_DecimalConstantAttribute;
private Type typeof_System_Runtime_CompilerServices_SpecialNameAttribute;
private Type typeof_System_Runtime_CompilerServices_MethodImplAttribute;
private Type typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute;
private Type typeof_System_Reflection_AssemblyCopyrightAttribute;
private Type typeof_System_Reflection_AssemblyTrademarkAttribute;
private Type typeof_System_Reflection_AssemblyProductAttribute;
private Type typeof_System_Reflection_AssemblyCompanyAttribute;
private Type typeof_System_Reflection_AssemblyDescriptionAttribute;
private Type typeof_System_Reflection_AssemblyTitleAttribute;
private Type typeof_System_Reflection_AssemblyInformationalVersionAttribute;
private Type typeof_System_Reflection_AssemblyFileVersionAttribute;
private Type typeof_System_Security_Permissions_CodeAccessSecurityAttribute;
private Type typeof_System_Security_Permissions_HostProtectionAttribute;
private Type typeof_System_Security_Permissions_PermissionSetAttribute;
private Type typeof_System_Security_Permissions_SecurityAction;
private List<ResolveEventHandler> resolvers = new List<ResolveEventHandler>();
internal Assembly Mscorlib
{
get { return Load("mscorlib"); }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1774" endline="1785">
<![CDATA[
internal int FindOrAddRecord(int str)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i] == str)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i] == str)
{
return i + 1;
}
}
return AddRecord(str);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2369" endline="2381">
<![CDATA[
internal int FindFirstByOwner(int token)
{
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
return -1;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1786" endline="1798">
<![CDATA[
}
sealed class TypeSpecTable
{
internal const int Index = 0x1B;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1799" endline="1806">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(2)
.WriteMemberForwarded()
.WriteStringIndex()
.WriteModuleRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteField()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1929" endline="1962">
<![CDATA[
}
sealed class AssemblyTable
{
internal const int Index = 0x20;
internal struct Record
{
internal int HashAlgId;
internal ushort MajorVersion;
internal ushort MinorVersion;
internal ushort BuildNumber;
internal ushort RevisionNumber;
internal int Flags;
internal int PublicKey;
internal int Name;
internal int Culture;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].HashAlgId = mr.ReadInt32();
records[i].MajorVersion = mr.ReadUInt16();
records[i].MinorVersion = mr.ReadUInt16();
records[i].BuildNumber = mr.ReadUInt16();
records[i].RevisionNumber = mr.ReadUInt16();
records[i].Flags = mr.ReadInt32();
records[i].PublicKey = mr.ReadBlobIndex();
records[i].Name = mr.ReadStringIndex();
records[i].Culture = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].HashAlgId = mr.ReadInt32();
records[i].MajorVersion = mr.ReadUInt16();
records[i].MinorVersion = mr.ReadUInt16();
records[i].BuildNumber = mr.ReadUInt16();
records[i].RevisionNumber = mr.ReadUInt16();
records[i].Flags = mr.ReadInt32();
records[i].PublicKey = mr.ReadBlobIndex();
records[i].Name = mr.ReadStringIndex();
records[i].Culture = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1963" endline="1978">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].HashAlgId);
mw.Write(records[i].MajorVersion);
mw.Write(records[i].MinorVersion);
mw.Write(records[i].BuildNumber);
mw.Write(records[i].RevisionNumber);
mw.Write(records[i].Flags);
mw.WriteBlobIndex(records[i].PublicKey);
mw.WriteStringIndex(records[i].Name);
mw.WriteStringIndex(records[i].Culture);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].HashAlgId);
mw.Write(records[i].MajorVersion);
mw.Write(records[i].MinorVersion);
mw.Write(records[i].BuildNumber);
mw.Write(records[i].RevisionNumber);
mw.Write(records[i].Flags);
mw.WriteBlobIndex(records[i].PublicKey);
mw.WriteStringIndex(records[i].Name);
mw.WriteStringIndex(records[i].Culture);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1929" endline="1962">
<![CDATA[
}
sealed class AssemblyTable
{
internal const int Index = 0x20;
internal struct Record
{
internal int HashAlgId;
internal ushort MajorVersion;
internal ushort MinorVersion;
internal ushort BuildNumber;
internal ushort RevisionNumber;
internal int Flags;
internal int PublicKey;
internal int Name;
internal int Culture;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].HashAlgId = mr.ReadInt32();
records[i].MajorVersion = mr.ReadUInt16();
records[i].MinorVersion = mr.ReadUInt16();
records[i].BuildNumber = mr.ReadUInt16();
records[i].RevisionNumber = mr.ReadUInt16();
records[i].Flags = mr.ReadInt32();
records[i].PublicKey = mr.ReadBlobIndex();
records[i].Name = mr.ReadStringIndex();
records[i].Culture = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].HashAlgId = mr.ReadInt32();
records[i].MajorVersion = mr.ReadUInt16();
records[i].MinorVersion = mr.ReadUInt16();
records[i].BuildNumber = mr.ReadUInt16();
records[i].RevisionNumber = mr.ReadUInt16();
records[i].Flags = mr.ReadInt32();
records[i].PublicKey = mr.ReadBlobIndex();
records[i].Name = mr.ReadStringIndex();
records[i].Culture = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2044" endline="2059">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MajorVersion);
mw.Write(records[i].MinorVersion);
mw.Write(records[i].BuildNumber);
mw.Write(records[i].RevisionNumber);
mw.Write(records[i].Flags);
mw.WriteBlobIndex(records[i].PublicKeyOrToken);
mw.WriteStringIndex(records[i].Name);
mw.WriteStringIndex(records[i].Culture);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MajorVersion);
mw.Write(records[i].MinorVersion);
mw.Write(records[i].BuildNumber);
mw.Write(records[i].RevisionNumber);
mw.Write(records[i].Flags);
mw.WriteBlobIndex(records[i].PublicKeyOrToken);
mw.WriteStringIndex(records[i].Name);
mw.WriteStringIndex(records[i].Culture);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1963" endline="1978">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].HashAlgId);
mw.Write(records[i].MajorVersion);
mw.Write(records[i].MinorVersion);
mw.Write(records[i].BuildNumber);
mw.Write(records[i].RevisionNumber);
mw.Write(records[i].Flags);
mw.WriteBlobIndex(records[i].PublicKey);
mw.WriteStringIndex(records[i].Name);
mw.WriteStringIndex(records[i].Culture);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].HashAlgId);
mw.Write(records[i].MajorVersion);
mw.Write(records[i].MinorVersion);
mw.Write(records[i].BuildNumber);
mw.Write(records[i].RevisionNumber);
mw.Write(records[i].Flags);
mw.WriteBlobIndex(records[i].PublicKey);
mw.WriteStringIndex(records[i].Name);
mw.WriteStringIndex(records[i].Culture);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2028" endline="2043">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MajorVersion = mr.ReadUInt16();
records[i].MinorVersion = mr.ReadUInt16();
records[i].BuildNumber = mr.ReadUInt16();
records[i].RevisionNumber = mr.ReadUInt16();
records[i].Flags = mr.ReadInt32();
records[i].PublicKeyOrToken = mr.ReadBlobIndex();
records[i].Name = mr.ReadStringIndex();
records[i].Culture = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MajorVersion = mr.ReadUInt16();
records[i].MinorVersion = mr.ReadUInt16();
records[i].BuildNumber = mr.ReadUInt16();
records[i].RevisionNumber = mr.ReadUInt16();
records[i].Flags = mr.ReadInt32();
records[i].PublicKeyOrToken = mr.ReadBlobIndex();
records[i].Name = mr.ReadStringIndex();
records[i].Culture = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(16)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2028" endline="2043">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MajorVersion = mr.ReadUInt16();
records[i].MinorVersion = mr.ReadUInt16();
records[i].BuildNumber = mr.ReadUInt16();
records[i].RevisionNumber = mr.ReadUInt16();
records[i].Flags = mr.ReadInt32();
records[i].PublicKeyOrToken = mr.ReadBlobIndex();
records[i].Name = mr.ReadStringIndex();
records[i].Culture = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MajorVersion = mr.ReadUInt16();
records[i].MinorVersion = mr.ReadUInt16();
records[i].BuildNumber = mr.ReadUInt16();
records[i].RevisionNumber = mr.ReadUInt16();
records[i].Flags = mr.ReadInt32();
records[i].PublicKeyOrToken = mr.ReadBlobIndex();
records[i].Name = mr.ReadStringIndex();
records[i].Culture = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2044" endline="2059">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MajorVersion);
mw.Write(records[i].MinorVersion);
mw.Write(records[i].BuildNumber);
mw.Write(records[i].RevisionNumber);
mw.Write(records[i].Flags);
mw.WriteBlobIndex(records[i].PublicKeyOrToken);
mw.WriteStringIndex(records[i].Name);
mw.WriteStringIndex(records[i].Culture);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MajorVersion);
mw.Write(records[i].MinorVersion);
mw.Write(records[i].BuildNumber);
mw.Write(records[i].RevisionNumber);
mw.Write(records[i].Flags);
mw.WriteBlobIndex(records[i].PublicKeyOrToken);
mw.WriteStringIndex(records[i].Name);
mw.WriteStringIndex(records[i].Culture);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(12)
.WriteBlobIndex()
.WriteStringIndex()
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteStringIndex()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2112" endline="2137">
<![CDATA[
}
sealed class ExportedTypeTable
{
internal const int Index = 0x27;
internal struct Record
{
internal int Flags;
internal int TypeDefId;
internal int TypeName;
internal int TypeNamespace;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2138" endline="2149">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(8)
.WriteStringIndex()
.WriteImplementation()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteTypeDef()
.WriteTypeDef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.AddFixed(4)
.WriteTypeOrMethodDef()
.WriteStringIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368">
<![CDATA[
internal int[] GetIndexFixup()
{
int[] array = new int[rowCount];
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
return array;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59">
<![CDATA[
}
public sealed override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = GetMethodInfo().GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368">
<![CDATA[
internal int[] GetIndexFixup()
{
int[] array = new int[rowCount];
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
return array;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79">
<![CDATA[
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = method.GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368">
<![CDATA[
internal int[] GetIndexFixup()
{
int[] array = new int[rowCount];
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
return array;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368">
<![CDATA[
internal int[] GetIndexFixup()
{
int[] array = new int[rowCount];
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
return array;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368">
<![CDATA[
internal int[] GetIndexFixup()
{
int[] array = new int[rowCount];
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
return array;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="851" endline="860">
<![CDATA[
internal string[] GetManifestResourceNames()
{
string[] names = new string[ManifestResource.records.Length];
for (int i = 0; i < ManifestResource.records.Length; i++)
{
names[i] = GetString(ManifestResource.records[i].Name);
}
for (int i = 0; i < ManifestResource.records.Length; i++)
{
names[i] = GetString(ManifestResource.records[i].Name);
}
return names;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368">
<![CDATA[
internal int[] GetIndexFixup()
{
int[] array = new int[rowCount];
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
return array;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368">
<![CDATA[
internal int[] GetIndexFixup()
{
int[] array = new int[rowCount];
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
return array;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
FieldInfo[] fields = type.__GetDeclaredFields();
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
return fields;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368">
<![CDATA[
internal int[] GetIndexFixup()
{
int[] array = new int[rowCount];
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
return array;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
Type[] interfaces = type.__GetDeclaredInterfaces();
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
return interfaces;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368">
<![CDATA[
internal int[] GetIndexFixup()
{
int[] array = new int[rowCount];
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
return array;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
MethodBase[] methods = type.__GetDeclaredMethods();
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
return methods;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368">
<![CDATA[
internal int[] GetIndexFixup()
{
int[] array = new int[rowCount];
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
return array;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229">
<![CDATA[
public override EventInfo[] __GetDeclaredEvents()
{
EventInfo[] events = type.__GetDeclaredEvents();
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
return events;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368">
<![CDATA[
internal int[] GetIndexFixup()
{
int[] array = new int[rowCount];
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
for (int i = 0; i < rowCount; i++)
{
array[records[i].unsortedIndex] = i;
}
return array;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
PropertyInfo[] properties = type.__GetDeclaredProperties();
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
return properties;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2369" endline="2381">
<![CDATA[
internal int FindFirstByOwner(int token)
{
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
return -1;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="861" endline="872">
<![CDATA[
internal ManifestResourceInfo GetManifestResourceInfo(string resourceName)
{
for (int i = 0; i < ManifestResource.records.Length; i++)
{
if (resourceName == GetString(ManifestResource.records[i].Name))
{
return new ManifestResourceInfo(this, i);
}
}
for (int i = 0; i < ManifestResource.records.Length; i++)
{
if (resourceName == GetString(ManifestResource.records[i].Name))
{
return new ManifestResourceInfo(this, i);
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2369" endline="2381">
<![CDATA[
internal int FindFirstByOwner(int token)
{
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
for (int i = 0; i < records.Length; i++)
{
if (records[i].Owner == token)
{
return i;
}
}
return -1;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="175" endline="186">
<![CDATA[
private int GetModuleIndex(string name)
{
for (int i = 0; i < manifestModule.File.records.Length; i++)
{
if (name.Equals(manifestModule.GetString(manifestModule.File.records[i].Name), StringComparison.InvariantCultureIgnoreCase))
{
return i;
}
}
for (int i = 0; i < manifestModule.File.records.Length; i++)
{
if (name.Equals(manifestModule.GetString(manifestModule.File.records[i].Name), StringComparison.InvariantCultureIgnoreCase))
{
return i;
}
}
return -1;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteMethodDefOrRef()
.WriteBlobIndex()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456">
<![CDATA[
public override MemberInfo Member
{
get
{
return method.Module.ResolveMethod(method.MetadataToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479">
<![CDATA[
protected override int GetRowSize(RowSizeCalc rsc)
{
return rsc
.WriteGenericParam()
.WriteTypeDefOrRef()
.Value;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="241" endline="253">
<![CDATA[
internal static int GetHashCode(Type[][] types)
{
int h = 0;
if (types != null)
{
foreach (Type[] array in types)
{
h ^= GetHashCode(array);
}
foreach (Type[] array in types)
{
h ^= GetHashCode(array);
}
}
return h;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="84" endline="96">
<![CDATA[
public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, Signature.PROPERTY);
sig.returnType = returnType;
sig.returnTypeOptionalCustomModifiers = Type.EmptyTypes;
sig.returnTypeRequiredCustomModifiers = Type.EmptyTypes;
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
return sig;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="241" endline="253">
<![CDATA[
internal static int GetHashCode(Type[][] types)
{
int h = 0;
if (types != null)
{
foreach (Type[] array in types)
{
h ^= GetHashCode(array);
}
foreach (Type[] array in types)
{
h ^= GetHashCode(array);
}
}
return h;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="140" endline="151">
<![CDATA[
public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, 0);
sig.returnType = returnType;
sig.callingConvention = CallingConventions.Standard;
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
return sig;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="241" endline="253">
<![CDATA[
internal static int GetHashCode(Type[][] types)
{
int h = 0;
if (types != null)
{
foreach (Type[] array in types)
{
h ^= GetHashCode(array);
}
foreach (Type[] array in types)
{
h ^= GetHashCode(array);
}
}
return h;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="191" endline="200">
<![CDATA[
public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="254" endline="266">
<![CDATA[
internal static int GetHashCode(Type[][][] types)
{
int h = 0;
if (types != null)
{
foreach (Type[][] array in types)
{
h ^= GetHashCode(array);
}
foreach (Type[][] array in types)
{
h ^= GetHashCode(array);
}
}
return h;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="84" endline="96">
<![CDATA[
public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, Signature.PROPERTY);
sig.returnType = returnType;
sig.returnTypeOptionalCustomModifiers = Type.EmptyTypes;
sig.returnTypeRequiredCustomModifiers = Type.EmptyTypes;
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
return sig;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="254" endline="266">
<![CDATA[
internal static int GetHashCode(Type[][][] types)
{
int h = 0;
if (types != null)
{
foreach (Type[][] array in types)
{
h ^= GetHashCode(array);
}
foreach (Type[][] array in types)
{
h ^= GetHashCode(array);
}
}
return h;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="140" endline="151">
<![CDATA[
public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, 0);
sig.returnType = returnType;
sig.callingConvention = CallingConventions.Standard;
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
return sig;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="254" endline="266">
<![CDATA[
internal static int GetHashCode(Type[][][] types)
{
int h = 0;
if (types != null)
{
foreach (Type[][] array in types)
{
h ^= GetHashCode(array);
}
foreach (Type[][] array in types)
{
h ^= GetHashCode(array);
}
}
return h;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="191" endline="200">
<![CDATA[
public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59">
<![CDATA[
}
public sealed override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = GetMethodInfo().GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="33" endline="116">
<![CDATA[
}
public abstract PropertyAttributes Attributes { get; }
public abstract bool CanRead { get; }
public abstract bool CanWrite { get; }
public abstract MethodInfo GetGetMethod(bool nonPublic);
public abstract MethodInfo GetSetMethod(bool nonPublic);
public abstract MethodInfo[] GetAccessors(bool nonPublic);
public abstract object GetRawConstantValue();
internal abstract bool IsPublic { get; }
internal abstract bool IsStatic { get; }
internal abstract PropertySignature PropertySignature { get; }
private sealed class ParameterInfoImpl
{
private readonly PropertyInfo property;
private readonly int parameter;
internal ParameterInfoImpl(PropertyInfo property, int parameter)
{
this.property = property;
this.parameter = parameter;
}
public override string Name
{
get { return null; }
}
public override Type ParameterType
{
get { return property.PropertySignature.GetParameter(parameter); }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetOptionalCustomModifiers()
{
return property.PropertySignature.GetOptionalCustomModifiers(parameter);
}
public override Type[] GetRequiredCustomModifiers()
{
return property.PropertySignature.GetRequiredCustomModifiers(parameter);
}
public override MemberInfo Member
{
get { return property; }
}
public override int MetadataToken
{
get { return 0x08000000; }
}
internal override Module Module
{
get { return property.Module; }
}
}
public ParameterInfo[] GetIndexParameters()
{
ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59">
<![CDATA[
}
public sealed override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = GetMethodInfo().GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59">
<![CDATA[
}
public sealed override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = GetMethodInfo().GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59">
<![CDATA[
}
public sealed override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = GetMethodInfo().GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520">
<![CDATA[
private sealed class ParameterInfoImpl
{
private readonly MethodBuilder method;
private readonly int parameter;
internal ParameterInfoImpl(MethodBuilder method, int parameter)
{
this.method = method;
this.parameter = parameter;
}
private ParameterBuilder ParameterBuilder
{
get
{
if (method.parameters != null)
{
foreach (ParameterBuilder pb in method.parameters)
{
if (pb.Position == parameter)
{
return pb;
}
}
}
return null;
}
}
public override string Name
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.Name
}
}
public override Type ParameterType
{
get { return parameter == -1 ? method.returnType
}
public override ParameterAttributes Attributes
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? (ParameterAttributes)pb.Attributes
}
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
{
return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
}
if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
{
return Missing.Value;
}
return null;
}
}
private Type[] GetCustomModifiers(int optOrReq)
{
if (method.modifiers == null || method.modifiers[parameter + 1] == null)
{
return Type.EmptyTypes;
}
return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
}
public override Type[] GetOptionalCustomModifiers()
{
return GetCustomModifiers(0);
}
public override Type[] GetRequiredCustomModifiers()
{
return GetCustomModifiers(1);
}
public override MemberInfo Member
{
get { return method; }
}
public override int MetadataToken
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.PseudoToken
}
}
internal override Module Module
{
get { return method.Module; }
}
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59">
<![CDATA[
}
public sealed override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = GetMethodInfo().GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59">
<![CDATA[
}
public sealed override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = GetMethodInfo().GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
FieldInfo[] fields = type.__GetDeclaredFields();
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
return fields;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59">
<![CDATA[
}
public sealed override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = GetMethodInfo().GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
Type[] interfaces = type.__GetDeclaredInterfaces();
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
return interfaces;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59">
<![CDATA[
}
public sealed override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = GetMethodInfo().GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
MethodBase[] methods = type.__GetDeclaredMethods();
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
return methods;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59">
<![CDATA[
}
public sealed override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = GetMethodInfo().GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229">
<![CDATA[
public override EventInfo[] __GetDeclaredEvents()
{
EventInfo[] events = type.__GetDeclaredEvents();
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
return events;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59">
<![CDATA[
}
public sealed override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = GetMethodInfo().GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
PropertyInfo[] properties = type.__GetDeclaredProperties();
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
return properties;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="52" endline="61">
<![CDATA[
}
internal int Length
{
get
{
if (!frozen)
throw new InvalidOperationException();
return (unalignedlength + 3) & ~3;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="62" endline="75">
<![CDATA[
}
protected abstract void WriteImpl(MetadataWriter mw);
}
abstract class SimpleHeap
{
internal void Freeze()
{
if (frozen)
throw new InvalidOperationException();
frozen = true;
unalignedlength = GetLength();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="76" endline="88">
<![CDATA[
protected abstract int GetLength();
}
sealed class TableHeap
{
internal void Freeze(MetadataWriter mw)
{
if (frozen)
throw new InvalidOperationException();
frozen = true;
unalignedlength = GetLength(mw);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="62" endline="75">
<![CDATA[
}
protected abstract void WriteImpl(MetadataWriter mw);
}
abstract class SimpleHeap
{
internal void Freeze()
{
if (frozen)
throw new InvalidOperationException();
frozen = true;
unalignedlength = GetLength();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="76" endline="88">
<![CDATA[
protected abstract int GetLength();
}
sealed class TableHeap
{
internal void Freeze(MetadataWriter mw)
{
if (frozen)
throw new InvalidOperationException();
frozen = true;
unalignedlength = GetLength(mw);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="162" endline="173">
<![CDATA[
}
sealed class StringHeap
{
private List<string> list = new List<string>();
private Dictionary<string, int> strings = new Dictionary<string, int>();
private int nextOffset;
internal StringHeap()
{
Add("");
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="202" endline="213">
<![CDATA[
}
sealed class UserStringHeap
{
private List<string> list = new List<string>();
private Dictionary<string, int> strings = new Dictionary<string, int>();
private int nextOffset;
internal UserStringHeap()
{
nextOffset = 1;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="162" endline="173">
<![CDATA[
}
sealed class StringHeap
{
private List<string> list = new List<string>();
private Dictionary<string, int> strings = new Dictionary<string, int>();
private int nextOffset;
internal StringHeap()
{
Add("");
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="298" endline="316">
<![CDATA[
}
sealed class BlobHeap
{
private Key[] map = new Key[8179];
private readonly ByteBuffer buf = new ByteBuffer(32);
private struct Key
{
internal Key[] next;
internal int len;
internal int hash;
internal int offset;
}
internal BlobHeap()
{
buf.Write((byte)0);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="193" endline="201">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="290" endline="297">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="193" endline="201">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="115" endline="125">
<![CDATA[
internal void PopulatePropertyAndEventTables()
{
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="193" endline="201">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="126" endline="135">
<![CDATA[
internal void WriteTypeDefTable(MetadataWriter mw)
{
int fieldList = 1;
int methodList = 1;
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="193" endline="201">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144">
<![CDATA[
internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
{
int paramList = 1;
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="193" endline="201">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="145" endline="152">
<![CDATA[
internal void WriteParamTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="193" endline="201">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="153" endline="160">
<![CDATA[
internal void WriteFieldTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="193" endline="201">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
foreach (string str in list)
{
mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
mw.Write((byte)0);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="441" endline="451">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="278" endline="284">
<![CDATA[
internal int Add(Guid guid)
{
Debug.Assert(!frozen);
list.Add(guid);
return list.Count;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="255" endline="261">
<![CDATA[
}
internal override MethodBase BindTypeParameters(Type type)
{
System.Diagnostics.Debug.Assert(methodArgs == null);
return new GenericMethodInstance(declaringType.BindTypeParameters(type), method, null);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="290" endline="297">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="115" endline="125">
<![CDATA[
internal void PopulatePropertyAndEventTables()
{
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="290" endline="297">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="126" endline="135">
<![CDATA[
internal void WriteTypeDefTable(MetadataWriter mw)
{
int fieldList = 1;
int methodList = 1;
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="290" endline="297">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144">
<![CDATA[
internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
{
int paramList = 1;
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="290" endline="297">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="145" endline="152">
<![CDATA[
internal void WriteParamTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="290" endline="297">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="153" endline="160">
<![CDATA[
internal void WriteFieldTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="290" endline="297">
<![CDATA[
protected override void WriteImpl(MetadataWriter mw)
{
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
foreach (Guid guid in list)
{
mw.Write(guid.ToByteArray());
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="441" endline="451">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="340" endline="351">
<![CDATA[
}
sealed class GenericParameterInfoImpl
{
private readonly GenericMethodInstance method;
private readonly ParameterInfo parameterInfo;
internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
{
this.method = method;
this.parameterInfo = parameterInfo;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="523" endline="534">
<![CDATA[
}
sealed class GenericEventInfo
{
private readonly Type typeInstance;
private readonly EventInfo eventInfo;
internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
{
this.typeInstance = typeInstance;
this.eventInfo = eventInfo;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41">
<![CDATA[
internal ResourceModule(Assembly assembly, string scopeName, string location)
{
this.assembly = assembly;
this.scopeName = scopeName;
this.location = location;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="100" endline="291">
<![CDATA[
private readonly int position;
private sealed class DummyModule
{
internal DummyModule()
{
}
public override bool Equals(object obj)
{
throw new InvalidOperationException();
}
public override int GetHashCode()
{
throw new InvalidOperationException();
}
public override string ToString()
{
throw new InvalidOperationException();
}
public override int MDStreamVersion
{
get { throw new InvalidOperationException(); }
}
public override Assembly Assembly
{
get { throw new InvalidOperationException(); }
}
internal override Type GetTypeImpl(string typeName)
{
throw new InvalidOperationException();
}
internal override void GetTypesImpl(List<Type> list)
{
throw new InvalidOperationException();
}
public override string FullyQualifiedName
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override Guid ModuleVersionId
{
get { throw new InvalidOperationException(); }
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override string ResolveString(int metadataToken)
{
throw new InvalidOperationException();
}
public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
{
throw new InvalidOperationException();
}
public override string ScopeName
{
get { throw new InvalidOperationException(); }
}
public override AssemblyName[] __GetReferencedAssemblies()
{
throw new InvalidOperationException();
}
internal override Type GetModuleType()
{
throw new InvalidOperationException();
}
internal override ByteReader GetBlob(int blobIndex)
{
throw new InvalidOperationException();
}
}
internal static Type Make(int position)
{
return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
}
private UnboundGenericMethodParameter(int position)
{
this.position = position;
}
public override bool Equals(object obj)
{
UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
return other != null && other.position == position;
}
public override int GetHashCode()
{
return position;
}
public override string Namespace
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override int MetadataToken
{
get { throw new InvalidOperationException(); }
}
public override Module Module
{
get { return module; }
}
public override int GenericParameterPosition
{
get { return position; }
}
public override Type DeclaringType
{
get { return null; }
}
public override MethodBase DeclaringMethod
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetGenericParameterConstraints()
{
throw new InvalidOperationException();
}
public override GenericParameterAttributes GenericParameterAttributes
{
get { throw new InvalidOperationException(); }
}
internal override Type BindTypeParameters(IGenericBinder binder)
{
return binder.BindMethodParameter(this);
}
}
sealed class GenericTypeParameter
{
private readonly ModuleReader module;
private readonly int index;
internal GenericTypeParameter(ModuleReader module, int index)
{
this.module = module;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="95" endline="101">
<![CDATA[
public void SetLocalSymInfo(string name, int startOffset, int endOffset)
{
this.name = name;
this.startOffset = startOffset;
this.endOffset = endOffset;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39">
<![CDATA[
internal LocalVariableInfo(int index, Type type, bool pinned)
{
this.index = index;
this.type = type;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="330" endline="340">
<![CDATA[
private static bool ParsePublicKeyToken(string str, out string publicKeyToken)
{
if (str == null)
{
publicKeyToken = null;
return false;
}
publicKeyToken = str.ToLowerInvariant();
return true;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="37" endline="58">
<![CDATA[
public abstract Type[] GetTypes();
public abstract string FullName { get; }
public abstract AssemblyName GetName();
public abstract string ImageRuntimeVersion { get; }
public abstract Module ManifestModule { get; }
public abstract MethodInfo EntryPoint { get; }
public abstract string Location { get; }
public abstract AssemblyName[] GetReferencedAssemblies();
public abstract Module[] GetModules(bool getResourceModules);
public abstract Module[] GetLoadedModules(bool getResourceModules);
public abstract Module GetModule(string name);
public abstract string[] GetManifestResourceNames();
public abstract ManifestResourceInfo GetManifestResourceInfo(string resourceName);
public abstract System.IO.Stream GetManifestResourceStream(string resourceName);
internal abstract Type GetTypeImpl(string typeName);
public Module[] GetModules()
{
return GetModules(true);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="126" endline="133">
<![CDATA[
}
internal uint StrongNameSignatureLength
{
get
{
return strongNameSignatureLength;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="37" endline="58">
<![CDATA[
public abstract Type[] GetTypes();
public abstract string FullName { get; }
public abstract AssemblyName GetName();
public abstract string ImageRuntimeVersion { get; }
public abstract Module ManifestModule { get; }
public abstract MethodInfo EntryPoint { get; }
public abstract string Location { get; }
public abstract AssemblyName[] GetReferencedAssemblies();
public abstract Module[] GetModules(bool getResourceModules);
public abstract Module[] GetLoadedModules(bool getResourceModules);
public abstract Module GetModule(string name);
public abstract string[] GetManifestResourceNames();
public abstract ManifestResourceInfo GetManifestResourceInfo(string resourceName);
public abstract System.IO.Stream GetManifestResourceStream(string resourceName);
internal abstract Type GetTypeImpl(string typeName);
public Module[] GetModules()
{
return GetModules(true);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="37" endline="58">
<![CDATA[
public abstract Type[] GetTypes();
public abstract string FullName { get; }
public abstract AssemblyName GetName();
public abstract string ImageRuntimeVersion { get; }
public abstract Module ManifestModule { get; }
public abstract MethodInfo EntryPoint { get; }
public abstract string Location { get; }
public abstract AssemblyName[] GetReferencedAssemblies();
public abstract Module[] GetModules(bool getResourceModules);
public abstract Module[] GetLoadedModules(bool getResourceModules);
public abstract Module GetModule(string name);
public abstract string[] GetManifestResourceNames();
public abstract ManifestResourceInfo GetManifestResourceInfo(string resourceName);
public abstract System.IO.Stream GetManifestResourceStream(string resourceName);
internal abstract Type GetTypeImpl(string typeName);
public Module[] GetModules()
{
return GetModules(true);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="37" endline="58">
<![CDATA[
public abstract Type[] GetTypes();
public abstract string FullName { get; }
public abstract AssemblyName GetName();
public abstract string ImageRuntimeVersion { get; }
public abstract Module ManifestModule { get; }
public abstract MethodInfo EntryPoint { get; }
public abstract string Location { get; }
public abstract AssemblyName[] GetReferencedAssemblies();
public abstract Module[] GetModules(bool getResourceModules);
public abstract Module[] GetLoadedModules(bool getResourceModules);
public abstract Module GetModule(string name);
public abstract string[] GetManifestResourceNames();
public abstract ManifestResourceInfo GetManifestResourceInfo(string resourceName);
public abstract System.IO.Stream GetManifestResourceStream(string resourceName);
internal abstract Type GetTypeImpl(string typeName);
public Module[] GetModules()
{
return GetModules(true);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="37" endline="58">
<![CDATA[
public abstract Type[] GetTypes();
public abstract string FullName { get; }
public abstract AssemblyName GetName();
public abstract string ImageRuntimeVersion { get; }
public abstract Module ManifestModule { get; }
public abstract MethodInfo EntryPoint { get; }
public abstract string Location { get; }
public abstract AssemblyName[] GetReferencedAssemblies();
public abstract Module[] GetModules(bool getResourceModules);
public abstract Module[] GetLoadedModules(bool getResourceModules);
public abstract Module GetModule(string name);
public abstract string[] GetManifestResourceNames();
public abstract ManifestResourceInfo GetManifestResourceInfo(string resourceName);
public abstract System.IO.Stream GetManifestResourceStream(string resourceName);
internal abstract Type GetTypeImpl(string typeName);
public Module[] GetModules()
{
return GetModules(true);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="59" endline="78">
<![CDATA[
#else
if (runningOnMono)
{
#if MONO
return new MdbWriter(moduleBuilder);
#else
throw new NotSupportedException("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols.");
#endif
}
else
{
return new PdbWriter(moduleBuilder);
}
#endif
}
internal static byte[] GetDebugInfo(ISymbolWriterImpl writer, ref IMAGE_DEBUG_DIRECTORY idd)
{
return writer.GetDebugInfo(ref idd);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="37" endline="58">
<![CDATA[
public abstract Type[] GetTypes();
public abstract string FullName { get; }
public abstract AssemblyName GetName();
public abstract string ImageRuntimeVersion { get; }
public abstract Module ManifestModule { get; }
public abstract MethodInfo EntryPoint { get; }
public abstract string Location { get; }
public abstract AssemblyName[] GetReferencedAssemblies();
public abstract Module[] GetModules(bool getResourceModules);
public abstract Module[] GetLoadedModules(bool getResourceModules);
public abstract Module GetModule(string name);
public abstract string[] GetManifestResourceNames();
public abstract ManifestResourceInfo GetManifestResourceInfo(string resourceName);
public abstract System.IO.Stream GetManifestResourceStream(string resourceName);
internal abstract Type GetTypeImpl(string typeName);
public Module[] GetModules()
{
return GetModules(true);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="59" endline="147">
<![CDATA[
}
}
public enum AssemblyComparisonResult
{
Unknown = 0,
EquivalentFullMatch = 1,
EquivalentWeakNamed = 2,
EquivalentFXUnified = 3,
EquivalentUnified = 4,
NonEquivalentVersion = 5,
NonEquivalent = 6,
EquivalentPartialMatch = 7,
EquivalentPartialWeakNamed = 8,
EquivalentPartialUnified = 9,
EquivalentPartialFXUnified = 10,
NonEquivalentPartialVersion = 11,
}
public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args);
public sealed class Universe
{
internal readonly Dictionary<Type, Type> canonicalizedTypes = new Dictionary<Type, Type>();
private readonly List<Assembly> assemblies = new List<Assembly>();
private readonly List<AssemblyBuilder> dynamicAssemblies = new List<AssemblyBuilder>();
private readonly Dictionary<string, Assembly> assembliesByName = new Dictionary<string, Assembly>();
private readonly Dictionary<System.Type, Type> importedTypes = new Dictionary<System.Type, Type>();
private Type typeof_System_Object;
private Type typeof_System_ValueType;
private Type typeof_System_Enum;
private Type typeof_System_Void;
private Type typeof_System_Boolean;
private Type typeof_System_Char;
private Type typeof_System_SByte;
private Type typeof_System_Byte;
private Type typeof_System_Int16;
private Type typeof_System_UInt16;
private Type typeof_System_Int32;
private Type typeof_System_UInt32;
private Type typeof_System_Int64;
private Type typeof_System_UInt64;
private Type typeof_System_Single;
private Type typeof_System_Double;
private Type typeof_System_String;
private Type typeof_System_IntPtr;
private Type typeof_System_UIntPtr;
private Type typeof_System_TypedReference;
private Type typeof_System_Type;
private Type typeof_System_Array;
private Type typeof_System_DateTime;
private Type typeof_System_DBNull;
private Type typeof_System_Decimal;
private Type typeof_System_NonSerializedAttribute;
private Type typeof_System_SerializableAttribute;
private Type typeof_System_AttributeUsageAttribute;
private Type typeof_System_Reflection_AssemblyCultureAttribute;
private Type typeof_System_Runtime_InteropServices_DllImportAttribute;
private Type typeof_System_Runtime_InteropServices_FieldOffsetAttribute;
private Type typeof_System_Runtime_InteropServices_InAttribute;
private Type typeof_System_Runtime_InteropServices_MarshalAsAttribute;
private Type typeof_System_Runtime_InteropServices_UnmanagedType;
private Type typeof_System_Runtime_InteropServices_VarEnum;
private Type typeof_System_Runtime_InteropServices_OutAttribute;
private Type typeof_System_Runtime_InteropServices_StructLayoutAttribute;
private Type typeof_System_Runtime_InteropServices_OptionalAttribute;
private Type typeof_System_Runtime_InteropServices_PreserveSigAttribute;
private Type typeof_System_Runtime_InteropServices_ComImportAttribute;
private Type typeof_System_Runtime_CompilerServices_DecimalConstantAttribute;
private Type typeof_System_Runtime_CompilerServices_SpecialNameAttribute;
private Type typeof_System_Runtime_CompilerServices_MethodImplAttribute;
private Type typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute;
private Type typeof_System_Reflection_AssemblyCopyrightAttribute;
private Type typeof_System_Reflection_AssemblyTrademarkAttribute;
private Type typeof_System_Reflection_AssemblyProductAttribute;
private Type typeof_System_Reflection_AssemblyCompanyAttribute;
private Type typeof_System_Reflection_AssemblyDescriptionAttribute;
private Type typeof_System_Reflection_AssemblyTitleAttribute;
private Type typeof_System_Reflection_AssemblyInformationalVersionAttribute;
private Type typeof_System_Reflection_AssemblyFileVersionAttribute;
private Type typeof_System_Security_Permissions_CodeAccessSecurityAttribute;
private Type typeof_System_Security_Permissions_HostProtectionAttribute;
private Type typeof_System_Security_Permissions_PermissionSetAttribute;
private Type typeof_System_Security_Permissions_SecurityAction;
private List<ResolveEventHandler> resolvers = new List<ResolveEventHandler>();
internal Assembly Mscorlib
{
get { return Load("mscorlib"); }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="37" endline="58">
<![CDATA[
public abstract Type[] GetTypes();
public abstract string FullName { get; }
public abstract AssemblyName GetName();
public abstract string ImageRuntimeVersion { get; }
public abstract Module ManifestModule { get; }
public abstract MethodInfo EntryPoint { get; }
public abstract string Location { get; }
public abstract AssemblyName[] GetReferencedAssemblies();
public abstract Module[] GetModules(bool getResourceModules);
public abstract Module[] GetLoadedModules(bool getResourceModules);
public abstract Module GetModule(string name);
public abstract string[] GetManifestResourceNames();
public abstract ManifestResourceInfo GetManifestResourceInfo(string resourceName);
public abstract System.IO.Stream GetManifestResourceStream(string resourceName);
internal abstract Type GetTypeImpl(string typeName);
public Module[] GetModules()
{
return GetModules(true);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="125" endline="139">
<![CDATA[
}
public override Module[] GetLoadedModules(bool getResourceModules)
{
List<Module> list = new List<Module>();
list.Add(manifestModule);
foreach (Module m in externalModules)
{
if (m != null)
{
list.Add(m);
}
}
foreach (Module m in externalModules)
{
if (m != null)
{
list.Add(m);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="92" endline="112">
<![CDATA[
public Type GetType(string typeName, bool throwOnError)
{
TypeNameParser parser = TypeNameParser.Parse(typeName, throwOnError);
if (parser.Error)
{
return null;
}
if (parser.AssemblyName != null)
{
if (throwOnError)
{
throw new ArgumentException("Type names passed to Assembly.GetType() must not specify an assembly.");
}
else
{
return null;
}
}
return parser.Expand(GetTypeImpl(parser.FirstNamePart), this, throwOnError, typeName);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="302" endline="326">
<![CDATA[
public Type GetType(string className, bool throwOnError, bool ignoreCase)
{
if (ignoreCase)
{
throw new NotImplementedException();
}
TypeNameParser parser = TypeNameParser.Parse(className, throwOnError);
if (parser.Error)
{
return null;
}
if (parser.AssemblyName != null)
{
if (throwOnError)
{
throw new ArgumentException("Type names passed to Module.GetType() must not specify an assembly.");
}
else
{
return null;
}
}
return parser.Expand(GetTypeImpl(parser.FirstNamePart), this.Assembly, throwOnError, className);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="44" endline="50">
<![CDATA[
internal EventBuilder(TypeBuilder typeBuilder, string name, EventAttributes attributes, Type eventtype)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.eventtype = typeBuilder.ModuleBuilder.GetTypeTokenForMemberRef(eventtype);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="39" endline="45">
<![CDATA[
internal GenericMethodInstance(Type declaringType, MethodInfo method, Type[] methodArgs)
{
System.Diagnostics.Debug.Assert(!(method is GenericMethodInstance));
this.declaringType = declaringType;
this.method = method;
this.methodArgs = methodArgs;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="41" endline="48">
<![CDATA[
private MethodSignature(Type returnType, Type[] parameterTypes, Type[][][] modifiers, CallingConventions callingConvention, int genericParamCount)
{
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.modifiers = modifiers;
this.callingConvention = callingConvention;
this.genericParamCount = genericParamCount;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="44" endline="51">
<![CDATA[
internal PropertyBuilder(TypeBuilder typeBuilder, string name, PropertyAttributes attributes, PropertySignature sig, bool patchCallingConvention)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.sig = sig;
this.patchCallingConvention = patchCallingConvention;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41">
<![CDATA[
internal ResourceModule(Assembly assembly, string scopeName, string location)
{
this.assembly = assembly;
this.scopeName = scopeName;
this.location = location;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48">
<![CDATA[
internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
{
this.peWriter = peWriter;
this.cliHeader = cliHeader;
this.moduleBuilder = moduleBuilder;
this.strongNameSignatureLength = (uint)strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="39" endline="45">
<![CDATA[
internal AssemblyReader(string location, ModuleReader manifestModule)
{
this.location = location;
this.manifestModule = manifestModule;
externalModules = new Module[manifestModule.File.records.Length];
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="98" endline="112">
<![CDATA[
}
private uint ResourcesRVA
{
get
{
if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386)
{
return (MethodBodiesRVA + MethodBodiesLength + 3) & ~3U;
}
else
{
return (MethodBodiesRVA + MethodBodiesLength + 15) & ~15U;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="188" endline="202">
<![CDATA[
}
private uint ImportHintNameTableRVA
{
get
{
if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386)
{
return (ImportDirectoryRVA + 48 + 15) & ~15U;
}
else
{
return (ImportDirectoryRVA + 48 + 4 + 15) & ~15U;
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="98" endline="112">
<![CDATA[
}
private uint ResourcesRVA
{
get
{
if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386)
{
return (MethodBodiesRVA + MethodBodiesLength + 3) & ~3U;
}
else
{
return (MethodBodiesRVA + MethodBodiesLength + 15) & ~15U;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="203" endline="219">
<![CDATA[
}
internal uint StartupStubRVA
{
get
{
if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_IA64)
{
return (ImportDirectoryRVA + ImportDirectoryLength + 15U) & ~15U;
}
else
{
return 2 + ((ImportDirectoryRVA + ImportDirectoryLength + 3U) & ~3U);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="118" endline="125">
<![CDATA[
}
internal uint StrongNameSignatureRVA
{
get
{
return (ResourcesRVA + ResourcesLength + 3) & ~3U;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="134" endline="141">
<![CDATA[
}
private uint MetadataRVA
{
get
{
return (StrongNameSignatureRVA + StrongNameSignatureLength + 3) & ~3U;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="118" endline="125">
<![CDATA[
}
internal uint StrongNameSignatureRVA
{
get
{
return (ResourcesRVA + ResourcesLength + 3) & ~3U;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="457" endline="466">
<![CDATA[
}
public override int MetadataToken
{
get
{
return (ParamTable.Index << 24) + index + 1;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="126" endline="133">
<![CDATA[
}
internal uint StrongNameSignatureLength
{
get
{
return strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="126" endline="133">
<![CDATA[
}
internal uint StrongNameSignatureLength
{
get
{
return strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="59" endline="78">
<![CDATA[
#else
if (runningOnMono)
{
#if MONO
return new MdbWriter(moduleBuilder);
#else
throw new NotSupportedException("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols.");
#endif
}
else
{
return new PdbWriter(moduleBuilder);
}
#endif
}
internal static byte[] GetDebugInfo(ISymbolWriterImpl writer, ref IMAGE_DEBUG_DIRECTORY idd)
{
return writer.GetDebugInfo(ref idd);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="126" endline="133">
<![CDATA[
}
internal uint StrongNameSignatureLength
{
get
{
return strongNameSignatureLength;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="59" endline="147">
<![CDATA[
}
}
public enum AssemblyComparisonResult
{
Unknown = 0,
EquivalentFullMatch = 1,
EquivalentWeakNamed = 2,
EquivalentFXUnified = 3,
EquivalentUnified = 4,
NonEquivalentVersion = 5,
NonEquivalent = 6,
EquivalentPartialMatch = 7,
EquivalentPartialWeakNamed = 8,
EquivalentPartialUnified = 9,
EquivalentPartialFXUnified = 10,
NonEquivalentPartialVersion = 11,
}
public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args);
public sealed class Universe
{
internal readonly Dictionary<Type, Type> canonicalizedTypes = new Dictionary<Type, Type>();
private readonly List<Assembly> assemblies = new List<Assembly>();
private readonly List<AssemblyBuilder> dynamicAssemblies = new List<AssemblyBuilder>();
private readonly Dictionary<string, Assembly> assembliesByName = new Dictionary<string, Assembly>();
private readonly Dictionary<System.Type, Type> importedTypes = new Dictionary<System.Type, Type>();
private Type typeof_System_Object;
private Type typeof_System_ValueType;
private Type typeof_System_Enum;
private Type typeof_System_Void;
private Type typeof_System_Boolean;
private Type typeof_System_Char;
private Type typeof_System_SByte;
private Type typeof_System_Byte;
private Type typeof_System_Int16;
private Type typeof_System_UInt16;
private Type typeof_System_Int32;
private Type typeof_System_UInt32;
private Type typeof_System_Int64;
private Type typeof_System_UInt64;
private Type typeof_System_Single;
private Type typeof_System_Double;
private Type typeof_System_String;
private Type typeof_System_IntPtr;
private Type typeof_System_UIntPtr;
private Type typeof_System_TypedReference;
private Type typeof_System_Type;
private Type typeof_System_Array;
private Type typeof_System_DateTime;
private Type typeof_System_DBNull;
private Type typeof_System_Decimal;
private Type typeof_System_NonSerializedAttribute;
private Type typeof_System_SerializableAttribute;
private Type typeof_System_AttributeUsageAttribute;
private Type typeof_System_Reflection_AssemblyCultureAttribute;
private Type typeof_System_Runtime_InteropServices_DllImportAttribute;
private Type typeof_System_Runtime_InteropServices_FieldOffsetAttribute;
private Type typeof_System_Runtime_InteropServices_InAttribute;
private Type typeof_System_Runtime_InteropServices_MarshalAsAttribute;
private Type typeof_System_Runtime_InteropServices_UnmanagedType;
private Type typeof_System_Runtime_InteropServices_VarEnum;
private Type typeof_System_Runtime_InteropServices_OutAttribute;
private Type typeof_System_Runtime_InteropServices_StructLayoutAttribute;
private Type typeof_System_Runtime_InteropServices_OptionalAttribute;
private Type typeof_System_Runtime_InteropServices_PreserveSigAttribute;
private Type typeof_System_Runtime_InteropServices_ComImportAttribute;
private Type typeof_System_Runtime_CompilerServices_DecimalConstantAttribute;
private Type typeof_System_Runtime_CompilerServices_SpecialNameAttribute;
private Type typeof_System_Runtime_CompilerServices_MethodImplAttribute;
private Type typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute;
private Type typeof_System_Reflection_AssemblyCopyrightAttribute;
private Type typeof_System_Reflection_AssemblyTrademarkAttribute;
private Type typeof_System_Reflection_AssemblyProductAttribute;
private Type typeof_System_Reflection_AssemblyCompanyAttribute;
private Type typeof_System_Reflection_AssemblyDescriptionAttribute;
private Type typeof_System_Reflection_AssemblyTitleAttribute;
private Type typeof_System_Reflection_AssemblyInformationalVersionAttribute;
private Type typeof_System_Reflection_AssemblyFileVersionAttribute;
private Type typeof_System_Security_Permissions_CodeAccessSecurityAttribute;
private Type typeof_System_Security_Permissions_HostProtectionAttribute;
private Type typeof_System_Security_Permissions_PermissionSetAttribute;
private Type typeof_System_Security_Permissions_SecurityAction;
private List<ResolveEventHandler> resolvers = new List<ResolveEventHandler>();
internal Assembly Mscorlib
{
get { return Load("mscorlib"); }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="134" endline="141">
<![CDATA[
}
private uint MetadataRVA
{
get
{
return (StrongNameSignatureRVA + StrongNameSignatureLength + 3) & ~3U;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="457" endline="466">
<![CDATA[
}
public override int MetadataToken
{
get
{
return (ParamTable.Index << 24) + index + 1;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="152" endline="163">
<![CDATA[
}
internal uint DebugDirectoryLength
{
get
{
if (DebugDirectoryContentsLength != 0)
{
return 28;
}
return 0;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="210" endline="218">
<![CDATA[
public override MethodInfo GetGenericMethodDefinition()
{
if (this.IsGenericMethodDefinition)
{
return this;
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="152" endline="163">
<![CDATA[
}
internal uint DebugDirectoryLength
{
get
{
if (DebugDirectoryContentsLength != 0)
{
return 28;
}
return 0;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="270" endline="279">
<![CDATA[
}
public override Type GetGenericTypeDefinition()
{
if (IsGenericTypeDefinition)
{
return this;
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="188" endline="202">
<![CDATA[
}
private uint ImportHintNameTableRVA
{
get
{
if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386)
{
return (ImportDirectoryRVA + 48 + 15) & ~15U;
}
else
{
return (ImportDirectoryRVA + 48 + 4 + 15) & ~15U;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="203" endline="219">
<![CDATA[
}
internal uint StartupStubRVA
{
get
{
if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_IA64)
{
return (ImportDirectoryRVA + ImportDirectoryLength + 15U) & ~15U;
}
else
{
return 2 + ((ImportDirectoryRVA + ImportDirectoryLength + 3U) & ~3U);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="340" endline="351">
<![CDATA[
}
sealed class GenericParameterInfoImpl
{
private readonly GenericMethodInstance method;
private readonly ParameterInfo parameterInfo;
internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
{
this.method = method;
this.parameterInfo = parameterInfo;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="523" endline="534">
<![CDATA[
}
sealed class GenericEventInfo
{
private readonly Type typeInstance;
private readonly EventInfo eventInfo;
internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
{
this.typeInstance = typeInstance;
this.eventInfo = eventInfo;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41">
<![CDATA[
internal ResourceModule(Assembly assembly, string scopeName, string location)
{
this.assembly = assembly;
this.scopeName = scopeName;
this.location = location;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="100" endline="291">
<![CDATA[
private readonly int position;
private sealed class DummyModule
{
internal DummyModule()
{
}
public override bool Equals(object obj)
{
throw new InvalidOperationException();
}
public override int GetHashCode()
{
throw new InvalidOperationException();
}
public override string ToString()
{
throw new InvalidOperationException();
}
public override int MDStreamVersion
{
get { throw new InvalidOperationException(); }
}
public override Assembly Assembly
{
get { throw new InvalidOperationException(); }
}
internal override Type GetTypeImpl(string typeName)
{
throw new InvalidOperationException();
}
internal override void GetTypesImpl(List<Type> list)
{
throw new InvalidOperationException();
}
public override string FullyQualifiedName
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override Guid ModuleVersionId
{
get { throw new InvalidOperationException(); }
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override string ResolveString(int metadataToken)
{
throw new InvalidOperationException();
}
public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
{
throw new InvalidOperationException();
}
public override string ScopeName
{
get { throw new InvalidOperationException(); }
}
public override AssemblyName[] __GetReferencedAssemblies()
{
throw new InvalidOperationException();
}
internal override Type GetModuleType()
{
throw new InvalidOperationException();
}
internal override ByteReader GetBlob(int blobIndex)
{
throw new InvalidOperationException();
}
}
internal static Type Make(int position)
{
return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
}
private UnboundGenericMethodParameter(int position)
{
this.position = position;
}
public override bool Equals(object obj)
{
UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
return other != null && other.position == position;
}
public override int GetHashCode()
{
return position;
}
public override string Namespace
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override int MetadataToken
{
get { throw new InvalidOperationException(); }
}
public override Module Module
{
get { return module; }
}
public override int GenericParameterPosition
{
get { return position; }
}
public override Type DeclaringType
{
get { return null; }
}
public override MethodBase DeclaringMethod
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetGenericParameterConstraints()
{
throw new InvalidOperationException();
}
public override GenericParameterAttributes GenericParameterAttributes
{
get { throw new InvalidOperationException(); }
}
internal override Type BindTypeParameters(IGenericBinder binder)
{
return binder.BindMethodParameter(this);
}
}
sealed class GenericTypeParameter
{
private readonly ModuleReader module;
private readonly int index;
internal GenericTypeParameter(ModuleReader module, int index)
{
this.module = module;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="95" endline="101">
<![CDATA[
public void SetLocalSymInfo(string name, int startOffset, int endOffset)
{
this.name = name;
this.startOffset = startOffset;
this.endOffset = endOffset;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46">
<![CDATA[
internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.index = index;
this.declaringType = declaringType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="122" endline="130">
<![CDATA[
}
public override ParameterInfo ReturnParameter
{
get
{
PopulateParameters();
return returnParameter;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="122" endline="130">
<![CDATA[
}
public override ParameterInfo ReturnParameter
{
get
{
PopulateParameters();
return returnParameter;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="168" endline="174">
<![CDATA[
}
public override Type[] GetGenericArguments()
{
PopulateGenericArguments();
return Util.Copy(typeArgs);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="122" endline="130">
<![CDATA[
}
public override ParameterInfo ReturnParameter
{
get
{
PopulateParameters();
return returnParameter;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="122" endline="130">
<![CDATA[
}
public override ParameterInfo ReturnParameter
{
get
{
PopulateParameters();
return returnParameter;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="122" endline="130">
<![CDATA[
}
public override ParameterInfo ReturnParameter
{
get
{
PopulateParameters();
return returnParameter;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="213" endline="219">
<![CDATA[
}
public override Type[] GetGenericArguments()
{
PopulateGenericArguments();
return Util.Copy(typeArgs);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="59" endline="78">
<![CDATA[
#else
if (runningOnMono)
{
#if MONO
return new MdbWriter(moduleBuilder);
#else
throw new NotSupportedException("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols.");
#endif
}
else
{
return new PdbWriter(moduleBuilder);
}
#endif
}
internal static byte[] GetDebugInfo(ISymbolWriterImpl writer, ref IMAGE_DEBUG_DIRECTORY idd)
{
return writer.GetDebugInfo(ref idd);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="59" endline="147">
<![CDATA[
}
}
public enum AssemblyComparisonResult
{
Unknown = 0,
EquivalentFullMatch = 1,
EquivalentWeakNamed = 2,
EquivalentFXUnified = 3,
EquivalentUnified = 4,
NonEquivalentVersion = 5,
NonEquivalent = 6,
EquivalentPartialMatch = 7,
EquivalentPartialWeakNamed = 8,
EquivalentPartialUnified = 9,
EquivalentPartialFXUnified = 10,
NonEquivalentPartialVersion = 11,
}
public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args);
public sealed class Universe
{
internal readonly Dictionary<Type, Type> canonicalizedTypes = new Dictionary<Type, Type>();
private readonly List<Assembly> assemblies = new List<Assembly>();
private readonly List<AssemblyBuilder> dynamicAssemblies = new List<AssemblyBuilder>();
private readonly Dictionary<string, Assembly> assembliesByName = new Dictionary<string, Assembly>();
private readonly Dictionary<System.Type, Type> importedTypes = new Dictionary<System.Type, Type>();
private Type typeof_System_Object;
private Type typeof_System_ValueType;
private Type typeof_System_Enum;
private Type typeof_System_Void;
private Type typeof_System_Boolean;
private Type typeof_System_Char;
private Type typeof_System_SByte;
private Type typeof_System_Byte;
private Type typeof_System_Int16;
private Type typeof_System_UInt16;
private Type typeof_System_Int32;
private Type typeof_System_UInt32;
private Type typeof_System_Int64;
private Type typeof_System_UInt64;
private Type typeof_System_Single;
private Type typeof_System_Double;
private Type typeof_System_String;
private Type typeof_System_IntPtr;
private Type typeof_System_UIntPtr;
private Type typeof_System_TypedReference;
private Type typeof_System_Type;
private Type typeof_System_Array;
private Type typeof_System_DateTime;
private Type typeof_System_DBNull;
private Type typeof_System_Decimal;
private Type typeof_System_NonSerializedAttribute;
private Type typeof_System_SerializableAttribute;
private Type typeof_System_AttributeUsageAttribute;
private Type typeof_System_Reflection_AssemblyCultureAttribute;
private Type typeof_System_Runtime_InteropServices_DllImportAttribute;
private Type typeof_System_Runtime_InteropServices_FieldOffsetAttribute;
private Type typeof_System_Runtime_InteropServices_InAttribute;
private Type typeof_System_Runtime_InteropServices_MarshalAsAttribute;
private Type typeof_System_Runtime_InteropServices_UnmanagedType;
private Type typeof_System_Runtime_InteropServices_VarEnum;
private Type typeof_System_Runtime_InteropServices_OutAttribute;
private Type typeof_System_Runtime_InteropServices_StructLayoutAttribute;
private Type typeof_System_Runtime_InteropServices_OptionalAttribute;
private Type typeof_System_Runtime_InteropServices_PreserveSigAttribute;
private Type typeof_System_Runtime_InteropServices_ComImportAttribute;
private Type typeof_System_Runtime_CompilerServices_DecimalConstantAttribute;
private Type typeof_System_Runtime_CompilerServices_SpecialNameAttribute;
private Type typeof_System_Runtime_CompilerServices_MethodImplAttribute;
private Type typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute;
private Type typeof_System_Reflection_AssemblyCopyrightAttribute;
private Type typeof_System_Reflection_AssemblyTrademarkAttribute;
private Type typeof_System_Reflection_AssemblyProductAttribute;
private Type typeof_System_Reflection_AssemblyCompanyAttribute;
private Type typeof_System_Reflection_AssemblyDescriptionAttribute;
private Type typeof_System_Reflection_AssemblyTitleAttribute;
private Type typeof_System_Reflection_AssemblyInformationalVersionAttribute;
private Type typeof_System_Reflection_AssemblyFileVersionAttribute;
private Type typeof_System_Security_Permissions_CodeAccessSecurityAttribute;
private Type typeof_System_Security_Permissions_HostProtectionAttribute;
private Type typeof_System_Security_Permissions_PermissionSetAttribute;
private Type typeof_System_Security_Permissions_SecurityAction;
private List<ResolveEventHandler> resolvers = new List<ResolveEventHandler>();
internal Assembly Mscorlib
{
get { return Load("mscorlib"); }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138">
<![CDATA[
}
public override Type ReturnType
{
get
{
return this.ReturnParameter.ParameterType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="154" endline="162">
<![CDATA[
}
public override bool IsGenericMethodDefinition
{
get
{
PopulateGenericArguments();
return typeArgs.Length > 0;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="168" endline="174">
<![CDATA[
}
public override Type[] GetGenericArguments()
{
PopulateGenericArguments();
return Util.Copy(typeArgs);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="154" endline="162">
<![CDATA[
}
public override bool IsGenericMethodDefinition
{
get
{
PopulateGenericArguments();
return typeArgs.Length > 0;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="213" endline="219">
<![CDATA[
}
public override Type[] GetGenericArguments()
{
PopulateGenericArguments();
return Util.Copy(typeArgs);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="168" endline="174">
<![CDATA[
}
public override Type[] GetGenericArguments()
{
PopulateGenericArguments();
return Util.Copy(typeArgs);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="274" endline="296">
<![CDATA[
}
public abstract int MDStreamVersion { get ;}
public abstract Assembly Assembly { get; }
public abstract string FullyQualifiedName { get; }
public abstract string Name { get; }
public abstract Guid ModuleVersionId { get; }
public abstract Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract string ResolveString(int metadataToken);
public abstract Type[] __ResolveOptionalParameterTypes(int metadataToken);
public abstract string ScopeName { get; }
internal abstract Type GetTypeImpl(string typeName);
internal abstract void GetTypesImpl(List<Type> list);
public Type GetType(string className)
{
return GetType(className, false, false);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="168" endline="174">
<![CDATA[
}
public override Type[] GetGenericArguments()
{
PopulateGenericArguments();
return Util.Copy(typeArgs);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="168" endline="174">
<![CDATA[
}
public override Type[] GetGenericArguments()
{
PopulateGenericArguments();
return Util.Copy(typeArgs);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="213" endline="219">
<![CDATA[
}
public override Type[] GetGenericArguments()
{
PopulateGenericArguments();
return Util.Copy(typeArgs);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="340" endline="351">
<![CDATA[
}
sealed class GenericParameterInfoImpl
{
private readonly GenericMethodInstance method;
private readonly ParameterInfo parameterInfo;
internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
{
this.method = method;
this.parameterInfo = parameterInfo;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="523" endline="534">
<![CDATA[
}
sealed class GenericEventInfo
{
private readonly Type typeInstance;
private readonly EventInfo eventInfo;
internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
{
this.typeInstance = typeInstance;
this.eventInfo = eventInfo;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41">
<![CDATA[
internal ResourceModule(Assembly assembly, string scopeName, string location)
{
this.assembly = assembly;
this.scopeName = scopeName;
this.location = location;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="100" endline="291">
<![CDATA[
private readonly int position;
private sealed class DummyModule
{
internal DummyModule()
{
}
public override bool Equals(object obj)
{
throw new InvalidOperationException();
}
public override int GetHashCode()
{
throw new InvalidOperationException();
}
public override string ToString()
{
throw new InvalidOperationException();
}
public override int MDStreamVersion
{
get { throw new InvalidOperationException(); }
}
public override Assembly Assembly
{
get { throw new InvalidOperationException(); }
}
internal override Type GetTypeImpl(string typeName)
{
throw new InvalidOperationException();
}
internal override void GetTypesImpl(List<Type> list)
{
throw new InvalidOperationException();
}
public override string FullyQualifiedName
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override Guid ModuleVersionId
{
get { throw new InvalidOperationException(); }
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override string ResolveString(int metadataToken)
{
throw new InvalidOperationException();
}
public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
{
throw new InvalidOperationException();
}
public override string ScopeName
{
get { throw new InvalidOperationException(); }
}
public override AssemblyName[] __GetReferencedAssemblies()
{
throw new InvalidOperationException();
}
internal override Type GetModuleType()
{
throw new InvalidOperationException();
}
internal override ByteReader GetBlob(int blobIndex)
{
throw new InvalidOperationException();
}
}
internal static Type Make(int position)
{
return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
}
private UnboundGenericMethodParameter(int position)
{
this.position = position;
}
public override bool Equals(object obj)
{
UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
return other != null && other.position == position;
}
public override int GetHashCode()
{
return position;
}
public override string Namespace
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override int MetadataToken
{
get { throw new InvalidOperationException(); }
}
public override Module Module
{
get { return module; }
}
public override int GenericParameterPosition
{
get { return position; }
}
public override Type DeclaringType
{
get { return null; }
}
public override MethodBase DeclaringMethod
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetGenericParameterConstraints()
{
throw new InvalidOperationException();
}
public override GenericParameterAttributes GenericParameterAttributes
{
get { throw new InvalidOperationException(); }
}
internal override Type BindTypeParameters(IGenericBinder binder)
{
return binder.BindMethodParameter(this);
}
}
sealed class GenericTypeParameter
{
private readonly ModuleReader module;
private readonly int index;
internal GenericTypeParameter(ModuleReader module, int index)
{
this.module = module;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="95" endline="101">
<![CDATA[
public void SetLocalSymInfo(string name, int startOffset, int endOffset)
{
this.name = name;
this.startOffset = startOffset;
this.endOffset = endOffset;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371">
<![CDATA[
}
sealed class ParameterInfoImpl
{
private readonly MethodDefImpl method;
private readonly int position;
private readonly int index;
internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
{
this.method = method;
this.position = position;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="457" endline="466">
<![CDATA[
}
public override int MetadataToken
{
get
{
return (ParamTable.Index << 24) + index + 1;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="274" endline="296">
<![CDATA[
}
public abstract int MDStreamVersion { get ;}
public abstract Assembly Assembly { get; }
public abstract string FullyQualifiedName { get; }
public abstract string Name { get; }
public abstract Guid ModuleVersionId { get; }
public abstract Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract string ResolveString(int metadataToken);
public abstract Type[] __ResolveOptionalParameterTypes(int metadataToken);
public abstract string ScopeName { get; }
internal abstract Type GetTypeImpl(string typeName);
internal abstract void GetTypesImpl(List<Type> list);
public Type GetType(string className)
{
return GetType(className, false, false);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="457" endline="466">
<![CDATA[
}
public override int MetadataToken
{
get
{
return (ParamTable.Index << 24) + index + 1;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="39" endline="46">
<![CDATA[
internal ParameterBuilder(ModuleBuilder moduleBuilder, int sequence, ParameterAttributes attribs, string name)
{
this.moduleBuilder = moduleBuilder;
this.flags = (short)attribs;
this.sequence = (short)sequence;
this.nameIndex = name == null ? 0
this.name = name;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="39" endline="47">
<![CDATA[
internal __StandAloneMethodSig(bool unmanaged, CallingConvention unmanagedCallingConvention, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
{
this.unmanaged = unmanaged;
this.unmanagedCallingConvention = unmanagedCallingConvention;
this.callingConvention = callingConvention;
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.optionalParameterTypes = optionalParameterTypes;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="39" endline="46">
<![CDATA[
internal ParameterBuilder(ModuleBuilder moduleBuilder, int sequence, ParameterAttributes attribs, string name)
{
this.moduleBuilder = moduleBuilder;
this.flags = (short)attribs;
this.sequence = (short)sequence;
this.nameIndex = name == null ? 0
this.name = name;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="62" endline="71">
<![CDATA[
public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues)
{
this.con = con;
this.constructorArgs = constructorArgs;
this.namedProperties = namedProperties;
this.propertyValues = propertyValues;
this.namedFields = namedFields;
this.fieldValues = fieldValues;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="39" endline="46">
<![CDATA[
internal ParameterBuilder(ModuleBuilder moduleBuilder, int sequence, ParameterAttributes attribs, string name)
{
this.moduleBuilder = moduleBuilder;
this.flags = (short)attribs;
this.sequence = (short)sequence;
this.nameIndex = name == null ? 0
this.name = name;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="48" endline="58">
<![CDATA[
private PropertySignature(CallingConventions callingConvention, Type propertyType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeOptionalCustomModifiers, Type[][] parameterTypeRequiredCustomModifiers)
{
this.callingConvention = callingConvention;
this.propertyType = propertyType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
this.parameterTypes = parameterTypes;
this.parameterOptionalCustomModifiers = parameterTypeOptionalCustomModifiers;
this.parameterRequiredCustomModifiers = parameterTypeRequiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="147" endline="156">
<![CDATA[
}
public EventToken GetEventToken()
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = typeBuilder.ModuleBuilder.AllocPseudoToken();
}
return new EventToken(lazyPseudoToken);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="77" endline="85">
<![CDATA[
public ILGenerator GetILGenerator(int streamSize)
{
if (ilgen == null)
{
ilgen = new ILGenerator(typeBuilder.ModuleBuilder, streamSize);
}
return ilgen;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1600" endline="1609">
<![CDATA[
}
internal sealed override int GetModuleBuilderToken()
{
if (token == 0)
{
token = ((ModuleBuilder)elementType.Module).ImportType(this);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1319" endline="1330">
<![CDATA[
}
internal override MethodSignature MethodSignature
{
get
{
if (methodSignature == null)
{
methodSignature = MethodSignature.MakeFromBuilder(returnType, parameterTypes, null, callingConvention, 0);
}
return methodSignature;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2362" endline="2371">
<![CDATA[
}
internal override int GetModuleBuilderToken()
{
if (token == 0)
{
token = ((ModuleBuilder)type.Module).ImportType(this);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58">
<![CDATA[
internal int PseudoToken
{
get
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = moduleBuilder.AllocPseudoToken();
}
return lazyPseudoToken;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="523" endline="533">
<![CDATA[
public override Module ManifestModule
{
get
{
if (pseudoManifestModule == null)
{
pseudoManifestModule = new ManifestModule(this);
}
return pseudoManifestModule;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="134" endline="141">
<![CDATA[
internal void FixupToken(int parameterToken)
{
if (lazyPseudoToken != 0)
{
moduleBuilder.RegisterTokenFixup(lazyPseudoToken, parameterToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="66" endline="74">
<![CDATA[
public void AddOtherMethod(MethodBuilder mdBuilder)
{
if (otherMethods == null)
{
otherMethods = new List<MethodBuilder>();
}
otherMethods.Add(mdBuilder);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="134" endline="141">
<![CDATA[
internal void FixupToken(int parameterToken)
{
if (lazyPseudoToken != 0)
{
moduleBuilder.RegisterTokenFixup(lazyPseudoToken, parameterToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="71" endline="78">
<![CDATA[
public void Dispose()
{
if (!imported)
{
module.stream.Dispose();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="134" endline="141">
<![CDATA[
internal void FixupToken(int parameterToken)
{
if (lazyPseudoToken != 0)
{
moduleBuilder.RegisterTokenFixup(lazyPseudoToken, parameterToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="387" endline="394">
<![CDATA[
public void UsingNamespace(string usingNamespace)
{
if (moduleBuilder.symbolWriter != null)
{
moduleBuilder.symbolWriter.UsingNamespace(usingNamespace);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="44" endline="50">
<![CDATA[
internal EventBuilder(TypeBuilder typeBuilder, string name, EventAttributes attributes, Type eventtype)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.eventtype = typeBuilder.ModuleBuilder.GetTypeTokenForMemberRef(eventtype);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="41" endline="48">
<![CDATA[
private MethodSignature(Type returnType, Type[] parameterTypes, Type[][][] modifiers, CallingConventions callingConvention, int genericParamCount)
{
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.modifiers = modifiers;
this.callingConvention = callingConvention;
this.genericParamCount = genericParamCount;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="44" endline="50">
<![CDATA[
internal EventBuilder(TypeBuilder typeBuilder, string name, EventAttributes attributes, Type eventtype)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.eventtype = typeBuilder.ModuleBuilder.GetTypeTokenForMemberRef(eventtype);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="39" endline="47">
<![CDATA[
internal __StandAloneMethodSig(bool unmanaged, CallingConvention unmanagedCallingConvention, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
{
this.unmanaged = unmanaged;
this.unmanagedCallingConvention = unmanagedCallingConvention;
this.callingConvention = callingConvention;
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.optionalParameterTypes = optionalParameterTypes;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="44" endline="50">
<![CDATA[
internal EventBuilder(TypeBuilder typeBuilder, string name, EventAttributes attributes, Type eventtype)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.eventtype = typeBuilder.ModuleBuilder.GetTypeTokenForMemberRef(eventtype);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="44" endline="51">
<![CDATA[
internal PropertyBuilder(TypeBuilder typeBuilder, string name, PropertyAttributes attributes, PropertySignature sig, bool patchCallingConvention)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.sig = sig;
this.patchCallingConvention = patchCallingConvention;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="44" endline="50">
<![CDATA[
internal EventBuilder(TypeBuilder typeBuilder, string name, EventAttributes attributes, Type eventtype)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.eventtype = typeBuilder.ModuleBuilder.GetTypeTokenForMemberRef(eventtype);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="44" endline="50">
<![CDATA[
internal EventBuilder(TypeBuilder typeBuilder, string name, EventAttributes attributes, Type eventtype)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.eventtype = typeBuilder.ModuleBuilder.GetTypeTokenForMemberRef(eventtype);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="62" endline="71">
<![CDATA[
public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues)
{
this.con = con;
this.constructorArgs = constructorArgs;
this.namedProperties = namedProperties;
this.propertyValues = propertyValues;
this.namedFields = namedFields;
this.fieldValues = fieldValues;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="44" endline="50">
<![CDATA[
internal EventBuilder(TypeBuilder typeBuilder, string name, EventAttributes attributes, Type eventtype)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.eventtype = typeBuilder.ModuleBuilder.GetTypeTokenForMemberRef(eventtype);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="48" endline="58">
<![CDATA[
private PropertySignature(CallingConventions callingConvention, Type propertyType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeOptionalCustomModifiers, Type[][] parameterTypeRequiredCustomModifiers)
{
this.callingConvention = callingConvention;
this.propertyType = propertyType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
this.parameterTypes = parameterTypes;
this.parameterOptionalCustomModifiers = parameterTypeOptionalCustomModifiers;
this.parameterRequiredCustomModifiers = parameterTypeRequiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="66" endline="74">
<![CDATA[
public void AddOtherMethod(MethodBuilder mdBuilder)
{
if (otherMethods == null)
{
otherMethods = new List<MethodBuilder>();
}
otherMethods.Add(mdBuilder);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="66" endline="74">
<![CDATA[
public void AddOtherMethod(MethodBuilder mdBuilder)
{
if (otherMethods == null)
{
otherMethods = new List<MethodBuilder>();
}
otherMethods.Add(mdBuilder);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="66" endline="74">
<![CDATA[
public void AddOtherMethod(MethodBuilder mdBuilder)
{
if (otherMethods == null)
{
otherMethods = new List<MethodBuilder>();
}
otherMethods.Add(mdBuilder);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="523" endline="533">
<![CDATA[
public override Module ManifestModule
{
get
{
if (pseudoManifestModule == null)
{
pseudoManifestModule = new ManifestModule(this);
}
return pseudoManifestModule;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="147" endline="156">
<![CDATA[
}
public EventToken GetEventToken()
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = typeBuilder.ModuleBuilder.AllocPseudoToken();
}
return new EventToken(lazyPseudoToken);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="147" endline="156">
<![CDATA[
}
public EventToken GetEventToken()
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = typeBuilder.ModuleBuilder.AllocPseudoToken();
}
return new EventToken(lazyPseudoToken);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="77" endline="85">
<![CDATA[
public ILGenerator GetILGenerator(int streamSize)
{
if (ilgen == null)
{
ilgen = new ILGenerator(typeBuilder.ModuleBuilder, streamSize);
}
return ilgen;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="147" endline="156">
<![CDATA[
}
public EventToken GetEventToken()
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = typeBuilder.ModuleBuilder.AllocPseudoToken();
}
return new EventToken(lazyPseudoToken);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1600" endline="1609">
<![CDATA[
}
internal sealed override int GetModuleBuilderToken()
{
if (token == 0)
{
token = ((ModuleBuilder)elementType.Module).ImportType(this);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="147" endline="156">
<![CDATA[
}
public EventToken GetEventToken()
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = typeBuilder.ModuleBuilder.AllocPseudoToken();
}
return new EventToken(lazyPseudoToken);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2362" endline="2371">
<![CDATA[
}
internal override int GetModuleBuilderToken()
{
if (token == 0)
{
token = ((ModuleBuilder)type.Module).ImportType(this);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="196" endline="204">
<![CDATA[
private void AddMethodSemantics(short semantics, int methodToken, int propertyToken)
{
MethodSemanticsTable.Record rec = new MethodSemanticsTable.Record();
rec.Semantics = semantics;
rec.Method = methodToken;
rec.Association = propertyToken;
typeBuilder.ModuleBuilder.MethodSemantics.AddRecord(rec);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="431" endline="439">
<![CDATA[
public void AddResourceFile(string name, string fileName, ResourceAttributes attribs)
{
ResourceFile resfile = new ResourceFile();
resfile.Name = name;
resfile.FileName = fileName;
resfile.Attributes = attribs;
resourceFiles.Add(resfile);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="205" endline="225">
<![CDATA[
internal override bool IsPublic
{
get
{
if ((addOnMethod != null && addOnMethod.IsPublic) || (removeOnMethod != null && removeOnMethod.IsPublic) || (fireMethod != null && fireMethod.IsPublic))
{
return true;
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
if (method.IsPublic)
{
return true;
}
}
foreach (MethodBuilder method in otherMethods)
{
if (method.IsPublic)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="226" endline="247">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if ((addOnMethod != null && addOnMethod.IsStatic) || (removeOnMethod != null && removeOnMethod.IsStatic) || (fireMethod != null && fireMethod.IsStatic))
{
return true;
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
if (method.IsStatic)
{
return true;
}
}
foreach (MethodBuilder method in otherMethods)
{
if (method.IsStatic)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="205" endline="225">
<![CDATA[
internal override bool IsPublic
{
get
{
if ((addOnMethod != null && addOnMethod.IsPublic) || (removeOnMethod != null && removeOnMethod.IsPublic) || (fireMethod != null && fireMethod.IsPublic))
{
return true;
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
if (method.IsPublic)
{
return true;
}
}
foreach (MethodBuilder method in otherMethods)
{
if (method.IsPublic)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="230" endline="250">
<![CDATA[
internal override bool IsPublic
{
get
{
if ((getter != null && getter.IsPublic) || (setter != null && setter.IsPublic))
{
return true;
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
if (method.IsPublic)
{
return true;
}
}
foreach (MethodBuilder method in otherMethods)
{
if (method.IsPublic)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="205" endline="225">
<![CDATA[
internal override bool IsPublic
{
get
{
if ((addOnMethod != null && addOnMethod.IsPublic) || (removeOnMethod != null && removeOnMethod.IsPublic) || (fireMethod != null && fireMethod.IsPublic))
{
return true;
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
if (method.IsPublic)
{
return true;
}
}
foreach (MethodBuilder method in otherMethods)
{
if (method.IsPublic)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="251" endline="272">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if ((getter != null && getter.IsStatic) || (setter != null && setter.IsStatic))
{
return true;
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
if (method.IsStatic)
{
return true;
}
}
foreach (MethodBuilder method in otherMethods)
{
if (method.IsStatic)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="226" endline="247">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if ((addOnMethod != null && addOnMethod.IsStatic) || (removeOnMethod != null && removeOnMethod.IsStatic) || (fireMethod != null && fireMethod.IsStatic))
{
return true;
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
if (method.IsStatic)
{
return true;
}
}
foreach (MethodBuilder method in otherMethods)
{
if (method.IsStatic)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="230" endline="250">
<![CDATA[
internal override bool IsPublic
{
get
{
if ((getter != null && getter.IsPublic) || (setter != null && setter.IsPublic))
{
return true;
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
if (method.IsPublic)
{
return true;
}
}
foreach (MethodBuilder method in otherMethods)
{
if (method.IsPublic)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="226" endline="247">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if ((addOnMethod != null && addOnMethod.IsStatic) || (removeOnMethod != null && removeOnMethod.IsStatic) || (fireMethod != null && fireMethod.IsStatic))
{
return true;
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
if (method.IsStatic)
{
return true;
}
}
foreach (MethodBuilder method in otherMethods)
{
if (method.IsStatic)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="251" endline="272">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if ((getter != null && getter.IsStatic) || (setter != null && setter.IsStatic))
{
return true;
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
if (method.IsStatic)
{
return true;
}
}
foreach (MethodBuilder method in otherMethods)
{
if (method.IsStatic)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="39" endline="45">
<![CDATA[
internal GenericMethodInstance(Type declaringType, MethodInfo method, Type[] methodArgs)
{
System.Diagnostics.Debug.Assert(!(method is GenericMethodInstance));
this.declaringType = declaringType;
this.method = method;
this.methodArgs = methodArgs;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="41" endline="48">
<![CDATA[
private MethodSignature(Type returnType, Type[] parameterTypes, Type[][][] modifiers, CallingConventions callingConvention, int genericParamCount)
{
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.modifiers = modifiers;
this.callingConvention = callingConvention;
this.genericParamCount = genericParamCount;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="39" endline="45">
<![CDATA[
internal GenericMethodInstance(Type declaringType, MethodInfo method, Type[] methodArgs)
{
System.Diagnostics.Debug.Assert(!(method is GenericMethodInstance));
this.declaringType = declaringType;
this.method = method;
this.methodArgs = methodArgs;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="44" endline="51">
<![CDATA[
internal PropertyBuilder(TypeBuilder typeBuilder, string name, PropertyAttributes attributes, PropertySignature sig, bool patchCallingConvention)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.sig = sig;
this.patchCallingConvention = patchCallingConvention;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="39" endline="45">
<![CDATA[
internal GenericMethodInstance(Type declaringType, MethodInfo method, Type[] methodArgs)
{
System.Diagnostics.Debug.Assert(!(method is GenericMethodInstance));
this.declaringType = declaringType;
this.method = method;
this.methodArgs = methodArgs;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="46" endline="54">
<![CDATA[
public override bool Equals(object obj)
{
GenericMethodInstance other = obj as GenericMethodInstance;
return other != null
&& other.method.Equals(method)
&& other.declaringType.Equals(declaringType)
&& Util.ArrayEquals(other.methodArgs, methodArgs);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="49" endline="59">
<![CDATA[
public override bool Equals(object obj)
{
MethodSignature other = obj as MethodSignature;
return other != null
&& other.callingConvention == callingConvention
&& other.genericParamCount == genericParamCount
&& other.returnType.Equals(returnType)
&& Util.ArrayEquals(other.parameterTypes, parameterTypes)
&& Util.ArrayEquals(other.modifiers, modifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="46" endline="54">
<![CDATA[
public override bool Equals(object obj)
{
GenericMethodInstance other = obj as GenericMethodInstance;
return other != null
&& other.method.Equals(method)
&& other.declaringType.Equals(declaringType)
&& Util.ArrayEquals(other.methodArgs, methodArgs);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1553" endline="1560">
<![CDATA[
protected bool EqualsHelper(ElementHolderType other)
{
return other != null
&& other.elementType.Equals(elementType)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="46" endline="54">
<![CDATA[
public override bool Equals(object obj)
{
GenericMethodInstance other = obj as GenericMethodInstance;
return other != null
&& other.method.Equals(method)
&& other.declaringType.Equals(declaringType)
&& Util.ArrayEquals(other.methodArgs, methodArgs);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2104" endline="2111">
<![CDATA[
public override bool Equals(object o)
{
GenericTypeInstance gt = o as GenericTypeInstance;
return gt != null && gt.type.Equals(type) && Util.ArrayEquals(gt.args, args)
&& Util.ArrayEquals(gt.requiredCustomModifiers, requiredCustomModifiers)
&& Util.ArrayEquals(gt.optionalCustomModifiers, optionalCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="46" endline="54">
<![CDATA[
public override bool Equals(object obj)
{
GenericMethodInstance other = obj as GenericMethodInstance;
return other != null
&& other.method.Equals(method)
&& other.declaringType.Equals(declaringType)
&& Util.ArrayEquals(other.methodArgs, methodArgs);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="59" endline="67">
<![CDATA[
public override bool Equals(object obj)
{
PropertySignature other = obj as PropertySignature;
return other != null
&& other.propertyType.Equals(propertyType)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="46" endline="54">
<![CDATA[
public override bool Equals(object obj)
{
GenericMethodInstance other = obj as GenericMethodInstance;
return other != null
&& other.method.Equals(method)
&& other.declaringType.Equals(declaringType)
&& Util.ArrayEquals(other.methodArgs, methodArgs);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="51" endline="59">
<![CDATA[
public override bool Equals(object obj)
{
FieldSignature other = obj as FieldSignature;
return other != null
&& other.fieldType.Equals(fieldType)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79">
<![CDATA[
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = method.GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="33" endline="116">
<![CDATA[
}
public abstract PropertyAttributes Attributes { get; }
public abstract bool CanRead { get; }
public abstract bool CanWrite { get; }
public abstract MethodInfo GetGetMethod(bool nonPublic);
public abstract MethodInfo GetSetMethod(bool nonPublic);
public abstract MethodInfo[] GetAccessors(bool nonPublic);
public abstract object GetRawConstantValue();
internal abstract bool IsPublic { get; }
internal abstract bool IsStatic { get; }
internal abstract PropertySignature PropertySignature { get; }
private sealed class ParameterInfoImpl
{
private readonly PropertyInfo property;
private readonly int parameter;
internal ParameterInfoImpl(PropertyInfo property, int parameter)
{
this.property = property;
this.parameter = parameter;
}
public override string Name
{
get { return null; }
}
public override Type ParameterType
{
get { return property.PropertySignature.GetParameter(parameter); }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetOptionalCustomModifiers()
{
return property.PropertySignature.GetOptionalCustomModifiers(parameter);
}
public override Type[] GetRequiredCustomModifiers()
{
return property.PropertySignature.GetRequiredCustomModifiers(parameter);
}
public override MemberInfo Member
{
get { return property; }
}
public override int MetadataToken
{
get { return 0x08000000; }
}
internal override Module Module
{
get { return property.Module; }
}
}
public ParameterInfo[] GetIndexParameters()
{
ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79">
<![CDATA[
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = method.GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79">
<![CDATA[
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = method.GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198">
<![CDATA[
public override Type[] GetGenericArguments()
{
if (methodArgs == null)
{
return method.GetGenericArguments();
}
else
{
return (Type[])methodArgs.Clone();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="478" endline="490">
<![CDATA[
}
internal CustomAttributeBuilder DecodeBlob(Assembly asm)
{
if (blob == null)
{
return this;
}
else
{
return ToData(asm).__ToBuilder();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="77" endline="85">
<![CDATA[
public ILGenerator GetILGenerator(int streamSize)
{
if (ilgen == null)
{
ilgen = new ILGenerator(typeBuilder.ModuleBuilder, streamSize);
}
return ilgen;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210">
<![CDATA[
internal override Type GetGenericMethodArgument(int index)
{
if (methodArgs == null)
{
return method.GetGenericMethodArgument(index);
}
else
{
return methodArgs[index];
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="523" endline="533">
<![CDATA[
public override Module ManifestModule
{
get
{
if (pseudoManifestModule == null)
{
pseudoManifestModule = new ManifestModule(this);
}
return pseudoManifestModule;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="59" endline="78">
<![CDATA[
#else
if (runningOnMono)
{
#if MONO
return new MdbWriter(moduleBuilder);
#else
throw new NotSupportedException("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols.");
#endif
}
else
{
return new PdbWriter(moduleBuilder);
}
#endif
}
internal static byte[] GetDebugInfo(ISymbolWriterImpl writer, ref IMAGE_DEBUG_DIRECTORY idd)
{
return writer.GetDebugInfo(ref idd);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="59" endline="147">
<![CDATA[
}
}
public enum AssemblyComparisonResult
{
Unknown = 0,
EquivalentFullMatch = 1,
EquivalentWeakNamed = 2,
EquivalentFXUnified = 3,
EquivalentUnified = 4,
NonEquivalentVersion = 5,
NonEquivalent = 6,
EquivalentPartialMatch = 7,
EquivalentPartialWeakNamed = 8,
EquivalentPartialUnified = 9,
EquivalentPartialFXUnified = 10,
NonEquivalentPartialVersion = 11,
}
public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args);
public sealed class Universe
{
internal readonly Dictionary<Type, Type> canonicalizedTypes = new Dictionary<Type, Type>();
private readonly List<Assembly> assemblies = new List<Assembly>();
private readonly List<AssemblyBuilder> dynamicAssemblies = new List<AssemblyBuilder>();
private readonly Dictionary<string, Assembly> assembliesByName = new Dictionary<string, Assembly>();
private readonly Dictionary<System.Type, Type> importedTypes = new Dictionary<System.Type, Type>();
private Type typeof_System_Object;
private Type typeof_System_ValueType;
private Type typeof_System_Enum;
private Type typeof_System_Void;
private Type typeof_System_Boolean;
private Type typeof_System_Char;
private Type typeof_System_SByte;
private Type typeof_System_Byte;
private Type typeof_System_Int16;
private Type typeof_System_UInt16;
private Type typeof_System_Int32;
private Type typeof_System_UInt32;
private Type typeof_System_Int64;
private Type typeof_System_UInt64;
private Type typeof_System_Single;
private Type typeof_System_Double;
private Type typeof_System_String;
private Type typeof_System_IntPtr;
private Type typeof_System_UIntPtr;
private Type typeof_System_TypedReference;
private Type typeof_System_Type;
private Type typeof_System_Array;
private Type typeof_System_DateTime;
private Type typeof_System_DBNull;
private Type typeof_System_Decimal;
private Type typeof_System_NonSerializedAttribute;
private Type typeof_System_SerializableAttribute;
private Type typeof_System_AttributeUsageAttribute;
private Type typeof_System_Reflection_AssemblyCultureAttribute;
private Type typeof_System_Runtime_InteropServices_DllImportAttribute;
private Type typeof_System_Runtime_InteropServices_FieldOffsetAttribute;
private Type typeof_System_Runtime_InteropServices_InAttribute;
private Type typeof_System_Runtime_InteropServices_MarshalAsAttribute;
private Type typeof_System_Runtime_InteropServices_UnmanagedType;
private Type typeof_System_Runtime_InteropServices_VarEnum;
private Type typeof_System_Runtime_InteropServices_OutAttribute;
private Type typeof_System_Runtime_InteropServices_StructLayoutAttribute;
private Type typeof_System_Runtime_InteropServices_OptionalAttribute;
private Type typeof_System_Runtime_InteropServices_PreserveSigAttribute;
private Type typeof_System_Runtime_InteropServices_ComImportAttribute;
private Type typeof_System_Runtime_CompilerServices_DecimalConstantAttribute;
private Type typeof_System_Runtime_CompilerServices_SpecialNameAttribute;
private Type typeof_System_Runtime_CompilerServices_MethodImplAttribute;
private Type typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute;
private Type typeof_System_Reflection_AssemblyCopyrightAttribute;
private Type typeof_System_Reflection_AssemblyTrademarkAttribute;
private Type typeof_System_Reflection_AssemblyProductAttribute;
private Type typeof_System_Reflection_AssemblyCompanyAttribute;
private Type typeof_System_Reflection_AssemblyDescriptionAttribute;
private Type typeof_System_Reflection_AssemblyTitleAttribute;
private Type typeof_System_Reflection_AssemblyInformationalVersionAttribute;
private Type typeof_System_Reflection_AssemblyFileVersionAttribute;
private Type typeof_System_Security_Permissions_CodeAccessSecurityAttribute;
private Type typeof_System_Security_Permissions_HostProtectionAttribute;
private Type typeof_System_Security_Permissions_PermissionSetAttribute;
private Type typeof_System_Security_Permissions_SecurityAction;
private List<ResolveEventHandler> resolvers = new List<ResolveEventHandler>();
internal Assembly Mscorlib
{
get { return Load("mscorlib"); }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42">
<![CDATA[
}
public abstract FieldAttributes Attributes { get; }
public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
public abstract Object GetRawConstantValue();
internal abstract FieldSignature FieldSignature { get; }
public Type FieldType
{
get { return this.FieldSignature.FieldType; }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="113" endline="120">
<![CDATA[
}
internal abstract int ImportTo(Emit.ModuleBuilder module);
internal virtual FieldInfo BindTypeParameters(Type type)
{
return new GenericFieldInstance(this.DeclaringType.BindTypeParameters(type), this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1669" endline="1680">
<![CDATA[
protected abstract string GetSuffix();
protected abstract Type Wrap(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers);
}
sealed class ArrayType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new ArrayType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="113" endline="120">
<![CDATA[
}
internal abstract int ImportTo(Emit.ModuleBuilder module);
internal virtual FieldInfo BindTypeParameters(Type type)
{
return new GenericFieldInstance(this.DeclaringType.BindTypeParameters(type), this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1757" endline="1766">
<![CDATA[
}
sealed class MultiArrayType
{
private readonly int rank;
internal static Type Make(Type type, int rank, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new MultiArrayType(type, rank, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="113" endline="120">
<![CDATA[
}
internal abstract int ImportTo(Emit.ModuleBuilder module);
internal virtual FieldInfo BindTypeParameters(Type type)
{
return new GenericFieldInstance(this.DeclaringType.BindTypeParameters(type), this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1886" endline="1958">
<![CDATA[
}
private sealed class ParameterInfoImpl
{
private readonly MethodInfo method;
private readonly Type type;
private readonly int pos;
internal ParameterInfoImpl(MethodInfo method, Type type, int pos)
{
this.method = method;
this.type = type;
this.pos = pos;
}
public override Type ParameterType
{
get { return type; }
}
public override string Name
{
get { return null; }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return pos; }
}
public override object RawDefaultValue
{
get { return null; }
}
public override Type[] GetOptionalCustomModifiers()
{
return Empty<Type>.Array;
}
public override Type[] GetRequiredCustomModifiers()
{
return Empty<Type>.Array;
}
public override MemberInfo Member
{
get { return method.IsConstructor ? (MethodBase)new ConstructorInfoImpl(method)
}
public override int MetadataToken
{
get { return 0x8000000; }
}
internal override Module Module
{
get { return method.Module; }
}
}
}
sealed class ByRefType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new ByRefType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="113" endline="120">
<![CDATA[
}
internal abstract int ImportTo(Emit.ModuleBuilder module);
internal virtual FieldInfo BindTypeParameters(Type type)
{
return new GenericFieldInstance(this.DeclaringType.BindTypeParameters(type), this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1999" endline="2006">
<![CDATA[
}
sealed class PointerType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new PointerType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="340" endline="351">
<![CDATA[
}
sealed class GenericParameterInfoImpl
{
private readonly GenericMethodInstance method;
private readonly ParameterInfo parameterInfo;
internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
{
this.method = method;
this.parameterInfo = parameterInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="523" endline="534">
<![CDATA[
}
sealed class GenericEventInfo
{
private readonly Type typeInstance;
private readonly EventInfo eventInfo;
internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
{
this.typeInstance = typeInstance;
this.eventInfo = eventInfo;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="340" endline="351">
<![CDATA[
}
sealed class GenericParameterInfoImpl
{
private readonly GenericMethodInstance method;
private readonly ParameterInfo parameterInfo;
internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
{
this.method = method;
this.parameterInfo = parameterInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="340" endline="351">
<![CDATA[
}
sealed class GenericParameterInfoImpl
{
private readonly GenericMethodInstance method;
private readonly ParameterInfo parameterInfo;
internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
{
this.method = method;
this.parameterInfo = parameterInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="340" endline="351">
<![CDATA[
}
sealed class GenericParameterInfoImpl
{
private readonly GenericMethodInstance method;
private readonly ParameterInfo parameterInfo;
internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
{
this.method = method;
this.parameterInfo = parameterInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="100" endline="291">
<![CDATA[
private readonly int position;
private sealed class DummyModule
{
internal DummyModule()
{
}
public override bool Equals(object obj)
{
throw new InvalidOperationException();
}
public override int GetHashCode()
{
throw new InvalidOperationException();
}
public override string ToString()
{
throw new InvalidOperationException();
}
public override int MDStreamVersion
{
get { throw new InvalidOperationException(); }
}
public override Assembly Assembly
{
get { throw new InvalidOperationException(); }
}
internal override Type GetTypeImpl(string typeName)
{
throw new InvalidOperationException();
}
internal override void GetTypesImpl(List<Type> list)
{
throw new InvalidOperationException();
}
public override string FullyQualifiedName
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override Guid ModuleVersionId
{
get { throw new InvalidOperationException(); }
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override string ResolveString(int metadataToken)
{
throw new InvalidOperationException();
}
public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
{
throw new InvalidOperationException();
}
public override string ScopeName
{
get { throw new InvalidOperationException(); }
}
public override AssemblyName[] __GetReferencedAssemblies()
{
throw new InvalidOperationException();
}
internal override Type GetModuleType()
{
throw new InvalidOperationException();
}
internal override ByteReader GetBlob(int blobIndex)
{
throw new InvalidOperationException();
}
}
internal static Type Make(int position)
{
return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
}
private UnboundGenericMethodParameter(int position)
{
this.position = position;
}
public override bool Equals(object obj)
{
UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
return other != null && other.position == position;
}
public override int GetHashCode()
{
return position;
}
public override string Namespace
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override int MetadataToken
{
get { throw new InvalidOperationException(); }
}
public override Module Module
{
get { return module; }
}
public override int GenericParameterPosition
{
get { return position; }
}
public override Type DeclaringType
{
get { return null; }
}
public override MethodBase DeclaringMethod
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetGenericParameterConstraints()
{
throw new InvalidOperationException();
}
public override GenericParameterAttributes GenericParameterAttributes
{
get { throw new InvalidOperationException(); }
}
internal override Type BindTypeParameters(IGenericBinder binder)
{
return binder.BindMethodParameter(this);
}
}
sealed class GenericTypeParameter
{
private readonly ModuleReader module;
private readonly int index;
internal GenericTypeParameter(ModuleReader module, int index)
{
this.module = module;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="340" endline="351">
<![CDATA[
}
sealed class GenericParameterInfoImpl
{
private readonly GenericMethodInstance method;
private readonly ParameterInfo parameterInfo;
internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
{
this.method = method;
this.parameterInfo = parameterInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="340" endline="351">
<![CDATA[
}
sealed class GenericParameterInfoImpl
{
private readonly GenericMethodInstance method;
private readonly ParameterInfo parameterInfo;
internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
{
this.method = method;
this.parameterInfo = parameterInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="340" endline="351">
<![CDATA[
}
sealed class GenericParameterInfoImpl
{
private readonly GenericMethodInstance method;
private readonly ParameterInfo parameterInfo;
internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
{
this.method = method;
this.parameterInfo = parameterInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="376" endline="383">
<![CDATA[
}
public override Type[] GetOptionalCustomModifiers()
{
Type[] modifiers = parameterInfo.GetOptionalCustomModifiers();
Type.InplaceBindTypeParameters(method, modifiers);
return modifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="205" endline="211">
<![CDATA[
public ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo)
{
ModuleBuilder module = new ModuleBuilder(this, name, fileName, emitSymbolInfo);
modules.Add(module);
return module;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="376" endline="383">
<![CDATA[
}
public override Type[] GetOptionalCustomModifiers()
{
Type[] modifiers = parameterInfo.GetOptionalCustomModifiers();
Type.InplaceBindTypeParameters(method, modifiers);
return modifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="589" endline="595">
<![CDATA[
public Module __AddModule(RawModule module)
{
Module mod = module.ToModule(this);
addedModules.Add(mod);
return mod;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="384" endline="390">
<![CDATA[
public override Type[] GetRequiredCustomModifiers()
{
Type[] modifiers = parameterInfo.GetRequiredCustomModifiers();
Type.InplaceBindTypeParameters(method, modifiers);
return modifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="205" endline="211">
<![CDATA[
public ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo)
{
ModuleBuilder module = new ModuleBuilder(this, name, fileName, emitSymbolInfo);
modules.Add(module);
return module;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="384" endline="390">
<![CDATA[
public override Type[] GetRequiredCustomModifiers()
{
Type[] modifiers = parameterInfo.GetRequiredCustomModifiers();
Type.InplaceBindTypeParameters(method, modifiers);
return modifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="589" endline="595">
<![CDATA[
public Module __AddModule(RawModule module)
{
Module mod = module.ToModule(this);
addedModules.Add(mod);
return mod;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="33" endline="116">
<![CDATA[
}
public abstract PropertyAttributes Attributes { get; }
public abstract bool CanRead { get; }
public abstract bool CanWrite { get; }
public abstract MethodInfo GetGetMethod(bool nonPublic);
public abstract MethodInfo GetSetMethod(bool nonPublic);
public abstract MethodInfo[] GetAccessors(bool nonPublic);
public abstract object GetRawConstantValue();
internal abstract bool IsPublic { get; }
internal abstract bool IsStatic { get; }
internal abstract PropertySignature PropertySignature { get; }
private sealed class ParameterInfoImpl
{
private readonly PropertyInfo property;
private readonly int parameter;
internal ParameterInfoImpl(PropertyInfo property, int parameter)
{
this.property = property;
this.parameter = parameter;
}
public override string Name
{
get { return null; }
}
public override Type ParameterType
{
get { return property.PropertySignature.GetParameter(parameter); }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetOptionalCustomModifiers()
{
return property.PropertySignature.GetOptionalCustomModifiers(parameter);
}
public override Type[] GetRequiredCustomModifiers()
{
return property.PropertySignature.GetRequiredCustomModifiers(parameter);
}
public override MemberInfo Member
{
get { return property; }
}
public override int MetadataToken
{
get { return 0x08000000; }
}
internal override Module Module
{
get { return property.Module; }
}
}
public ParameterInfo[] GetIndexParameters()
{
ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="33" endline="116">
<![CDATA[
}
public abstract PropertyAttributes Attributes { get; }
public abstract bool CanRead { get; }
public abstract bool CanWrite { get; }
public abstract MethodInfo GetGetMethod(bool nonPublic);
public abstract MethodInfo GetSetMethod(bool nonPublic);
public abstract MethodInfo[] GetAccessors(bool nonPublic);
public abstract object GetRawConstantValue();
internal abstract bool IsPublic { get; }
internal abstract bool IsStatic { get; }
internal abstract PropertySignature PropertySignature { get; }
private sealed class ParameterInfoImpl
{
private readonly PropertyInfo property;
private readonly int parameter;
internal ParameterInfoImpl(PropertyInfo property, int parameter)
{
this.property = property;
this.parameter = parameter;
}
public override string Name
{
get { return null; }
}
public override Type ParameterType
{
get { return property.PropertySignature.GetParameter(parameter); }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetOptionalCustomModifiers()
{
return property.PropertySignature.GetOptionalCustomModifiers(parameter);
}
public override Type[] GetRequiredCustomModifiers()
{
return property.PropertySignature.GetRequiredCustomModifiers(parameter);
}
public override MemberInfo Member
{
get { return property; }
}
public override int MetadataToken
{
get { return 0x08000000; }
}
internal override Module Module
{
get { return property.Module; }
}
}
public ParameterInfo[] GetIndexParameters()
{
ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="33" endline="116">
<![CDATA[
}
public abstract PropertyAttributes Attributes { get; }
public abstract bool CanRead { get; }
public abstract bool CanWrite { get; }
public abstract MethodInfo GetGetMethod(bool nonPublic);
public abstract MethodInfo GetSetMethod(bool nonPublic);
public abstract MethodInfo[] GetAccessors(bool nonPublic);
public abstract object GetRawConstantValue();
internal abstract bool IsPublic { get; }
internal abstract bool IsStatic { get; }
internal abstract PropertySignature PropertySignature { get; }
private sealed class ParameterInfoImpl
{
private readonly PropertyInfo property;
private readonly int parameter;
internal ParameterInfoImpl(PropertyInfo property, int parameter)
{
this.property = property;
this.parameter = parameter;
}
public override string Name
{
get { return null; }
}
public override Type ParameterType
{
get { return property.PropertySignature.GetParameter(parameter); }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetOptionalCustomModifiers()
{
return property.PropertySignature.GetOptionalCustomModifiers(parameter);
}
public override Type[] GetRequiredCustomModifiers()
{
return property.PropertySignature.GetRequiredCustomModifiers(parameter);
}
public override MemberInfo Member
{
get { return property; }
}
public override int MetadataToken
{
get { return 0x08000000; }
}
internal override Module Module
{
get { return property.Module; }
}
}
public ParameterInfo[] GetIndexParameters()
{
ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="33" endline="116">
<![CDATA[
}
public abstract PropertyAttributes Attributes { get; }
public abstract bool CanRead { get; }
public abstract bool CanWrite { get; }
public abstract MethodInfo GetGetMethod(bool nonPublic);
public abstract MethodInfo GetSetMethod(bool nonPublic);
public abstract MethodInfo[] GetAccessors(bool nonPublic);
public abstract object GetRawConstantValue();
internal abstract bool IsPublic { get; }
internal abstract bool IsStatic { get; }
internal abstract PropertySignature PropertySignature { get; }
private sealed class ParameterInfoImpl
{
private readonly PropertyInfo property;
private readonly int parameter;
internal ParameterInfoImpl(PropertyInfo property, int parameter)
{
this.property = property;
this.parameter = parameter;
}
public override string Name
{
get { return null; }
}
public override Type ParameterType
{
get { return property.PropertySignature.GetParameter(parameter); }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetOptionalCustomModifiers()
{
return property.PropertySignature.GetOptionalCustomModifiers(parameter);
}
public override Type[] GetRequiredCustomModifiers()
{
return property.PropertySignature.GetRequiredCustomModifiers(parameter);
}
public override MemberInfo Member
{
get { return property; }
}
public override int MetadataToken
{
get { return 0x08000000; }
}
internal override Module Module
{
get { return property.Module; }
}
}
public ParameterInfo[] GetIndexParameters()
{
ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
FieldInfo[] fields = type.__GetDeclaredFields();
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
return fields;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="33" endline="116">
<![CDATA[
}
public abstract PropertyAttributes Attributes { get; }
public abstract bool CanRead { get; }
public abstract bool CanWrite { get; }
public abstract MethodInfo GetGetMethod(bool nonPublic);
public abstract MethodInfo GetSetMethod(bool nonPublic);
public abstract MethodInfo[] GetAccessors(bool nonPublic);
public abstract object GetRawConstantValue();
internal abstract bool IsPublic { get; }
internal abstract bool IsStatic { get; }
internal abstract PropertySignature PropertySignature { get; }
private sealed class ParameterInfoImpl
{
private readonly PropertyInfo property;
private readonly int parameter;
internal ParameterInfoImpl(PropertyInfo property, int parameter)
{
this.property = property;
this.parameter = parameter;
}
public override string Name
{
get { return null; }
}
public override Type ParameterType
{
get { return property.PropertySignature.GetParameter(parameter); }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetOptionalCustomModifiers()
{
return property.PropertySignature.GetOptionalCustomModifiers(parameter);
}
public override Type[] GetRequiredCustomModifiers()
{
return property.PropertySignature.GetRequiredCustomModifiers(parameter);
}
public override MemberInfo Member
{
get { return property; }
}
public override int MetadataToken
{
get { return 0x08000000; }
}
internal override Module Module
{
get { return property.Module; }
}
}
public ParameterInfo[] GetIndexParameters()
{
ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
Type[] interfaces = type.__GetDeclaredInterfaces();
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
return interfaces;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="33" endline="116">
<![CDATA[
}
public abstract PropertyAttributes Attributes { get; }
public abstract bool CanRead { get; }
public abstract bool CanWrite { get; }
public abstract MethodInfo GetGetMethod(bool nonPublic);
public abstract MethodInfo GetSetMethod(bool nonPublic);
public abstract MethodInfo[] GetAccessors(bool nonPublic);
public abstract object GetRawConstantValue();
internal abstract bool IsPublic { get; }
internal abstract bool IsStatic { get; }
internal abstract PropertySignature PropertySignature { get; }
private sealed class ParameterInfoImpl
{
private readonly PropertyInfo property;
private readonly int parameter;
internal ParameterInfoImpl(PropertyInfo property, int parameter)
{
this.property = property;
this.parameter = parameter;
}
public override string Name
{
get { return null; }
}
public override Type ParameterType
{
get { return property.PropertySignature.GetParameter(parameter); }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetOptionalCustomModifiers()
{
return property.PropertySignature.GetOptionalCustomModifiers(parameter);
}
public override Type[] GetRequiredCustomModifiers()
{
return property.PropertySignature.GetRequiredCustomModifiers(parameter);
}
public override MemberInfo Member
{
get { return property; }
}
public override int MetadataToken
{
get { return 0x08000000; }
}
internal override Module Module
{
get { return property.Module; }
}
}
public ParameterInfo[] GetIndexParameters()
{
ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
MethodBase[] methods = type.__GetDeclaredMethods();
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
return methods;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="33" endline="116">
<![CDATA[
}
public abstract PropertyAttributes Attributes { get; }
public abstract bool CanRead { get; }
public abstract bool CanWrite { get; }
public abstract MethodInfo GetGetMethod(bool nonPublic);
public abstract MethodInfo GetSetMethod(bool nonPublic);
public abstract MethodInfo[] GetAccessors(bool nonPublic);
public abstract object GetRawConstantValue();
internal abstract bool IsPublic { get; }
internal abstract bool IsStatic { get; }
internal abstract PropertySignature PropertySignature { get; }
private sealed class ParameterInfoImpl
{
private readonly PropertyInfo property;
private readonly int parameter;
internal ParameterInfoImpl(PropertyInfo property, int parameter)
{
this.property = property;
this.parameter = parameter;
}
public override string Name
{
get { return null; }
}
public override Type ParameterType
{
get { return property.PropertySignature.GetParameter(parameter); }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetOptionalCustomModifiers()
{
return property.PropertySignature.GetOptionalCustomModifiers(parameter);
}
public override Type[] GetRequiredCustomModifiers()
{
return property.PropertySignature.GetRequiredCustomModifiers(parameter);
}
public override MemberInfo Member
{
get { return property; }
}
public override int MetadataToken
{
get { return 0x08000000; }
}
internal override Module Module
{
get { return property.Module; }
}
}
public ParameterInfo[] GetIndexParameters()
{
ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229">
<![CDATA[
public override EventInfo[] __GetDeclaredEvents()
{
EventInfo[] events = type.__GetDeclaredEvents();
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
return events;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="33" endline="116">
<![CDATA[
}
public abstract PropertyAttributes Attributes { get; }
public abstract bool CanRead { get; }
public abstract bool CanWrite { get; }
public abstract MethodInfo GetGetMethod(bool nonPublic);
public abstract MethodInfo GetSetMethod(bool nonPublic);
public abstract MethodInfo[] GetAccessors(bool nonPublic);
public abstract object GetRawConstantValue();
internal abstract bool IsPublic { get; }
internal abstract bool IsStatic { get; }
internal abstract PropertySignature PropertySignature { get; }
private sealed class ParameterInfoImpl
{
private readonly PropertyInfo property;
private readonly int parameter;
internal ParameterInfoImpl(PropertyInfo property, int parameter)
{
this.property = property;
this.parameter = parameter;
}
public override string Name
{
get { return null; }
}
public override Type ParameterType
{
get { return property.PropertySignature.GetParameter(parameter); }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetOptionalCustomModifiers()
{
return property.PropertySignature.GetOptionalCustomModifiers(parameter);
}
public override Type[] GetRequiredCustomModifiers()
{
return property.PropertySignature.GetRequiredCustomModifiers(parameter);
}
public override MemberInfo Member
{
get { return property; }
}
public override int MetadataToken
{
get { return 0x08000000; }
}
internal override Module Module
{
get { return property.Module; }
}
}
public ParameterInfo[] GetIndexParameters()
{
ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
PropertyInfo[] properties = type.__GetDeclaredProperties();
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
return properties;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520">
<![CDATA[
private sealed class ParameterInfoImpl
{
private readonly MethodBuilder method;
private readonly int parameter;
internal ParameterInfoImpl(MethodBuilder method, int parameter)
{
this.method = method;
this.parameter = parameter;
}
private ParameterBuilder ParameterBuilder
{
get
{
if (method.parameters != null)
{
foreach (ParameterBuilder pb in method.parameters)
{
if (pb.Position == parameter)
{
return pb;
}
}
}
return null;
}
}
public override string Name
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.Name
}
}
public override Type ParameterType
{
get { return parameter == -1 ? method.returnType
}
public override ParameterAttributes Attributes
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? (ParameterAttributes)pb.Attributes
}
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
{
return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
}
if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
{
return Missing.Value;
}
return null;
}
}
private Type[] GetCustomModifiers(int optOrReq)
{
if (method.modifiers == null || method.modifiers[parameter + 1] == null)
{
return Type.EmptyTypes;
}
return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
}
public override Type[] GetOptionalCustomModifiers()
{
return GetCustomModifiers(0);
}
public override Type[] GetRequiredCustomModifiers()
{
return GetCustomModifiers(1);
}
public override MemberInfo Member
{
get { return method; }
}
public override int MetadataToken
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.PseudoToken
}
}
internal override Module Module
{
get { return method.Module; }
}
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="851" endline="860">
<![CDATA[
internal string[] GetManifestResourceNames()
{
string[] names = new string[ManifestResource.records.Length];
for (int i = 0; i < ManifestResource.records.Length; i++)
{
names[i] = GetString(ManifestResource.records[i].Name);
}
for (int i = 0; i < ManifestResource.records.Length; i++)
{
names[i] = GetString(ManifestResource.records[i].Name);
}
return names;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
FieldInfo[] fields = type.__GetDeclaredFields();
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
return fields;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
Type[] interfaces = type.__GetDeclaredInterfaces();
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
return interfaces;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
MethodBase[] methods = type.__GetDeclaredMethods();
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
return methods;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229">
<![CDATA[
public override EventInfo[] __GetDeclaredEvents()
{
EventInfo[] events = type.__GetDeclaredEvents();
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
return events;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
PropertyInfo[] properties = type.__GetDeclaredProperties();
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
return properties;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="191" endline="200">
<![CDATA[
public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="523" endline="534">
<![CDATA[
}
sealed class GenericEventInfo
{
private readonly Type typeInstance;
private readonly EventInfo eventInfo;
internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
{
this.typeInstance = typeInstance;
this.eventInfo = eventInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="523" endline="534">
<![CDATA[
}
sealed class GenericEventInfo
{
private readonly Type typeInstance;
private readonly EventInfo eventInfo;
internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
{
this.typeInstance = typeInstance;
this.eventInfo = eventInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="523" endline="534">
<![CDATA[
}
sealed class GenericEventInfo
{
private readonly Type typeInstance;
private readonly EventInfo eventInfo;
internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
{
this.typeInstance = typeInstance;
this.eventInfo = eventInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="100" endline="291">
<![CDATA[
private readonly int position;
private sealed class DummyModule
{
internal DummyModule()
{
}
public override bool Equals(object obj)
{
throw new InvalidOperationException();
}
public override int GetHashCode()
{
throw new InvalidOperationException();
}
public override string ToString()
{
throw new InvalidOperationException();
}
public override int MDStreamVersion
{
get { throw new InvalidOperationException(); }
}
public override Assembly Assembly
{
get { throw new InvalidOperationException(); }
}
internal override Type GetTypeImpl(string typeName)
{
throw new InvalidOperationException();
}
internal override void GetTypesImpl(List<Type> list)
{
throw new InvalidOperationException();
}
public override string FullyQualifiedName
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override Guid ModuleVersionId
{
get { throw new InvalidOperationException(); }
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override string ResolveString(int metadataToken)
{
throw new InvalidOperationException();
}
public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
{
throw new InvalidOperationException();
}
public override string ScopeName
{
get { throw new InvalidOperationException(); }
}
public override AssemblyName[] __GetReferencedAssemblies()
{
throw new InvalidOperationException();
}
internal override Type GetModuleType()
{
throw new InvalidOperationException();
}
internal override ByteReader GetBlob(int blobIndex)
{
throw new InvalidOperationException();
}
}
internal static Type Make(int position)
{
return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
}
private UnboundGenericMethodParameter(int position)
{
this.position = position;
}
public override bool Equals(object obj)
{
UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
return other != null && other.position == position;
}
public override int GetHashCode()
{
return position;
}
public override string Namespace
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override int MetadataToken
{
get { throw new InvalidOperationException(); }
}
public override Module Module
{
get { return module; }
}
public override int GenericParameterPosition
{
get { return position; }
}
public override Type DeclaringType
{
get { return null; }
}
public override MethodBase DeclaringMethod
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetGenericParameterConstraints()
{
throw new InvalidOperationException();
}
public override GenericParameterAttributes GenericParameterAttributes
{
get { throw new InvalidOperationException(); }
}
internal override Type BindTypeParameters(IGenericBinder binder)
{
return binder.BindMethodParameter(this);
}
}
sealed class GenericTypeParameter
{
private readonly ModuleReader module;
private readonly int index;
internal GenericTypeParameter(ModuleReader module, int index)
{
this.module = module;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="523" endline="534">
<![CDATA[
}
sealed class GenericEventInfo
{
private readonly Type typeInstance;
private readonly EventInfo eventInfo;
internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
{
this.typeInstance = typeInstance;
this.eventInfo = eventInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="523" endline="534">
<![CDATA[
}
sealed class GenericEventInfo
{
private readonly Type typeInstance;
private readonly EventInfo eventInfo;
internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
{
this.typeInstance = typeInstance;
this.eventInfo = eventInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="523" endline="534">
<![CDATA[
}
sealed class GenericEventInfo
{
private readonly Type typeInstance;
private readonly EventInfo eventInfo;
internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
{
this.typeInstance = typeInstance;
this.eventInfo = eventInfo;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520">
<![CDATA[
private sealed class ParameterInfoImpl
{
private readonly MethodBuilder method;
private readonly int parameter;
internal ParameterInfoImpl(MethodBuilder method, int parameter)
{
this.method = method;
this.parameter = parameter;
}
private ParameterBuilder ParameterBuilder
{
get
{
if (method.parameters != null)
{
foreach (ParameterBuilder pb in method.parameters)
{
if (pb.Position == parameter)
{
return pb;
}
}
}
return null;
}
}
public override string Name
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.Name
}
}
public override Type ParameterType
{
get { return parameter == -1 ? method.returnType
}
public override ParameterAttributes Attributes
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? (ParameterAttributes)pb.Attributes
}
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
{
return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
}
if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
{
return Missing.Value;
}
return null;
}
}
private Type[] GetCustomModifiers(int optOrReq)
{
if (method.modifiers == null || method.modifiers[parameter + 1] == null)
{
return Type.EmptyTypes;
}
return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
}
public override Type[] GetOptionalCustomModifiers()
{
return GetCustomModifiers(0);
}
public override Type[] GetRequiredCustomModifiers()
{
return GetCustomModifiers(1);
}
public override MemberInfo Member
{
get { return method; }
}
public override int MetadataToken
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.PseudoToken
}
}
internal override Module Module
{
get { return method.Module; }
}
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="851" endline="860">
<![CDATA[
internal string[] GetManifestResourceNames()
{
string[] names = new string[ManifestResource.records.Length];
for (int i = 0; i < ManifestResource.records.Length; i++)
{
names[i] = GetString(ManifestResource.records[i].Name);
}
for (int i = 0; i < ManifestResource.records.Length; i++)
{
names[i] = GetString(ManifestResource.records[i].Name);
}
return names;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
FieldInfo[] fields = type.__GetDeclaredFields();
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
return fields;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
Type[] interfaces = type.__GetDeclaredInterfaces();
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
return interfaces;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
MethodBase[] methods = type.__GetDeclaredMethods();
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
return methods;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229">
<![CDATA[
public override EventInfo[] __GetDeclaredEvents()
{
EventInfo[] events = type.__GetDeclaredEvents();
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
return events;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
PropertyInfo[] properties = type.__GetDeclaredProperties();
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
return properties;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="191" endline="200">
<![CDATA[
public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="119" endline="129">
<![CDATA[
}
internal void Write(MetadataWriter mw, uint rva)
{
foreach (int offset in linkOffsets)
{
bb.Position = offset;
bb.Write(bb.GetInt32AtCurrentPosition() + (int)rva);
}
foreach (int offset in linkOffsets)
{
bb.Position = offset;
bb.Write(bb.GetInt32AtCurrentPosition() + (int)rva);
}
mw.Write(bb);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="1109" endline="1118">
<![CDATA[
private void WriteCode(ByteBuffer bb)
{
int codeOffset = bb.Position;
foreach (int fixup in this.tokenFixups)
{
moduleBuilder.tokenFixupOffsets.Add(fixup + codeOffset);
}
foreach (int fixup in this.tokenFixups)
{
moduleBuilder.tokenFixupOffsets.Add(fixup + codeOffset);
}
bb.Write(code);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="38" endline="142">
<![CDATA[
private ByteBuffer bb;
private List<int> linkOffsets;
internal void AddVersionInfo(ByteBuffer versionInfo)
{
root[new OrdinalOrName(RT_VERSION)][new OrdinalOrName(1)][new OrdinalOrName(0)].Data = versionInfo;
}
internal void AddIcon(byte[] iconFile)
{
BinaryReader br = new BinaryReader(new MemoryStream(iconFile));
ushort idReserved = br.ReadUInt16();
ushort idType = br.ReadUInt16();
ushort idCount = br.ReadUInt16();
if (idReserved != 0 || idType != 1)
{
throw new ArgumentException("The supplied byte array is not a valid .ico file.");
}
ByteBuffer group = new ByteBuffer(6 + 14 * idCount);
group.Write(idReserved);
group.Write(idType);
group.Write(idCount);
for (int i = 0; i < idCount; i++)
{
byte bWidth = br.ReadByte();
byte bHeight = br.ReadByte();
byte bColorCount = br.ReadByte();
byte bReserved = br.ReadByte();
ushort wPlanes = br.ReadUInt16();
ushort wBitCount = br.ReadUInt16();
uint dwBytesInRes = br.ReadUInt32();
uint dwImageOffset = br.ReadUInt32();
ushort id = (ushort)(2 + i);
group.Write(bWidth);
group.Write(bHeight);
group.Write(bColorCount);
group.Write(bReserved);
group.Write(wPlanes);
group.Write(wBitCount);
group.Write(dwBytesInRes);
group.Write(id);
byte[] icon = new byte[dwBytesInRes];
Buffer.BlockCopy(iconFile, (int)dwImageOffset, icon, 0, icon.Length);
root[new OrdinalOrName(RT_ICON)][new OrdinalOrName(id)][new OrdinalOrName(0)].Data = ByteBuffer.Wrap(icon);
}
root[new OrdinalOrName(RT_GROUP_ICON)][new OrdinalOrName(32512)][new OrdinalOrName(0)].Data = group;
}
internal void ExtractResources(byte[] buf)
{
ByteReader br = new ByteReader(buf, 0, buf.Length);
while (br.Length >= 32)
{
br.Align(4);
RESOURCEHEADER hdr = new RESOURCEHEADER(br);
if (hdr.DataSize != 0)
{
root[hdr.TYPE][hdr.NAME][new OrdinalOrName(hdr.LanguageId)].Data = ByteBuffer.Wrap(br.ReadBytes(hdr.DataSize));
}
}
}
internal void Finish()
{
if (bb != null)
{
throw new InvalidOperationException();
}
bb = new ByteBuffer(1024);
linkOffsets = new List<int>();
root.Write(bb, linkOffsets);
root = null;
}
internal int Length
{
get { return bb.Length; }
}
internal void Write(MetadataWriter mw, uint rva)
{
foreach (int offset in linkOffsets)
{
bb.Position = offset;
bb.Write(bb.GetInt32AtCurrentPosition() + (int)rva);
}
mw.Write(bb);
}
}
sealed class ResourceDirectoryEntry
{
internal readonly OrdinalOrName OrdinalOrName;
internal ByteBuffer Data;
private int namedEntries;
private readonly List<ResourceDirectoryEntry> entries = new List<ResourceDirectoryEntry>();
internal ResourceDirectoryEntry(OrdinalOrName id)
{
this.OrdinalOrName = id;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="36" endline="42">
<![CDATA[
private readonly IMAGE_NT_HEADERS hdr = new IMAGE_NT_HEADERS();
internal PEWriter(Stream stream)
{
bw = new BinaryWriter(stream);
WriteMSDOSHeader();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="38" endline="142">
<![CDATA[
private ByteBuffer bb;
private List<int> linkOffsets;
internal void AddVersionInfo(ByteBuffer versionInfo)
{
root[new OrdinalOrName(RT_VERSION)][new OrdinalOrName(1)][new OrdinalOrName(0)].Data = versionInfo;
}
internal void AddIcon(byte[] iconFile)
{
BinaryReader br = new BinaryReader(new MemoryStream(iconFile));
ushort idReserved = br.ReadUInt16();
ushort idType = br.ReadUInt16();
ushort idCount = br.ReadUInt16();
if (idReserved != 0 || idType != 1)
{
throw new ArgumentException("The supplied byte array is not a valid .ico file.");
}
ByteBuffer group = new ByteBuffer(6 + 14 * idCount);
group.Write(idReserved);
group.Write(idType);
group.Write(idCount);
for (int i = 0; i < idCount; i++)
{
byte bWidth = br.ReadByte();
byte bHeight = br.ReadByte();
byte bColorCount = br.ReadByte();
byte bReserved = br.ReadByte();
ushort wPlanes = br.ReadUInt16();
ushort wBitCount = br.ReadUInt16();
uint dwBytesInRes = br.ReadUInt32();
uint dwImageOffset = br.ReadUInt32();
ushort id = (ushort)(2 + i);
group.Write(bWidth);
group.Write(bHeight);
group.Write(bColorCount);
group.Write(bReserved);
group.Write(wPlanes);
group.Write(wBitCount);
group.Write(dwBytesInRes);
group.Write(id);
byte[] icon = new byte[dwBytesInRes];
Buffer.BlockCopy(iconFile, (int)dwImageOffset, icon, 0, icon.Length);
root[new OrdinalOrName(RT_ICON)][new OrdinalOrName(id)][new OrdinalOrName(0)].Data = ByteBuffer.Wrap(icon);
}
root[new OrdinalOrName(RT_GROUP_ICON)][new OrdinalOrName(32512)][new OrdinalOrName(0)].Data = group;
}
internal void ExtractResources(byte[] buf)
{
ByteReader br = new ByteReader(buf, 0, buf.Length);
while (br.Length >= 32)
{
br.Align(4);
RESOURCEHEADER hdr = new RESOURCEHEADER(br);
if (hdr.DataSize != 0)
{
root[hdr.TYPE][hdr.NAME][new OrdinalOrName(hdr.LanguageId)].Data = ByteBuffer.Wrap(br.ReadBytes(hdr.DataSize));
}
}
}
internal void Finish()
{
if (bb != null)
{
throw new InvalidOperationException();
}
bb = new ByteBuffer(1024);
linkOffsets = new List<int>();
root.Write(bb, linkOffsets);
root = null;
}
internal int Length
{
get { return bb.Length; }
}
internal void Write(MetadataWriter mw, uint rva)
{
foreach (int offset in linkOffsets)
{
bb.Position = offset;
bb.Write(bb.GetInt32AtCurrentPosition() + (int)rva);
}
mw.Write(bb);
}
}
sealed class ResourceDirectoryEntry
{
internal readonly OrdinalOrName OrdinalOrName;
internal ByteBuffer Data;
private int namedEntries;
private readonly List<ResourceDirectoryEntry> entries = new List<ResourceDirectoryEntry>();
internal ResourceDirectoryEntry(OrdinalOrName id)
{
this.OrdinalOrName = id;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="624" endline="635">
<![CDATA[
}
sealed class ManifestModule
{
private readonly AssemblyBuilder assembly;
private readonly Guid guid = Guid.NewGuid();
internal ManifestModule(AssemblyBuilder assembly)
{
this.assembly = assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="307" endline="318">
<![CDATA[
}
struct OrdinalOrName
{
internal readonly ushort Ordinal;
internal readonly string Name;
internal OrdinalOrName(ushort value)
{
Ordinal = value;
Name = null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="516" endline="522">
<![CDATA[
}
public void __SetImageRuntimeVersion(string imageRuntimeVersion, int mdStreamVersion)
{
this.imageRuntimeVersion = imageRuntimeVersion;
this.mdStreamVersion = mdStreamVersion;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="41" endline="48">
<![CDATA[
private MethodSignature(Type returnType, Type[] parameterTypes, Type[][][] modifiers, CallingConventions callingConvention, int genericParamCount)
{
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.modifiers = modifiers;
this.callingConvention = callingConvention;
this.genericParamCount = genericParamCount;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="39" endline="47">
<![CDATA[
internal __StandAloneMethodSig(bool unmanaged, CallingConvention unmanagedCallingConvention, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
{
this.unmanaged = unmanaged;
this.unmanagedCallingConvention = unmanagedCallingConvention;
this.callingConvention = callingConvention;
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.optionalParameterTypes = optionalParameterTypes;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="41" endline="48">
<![CDATA[
private MethodSignature(Type returnType, Type[] parameterTypes, Type[][][] modifiers, CallingConventions callingConvention, int genericParamCount)
{
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.modifiers = modifiers;
this.callingConvention = callingConvention;
this.genericParamCount = genericParamCount;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="44" endline="51">
<![CDATA[
internal PropertyBuilder(TypeBuilder typeBuilder, string name, PropertyAttributes attributes, PropertySignature sig, bool patchCallingConvention)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.sig = sig;
this.patchCallingConvention = patchCallingConvention;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="41" endline="48">
<![CDATA[
private MethodSignature(Type returnType, Type[] parameterTypes, Type[][][] modifiers, CallingConventions callingConvention, int genericParamCount)
{
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.modifiers = modifiers;
this.callingConvention = callingConvention;
this.genericParamCount = genericParamCount;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="41" endline="48">
<![CDATA[
private MethodSignature(Type returnType, Type[] parameterTypes, Type[][][] modifiers, CallingConventions callingConvention, int genericParamCount)
{
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.modifiers = modifiers;
this.callingConvention = callingConvention;
this.genericParamCount = genericParamCount;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="62" endline="71">
<![CDATA[
public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues)
{
this.con = con;
this.constructorArgs = constructorArgs;
this.namedProperties = namedProperties;
this.propertyValues = propertyValues;
this.namedFields = namedFields;
this.fieldValues = fieldValues;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="41" endline="48">
<![CDATA[
private MethodSignature(Type returnType, Type[] parameterTypes, Type[][][] modifiers, CallingConventions callingConvention, int genericParamCount)
{
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.modifiers = modifiers;
this.callingConvention = callingConvention;
this.genericParamCount = genericParamCount;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="48" endline="58">
<![CDATA[
private PropertySignature(CallingConventions callingConvention, Type propertyType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeOptionalCustomModifiers, Type[][] parameterTypeRequiredCustomModifiers)
{
this.callingConvention = callingConvention;
this.propertyType = propertyType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
this.parameterTypes = parameterTypes;
this.parameterOptionalCustomModifiers = parameterTypeOptionalCustomModifiers;
this.parameterRequiredCustomModifiers = parameterTypeRequiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="49" endline="59">
<![CDATA[
public override bool Equals(object obj)
{
MethodSignature other = obj as MethodSignature;
return other != null
&& other.callingConvention == callingConvention
&& other.genericParamCount == genericParamCount
&& other.returnType.Equals(returnType)
&& Util.ArrayEquals(other.parameterTypes, parameterTypes)
&& Util.ArrayEquals(other.modifiers, modifiers);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2104" endline="2111">
<![CDATA[
public override bool Equals(object o)
{
GenericTypeInstance gt = o as GenericTypeInstance;
return gt != null && gt.type.Equals(type) && Util.ArrayEquals(gt.args, args)
&& Util.ArrayEquals(gt.requiredCustomModifiers, requiredCustomModifiers)
&& Util.ArrayEquals(gt.optionalCustomModifiers, optionalCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="49" endline="59">
<![CDATA[
public override bool Equals(object obj)
{
MethodSignature other = obj as MethodSignature;
return other != null
&& other.callingConvention == callingConvention
&& other.genericParamCount == genericParamCount
&& other.returnType.Equals(returnType)
&& Util.ArrayEquals(other.parameterTypes, parameterTypes)
&& Util.ArrayEquals(other.modifiers, modifiers);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="59" endline="67">
<![CDATA[
public override bool Equals(object obj)
{
PropertySignature other = obj as PropertySignature;
return other != null
&& other.propertyType.Equals(propertyType)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="49" endline="59">
<![CDATA[
public override bool Equals(object obj)
{
MethodSignature other = obj as MethodSignature;
return other != null
&& other.callingConvention == callingConvention
&& other.genericParamCount == genericParamCount
&& other.returnType.Equals(returnType)
&& Util.ArrayEquals(other.parameterTypes, parameterTypes)
&& Util.ArrayEquals(other.modifiers, modifiers);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="51" endline="59">
<![CDATA[
public override bool Equals(object obj)
{
FieldSignature other = obj as FieldSignature;
return other != null
&& other.fieldType.Equals(fieldType)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="461" endline="481">
<![CDATA[
private static Type[] NormalizeAndCopy(Type[] array)
{
if (array == null || array.Length == 0)
{
return null;
}
Type[] copy = null;
for (int i = 0; i < array.Length; i++)
{
if (array[i] != null)
{
if (copy == null)
{
copy = new Type[array.Length];
}
copy[i] = array[i];
}
}
for (int i = 0; i < array.Length; i++)
{
if (array[i] != null)
{
if (copy == null)
{
copy = new Type[array.Length];
}
copy[i] = array[i];
}
}
return copy;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1642" endline="1663">
<![CDATA[
private static Type[] BindArray(Type[] array, IGenericBinder binder)
{
if (array ==null || array.Length == 0)
{
return array;
}
Type[] result = array;
for (int i = 0; i < array.Length; i++)
{
Type type = array[i].BindTypeParameters(binder);
if (!ReferenceEquals(type, array[i]))
{
if (result == array)
{
result = (Type[])array.Clone();
}
result[i] = type;
}
}
for (int i = 0; i < array.Length; i++)
{
Type type = array[i].BindTypeParameters(binder);
if (!ReferenceEquals(type, array[i]))
{
if (result == array)
{
result = (Type[])array.Clone();
}
result[i] = type;
}
}
return result;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="87" endline="195">
<![CDATA[
static public RSA FromCapiPrivateKeyBlob (byte[] blob, int offset)
{
if (blob == null)
throw new ArgumentNullException ("blob");
if (offset >= blob.Length)
throw new ArgumentException ("blob is too small.");
RSAParameters rsap = new RSAParameters ();
try {
if ((blob [offset]   != 0x07) ||				// PRIVATEKEYBLOB (0x07)
(blob [offset+1] != 0x02) ||				// Version (0x02)
(blob [offset+2] != 0x00) ||				// Reserved (word)
(blob [offset+3] != 0x00) ||
(ToUInt32LE (blob, offset+8) != 0x32415352))	// DWORD magic = RSA2
throw new CryptographicException ("Invalid blob header");
int bitLen = ToInt32LE (blob, offset+12);
byte[] exp = new byte [4];
Buffer.BlockCopy (blob, offset+16, exp, 0, 4);
Array.Reverse (exp);
rsap.Exponent = Trim (exp);
int pos = offset+20;
int byteLen = (bitLen >> 3);
rsap.Modulus = new byte [byteLen];
Buffer.BlockCopy (blob, pos, rsap.Modulus, 0, byteLen);
Array.Reverse (rsap.Modulus);
pos += byteLen;
int byteHalfLen = (byteLen >> 1);
rsap.P = new byte [byteHalfLen];
Buffer.BlockCopy (blob, pos, rsap.P, 0, byteHalfLen);
Array.Reverse (rsap.P);
pos += byteHalfLen;
rsap.Q = new byte [byteHalfLen];
Buffer.BlockCopy (blob, pos, rsap.Q, 0, byteHalfLen);
Array.Reverse (rsap.Q);
pos += byteHalfLen;
rsap.DP = new byte [byteHalfLen];
Buffer.BlockCopy (blob, pos, rsap.DP, 0, byteHalfLen);
Array.Reverse (rsap.DP);
pos += byteHalfLen;
rsap.DQ = new byte [byteHalfLen];
Buffer.BlockCopy (blob, pos, rsap.DQ, 0, byteHalfLen);
Array.Reverse (rsap.DQ);
pos += byteHalfLen;
rsap.InverseQ = new byte [byteHalfLen];
Buffer.BlockCopy (blob, pos, rsap.InverseQ, 0, byteHalfLen);
Array.Reverse (rsap.InverseQ);
pos += byteHalfLen;
rsap.D = new byte [byteLen]; // must be allocated
if (pos + byteLen + offset <= blob.Length) {
Buffer.BlockCopy (blob, pos, rsap.D, 0, byteLen);
Array.Reverse (rsap.D);
}
}
catch (Exception e) {
throw new CryptographicException ("Invalid blob.", e);
}
#if NET_2_1
RSA rsa = RSA.Create ();
rsa.ImportParameters (rsap);
#else
RSA rsa = null;
try {
rsa = RSA.Create ();
rsa.ImportParameters (rsap);
}
catch (CryptographicException ce) {
try {
CspParameters csp = new CspParameters ();
csp.Flags = CspProviderFlags.UseMachineKeyStore;
rsa = new RSACryptoServiceProvider (csp);
rsa.ImportParameters (rsap);
}
catch {
throw ce;
}
}
#endif
return rsa;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="201" endline="280">
<![CDATA[
static public DSA FromCapiPrivateKeyBlobDSA (byte[] blob, int offset)
{
if (blob == null)
throw new ArgumentNullException ("blob");
if (offset >= blob.Length)
throw new ArgumentException ("blob is too small.");
DSAParameters dsap = new DSAParameters ();
try {
if ((blob [offset] != 0x07) ||				// PRIVATEKEYBLOB (0x07)
(blob [offset + 1] != 0x02) ||			// Version (0x02)
(blob [offset + 2] != 0x00) ||			// Reserved (word)
(blob [offset + 3] != 0x00) ||
(ToUInt32LE (blob, offset + 8) != 0x32535344))	// DWORD magic
throw new CryptographicException ("Invalid blob header");
int bitlen = ToInt32LE (blob, offset + 12);
int bytelen = bitlen >> 3;
int pos = offset + 16;
dsap.P = new byte [bytelen];
Buffer.BlockCopy (blob, pos, dsap.P, 0, bytelen);
Array.Reverse (dsap.P);
pos += bytelen;
dsap.Q = new byte [20];
Buffer.BlockCopy (blob, pos, dsap.Q, 0, 20);
Array.Reverse (dsap.Q);
pos += 20;
dsap.G = new byte [bytelen];
Buffer.BlockCopy (blob, pos, dsap.G, 0, bytelen);
Array.Reverse (dsap.G);
pos += bytelen;
dsap.X = new byte [20];
Buffer.BlockCopy (blob, pos, dsap.X, 0, 20);
Array.Reverse (dsap.X);
pos += 20;
dsap.Counter = ToInt32LE (blob, pos);
pos += 4;
dsap.Seed = new byte [20];
Buffer.BlockCopy (blob, pos, dsap.Seed, 0, 20);
Array.Reverse (dsap.Seed);
pos += 20;
}
catch (Exception e) {
throw new CryptographicException ("Invalid blob.", e);
}
#if NET_2_1
DSA dsa = (DSA)DSA.Create ();
dsa.ImportParameters (dsap);
#else
DSA dsa = null;
try {
dsa = (DSA)DSA.Create ();
dsa.ImportParameters (dsap);
}
catch (CryptographicException ce) {
try {
CspParameters csp = new CspParameters ();
csp.Flags = CspProviderFlags.UseMachineKeyStore;
dsa = new DSACryptoServiceProvider (csp);
dsa.ImportParameters (dsap);
}
catch {
throw ce;
}
}
#endif
return dsa;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="201" endline="280">
<![CDATA[
static public DSA FromCapiPrivateKeyBlobDSA (byte[] blob, int offset)
{
if (blob == null)
throw new ArgumentNullException ("blob");
if (offset >= blob.Length)
throw new ArgumentException ("blob is too small.");
DSAParameters dsap = new DSAParameters ();
try {
if ((blob [offset] != 0x07) ||				// PRIVATEKEYBLOB (0x07)
(blob [offset + 1] != 0x02) ||			// Version (0x02)
(blob [offset + 2] != 0x00) ||			// Reserved (word)
(blob [offset + 3] != 0x00) ||
(ToUInt32LE (blob, offset + 8) != 0x32535344))	// DWORD magic
throw new CryptographicException ("Invalid blob header");
int bitlen = ToInt32LE (blob, offset + 12);
int bytelen = bitlen >> 3;
int pos = offset + 16;
dsap.P = new byte [bytelen];
Buffer.BlockCopy (blob, pos, dsap.P, 0, bytelen);
Array.Reverse (dsap.P);
pos += bytelen;
dsap.Q = new byte [20];
Buffer.BlockCopy (blob, pos, dsap.Q, 0, 20);
Array.Reverse (dsap.Q);
pos += 20;
dsap.G = new byte [bytelen];
Buffer.BlockCopy (blob, pos, dsap.G, 0, bytelen);
Array.Reverse (dsap.G);
pos += bytelen;
dsap.X = new byte [20];
Buffer.BlockCopy (blob, pos, dsap.X, 0, 20);
Array.Reverse (dsap.X);
pos += 20;
dsap.Counter = ToInt32LE (blob, pos);
pos += 4;
dsap.Seed = new byte [20];
Buffer.BlockCopy (blob, pos, dsap.Seed, 0, 20);
Array.Reverse (dsap.Seed);
pos += 20;
}
catch (Exception e) {
throw new CryptographicException ("Invalid blob.", e);
}
#if NET_2_1
DSA dsa = (DSA)DSA.Create ();
dsa.ImportParameters (dsap);
#else
DSA dsa = null;
try {
dsa = (DSA)DSA.Create ();
dsa.ImportParameters (dsap);
}
catch (CryptographicException ce) {
try {
CspParameters csp = new CspParameters ();
csp.Flags = CspProviderFlags.UseMachineKeyStore;
dsa = new DSACryptoServiceProvider (csp);
dsa.ImportParameters (dsap);
}
catch {
throw ce;
}
}
#endif
return dsa;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="477" endline="533">
<![CDATA[
static public DSA FromCapiPublicKeyBlobDSA (byte[] blob, int offset)
{
if (blob == null)
throw new ArgumentNullException ("blob");
if (offset >= blob.Length)
throw new ArgumentException ("blob is too small.");
try {
if ((blob [offset] != 0x06) ||				// PUBLICKEYBLOB (0x06)
(blob [offset + 1] != 0x02) ||			// Version (0x02)
(blob [offset + 2] != 0x00) ||			// Reserved (word)
(blob [offset + 3] != 0x00) ||
(ToUInt32LE (blob, offset + 8) != 0x31535344))	// DWORD magic
throw new CryptographicException ("Invalid blob header");
int bitlen = ToInt32LE (blob, offset + 12);
DSAParameters dsap = new DSAParameters ();
int bytelen = bitlen >> 3;
int pos = offset + 16;
dsap.P = new byte [bytelen];
Buffer.BlockCopy (blob, pos, dsap.P, 0, bytelen);
Array.Reverse (dsap.P);
pos += bytelen;
dsap.Q = new byte [20];
Buffer.BlockCopy (blob, pos, dsap.Q, 0, 20);
Array.Reverse (dsap.Q);
pos += 20;
dsap.G = new byte [bytelen];
Buffer.BlockCopy (blob, pos, dsap.G, 0, bytelen);
Array.Reverse (dsap.G);
pos += bytelen;
dsap.Y = new byte [bytelen];
Buffer.BlockCopy (blob, pos, dsap.Y, 0, bytelen);
Array.Reverse (dsap.Y);
pos += bytelen;
dsap.Counter = ToInt32LE (blob, pos);
pos += 4;
dsap.Seed = new byte [20];
Buffer.BlockCopy (blob, pos, dsap.Seed, 0, 20);
Array.Reverse (dsap.Seed);
pos += 20;
DSA dsa = (DSA)DSA.Create ();
dsa.ImportParameters (dsap);
return dsa;
}
catch (Exception e) {
throw new CryptographicException ("Invalid blob.", e);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="713" endline="724">
<![CDATA[
static public string ToHex (byte[] input)
{
if (input == null)
return null;
StringBuilder sb = new StringBuilder (input.Length * 2);
foreach (byte b in input) {
sb.Append (b.ToString ("X2", CultureInfo.InvariantCulture));
}
foreach (byte b in input) {
sb.Append (b.ToString ("X2", CultureInfo.InvariantCulture));
}
return sb.ToString ();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="88" endline="102">
<![CDATA[
public override Type[] GetTypes()
{
if (externalModules.Length == 0)
{
return manifestModule.GetTypes();
}
List<Type> list = new List<Type>();
foreach (Module module in GetModules(false))
{
list.AddRange(module.GetTypes());
}
foreach (Module module in GetModules(false))
{
list.AddRange(module.GetTypes());
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="39" endline="47">
<![CDATA[
internal __StandAloneMethodSig(bool unmanaged, CallingConvention unmanagedCallingConvention, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
{
this.unmanaged = unmanaged;
this.unmanagedCallingConvention = unmanagedCallingConvention;
this.callingConvention = callingConvention;
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.optionalParameterTypes = optionalParameterTypes;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="44" endline="51">
<![CDATA[
internal PropertyBuilder(TypeBuilder typeBuilder, string name, PropertyAttributes attributes, PropertySignature sig, bool patchCallingConvention)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.sig = sig;
this.patchCallingConvention = patchCallingConvention;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="39" endline="47">
<![CDATA[
internal __StandAloneMethodSig(bool unmanaged, CallingConvention unmanagedCallingConvention, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
{
this.unmanaged = unmanaged;
this.unmanagedCallingConvention = unmanagedCallingConvention;
this.callingConvention = callingConvention;
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.optionalParameterTypes = optionalParameterTypes;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1276" endline="1284">
<![CDATA[
internal ArrayMethod(Module module, Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
{
this.module = module;
this.arrayClass = arrayClass;
this.methodName = methodName;
this.callingConvention = callingConvention;
this.returnType = returnType ?? module.universe.System_Void;
this.parameterTypes = Util.Copy(parameterTypes);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="39" endline="47">
<![CDATA[
internal __StandAloneMethodSig(bool unmanaged, CallingConvention unmanagedCallingConvention, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
{
this.unmanaged = unmanaged;
this.unmanagedCallingConvention = unmanagedCallingConvention;
this.callingConvention = callingConvention;
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.optionalParameterTypes = optionalParameterTypes;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="62" endline="71">
<![CDATA[
public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues)
{
this.con = con;
this.constructorArgs = constructorArgs;
this.namedProperties = namedProperties;
this.propertyValues = propertyValues;
this.namedFields = namedFields;
this.fieldValues = fieldValues;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="39" endline="47">
<![CDATA[
internal __StandAloneMethodSig(bool unmanaged, CallingConvention unmanagedCallingConvention, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
{
this.unmanaged = unmanaged;
this.unmanagedCallingConvention = unmanagedCallingConvention;
this.callingConvention = callingConvention;
this.returnType = returnType;
this.parameterTypes = parameterTypes;
this.optionalParameterTypes = optionalParameterTypes;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="48" endline="58">
<![CDATA[
private PropertySignature(CallingConventions callingConvention, Type propertyType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeOptionalCustomModifiers, Type[][] parameterTypeRequiredCustomModifiers)
{
this.callingConvention = callingConvention;
this.propertyType = propertyType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
this.parameterTypes = parameterTypes;
this.parameterOptionalCustomModifiers = parameterTypeOptionalCustomModifiers;
this.parameterRequiredCustomModifiers = parameterTypeRequiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="77" endline="85">
<![CDATA[
public ILGenerator GetILGenerator(int streamSize)
{
if (ilgen == null)
{
ilgen = new ILGenerator(typeBuilder.ModuleBuilder, streamSize);
}
return ilgen;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1600" endline="1609">
<![CDATA[
}
internal sealed override int GetModuleBuilderToken()
{
if (token == 0)
{
token = ((ModuleBuilder)elementType.Module).ImportType(this);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="77" endline="85">
<![CDATA[
public ILGenerator GetILGenerator(int streamSize)
{
if (ilgen == null)
{
ilgen = new ILGenerator(typeBuilder.ModuleBuilder, streamSize);
}
return ilgen;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1319" endline="1330">
<![CDATA[
}
internal override MethodSignature MethodSignature
{
get
{
if (methodSignature == null)
{
methodSignature = MethodSignature.MakeFromBuilder(returnType, parameterTypes, null, callingConvention, 0);
}
return methodSignature;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="77" endline="85">
<![CDATA[
public ILGenerator GetILGenerator(int streamSize)
{
if (ilgen == null)
{
ilgen = new ILGenerator(typeBuilder.ModuleBuilder, streamSize);
}
return ilgen;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2362" endline="2371">
<![CDATA[
}
internal override int GetModuleBuilderToken()
{
if (token == 0)
{
token = ((ModuleBuilder)type.Module).ImportType(this);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="77" endline="85">
<![CDATA[
public ILGenerator GetILGenerator(int streamSize)
{
if (ilgen == null)
{
ilgen = new ILGenerator(typeBuilder.ModuleBuilder, streamSize);
}
return ilgen;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="77" endline="85">
<![CDATA[
public ILGenerator GetILGenerator(int streamSize)
{
if (ilgen == null)
{
ilgen = new ILGenerator(typeBuilder.ModuleBuilder, streamSize);
}
return ilgen;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="77" endline="85">
<![CDATA[
public ILGenerator GetILGenerator(int streamSize)
{
if (ilgen == null)
{
ilgen = new ILGenerator(typeBuilder.ModuleBuilder, streamSize);
}
return ilgen;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="523" endline="533">
<![CDATA[
public override Module ManifestModule
{
get
{
if (pseudoManifestModule == null)
{
pseudoManifestModule = new ManifestModule(this);
}
return pseudoManifestModule;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="349" endline="357">
<![CDATA[
public override MethodInfo GetGenericMethodDefinition()
{
if (gtpb == null)
{
throw new InvalidOperationException();
}
return this;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="152" endline="160">
<![CDATA[
public byte[] GetSignature()
{
if (module == null)
{
throw new NotSupportedException();
}
return GetSignature(module).ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="349" endline="357">
<![CDATA[
public override MethodInfo GetGenericMethodDefinition()
{
if (gtpb == null)
{
throw new InvalidOperationException();
}
return this;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="349" endline="357">
<![CDATA[
public override MethodInfo GetGenericMethodDefinition()
{
if (gtpb == null)
{
throw new InvalidOperationException();
}
return this;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="349" endline="357">
<![CDATA[
public override MethodInfo GetGenericMethodDefinition()
{
if (gtpb == null)
{
throw new InvalidOperationException();
}
return this;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="523" endline="533">
<![CDATA[
public override Module ManifestModule
{
get
{
if (pseudoManifestModule == null)
{
pseudoManifestModule = new ManifestModule(this);
}
return pseudoManifestModule;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520">
<![CDATA[
private sealed class ParameterInfoImpl
{
private readonly MethodBuilder method;
private readonly int parameter;
internal ParameterInfoImpl(MethodBuilder method, int parameter)
{
this.method = method;
this.parameter = parameter;
}
private ParameterBuilder ParameterBuilder
{
get
{
if (method.parameters != null)
{
foreach (ParameterBuilder pb in method.parameters)
{
if (pb.Position == parameter)
{
return pb;
}
}
}
return null;
}
}
public override string Name
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.Name
}
}
public override Type ParameterType
{
get { return parameter == -1 ? method.returnType
}
public override ParameterAttributes Attributes
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? (ParameterAttributes)pb.Attributes
}
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
{
return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
}
if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
{
return Missing.Value;
}
return null;
}
}
private Type[] GetCustomModifiers(int optOrReq)
{
if (method.modifiers == null || method.modifiers[parameter + 1] == null)
{
return Type.EmptyTypes;
}
return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
}
public override Type[] GetOptionalCustomModifiers()
{
return GetCustomModifiers(0);
}
public override Type[] GetRequiredCustomModifiers()
{
return GetCustomModifiers(1);
}
public override MemberInfo Member
{
get { return method; }
}
public override int MetadataToken
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.PseudoToken
}
}
internal override Module Module
{
get { return method.Module; }
}
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="851" endline="860">
<![CDATA[
internal string[] GetManifestResourceNames()
{
string[] names = new string[ManifestResource.records.Length];
for (int i = 0; i < ManifestResource.records.Length; i++)
{
names[i] = GetString(ManifestResource.records[i].Name);
}
for (int i = 0; i < ManifestResource.records.Length; i++)
{
names[i] = GetString(ManifestResource.records[i].Name);
}
return names;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="636" endline="646">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
if (parameters != null)
{
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="115" endline="125">
<![CDATA[
internal void PopulatePropertyAndEventTables()
{
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="636" endline="646">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
if (parameters != null)
{
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="126" endline="135">
<![CDATA[
internal void WriteTypeDefTable(MetadataWriter mw)
{
int fieldList = 1;
int methodList = 1;
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="636" endline="646">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
if (parameters != null)
{
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144">
<![CDATA[
internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
{
int paramList = 1;
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="659" endline="669">
<![CDATA[
internal override MethodSignature MethodSignature
{
get
{
if (methodSignature == null)
{
methodSignature = MethodSignature.MakeFromBuilder(returnType, parameterTypes, modifiers, callingConvention, gtpb == null ? 0
}
return methodSignature;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="58" endline="68">
<![CDATA[
internal override PropertySignature PropertySignature
{
get
{
if (sig == null)
{
sig = PropertySignature.ReadSig(module, module.GetBlob(module.Property.records[index].Type), declaringType);
}
return sig;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="659" endline="669">
<![CDATA[
internal override MethodSignature MethodSignature
{
get
{
if (methodSignature == null)
{
methodSignature = MethodSignature.MakeFromBuilder(returnType, parameterTypes, modifiers, callingConvention, gtpb == null ? 0
}
return methodSignature;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="410" endline="420">
<![CDATA[
public ConstructorInfo Constructor
{
get
{
if (lazyConstructor == null)
{
lazyConstructor = (ConstructorInfo)module.ResolveMethod(module.CustomAttribute.records[index].Type);
}
return lazyConstructor;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="274" endline="296">
<![CDATA[
}
public abstract int MDStreamVersion { get ;}
public abstract Assembly Assembly { get; }
public abstract string FullyQualifiedName { get; }
public abstract string Name { get; }
public abstract Guid ModuleVersionId { get; }
public abstract Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract string ResolveString(int metadataToken);
public abstract Type[] __ResolveOptionalParameterTypes(int metadataToken);
public abstract string ScopeName { get; }
internal abstract Type GetTypeImpl(string typeName);
internal abstract void GetTypesImpl(List<Type> list);
public Type GetType(string className)
{
return GetType(className, false, false);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="274" endline="296">
<![CDATA[
}
public abstract int MDStreamVersion { get ;}
public abstract Assembly Assembly { get; }
public abstract string FullyQualifiedName { get; }
public abstract string Name { get; }
public abstract Guid ModuleVersionId { get; }
public abstract Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract string ResolveString(int metadataToken);
public abstract Type[] __ResolveOptionalParameterTypes(int metadataToken);
public abstract string ScopeName { get; }
internal abstract Type GetTypeImpl(string typeName);
internal abstract void GetTypesImpl(List<Type> list);
public Type GetType(string className)
{
return GetType(className, false, false);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="59" endline="78">
<![CDATA[
#else
if (runningOnMono)
{
#if MONO
return new MdbWriter(moduleBuilder);
#else
throw new NotSupportedException("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols.");
#endif
}
else
{
return new PdbWriter(moduleBuilder);
}
#endif
}
internal static byte[] GetDebugInfo(ISymbolWriterImpl writer, ref IMAGE_DEBUG_DIRECTORY idd)
{
return writer.GetDebugInfo(ref idd);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="274" endline="296">
<![CDATA[
}
public abstract int MDStreamVersion { get ;}
public abstract Assembly Assembly { get; }
public abstract string FullyQualifiedName { get; }
public abstract string Name { get; }
public abstract Guid ModuleVersionId { get; }
public abstract Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract string ResolveString(int metadataToken);
public abstract Type[] __ResolveOptionalParameterTypes(int metadataToken);
public abstract string ScopeName { get; }
internal abstract Type GetTypeImpl(string typeName);
internal abstract void GetTypesImpl(List<Type> list);
public Type GetType(string className)
{
return GetType(className, false, false);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="59" endline="147">
<![CDATA[
}
}
public enum AssemblyComparisonResult
{
Unknown = 0,
EquivalentFullMatch = 1,
EquivalentWeakNamed = 2,
EquivalentFXUnified = 3,
EquivalentUnified = 4,
NonEquivalentVersion = 5,
NonEquivalent = 6,
EquivalentPartialMatch = 7,
EquivalentPartialWeakNamed = 8,
EquivalentPartialUnified = 9,
EquivalentPartialFXUnified = 10,
NonEquivalentPartialVersion = 11,
}
public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args);
public sealed class Universe
{
internal readonly Dictionary<Type, Type> canonicalizedTypes = new Dictionary<Type, Type>();
private readonly List<Assembly> assemblies = new List<Assembly>();
private readonly List<AssemblyBuilder> dynamicAssemblies = new List<AssemblyBuilder>();
private readonly Dictionary<string, Assembly> assembliesByName = new Dictionary<string, Assembly>();
private readonly Dictionary<System.Type, Type> importedTypes = new Dictionary<System.Type, Type>();
private Type typeof_System_Object;
private Type typeof_System_ValueType;
private Type typeof_System_Enum;
private Type typeof_System_Void;
private Type typeof_System_Boolean;
private Type typeof_System_Char;
private Type typeof_System_SByte;
private Type typeof_System_Byte;
private Type typeof_System_Int16;
private Type typeof_System_UInt16;
private Type typeof_System_Int32;
private Type typeof_System_UInt32;
private Type typeof_System_Int64;
private Type typeof_System_UInt64;
private Type typeof_System_Single;
private Type typeof_System_Double;
private Type typeof_System_String;
private Type typeof_System_IntPtr;
private Type typeof_System_UIntPtr;
private Type typeof_System_TypedReference;
private Type typeof_System_Type;
private Type typeof_System_Array;
private Type typeof_System_DateTime;
private Type typeof_System_DBNull;
private Type typeof_System_Decimal;
private Type typeof_System_NonSerializedAttribute;
private Type typeof_System_SerializableAttribute;
private Type typeof_System_AttributeUsageAttribute;
private Type typeof_System_Reflection_AssemblyCultureAttribute;
private Type typeof_System_Runtime_InteropServices_DllImportAttribute;
private Type typeof_System_Runtime_InteropServices_FieldOffsetAttribute;
private Type typeof_System_Runtime_InteropServices_InAttribute;
private Type typeof_System_Runtime_InteropServices_MarshalAsAttribute;
private Type typeof_System_Runtime_InteropServices_UnmanagedType;
private Type typeof_System_Runtime_InteropServices_VarEnum;
private Type typeof_System_Runtime_InteropServices_OutAttribute;
private Type typeof_System_Runtime_InteropServices_StructLayoutAttribute;
private Type typeof_System_Runtime_InteropServices_OptionalAttribute;
private Type typeof_System_Runtime_InteropServices_PreserveSigAttribute;
private Type typeof_System_Runtime_InteropServices_ComImportAttribute;
private Type typeof_System_Runtime_CompilerServices_DecimalConstantAttribute;
private Type typeof_System_Runtime_CompilerServices_SpecialNameAttribute;
private Type typeof_System_Runtime_CompilerServices_MethodImplAttribute;
private Type typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute;
private Type typeof_System_Reflection_AssemblyCopyrightAttribute;
private Type typeof_System_Reflection_AssemblyTrademarkAttribute;
private Type typeof_System_Reflection_AssemblyProductAttribute;
private Type typeof_System_Reflection_AssemblyCompanyAttribute;
private Type typeof_System_Reflection_AssemblyDescriptionAttribute;
private Type typeof_System_Reflection_AssemblyTitleAttribute;
private Type typeof_System_Reflection_AssemblyInformationalVersionAttribute;
private Type typeof_System_Reflection_AssemblyFileVersionAttribute;
private Type typeof_System_Security_Permissions_CodeAccessSecurityAttribute;
private Type typeof_System_Security_Permissions_HostProtectionAttribute;
private Type typeof_System_Security_Permissions_PermissionSetAttribute;
private Type typeof_System_Security_Permissions_SecurityAction;
private List<ResolveEventHandler> resolvers = new List<ResolveEventHandler>();
internal Assembly Mscorlib
{
get { return Load("mscorlib"); }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="274" endline="296">
<![CDATA[
}
public abstract int MDStreamVersion { get ;}
public abstract Assembly Assembly { get; }
public abstract string FullyQualifiedName { get; }
public abstract string Name { get; }
public abstract Guid ModuleVersionId { get; }
public abstract Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
public abstract string ResolveString(int metadataToken);
public abstract Type[] __ResolveOptionalParameterTypes(int metadataToken);
public abstract string ScopeName { get; }
internal abstract Type GetTypeImpl(string typeName);
internal abstract void GetTypesImpl(List<Type> list);
public Type GetType(string className)
{
return GetType(className, false, false);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="213" endline="219">
<![CDATA[
}
public override Type[] GetGenericArguments()
{
PopulateGenericArguments();
return Util.Copy(typeArgs);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="327" endline="333">
<![CDATA[
public Type[] GetTypes()
{
List<Type> list = new List<Type>();
GetTypesImpl(list);
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1159" endline="1165">
<![CDATA[
internal int GetSignatureBlobIndex(Signature sig)
{
ByteBuffer bb = new ByteBuffer(16);
sig.WriteSig(this, bb);
return this.Blobs.Add(bb);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="228" endline="239">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
PopulateTypeDef();
foreach (TypeDefImpl type in typeDefs)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (TypeDefImpl type in typeDefs)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="125" endline="139">
<![CDATA[
}
public override Module[] GetLoadedModules(bool getResourceModules)
{
List<Module> list = new List<Module>();
list.Add(manifestModule);
foreach (Module m in externalModules)
{
if (m != null)
{
list.Add(m);
}
}
foreach (Module m in externalModules)
{
if (m != null)
{
list.Add(m);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="387" endline="399">
<![CDATA[
public abstract AssemblyName[] __GetReferencedAssemblies();
internal Type CanonicalizeType(Type type)
{
Type canon;
if (!universe.canonicalizedTypes.TryGetValue(type, out canon))
{
canon = type;
universe.canonicalizedTypes.Add(canon, canon);
}
return canon;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="563" endline="573">
<![CDATA[
internal int ImportMember(MethodBase member)
{
int token;
if (!importedMembers.TryGetValue(member, out token))
{
token = member.ImportTo(this);
importedMembers.Add(member, token);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="387" endline="399">
<![CDATA[
public abstract AssemblyName[] __GetReferencedAssemblies();
internal Type CanonicalizeType(Type type)
{
Type canon;
if (!universe.canonicalizedTypes.TryGetValue(type, out canon))
{
canon = type;
universe.canonicalizedTypes.Add(canon, canon);
}
return canon;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="574" endline="584">
<![CDATA[
internal int ImportMember(FieldInfo member)
{
int token;
if (!importedMembers.TryGetValue(member, out token))
{
token = member.ImportTo(this);
importedMembers.Add(member, token);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="387" endline="399">
<![CDATA[
public abstract AssemblyName[] __GetReferencedAssemblies();
internal Type CanonicalizeType(Type type)
{
Type canon;
if (!universe.canonicalizedTypes.TryGetValue(type, out canon))
{
canon = type;
universe.canonicalizedTypes.Add(canon, canon);
}
return canon;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="636" endline="650">
<![CDATA[
private int ImportAssemblyRef(Assembly asm)
{
int token;
if (!referencedAssemblies.TryGetValue(asm, out token))
{
token = 0x23800001 + referencedAssemblies.Count;
referencedAssemblies.Add(asm, token);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="59" endline="78">
<![CDATA[
#else
if (runningOnMono)
{
#if MONO
return new MdbWriter(moduleBuilder);
#else
throw new NotSupportedException("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols.");
#endif
}
else
{
return new PdbWriter(moduleBuilder);
}
#endif
}
internal static byte[] GetDebugInfo(ISymbolWriterImpl writer, ref IMAGE_DEBUG_DIRECTORY idd)
{
return writer.GetDebugInfo(ref idd);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="59" endline="147">
<![CDATA[
}
}
public enum AssemblyComparisonResult
{
Unknown = 0,
EquivalentFullMatch = 1,
EquivalentWeakNamed = 2,
EquivalentFXUnified = 3,
EquivalentUnified = 4,
NonEquivalentVersion = 5,
NonEquivalent = 6,
EquivalentPartialMatch = 7,
EquivalentPartialWeakNamed = 8,
EquivalentPartialUnified = 9,
EquivalentPartialFXUnified = 10,
NonEquivalentPartialVersion = 11,
}
public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args);
public sealed class Universe
{
internal readonly Dictionary<Type, Type> canonicalizedTypes = new Dictionary<Type, Type>();
private readonly List<Assembly> assemblies = new List<Assembly>();
private readonly List<AssemblyBuilder> dynamicAssemblies = new List<AssemblyBuilder>();
private readonly Dictionary<string, Assembly> assembliesByName = new Dictionary<string, Assembly>();
private readonly Dictionary<System.Type, Type> importedTypes = new Dictionary<System.Type, Type>();
private Type typeof_System_Object;
private Type typeof_System_ValueType;
private Type typeof_System_Enum;
private Type typeof_System_Void;
private Type typeof_System_Boolean;
private Type typeof_System_Char;
private Type typeof_System_SByte;
private Type typeof_System_Byte;
private Type typeof_System_Int16;
private Type typeof_System_UInt16;
private Type typeof_System_Int32;
private Type typeof_System_UInt32;
private Type typeof_System_Int64;
private Type typeof_System_UInt64;
private Type typeof_System_Single;
private Type typeof_System_Double;
private Type typeof_System_String;
private Type typeof_System_IntPtr;
private Type typeof_System_UIntPtr;
private Type typeof_System_TypedReference;
private Type typeof_System_Type;
private Type typeof_System_Array;
private Type typeof_System_DateTime;
private Type typeof_System_DBNull;
private Type typeof_System_Decimal;
private Type typeof_System_NonSerializedAttribute;
private Type typeof_System_SerializableAttribute;
private Type typeof_System_AttributeUsageAttribute;
private Type typeof_System_Reflection_AssemblyCultureAttribute;
private Type typeof_System_Runtime_InteropServices_DllImportAttribute;
private Type typeof_System_Runtime_InteropServices_FieldOffsetAttribute;
private Type typeof_System_Runtime_InteropServices_InAttribute;
private Type typeof_System_Runtime_InteropServices_MarshalAsAttribute;
private Type typeof_System_Runtime_InteropServices_UnmanagedType;
private Type typeof_System_Runtime_InteropServices_VarEnum;
private Type typeof_System_Runtime_InteropServices_OutAttribute;
private Type typeof_System_Runtime_InteropServices_StructLayoutAttribute;
private Type typeof_System_Runtime_InteropServices_OptionalAttribute;
private Type typeof_System_Runtime_InteropServices_PreserveSigAttribute;
private Type typeof_System_Runtime_InteropServices_ComImportAttribute;
private Type typeof_System_Runtime_CompilerServices_DecimalConstantAttribute;
private Type typeof_System_Runtime_CompilerServices_SpecialNameAttribute;
private Type typeof_System_Runtime_CompilerServices_MethodImplAttribute;
private Type typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute;
private Type typeof_System_Reflection_AssemblyCopyrightAttribute;
private Type typeof_System_Reflection_AssemblyTrademarkAttribute;
private Type typeof_System_Reflection_AssemblyProductAttribute;
private Type typeof_System_Reflection_AssemblyCompanyAttribute;
private Type typeof_System_Reflection_AssemblyDescriptionAttribute;
private Type typeof_System_Reflection_AssemblyTitleAttribute;
private Type typeof_System_Reflection_AssemblyInformationalVersionAttribute;
private Type typeof_System_Reflection_AssemblyFileVersionAttribute;
private Type typeof_System_Security_Permissions_CodeAccessSecurityAttribute;
private Type typeof_System_Security_Permissions_HostProtectionAttribute;
private Type typeof_System_Security_Permissions_PermissionSetAttribute;
private Type typeof_System_Security_Permissions_SecurityAction;
private List<ResolveEventHandler> resolvers = new List<ResolveEventHandler>();
internal Assembly Mscorlib
{
get { return Load("mscorlib"); }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408">
<![CDATA[
internal abstract Type GetModuleType();
internal abstract ByteReader GetBlob(int blobIndex);
internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
{
return GetCustomAttributes(0x00000001, attributeType);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="213" endline="219">
<![CDATA[
}
public override Type[] GetGenericArguments()
{
PopulateGenericArguments();
return Util.Copy(typeArgs);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="491" endline="503">
<![CDATA[
private Assembly ResolveAssemblyRef(int index)
{
if (assemblyRefs == null)
{
assemblyRefs = new Assembly[AssemblyRef.RowCount];
}
if (assemblyRefs[index] == null)
{
assemblyRefs[index] = ResolveAssemblyRefImpl(ref AssemblyRef.records[index]);
}
return assemblyRefs[index];
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="593" endline="605">
<![CDATA[
internal FieldInfo GetFieldAt(TypeDefImpl owner, int index)
{
if (fields == null)
{
fields = new FieldInfo[Field.records.Length];
}
if (fields[index] == null)
{
fields[index] = new FieldDefImpl(this, owner ?? FindFieldOwner(index), index);
}
return fields[index];
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="851" endline="860">
<![CDATA[
internal string[] GetManifestResourceNames()
{
string[] names = new string[ManifestResource.records.Length];
for (int i = 0; i < ManifestResource.records.Length; i++)
{
names[i] = GetString(ManifestResource.records[i].Name);
}
for (int i = 0; i < ManifestResource.records.Length; i++)
{
names[i] = GetString(ManifestResource.records[i].Name);
}
return names;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="861" endline="872">
<![CDATA[
internal ManifestResourceInfo GetManifestResourceInfo(string resourceName)
{
for (int i = 0; i < ManifestResource.records.Length; i++)
{
if (resourceName == GetString(ManifestResource.records[i].Name))
{
return new ManifestResourceInfo(this, i);
}
}
for (int i = 0; i < ManifestResource.records.Length; i++)
{
if (resourceName == GetString(ManifestResource.records[i].Name))
{
return new ManifestResourceInfo(this, i);
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="175" endline="186">
<![CDATA[
private int GetModuleIndex(string name)
{
for (int i = 0; i < manifestModule.File.records.Length; i++)
{
if (name.Equals(manifestModule.GetString(manifestModule.File.records[i].Name), StringComparison.InvariantCultureIgnoreCase))
{
return i;
}
}
for (int i = 0; i < manifestModule.File.records.Length; i++)
{
if (name.Equals(manifestModule.GetString(manifestModule.File.records[i].Name), StringComparison.InvariantCultureIgnoreCase))
{
return i;
}
}
return -1;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="44" endline="51">
<![CDATA[
internal PropertyBuilder(TypeBuilder typeBuilder, string name, PropertyAttributes attributes, PropertySignature sig, bool patchCallingConvention)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.sig = sig;
this.patchCallingConvention = patchCallingConvention;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="44" endline="51">
<![CDATA[
internal PropertyBuilder(TypeBuilder typeBuilder, string name, PropertyAttributes attributes, PropertySignature sig, bool patchCallingConvention)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.sig = sig;
this.patchCallingConvention = patchCallingConvention;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="62" endline="71">
<![CDATA[
public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues)
{
this.con = con;
this.constructorArgs = constructorArgs;
this.namedProperties = namedProperties;
this.propertyValues = propertyValues;
this.namedFields = namedFields;
this.fieldValues = fieldValues;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="44" endline="51">
<![CDATA[
internal PropertyBuilder(TypeBuilder typeBuilder, string name, PropertyAttributes attributes, PropertySignature sig, bool patchCallingConvention)
{
this.typeBuilder = typeBuilder;
this.name = name;
this.attributes = attributes;
this.sig = sig;
this.patchCallingConvention = patchCallingConvention;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="48" endline="58">
<![CDATA[
private PropertySignature(CallingConventions callingConvention, Type propertyType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeOptionalCustomModifiers, Type[][] parameterTypeRequiredCustomModifiers)
{
this.callingConvention = callingConvention;
this.propertyType = propertyType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
this.parameterTypes = parameterTypes;
this.parameterOptionalCustomModifiers = parameterTypeOptionalCustomModifiers;
this.parameterRequiredCustomModifiers = parameterTypeRequiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="221" endline="229">
<![CDATA[
private void AddMethodSemantics(short semantics, int methodToken, int propertyToken)
{
MethodSemanticsTable.Record rec = new MethodSemanticsTable.Record();
rec.Semantics = semantics;
rec.Method = methodToken;
rec.Association = propertyToken;
typeBuilder.ModuleBuilder.MethodSemantics.AddRecord(rec);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="431" endline="439">
<![CDATA[
public void AddResourceFile(string name, string fileName, ResourceAttributes attribs)
{
ResourceFile resfile = new ResourceFile();
resfile.Name = name;
resfile.FileName = fileName;
resfile.Attributes = attribs;
resourceFiles.Add(resfile);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="230" endline="250">
<![CDATA[
internal override bool IsPublic
{
get
{
if ((getter != null && getter.IsPublic) || (setter != null && setter.IsPublic))
{
return true;
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
if (method.IsPublic)
{
return true;
}
}
foreach (MethodBuilder method in otherMethods)
{
if (method.IsPublic)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="251" endline="272">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if ((getter != null && getter.IsStatic) || (setter != null && setter.IsStatic))
{
return true;
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
if (method.IsStatic)
{
return true;
}
}
foreach (MethodBuilder method in otherMethods)
{
if (method.IsStatic)
{
return true;
}
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41">
<![CDATA[
internal ResourceModule(Assembly assembly, string scopeName, string location)
{
this.assembly = assembly;
this.scopeName = scopeName;
this.location = location;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41">
<![CDATA[
internal ResourceModule(Assembly assembly, string scopeName, string location)
{
this.assembly = assembly;
this.scopeName = scopeName;
this.location = location;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41">
<![CDATA[
internal ResourceModule(Assembly assembly, string scopeName, string location)
{
this.assembly = assembly;
this.scopeName = scopeName;
this.location = location;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41">
<![CDATA[
internal ResourceModule(Assembly assembly, string scopeName, string location)
{
this.assembly = assembly;
this.scopeName = scopeName;
this.location = location;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41">
<![CDATA[
internal ResourceModule(Assembly assembly, string scopeName, string location)
{
this.assembly = assembly;
this.scopeName = scopeName;
this.location = location;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41">
<![CDATA[
internal ResourceModule(Assembly assembly, string scopeName, string location)
{
this.assembly = assembly;
this.scopeName = scopeName;
this.location = location;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41">
<![CDATA[
internal ResourceModule(Assembly assembly, string scopeName, string location)
{
this.assembly = assembly;
this.scopeName = scopeName;
this.location = location;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="39" endline="45">
<![CDATA[
internal AssemblyReader(string location, ModuleReader manifestModule)
{
this.location = location;
this.manifestModule = manifestModule;
externalModules = new Module[manifestModule.File.records.Length];
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="36" endline="53">
<![CDATA[
private readonly List<Type> args = new List<Type>();
private readonly List<LocalBuilder> locals = new List<LocalBuilder>();
private readonly List<Type[]> requiredCustomModifiers = new List<Type[]>();
private readonly List<Type[]> optionalCustomModifiers = new List<Type[]>();
private readonly List<Type> optionalArgs = new List<Type>();
private Type returnType;
private Type[] returnTypeRequiredCustomModifiers;
private Type[] returnTypeOptionalCustomModifiers;
private CallingConventions callingConvention;
private CallingConvention unmanagedCallConv;
private bool unmanaged;
private bool optional;
private SignatureHelper(ModuleBuilder module, byte type)
{
this.module = module;
this.type = type;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="82" endline="143">
<![CDATA[
internal readonly Dictionary<Type, Type> canonicalizedTypes = new Dictionary<Type, Type>();
private readonly List<Assembly> assemblies = new List<Assembly>();
private readonly List<AssemblyBuilder> dynamicAssemblies = new List<AssemblyBuilder>();
private readonly Dictionary<string, Assembly> assembliesByName = new Dictionary<string, Assembly>();
private readonly Dictionary<System.Type, Type> importedTypes = new Dictionary<System.Type, Type>();
private Type typeof_System_Object;
private Type typeof_System_ValueType;
private Type typeof_System_Enum;
private Type typeof_System_Void;
private Type typeof_System_Boolean;
private Type typeof_System_Char;
private Type typeof_System_SByte;
private Type typeof_System_Byte;
private Type typeof_System_Int16;
private Type typeof_System_UInt16;
private Type typeof_System_Int32;
private Type typeof_System_UInt32;
private Type typeof_System_Int64;
private Type typeof_System_UInt64;
private Type typeof_System_Single;
private Type typeof_System_Double;
private Type typeof_System_String;
private Type typeof_System_IntPtr;
private Type typeof_System_UIntPtr;
private Type typeof_System_TypedReference;
private Type typeof_System_Type;
private Type typeof_System_Array;
private Type typeof_System_DateTime;
private Type typeof_System_DBNull;
private Type typeof_System_Decimal;
private Type typeof_System_NonSerializedAttribute;
private Type typeof_System_SerializableAttribute;
private Type typeof_System_AttributeUsageAttribute;
private Type typeof_System_Reflection_AssemblyCultureAttribute;
private Type typeof_System_Runtime_InteropServices_DllImportAttribute;
private Type typeof_System_Runtime_InteropServices_FieldOffsetAttribute;
private Type typeof_System_Runtime_InteropServices_InAttribute;
private Type typeof_System_Runtime_InteropServices_MarshalAsAttribute;
private Type typeof_System_Runtime_InteropServices_UnmanagedType;
private Type typeof_System_Runtime_InteropServices_VarEnum;
private Type typeof_System_Runtime_InteropServices_OutAttribute;
private Type typeof_System_Runtime_InteropServices_StructLayoutAttribute;
private Type typeof_System_Runtime_InteropServices_OptionalAttribute;
private Type typeof_System_Runtime_InteropServices_PreserveSigAttribute;
private Type typeof_System_Runtime_InteropServices_ComImportAttribute;
private Type typeof_System_Runtime_CompilerServices_DecimalConstantAttribute;
private Type typeof_System_Runtime_CompilerServices_SpecialNameAttribute;
private Type typeof_System_Runtime_CompilerServices_MethodImplAttribute;
private Type typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute;
private Type typeof_System_Reflection_AssemblyCopyrightAttribute;
private Type typeof_System_Reflection_AssemblyTrademarkAttribute;
private Type typeof_System_Reflection_AssemblyProductAttribute;
private Type typeof_System_Reflection_AssemblyCompanyAttribute;
private Type typeof_System_Reflection_AssemblyDescriptionAttribute;
private Type typeof_System_Reflection_AssemblyTitleAttribute;
private Type typeof_System_Reflection_AssemblyInformationalVersionAttribute;
private Type typeof_System_Reflection_AssemblyFileVersionAttribute;
private Type typeof_System_Security_Permissions_CodeAccessSecurityAttribute;
private Type typeof_System_Security_Permissions_HostProtectionAttribute;
private Type typeof_System_Security_Permissions_PermissionSetAttribute;
private Type typeof_System_Security_Permissions_SecurityAction;
private List<ResolveEventHandler> resolvers = new List<ResolveEventHandler>();
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="84" endline="96">
<![CDATA[
public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, Signature.PROPERTY);
sig.returnType = returnType;
sig.returnTypeOptionalCustomModifiers = Type.EmptyTypes;
sig.returnTypeRequiredCustomModifiers = Type.EmptyTypes;
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
return sig;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="191" endline="200">
<![CDATA[
public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="140" endline="151">
<![CDATA[
public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, 0);
sig.returnType = returnType;
sig.callingConvention = CallingConventions.Standard;
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
return sig;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="191" endline="200">
<![CDATA[
public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="152" endline="160">
<![CDATA[
public byte[] GetSignature()
{
if (module == null)
{
throw new NotSupportedException();
}
return GetSignature(module).ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="152" endline="160">
<![CDATA[
public byte[] GetSignature()
{
if (module == null)
{
throw new NotSupportedException();
}
return GetSignature(module).ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="478" endline="490">
<![CDATA[
}
internal CustomAttributeBuilder DecodeBlob(Assembly asm)
{
if (blob == null)
{
return this;
}
else
{
return ToData(asm).__ToBuilder();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="152" endline="160">
<![CDATA[
public byte[] GetSignature()
{
if (module == null)
{
throw new NotSupportedException();
}
return GetSignature(module).ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1010" endline="1019">
<![CDATA[
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
if (genericTypeArguments != null || genericMethodArguments != null)
{
throw new NotImplementedException();
}
return types[(metadataToken & 0xFFFFFF) - 1];
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="100" endline="291">
<![CDATA[
private readonly int position;
private sealed class DummyModule
{
internal DummyModule()
{
}
public override bool Equals(object obj)
{
throw new InvalidOperationException();
}
public override int GetHashCode()
{
throw new InvalidOperationException();
}
public override string ToString()
{
throw new InvalidOperationException();
}
public override int MDStreamVersion
{
get { throw new InvalidOperationException(); }
}
public override Assembly Assembly
{
get { throw new InvalidOperationException(); }
}
internal override Type GetTypeImpl(string typeName)
{
throw new InvalidOperationException();
}
internal override void GetTypesImpl(List<Type> list)
{
throw new InvalidOperationException();
}
public override string FullyQualifiedName
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override Guid ModuleVersionId
{
get { throw new InvalidOperationException(); }
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override string ResolveString(int metadataToken)
{
throw new InvalidOperationException();
}
public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
{
throw new InvalidOperationException();
}
public override string ScopeName
{
get { throw new InvalidOperationException(); }
}
public override AssemblyName[] __GetReferencedAssemblies()
{
throw new InvalidOperationException();
}
internal override Type GetModuleType()
{
throw new InvalidOperationException();
}
internal override ByteReader GetBlob(int blobIndex)
{
throw new InvalidOperationException();
}
}
internal static Type Make(int position)
{
return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
}
private UnboundGenericMethodParameter(int position)
{
this.position = position;
}
public override bool Equals(object obj)
{
UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
return other != null && other.position == position;
}
public override int GetHashCode()
{
return position;
}
public override string Namespace
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override int MetadataToken
{
get { throw new InvalidOperationException(); }
}
public override Module Module
{
get { return module; }
}
public override int GenericParameterPosition
{
get { return position; }
}
public override Type DeclaringType
{
get { return null; }
}
public override MethodBase DeclaringMethod
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetGenericParameterConstraints()
{
throw new InvalidOperationException();
}
public override GenericParameterAttributes GenericParameterAttributes
{
get { throw new InvalidOperationException(); }
}
internal override Type BindTypeParameters(IGenericBinder binder)
{
return binder.BindMethodParameter(this);
}
}
sealed class GenericTypeParameter
{
private readonly ModuleReader module;
private readonly int index;
internal GenericTypeParameter(ModuleReader module, int index)
{
this.module = module;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="95" endline="101">
<![CDATA[
public void SetLocalSymInfo(string name, int startOffset, int endOffset)
{
this.name = name;
this.startOffset = startOffset;
this.endOffset = endOffset;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552">
<![CDATA[
protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
this.elementType = elementType;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1553" endline="1560">
<![CDATA[
protected bool EqualsHelper(ElementHolderType other)
{
return other != null
&& other.elementType.Equals(elementType)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="59" endline="67">
<![CDATA[
public override bool Equals(object obj)
{
PropertySignature other = obj as PropertySignature;
return other != null
&& other.propertyType.Equals(propertyType)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1553" endline="1560">
<![CDATA[
protected bool EqualsHelper(ElementHolderType other)
{
return other != null
&& other.elementType.Equals(elementType)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="51" endline="59">
<![CDATA[
public override bool Equals(object obj)
{
FieldSignature other = obj as FieldSignature;
return other != null
&& other.fieldType.Equals(fieldType)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1600" endline="1609">
<![CDATA[
}
internal sealed override int GetModuleBuilderToken()
{
if (token == 0)
{
token = ((ModuleBuilder)elementType.Module).ImportType(this);
}
return token;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1319" endline="1330">
<![CDATA[
}
internal override MethodSignature MethodSignature
{
get
{
if (methodSignature == null)
{
methodSignature = MethodSignature.MakeFromBuilder(returnType, parameterTypes, null, callingConvention, 0);
}
return methodSignature;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1669" endline="1680">
<![CDATA[
protected abstract string GetSuffix();
protected abstract Type Wrap(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers);
}
sealed class ArrayType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new ArrayType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1757" endline="1766">
<![CDATA[
}
sealed class MultiArrayType
{
private readonly int rank;
internal static Type Make(Type type, int rank, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new MultiArrayType(type, rank, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1669" endline="1680">
<![CDATA[
protected abstract string GetSuffix();
protected abstract Type Wrap(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers);
}
sealed class ArrayType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new ArrayType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1886" endline="1958">
<![CDATA[
}
private sealed class ParameterInfoImpl
{
private readonly MethodInfo method;
private readonly Type type;
private readonly int pos;
internal ParameterInfoImpl(MethodInfo method, Type type, int pos)
{
this.method = method;
this.type = type;
this.pos = pos;
}
public override Type ParameterType
{
get { return type; }
}
public override string Name
{
get { return null; }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return pos; }
}
public override object RawDefaultValue
{
get { return null; }
}
public override Type[] GetOptionalCustomModifiers()
{
return Empty<Type>.Array;
}
public override Type[] GetRequiredCustomModifiers()
{
return Empty<Type>.Array;
}
public override MemberInfo Member
{
get { return method.IsConstructor ? (MethodBase)new ConstructorInfoImpl(method)
}
public override int MetadataToken
{
get { return 0x8000000; }
}
internal override Module Module
{
get { return method.Module; }
}
}
}
sealed class ByRefType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new ByRefType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1669" endline="1680">
<![CDATA[
protected abstract string GetSuffix();
protected abstract Type Wrap(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers);
}
sealed class ArrayType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new ArrayType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1999" endline="2006">
<![CDATA[
}
sealed class PointerType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new PointerType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1757" endline="1766">
<![CDATA[
}
sealed class MultiArrayType
{
private readonly int rank;
internal static Type Make(Type type, int rank, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new MultiArrayType(type, rank, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1886" endline="1958">
<![CDATA[
}
private sealed class ParameterInfoImpl
{
private readonly MethodInfo method;
private readonly Type type;
private readonly int pos;
internal ParameterInfoImpl(MethodInfo method, Type type, int pos)
{
this.method = method;
this.type = type;
this.pos = pos;
}
public override Type ParameterType
{
get { return type; }
}
public override string Name
{
get { return null; }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return pos; }
}
public override object RawDefaultValue
{
get { return null; }
}
public override Type[] GetOptionalCustomModifiers()
{
return Empty<Type>.Array;
}
public override Type[] GetRequiredCustomModifiers()
{
return Empty<Type>.Array;
}
public override MemberInfo Member
{
get { return method.IsConstructor ? (MethodBase)new ConstructorInfoImpl(method)
}
public override int MetadataToken
{
get { return 0x8000000; }
}
internal override Module Module
{
get { return method.Module; }
}
}
}
sealed class ByRefType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new ByRefType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1757" endline="1766">
<![CDATA[
}
sealed class MultiArrayType
{
private readonly int rank;
internal static Type Make(Type type, int rank, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new MultiArrayType(type, rank, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1999" endline="2006">
<![CDATA[
}
sealed class PointerType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new PointerType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1757" endline="1766">
<![CDATA[
}
sealed class MultiArrayType
{
private readonly int rank;
internal static Type Make(Type type, int rank, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new MultiArrayType(type, rank, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="745" endline="752">
<![CDATA[
#if NET_4_0
[Obsolete]
#endif
public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
{
return DefineDynamicAssemblyImpl(name, access, dir, requiredPermissions, optionalPermissions, refusedPermissions);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1276" endline="1284">
<![CDATA[
internal ArrayMethod(Module module, Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
{
this.module = module;
this.arrayClass = arrayClass;
this.methodName = methodName;
this.callingConvention = callingConvention;
this.returnType = returnType ?? module.universe.System_Void;
this.parameterTypes = Util.Copy(parameterTypes);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="62" endline="71">
<![CDATA[
public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues)
{
this.con = con;
this.constructorArgs = constructorArgs;
this.namedProperties = namedProperties;
this.propertyValues = propertyValues;
this.namedFields = namedFields;
this.fieldValues = fieldValues;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1276" endline="1284">
<![CDATA[
internal ArrayMethod(Module module, Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
{
this.module = module;
this.arrayClass = arrayClass;
this.methodName = methodName;
this.callingConvention = callingConvention;
this.returnType = returnType ?? module.universe.System_Void;
this.parameterTypes = Util.Copy(parameterTypes);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="48" endline="58">
<![CDATA[
private PropertySignature(CallingConventions callingConvention, Type propertyType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeOptionalCustomModifiers, Type[][] parameterTypeRequiredCustomModifiers)
{
this.callingConvention = callingConvention;
this.propertyType = propertyType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
this.parameterTypes = parameterTypes;
this.parameterOptionalCustomModifiers = parameterTypeOptionalCustomModifiers;
this.parameterRequiredCustomModifiers = parameterTypeRequiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1319" endline="1330">
<![CDATA[
}
internal override MethodSignature MethodSignature
{
get
{
if (methodSignature == null)
{
methodSignature = MethodSignature.MakeFromBuilder(returnType, parameterTypes, null, callingConvention, 0);
}
return methodSignature;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2362" endline="2371">
<![CDATA[
}
internal override int GetModuleBuilderToken()
{
if (token == 0)
{
token = ((ModuleBuilder)type.Module).ImportType(this);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1319" endline="1330">
<![CDATA[
}
internal override MethodSignature MethodSignature
{
get
{
if (methodSignature == null)
{
methodSignature = MethodSignature.MakeFromBuilder(returnType, parameterTypes, null, callingConvention, 0);
}
return methodSignature;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="58" endline="68">
<![CDATA[
internal override PropertySignature PropertySignature
{
get
{
if (sig == null)
{
sig = PropertySignature.ReadSig(module, module.GetBlob(module.Property.records[index].Type), declaringType);
}
return sig;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1319" endline="1330">
<![CDATA[
}
internal override MethodSignature MethodSignature
{
get
{
if (methodSignature == null)
{
methodSignature = MethodSignature.MakeFromBuilder(returnType, parameterTypes, null, callingConvention, 0);
}
return methodSignature;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="410" endline="420">
<![CDATA[
public ConstructorInfo Constructor
{
get
{
if (lazyConstructor == null)
{
lazyConstructor = (ConstructorInfo)module.ResolveMethod(module.CustomAttribute.records[index].Type);
}
return lazyConstructor;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1886" endline="1958">
<![CDATA[
}
private sealed class ParameterInfoImpl
{
private readonly MethodInfo method;
private readonly Type type;
private readonly int pos;
internal ParameterInfoImpl(MethodInfo method, Type type, int pos)
{
this.method = method;
this.type = type;
this.pos = pos;
}
public override Type ParameterType
{
get { return type; }
}
public override string Name
{
get { return null; }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return pos; }
}
public override object RawDefaultValue
{
get { return null; }
}
public override Type[] GetOptionalCustomModifiers()
{
return Empty<Type>.Array;
}
public override Type[] GetRequiredCustomModifiers()
{
return Empty<Type>.Array;
}
public override MemberInfo Member
{
get { return method.IsConstructor ? (MethodBase)new ConstructorInfoImpl(method)
}
public override int MetadataToken
{
get { return 0x8000000; }
}
internal override Module Module
{
get { return method.Module; }
}
}
}
sealed class ByRefType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new ByRefType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1999" endline="2006">
<![CDATA[
}
sealed class PointerType
{
internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
{
return type.Module.CanonicalizeType(new PointerType(type, requiredCustomModifiers, optionalCustomModifiers));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103">
<![CDATA[
private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
{
this.type = type;
this.args = args;
this.requiredCustomModifiers = requiredCustomModifiers;
this.optionalCustomModifiers = optionalCustomModifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="39" endline="45">
<![CDATA[
internal AssemblyReader(string location, ModuleReader manifestModule)
{
this.location = location;
this.manifestModule = manifestModule;
externalModules = new Module[manifestModule.File.records.Length];
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2104" endline="2111">
<![CDATA[
public override bool Equals(object o)
{
GenericTypeInstance gt = o as GenericTypeInstance;
return gt != null && gt.type.Equals(type) && Util.ArrayEquals(gt.args, args)
&& Util.ArrayEquals(gt.requiredCustomModifiers, requiredCustomModifiers)
&& Util.ArrayEquals(gt.optionalCustomModifiers, optionalCustomModifiers);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="59" endline="67">
<![CDATA[
public override bool Equals(object obj)
{
PropertySignature other = obj as PropertySignature;
return other != null
&& other.propertyType.Equals(propertyType)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2104" endline="2111">
<![CDATA[
public override bool Equals(object o)
{
GenericTypeInstance gt = o as GenericTypeInstance;
return gt != null && gt.type.Equals(type) && Util.ArrayEquals(gt.args, args)
&& Util.ArrayEquals(gt.requiredCustomModifiers, requiredCustomModifiers)
&& Util.ArrayEquals(gt.optionalCustomModifiers, optionalCustomModifiers);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="51" endline="59">
<![CDATA[
public override bool Equals(object obj)
{
FieldSignature other = obj as FieldSignature;
return other != null
&& other.fieldType.Equals(fieldType)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2125" endline="2144">
<![CDATA[
}
public override Type BaseType
{
get
{
if (baseType == null)
{
Type rawBaseType = type.BaseType;
if (rawBaseType == null)
{
baseType = rawBaseType;
}
else
{
baseType = rawBaseType.BindTypeParameters(this);
}
}
return baseType;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="444" endline="458">
<![CDATA[
}
public Type Import(System.Type type)
{
Type imported;
if (!importedTypes.TryGetValue(type, out imported))
{
imported = ImportImpl(type);
if (imported != null)
{
importedTypes.Add(type, imported);
}
}
return imported;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2150" endline="2168">
<![CDATA[
}
public override bool IsVisible
{
get
{
if (base.IsVisible)
{
foreach (Type arg in args)
{
if (!arg.IsVisible)
{
return false;
}
}
foreach (Type arg in args)
{
if (!arg.IsVisible)
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2292" endline="2307">
<![CDATA[
}
public override string ToString()
{
StringBuilder sb = new StringBuilder(type.FullName);
sb.Append('[');
string sep = "";
foreach (Type arg in args)
{
sb.Append(sep);
sb.Append(arg);
sep = ",";
}
foreach (Type arg in args)
{
sb.Append(sep);
sb.Append(arg);
sep = ",";
}
sb.Append(']');
return sb.ToString();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="280" endline="296">
<![CDATA[
public override string ToString()
{
StringBuilder sb = new StringBuilder(this.FullName);
string sep = "[";
foreach (Type arg in GetGenericArguments())
{
sb.Append(sep);
sb.Append(arg);
sep = ",";
}
foreach (Type arg in GetGenericArguments())
{
sb.Append(sep);
sb.Append(arg);
sep = ",";
}
if (sep != "[")
{
sb.Append(']');
}
return sb.ToString();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356">
<![CDATA[
public override bool ContainsGenericParameters
{
get
{
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
foreach (Type type in args)
{
if (type.ContainsGenericParameters)
{
return true;
}
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="71" endline="78">
<![CDATA[
public void Dispose()
{
if (!imported)
{
module.stream.Dispose();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="387" endline="394">
<![CDATA[
public void UsingNamespace(string usingNamespace)
{
if (moduleBuilder.symbolWriter != null)
{
moduleBuilder.symbolWriter.UsingNamespace(usingNamespace);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="89" endline="99">
<![CDATA[
internal Module ToModule(Assembly assembly)
{
if (module.Assembly != null)
{
throw new InvalidOperationException();
}
imported = true;
module.SetAssembly(assembly);
return module;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88">
<![CDATA[
internal Assembly ToAssembly()
{
if (imported)
{
throw new InvalidOperationException();
}
imported = true;
return module.Assembly;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1010" endline="1019">
<![CDATA[
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
if (genericTypeArguments != null || genericMethodArguments != null)
{
throw new NotImplementedException();
}
return types[(metadataToken & 0xFFFFFF) - 1];
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="59" endline="78">
<![CDATA[
#else
if (runningOnMono)
{
#if MONO
return new MdbWriter(moduleBuilder);
#else
throw new NotSupportedException("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols.");
#endif
}
else
{
return new PdbWriter(moduleBuilder);
}
#endif
}
internal static byte[] GetDebugInfo(ISymbolWriterImpl writer, ref IMAGE_DEBUG_DIRECTORY idd)
{
return writer.GetDebugInfo(ref idd);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="59" endline="147">
<![CDATA[
}
}
public enum AssemblyComparisonResult
{
Unknown = 0,
EquivalentFullMatch = 1,
EquivalentWeakNamed = 2,
EquivalentFXUnified = 3,
EquivalentUnified = 4,
NonEquivalentVersion = 5,
NonEquivalent = 6,
EquivalentPartialMatch = 7,
EquivalentPartialWeakNamed = 8,
EquivalentPartialUnified = 9,
EquivalentPartialFXUnified = 10,
NonEquivalentPartialVersion = 11,
}
public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args);
public sealed class Universe
{
internal readonly Dictionary<Type, Type> canonicalizedTypes = new Dictionary<Type, Type>();
private readonly List<Assembly> assemblies = new List<Assembly>();
private readonly List<AssemblyBuilder> dynamicAssemblies = new List<AssemblyBuilder>();
private readonly Dictionary<string, Assembly> assembliesByName = new Dictionary<string, Assembly>();
private readonly Dictionary<System.Type, Type> importedTypes = new Dictionary<System.Type, Type>();
private Type typeof_System_Object;
private Type typeof_System_ValueType;
private Type typeof_System_Enum;
private Type typeof_System_Void;
private Type typeof_System_Boolean;
private Type typeof_System_Char;
private Type typeof_System_SByte;
private Type typeof_System_Byte;
private Type typeof_System_Int16;
private Type typeof_System_UInt16;
private Type typeof_System_Int32;
private Type typeof_System_UInt32;
private Type typeof_System_Int64;
private Type typeof_System_UInt64;
private Type typeof_System_Single;
private Type typeof_System_Double;
private Type typeof_System_String;
private Type typeof_System_IntPtr;
private Type typeof_System_UIntPtr;
private Type typeof_System_TypedReference;
private Type typeof_System_Type;
private Type typeof_System_Array;
private Type typeof_System_DateTime;
private Type typeof_System_DBNull;
private Type typeof_System_Decimal;
private Type typeof_System_NonSerializedAttribute;
private Type typeof_System_SerializableAttribute;
private Type typeof_System_AttributeUsageAttribute;
private Type typeof_System_Reflection_AssemblyCultureAttribute;
private Type typeof_System_Runtime_InteropServices_DllImportAttribute;
private Type typeof_System_Runtime_InteropServices_FieldOffsetAttribute;
private Type typeof_System_Runtime_InteropServices_InAttribute;
private Type typeof_System_Runtime_InteropServices_MarshalAsAttribute;
private Type typeof_System_Runtime_InteropServices_UnmanagedType;
private Type typeof_System_Runtime_InteropServices_VarEnum;
private Type typeof_System_Runtime_InteropServices_OutAttribute;
private Type typeof_System_Runtime_InteropServices_StructLayoutAttribute;
private Type typeof_System_Runtime_InteropServices_OptionalAttribute;
private Type typeof_System_Runtime_InteropServices_PreserveSigAttribute;
private Type typeof_System_Runtime_InteropServices_ComImportAttribute;
private Type typeof_System_Runtime_CompilerServices_DecimalConstantAttribute;
private Type typeof_System_Runtime_CompilerServices_SpecialNameAttribute;
private Type typeof_System_Runtime_CompilerServices_MethodImplAttribute;
private Type typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute;
private Type typeof_System_Reflection_AssemblyCopyrightAttribute;
private Type typeof_System_Reflection_AssemblyTrademarkAttribute;
private Type typeof_System_Reflection_AssemblyProductAttribute;
private Type typeof_System_Reflection_AssemblyCompanyAttribute;
private Type typeof_System_Reflection_AssemblyDescriptionAttribute;
private Type typeof_System_Reflection_AssemblyTitleAttribute;
private Type typeof_System_Reflection_AssemblyInformationalVersionAttribute;
private Type typeof_System_Reflection_AssemblyFileVersionAttribute;
private Type typeof_System_Security_Permissions_CodeAccessSecurityAttribute;
private Type typeof_System_Security_Permissions_HostProtectionAttribute;
private Type typeof_System_Security_Permissions_PermissionSetAttribute;
private Type typeof_System_Security_Permissions_SecurityAction;
private List<ResolveEventHandler> resolvers = new List<ResolveEventHandler>();
internal Assembly Mscorlib
{
get { return Load("mscorlib"); }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="59" endline="78">
<![CDATA[
#else
if (runningOnMono)
{
#if MONO
return new MdbWriter(moduleBuilder);
#else
throw new NotSupportedException("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols.");
#endif
}
else
{
return new PdbWriter(moduleBuilder);
}
#endif
}
internal static byte[] GetDebugInfo(ISymbolWriterImpl writer, ref IMAGE_DEBUG_DIRECTORY idd)
{
return writer.GetDebugInfo(ref idd);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368">
<![CDATA[
private sealed class BlobWriter
{
private readonly ModuleBuilder moduleBuilder;
private readonly CustomAttributeBuilder cab;
private readonly ByteBuffer bb;
internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
{
this.moduleBuilder = moduleBuilder;
this.cab = cab;
this.bb = bb;
}
internal void WriteCustomAttributeBlob()
{
WriteUInt16(1);
ParameterInfo[] pi = cab.con.GetParameters();
for (int i = 0; i < pi.Length; i++)
{
WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
}
WriteNamedArguments(false);
}
internal void WriteNamedArguments(bool forDeclSecurity)
{
int named = 0;
if (cab.namedFields != null)
{
named += cab.namedFields.Length;
}
if (cab.namedProperties != null)
{
named += cab.namedProperties.Length;
}
if (forDeclSecurity)
{
WritePackedLen(named);
}
else
{
WriteUInt16((ushort)named);
}
if (cab.namedFields != null)
{
for (int i = 0; i < cab.namedFields.Length; i++)
{
WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
}
}
if (cab.namedProperties != null)
{
for (int i = 0; i < cab.namedProperties.Length; i++)
{
WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
}
}
}
private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
{
WriteByte(fieldOrProperty);
WriteFieldOrPropType(type);
WriteString(name);
WriteFixedArg(type, value);
}
private void WriteByte(byte value)
{
bb.Write(value);
}
private void WriteUInt16(ushort value)
{
bb.Write(value);
}
private void WriteInt32(int value)
{
bb.Write(value);
}
private void WriteFixedArg(Type type, object value)
{
Universe u = moduleBuilder.universe;
if (type == u.System_String)
{
WriteString((string)value);
}
else if (type == u.System_Type)
{
WriteTypeName((Type)value);
}
else if (type == u.System_Object)
{
if (value == null)
{
type = u.System_String;
}
else if (value is Type)
{
type = u.System_Type;
}
else
{
type = u.Import(value.GetType());
}
WriteFieldOrPropType(type);
WriteFixedArg(type, value);
}
else if (type.IsArray)
{
if (value == null)
{
WriteInt32(-1);
}
else
{
Array array = (Array)value;
Type elemType = type.GetElementType();
WriteInt32(array.Length);
foreach (object val in array)
{
WriteFixedArg(elemType, val);
}
}
}
else if (type.IsEnum)
{
WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte((bool)value ? (byte)1
break;
case TypeCode.Char
WriteUInt16((char)value);
break;
case TypeCode.SByte
WriteByte((byte)(sbyte)value);
break;
case TypeCode.Byte
WriteByte((byte)value);
break;
case TypeCode.Int16
WriteUInt16((ushort)(short)value);
break;
case TypeCode.UInt16
WriteUInt16((ushort)value);
break;
case TypeCode.Int32
WriteInt32((int)value);
break;
case TypeCode.UInt32
WriteInt32((int)(uint)value);
break;
case TypeCode.Int64
WriteInt64((long)value);
break;
case TypeCode.UInt64
WriteInt64((long)(ulong)value);
break;
case TypeCode.Single
WriteSingle((float)value);
break;
case TypeCode.Double
WriteDouble((double)value);
break;
default
throw new ArgumentException();
}
}
}
private void WriteInt64(long value)
{
bb.Write(value);
}
private void WriteSingle(float value)
{
bb.Write(value);
}
private void WriteDouble(double value)
{
bb.Write(value);
}
private void WriteTypeName(Type type)
{
string name = null;
if (type != null)
{
if (type.Assembly == moduleBuilder.Assembly)
{
name = type.FullName;
}
else
{
name = type.AssemblyQualifiedName;
}
}
WriteString(name);
}
private void WriteString(string val)
{
bb.Write(val);
}
private void WritePackedLen(int len)
{
bb.WriteCompressedInt(len);
}
private void WriteFieldOrPropType(Type type)
{
Universe u = type.Module.universe;
if (type == u.System_Type)
{
WriteByte(0x50);
}
else if (type == u.System_Object)
{
WriteByte(0x51);
}
else if (type.IsArray)
{
WriteByte(0x1D);
WriteFieldOrPropType(type.GetElementType());
}
else if (type.IsEnum)
{
WriteByte(0x55);
WriteTypeName(type);
}
else
{
switch (Type.GetTypeCode(type))
{
case TypeCode.Boolean
WriteByte(0x02);
break;
case TypeCode.Char
WriteByte(0x03);
break;
case TypeCode.SByte
WriteByte(0x04);
break;
case TypeCode.Byte
WriteByte(0x05);
break;
case TypeCode.Int16
WriteByte(0x06);
break;
case TypeCode.UInt16
WriteByte(0x07);
break;
case TypeCode.Int32
WriteByte(0x08);
break;
case TypeCode.UInt32
WriteByte(0x09);
break;
case TypeCode.Int64
WriteByte(0x0A);
break;
case TypeCode.UInt64
WriteByte(0x0B);
break;
case TypeCode.Single
WriteByte(0x0C);
break;
case TypeCode.Double
WriteByte(0x0D);
break;
case TypeCode.String
WriteByte(0x0E);
break;
default
throw new ArgumentException();
}
}
}
}
internal bool IsPseudoCustomAttribute
{
get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="59" endline="78">
<![CDATA[
#else
if (runningOnMono)
{
#if MONO
return new MdbWriter(moduleBuilder);
#else
throw new NotSupportedException("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols.");
#endif
}
else
{
return new PdbWriter(moduleBuilder);
}
#endif
}
internal static byte[] GetDebugInfo(ISymbolWriterImpl writer, ref IMAGE_DEBUG_DIRECTORY idd)
{
return writer.GetDebugInfo(ref idd);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="207" endline="213">
<![CDATA[
}
}
internal static Type Make(int position)
{
return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="100" endline="291">
<![CDATA[
private readonly int position;
private sealed class DummyModule
{
internal DummyModule()
{
}
public override bool Equals(object obj)
{
throw new InvalidOperationException();
}
public override int GetHashCode()
{
throw new InvalidOperationException();
}
public override string ToString()
{
throw new InvalidOperationException();
}
public override int MDStreamVersion
{
get { throw new InvalidOperationException(); }
}
public override Assembly Assembly
{
get { throw new InvalidOperationException(); }
}
internal override Type GetTypeImpl(string typeName)
{
throw new InvalidOperationException();
}
internal override void GetTypesImpl(List<Type> list)
{
throw new InvalidOperationException();
}
public override string FullyQualifiedName
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override Guid ModuleVersionId
{
get { throw new InvalidOperationException(); }
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override string ResolveString(int metadataToken)
{
throw new InvalidOperationException();
}
public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
{
throw new InvalidOperationException();
}
public override string ScopeName
{
get { throw new InvalidOperationException(); }
}
public override AssemblyName[] __GetReferencedAssemblies()
{
throw new InvalidOperationException();
}
internal override Type GetModuleType()
{
throw new InvalidOperationException();
}
internal override ByteReader GetBlob(int blobIndex)
{
throw new InvalidOperationException();
}
}
internal static Type Make(int position)
{
return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
}
private UnboundGenericMethodParameter(int position)
{
this.position = position;
}
public override bool Equals(object obj)
{
UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
return other != null && other.position == position;
}
public override int GetHashCode()
{
return position;
}
public override string Namespace
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override int MetadataToken
{
get { throw new InvalidOperationException(); }
}
public override Module Module
{
get { return module; }
}
public override int GenericParameterPosition
{
get { return position; }
}
public override Type DeclaringType
{
get { return null; }
}
public override MethodBase DeclaringMethod
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetGenericParameterConstraints()
{
throw new InvalidOperationException();
}
public override GenericParameterAttributes GenericParameterAttributes
{
get { throw new InvalidOperationException(); }
}
internal override Type BindTypeParameters(IGenericBinder binder)
{
return binder.BindMethodParameter(this);
}
}
sealed class GenericTypeParameter
{
private readonly ModuleReader module;
private readonly int index;
internal GenericTypeParameter(ModuleReader module, int index)
{
this.module = module;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="95" endline="101">
<![CDATA[
public void SetLocalSymInfo(string name, int startOffset, int endOffset)
{
this.name = name;
this.startOffset = startOffset;
this.endOffset = endOffset;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46">
<![CDATA[
internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="58" endline="68">
<![CDATA[
internal override PropertySignature PropertySignature
{
get
{
if (sig == null)
{
sig = PropertySignature.ReadSig(module, module.GetBlob(module.Property.records[index].Type), declaringType);
}
return sig;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="410" endline="420">
<![CDATA[
public ConstructorInfo Constructor
{
get
{
if (lazyConstructor == null)
{
lazyConstructor = (ConstructorInfo)module.ResolveMethod(module.CustomAttribute.records[index].Type);
}
return lazyConstructor;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="124" endline="135">
<![CDATA[
}
internal override bool IsPublic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isPublic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="136" endline="147">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isStatic;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="124" endline="135">
<![CDATA[
}
internal override bool IsPublic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isPublic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="124" endline="135">
<![CDATA[
}
internal override bool IsPublic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isPublic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="136" endline="147">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isStatic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="136" endline="147">
<![CDATA[
}
internal override bool IsStatic
{
get
{
if (!flagsCached)
{
ComputeFlags();
}
return isStatic;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="590" endline="604">
<![CDATA[
private Assembly GetDynamicAssembly(string refname)
{
foreach (AssemblyBuilder asm in dynamicAssemblies)
{
AssemblyComparisonResult result;
if (CompareAssemblyIdentity(refname, false, asm.FullName, false, out result) && result != AssemblyComparisonResult.EquivalentFXUnified)
{
return asm;
}
}
foreach (AssemblyBuilder asm in dynamicAssemblies)
{
AssemblyComparisonResult result;
if (CompareAssemblyIdentity(refname, false, asm.FullName, false, out result) && result != AssemblyComparisonResult.EquivalentFXUnified)
{
return asm;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="212" endline="223">
<![CDATA[
public ModuleBuilder GetDynamicModule(string name)
{
foreach (ModuleBuilder module in modules)
{
if (module.Name == name)
{
return module;
}
}
foreach (ModuleBuilder module in modules)
{
if (module.Name == name)
{
return module;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="753" endline="759">
<![CDATA[
private AssemblyBuilder DefineDynamicAssemblyImpl(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
{
AssemblyBuilder asm = new AssemblyBuilder(this, name, dir, requiredPermissions, optionalPermissions, refusedPermissions);
dynamicAssemblies.Add(asm);
return asm;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="205" endline="211">
<![CDATA[
public ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo)
{
ModuleBuilder module = new ModuleBuilder(this, name, fileName, emitSymbolInfo);
modules.Add(module);
return module;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="753" endline="759">
<![CDATA[
private AssemblyBuilder DefineDynamicAssemblyImpl(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
{
AssemblyBuilder asm = new AssemblyBuilder(this, name, dir, requiredPermissions, optionalPermissions, refusedPermissions);
dynamicAssemblies.Add(asm);
return asm;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="589" endline="595">
<![CDATA[
public Module __AddModule(RawModule module)
{
Module mod = module.ToModule(this);
addedModules.Add(mod);
return mod;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="760" endline="775">
<![CDATA[
internal void RenameAssembly(Assembly assembly, AssemblyName oldName)
{
List<string> remove = new List<string>();
foreach (KeyValuePair<string, Assembly> kv in assembliesByName)
{
if (kv.Value == assembly)
{
remove.Add(kv.Key);
}
}
foreach (KeyValuePair<string, Assembly> kv in assembliesByName)
{
if (kv.Value == assembly)
{
remove.Add(kv.Key);
}
}
foreach (string key in remove)
{
assembliesByName.Remove(key);
}
foreach (string key in remove)
{
assembliesByName.Remove(key);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="550" endline="569">
<![CDATA[
public override Module[] GetModules(bool getResourceModules)
{
List<Module> list = new List<Module>();
foreach (ModuleBuilder module in modules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
foreach (ModuleBuilder module in modules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
foreach (Module module in addedModules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
foreach (Module module in addedModules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="478" endline="490">
<![CDATA[
}
internal CustomAttributeBuilder DecodeBlob(Assembly asm)
{
if (blob == null)
{
return this;
}
else
{
return ToData(asm).__ToBuilder();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432">
<![CDATA[
}
public IList<CustomAttributeTypedArgument> ConstructorArguments
{
get
{
if (lazyConstructorArguments == null)
{
LazyParseArguments();
}
return lazyConstructorArguments;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="523" endline="533">
<![CDATA[
public override Module ManifestModule
{
get
{
if (pseudoManifestModule == null)
{
pseudoManifestModule = new ManifestModule(this);
}
return pseudoManifestModule;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="478" endline="490">
<![CDATA[
}
internal CustomAttributeBuilder DecodeBlob(Assembly asm)
{
if (blob == null)
{
return this;
}
else
{
return ToData(asm).__ToBuilder();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444">
<![CDATA[
}
public IList<CustomAttributeNamedArgument> NamedArguments
{
get
{
if (lazyNamedArguments == null)
{
LazyParseArguments();
}
return lazyNamedArguments;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="523" endline="533">
<![CDATA[
public override Module ManifestModule
{
get
{
if (pseudoManifestModule == null)
{
pseudoManifestModule = new ManifestModule(this);
}
return pseudoManifestModule;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="62" endline="71">
<![CDATA[
public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues)
{
this.con = con;
this.constructorArgs = constructorArgs;
this.namedProperties = namedProperties;
this.propertyValues = propertyValues;
this.namedFields = namedFields;
this.fieldValues = fieldValues;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="48" endline="58">
<![CDATA[
private PropertySignature(CallingConventions callingConvention, Type propertyType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeOptionalCustomModifiers, Type[][] parameterTypeRequiredCustomModifiers)
{
this.callingConvention = callingConvention;
this.propertyType = propertyType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
this.parameterTypes = parameterTypes;
this.parameterOptionalCustomModifiers = parameterTypeOptionalCustomModifiers;
this.parameterRequiredCustomModifiers = parameterTypeRequiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="59" endline="67">
<![CDATA[
public override bool Equals(object obj)
{
PropertySignature other = obj as PropertySignature;
return other != null
&& other.propertyType.Equals(propertyType)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="51" endline="59">
<![CDATA[
public override bool Equals(object obj)
{
FieldSignature other = obj as FieldSignature;
return other != null
&& other.fieldType.Equals(fieldType)
&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers)
&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="125" endline="139">
<![CDATA[
}
public override Module[] GetLoadedModules(bool getResourceModules)
{
List<Module> list = new List<Module>();
list.Add(manifestModule);
foreach (Module m in externalModules)
{
if (m != null)
{
list.Add(m);
}
}
foreach (Module m in externalModules)
{
if (m != null)
{
list.Add(m);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="100" endline="291">
<![CDATA[
private readonly int position;
private sealed class DummyModule
{
internal DummyModule()
{
}
public override bool Equals(object obj)
{
throw new InvalidOperationException();
}
public override int GetHashCode()
{
throw new InvalidOperationException();
}
public override string ToString()
{
throw new InvalidOperationException();
}
public override int MDStreamVersion
{
get { throw new InvalidOperationException(); }
}
public override Assembly Assembly
{
get { throw new InvalidOperationException(); }
}
internal override Type GetTypeImpl(string typeName)
{
throw new InvalidOperationException();
}
internal override void GetTypesImpl(List<Type> list)
{
throw new InvalidOperationException();
}
public override string FullyQualifiedName
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override Guid ModuleVersionId
{
get { throw new InvalidOperationException(); }
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override string ResolveString(int metadataToken)
{
throw new InvalidOperationException();
}
public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
{
throw new InvalidOperationException();
}
public override string ScopeName
{
get { throw new InvalidOperationException(); }
}
public override AssemblyName[] __GetReferencedAssemblies()
{
throw new InvalidOperationException();
}
internal override Type GetModuleType()
{
throw new InvalidOperationException();
}
internal override ByteReader GetBlob(int blobIndex)
{
throw new InvalidOperationException();
}
}
internal static Type Make(int position)
{
return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
}
private UnboundGenericMethodParameter(int position)
{
this.position = position;
}
public override bool Equals(object obj)
{
UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
return other != null && other.position == position;
}
public override int GetHashCode()
{
return position;
}
public override string Namespace
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override int MetadataToken
{
get { throw new InvalidOperationException(); }
}
public override Module Module
{
get { return module; }
}
public override int GenericParameterPosition
{
get { return position; }
}
public override Type DeclaringType
{
get { return null; }
}
public override MethodBase DeclaringMethod
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetGenericParameterConstraints()
{
throw new InvalidOperationException();
}
public override GenericParameterAttributes GenericParameterAttributes
{
get { throw new InvalidOperationException(); }
}
internal override Type BindTypeParameters(IGenericBinder binder)
{
return binder.BindMethodParameter(this);
}
}
sealed class GenericTypeParameter
{
private readonly ModuleReader module;
private readonly int index;
internal GenericTypeParameter(ModuleReader module, int index)
{
this.module = module;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="100" endline="291">
<![CDATA[
private readonly int position;
private sealed class DummyModule
{
internal DummyModule()
{
}
public override bool Equals(object obj)
{
throw new InvalidOperationException();
}
public override int GetHashCode()
{
throw new InvalidOperationException();
}
public override string ToString()
{
throw new InvalidOperationException();
}
public override int MDStreamVersion
{
get { throw new InvalidOperationException(); }
}
public override Assembly Assembly
{
get { throw new InvalidOperationException(); }
}
internal override Type GetTypeImpl(string typeName)
{
throw new InvalidOperationException();
}
internal override void GetTypesImpl(List<Type> list)
{
throw new InvalidOperationException();
}
public override string FullyQualifiedName
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override Guid ModuleVersionId
{
get { throw new InvalidOperationException(); }
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override string ResolveString(int metadataToken)
{
throw new InvalidOperationException();
}
public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
{
throw new InvalidOperationException();
}
public override string ScopeName
{
get { throw new InvalidOperationException(); }
}
public override AssemblyName[] __GetReferencedAssemblies()
{
throw new InvalidOperationException();
}
internal override Type GetModuleType()
{
throw new InvalidOperationException();
}
internal override ByteReader GetBlob(int blobIndex)
{
throw new InvalidOperationException();
}
}
internal static Type Make(int position)
{
return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
}
private UnboundGenericMethodParameter(int position)
{
this.position = position;
}
public override bool Equals(object obj)
{
UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
return other != null && other.position == position;
}
public override int GetHashCode()
{
return position;
}
public override string Namespace
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override int MetadataToken
{
get { throw new InvalidOperationException(); }
}
public override Module Module
{
get { return module; }
}
public override int GenericParameterPosition
{
get { return position; }
}
public override Type DeclaringType
{
get { return null; }
}
public override MethodBase DeclaringMethod
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetGenericParameterConstraints()
{
throw new InvalidOperationException();
}
public override GenericParameterAttributes GenericParameterAttributes
{
get { throw new InvalidOperationException(); }
}
internal override Type BindTypeParameters(IGenericBinder binder)
{
return binder.BindMethodParameter(this);
}
}
sealed class GenericTypeParameter
{
private readonly ModuleReader module;
private readonly int index;
internal GenericTypeParameter(ModuleReader module, int index)
{
this.module = module;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="100" endline="291">
<![CDATA[
private readonly int position;
private sealed class DummyModule
{
internal DummyModule()
{
}
public override bool Equals(object obj)
{
throw new InvalidOperationException();
}
public override int GetHashCode()
{
throw new InvalidOperationException();
}
public override string ToString()
{
throw new InvalidOperationException();
}
public override int MDStreamVersion
{
get { throw new InvalidOperationException(); }
}
public override Assembly Assembly
{
get { throw new InvalidOperationException(); }
}
internal override Type GetTypeImpl(string typeName)
{
throw new InvalidOperationException();
}
internal override void GetTypesImpl(List<Type> list)
{
throw new InvalidOperationException();
}
public override string FullyQualifiedName
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override Guid ModuleVersionId
{
get { throw new InvalidOperationException(); }
}
public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
{
throw new InvalidOperationException();
}
public override string ResolveString(int metadataToken)
{
throw new InvalidOperationException();
}
public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
{
throw new InvalidOperationException();
}
public override string ScopeName
{
get { throw new InvalidOperationException(); }
}
public override AssemblyName[] __GetReferencedAssemblies()
{
throw new InvalidOperationException();
}
internal override Type GetModuleType()
{
throw new InvalidOperationException();
}
internal override ByteReader GetBlob(int blobIndex)
{
throw new InvalidOperationException();
}
}
internal static Type Make(int position)
{
return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
}
private UnboundGenericMethodParameter(int position)
{
this.position = position;
}
public override bool Equals(object obj)
{
UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
return other != null && other.position == position;
}
public override int GetHashCode()
{
return position;
}
public override string Namespace
{
get { throw new InvalidOperationException(); }
}
public override string Name
{
get { throw new InvalidOperationException(); }
}
public override int MetadataToken
{
get { throw new InvalidOperationException(); }
}
public override Module Module
{
get { return module; }
}
public override int GenericParameterPosition
{
get { return position; }
}
public override Type DeclaringType
{
get { return null; }
}
public override MethodBase DeclaringMethod
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetGenericParameterConstraints()
{
throw new InvalidOperationException();
}
public override GenericParameterAttributes GenericParameterAttributes
{
get { throw new InvalidOperationException(); }
}
internal override Type BindTypeParameters(IGenericBinder binder)
{
return binder.BindMethodParameter(this);
}
}
sealed class GenericTypeParameter
{
private readonly ModuleReader module;
private readonly int index;
internal GenericTypeParameter(ModuleReader module, int index)
{
this.module = module;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="326" endline="334">
<![CDATA[
}
public override Type DeclaringType
{
get
{
int owner = module.GenericParam.records[index].Owner;
return (owner >> 24) == TypeDefTable.Index ? module.ResolveType(owner)
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="335" endline="343">
<![CDATA[
}
public override MethodBase DeclaringMethod
{
get
{
int owner = module.GenericParam.records[index].Owner;
return (owner >> 24) == MethodDefTable.Index ? module.ResolveMethod(owner)
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="326" endline="334">
<![CDATA[
}
public override Type DeclaringType
{
get
{
int owner = module.GenericParam.records[index].Owner;
return (owner >> 24) == TypeDefTable.Index ? module.ResolveType(owner)
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="47" endline="58">
<![CDATA[
public override Type BaseType
{
get
{
int extends = module.TypeDef.records[index].Extends;
if ((extends & 0xFFFFFF) == 0)
{
return null;
}
return module.ResolveType(extends, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="335" endline="343">
<![CDATA[
}
public override MethodBase DeclaringMethod
{
get
{
int owner = module.GenericParam.records[index].Owner;
return (owner >> 24) == MethodDefTable.Index ? module.ResolveMethod(owner)
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="47" endline="58">
<![CDATA[
public override Type BaseType
{
get
{
int extends = module.TypeDef.records[index].Extends;
if ((extends & 0xFFFFFF) == 0)
{
return null;
}
return module.ResolveType(extends, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="344" endline="360">
<![CDATA[
}
public override Type[] GetGenericParameterConstraints()
{
IGenericContext context = (this.DeclaringMethod as IGenericContext) ?? this.DeclaringType;
List<Type> list = new List<Type>();
int token = this.MetadataToken;
for (int i = 0; i < module.GenericParamConstraint.records.Length; i++)
{
if (module.GenericParamConstraint.records[i].Owner == token)
{
list.Add(module.ResolveType(module.GenericParamConstraint.records[i].Constraint, context));
}
}
for (int i = 0; i < module.GenericParamConstraint.records.Length; i++)
{
if (module.GenericParamConstraint.records[i].Owner == token)
{
list.Add(module.ResolveType(module.GenericParamConstraint.records[i].Constraint, context));
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="297" endline="317">
<![CDATA[
public override Type DeclaringType
{
get
{
if ((this.Attributes & TypeAttributes.VisibilityMask & ~TypeAttributes.Public) == 0)
{
return null;
}
int token = this.MetadataToken;
for (int i = 0; i < module.NestedClass.records.Length; i++)
{
if (module.NestedClass.records[i].NestedClass == token)
{
return module.ResolveType(module.NestedClass.records[i].EnclosingClass, null, null);
}
}
for (int i = 0; i < module.NestedClass.records.Length; i++)
{
if (module.NestedClass.records[i].NestedClass == token)
{
return module.ResolveType(module.NestedClass.records[i].EnclosingClass, null, null);
}
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="365" endline="378">
<![CDATA[
}
internal override Type BindTypeParameters(IGenericBinder binder)
{
int owner = module.GenericParam.records[index].Owner;
if ((owner >> 24) == MethodDefTable.Index)
{
return binder.BindMethodParameter(this);
}
else
{
return binder.BindTypeParameter(this);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="47" endline="58">
<![CDATA[
public override Type BaseType
{
get
{
int extends = module.TypeDef.records[index].Extends;
if ((extends & 0xFFFFFF) == 0)
{
return null;
}
return module.ResolveType(extends, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="95" endline="101">
<![CDATA[
public void SetLocalSymInfo(string name, int startOffset, int endOffset)
{
this.name = name;
this.startOffset = startOffset;
this.endOffset = endOffset;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44">
<![CDATA[
internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
{
this.module = module;
this.declaringType = declaringType;
this.index = index;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="95" endline="101">
<![CDATA[
public void SetLocalSymInfo(string name, int startOffset, int endOffset)
{
this.name = name;
this.startOffset = startOffset;
this.endOffset = endOffset;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89">
<![CDATA[
}
public sealed class LocalBuilder
{
private readonly Type localType;
private readonly int index;
private readonly bool pinned;
internal string name;
internal int startOffset;
internal int endOffset;
internal LocalBuilder(Type localType, int index, bool pinned)
{
this.localType = localType;
this.index = index;
this.pinned = pinned;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="95" endline="101">
<![CDATA[
public void SetLocalSymInfo(string name, int startOffset, int endOffset)
{
this.name = name;
this.startOffset = startOffset;
this.endOffset = endOffset;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50">
<![CDATA[
private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
{
this.fieldType = fieldType;
this.optionalCustomModifiers = optionalCustomModifiers;
this.requiredCustomModifiers = requiredCustomModifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="303" endline="309">
<![CDATA[
public void BeginExceptFilterBlock()
{
ExceptionBlock block = BeginFinallyFilterFaultBlock();
block.filterOffset = code.Position;
UpdateStack(1);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="310" endline="316">
<![CDATA[
public void BeginFaultBlock()
{
ExceptionBlock block = BeginFinallyFilterFaultBlock();
block.handlerOffset = code.Position;
block.exceptionType = FAULT;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="646" endline="654">
<![CDATA[
private void WriteToken(FieldToken token)
{
if (token.IsPseudoToken)
{
tokenFixups.Add(code.Position);
}
code.Write(token.Token);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="655" endline="663">
<![CDATA[
private void WriteToken(MethodToken token)
{
if (token.IsPseudoToken)
{
tokenFixups.Add(code.Position);
}
code.Write(token.Token);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="771" endline="780">
<![CDATA[
public void EmitCalli(OpCode opc, CallingConvention callingConvention, Type returnType, Type[] parameterTypes)
{
returnType = returnType ?? moduleBuilder.universe.System_Void;
Emit(opc);
UpdateStack(opc, false, returnType, parameterTypes.Length);
ByteBuffer sig = new ByteBuffer(16);
Signature.WriteStandAloneMethodSig(moduleBuilder, sig, callingConvention, returnType, parameterTypes);
code.Write(0x11000000 | moduleBuilder.StandAloneSig.FindOrAddRecord(moduleBuilder.Blobs.Add(sig)));
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="781" endline="791">
<![CDATA[
public void EmitCalli(OpCode opc, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
{
returnType = returnType ?? moduleBuilder.universe.System_Void;
optionalParameterTypes = optionalParameterTypes ?? Type.EmptyTypes;
Emit(opc);
UpdateStack(opc, (callingConvention & CallingConventions.HasThis | CallingConventions.ExplicitThis) == CallingConventions.HasThis, returnType, parameterTypes.Length + optionalParameterTypes.Length);
ByteBuffer sig = new ByteBuffer(16);
Signature.WriteStandAloneMethodSig(moduleBuilder, sig, callingConvention, returnType, parameterTypes, optionalParameterTypes);
code.Write(0x11000000 | moduleBuilder.StandAloneSig.FindOrAddRecord(moduleBuilder.Blobs.Add(sig)));
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="1109" endline="1118">
<![CDATA[
private void WriteCode(ByteBuffer bb)
{
int codeOffset = bb.Position;
foreach (int fixup in this.tokenFixups)
{
moduleBuilder.tokenFixupOffsets.Add(fixup + codeOffset);
}
foreach (int fixup in this.tokenFixups)
{
moduleBuilder.tokenFixupOffsets.Add(fixup + codeOffset);
}
bb.Write(code);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="126" endline="135">
<![CDATA[
internal void WriteTypeDefTable(MetadataWriter mw)
{
int fieldList = 1;
int methodList = 1;
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="1109" endline="1118">
<![CDATA[
private void WriteCode(ByteBuffer bb)
{
int codeOffset = bb.Position;
foreach (int fixup in this.tokenFixups)
{
moduleBuilder.tokenFixupOffsets.Add(fixup + codeOffset);
}
foreach (int fixup in this.tokenFixups)
{
moduleBuilder.tokenFixupOffsets.Add(fixup + codeOffset);
}
bb.Write(code);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144">
<![CDATA[
internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
{
int paramList = 1;
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="134" endline="140">
<![CDATA[
public void __SetAssemblyVersion(Version version)
{
AssemblyName oldName = GetName();
SetVersionHelper(version);
universe.RenameAssembly(this, oldName);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="141" endline="147">
<![CDATA[
public void __SetAssemblyCulture(string cultureName)
{
AssemblyName oldName = GetName();
this.culture = cultureName;
universe.RenameAssembly(this, oldName);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="205" endline="211">
<![CDATA[
public ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo)
{
ModuleBuilder module = new ModuleBuilder(this, name, fileName, emitSymbolInfo);
modules.Add(module);
return module;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="589" endline="595">
<![CDATA[
public Module __AddModule(RawModule module)
{
Module mod = module.ToModule(this);
addedModules.Add(mod);
return mod;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="212" endline="223">
<![CDATA[
public ModuleBuilder GetDynamicModule(string name)
{
foreach (ModuleBuilder module in modules)
{
if (module.Name == name)
{
return module;
}
}
foreach (ModuleBuilder module in modules)
{
if (module.Name == name)
{
return module;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="441" endline="451">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="431" endline="439">
<![CDATA[
public void AddResourceFile(string name, string fileName, ResourceAttributes attribs)
{
ResourceFile resfile = new ResourceFile();
resfile.Name = name;
resfile.FileName = fileName;
resfile.Attributes = attribs;
resourceFiles.Add(resfile);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="112" endline="119">
<![CDATA[
public void SetOffset(int iOffset)
{
FieldLayoutTable.Record rec = new FieldLayoutTable.Record();
rec.Offset = iOffset;
rec.Field = pseudoToken;
typeBuilder.ModuleBuilder.FieldLayout.AddRecord(rec);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="477" endline="490">
<![CDATA[
public override Type[] GetTypes()
{
List<Type> list = new List<Type>();
foreach (ModuleBuilder module in modules)
{
module.GetTypesImpl(list);
}
foreach (ModuleBuilder module in modules)
{
module.GetTypesImpl(list);
}
foreach (Module module in addedModules)
{
module.GetTypesImpl(list);
}
foreach (Module module in addedModules)
{
module.GetTypesImpl(list);
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="550" endline="569">
<![CDATA[
public override Module[] GetModules(bool getResourceModules)
{
List<Module> list = new List<Module>();
foreach (ModuleBuilder module in modules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
foreach (ModuleBuilder module in modules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
foreach (Module module in addedModules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
foreach (Module module in addedModules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="491" endline="511">
<![CDATA[
internal override Type GetTypeImpl(string typeName)
{
foreach (ModuleBuilder mb in modules)
{
Type type = mb.GetTypeImpl(typeName);
if (type != null)
{
return type;
}
}
foreach (ModuleBuilder mb in modules)
{
Type type = mb.GetTypeImpl(typeName);
if (type != null)
{
return type;
}
}
foreach (Module module in addedModules)
{
Type type = module.GetTypeImpl(typeName);
if (type != null)
{
return type;
}
}
foreach (Module module in addedModules)
{
Type type = module.GetTypeImpl(typeName);
if (type != null)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="570" endline="588">
<![CDATA[
public override Module GetModule(string name)
{
foreach (ModuleBuilder module in modules)
{
if (module.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
{
return module;
}
}
foreach (ModuleBuilder module in modules)
{
if (module.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
{
return module;
}
}
foreach (Module module in addedModules)
{
if (module.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
{
return module;
}
}
foreach (Module module in addedModules)
{
if (module.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
{
return module;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="550" endline="569">
<![CDATA[
public override Module[] GetModules(bool getResourceModules)
{
List<Module> list = new List<Module>();
foreach (ModuleBuilder module in modules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
foreach (ModuleBuilder module in modules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
foreach (Module module in addedModules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
foreach (Module module in addedModules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="570" endline="588">
<![CDATA[
public override Module GetModule(string name)
{
foreach (ModuleBuilder module in modules)
{
if (module.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
{
return module;
}
}
foreach (ModuleBuilder module in modules)
{
if (module.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
{
return module;
}
}
foreach (Module module in addedModules)
{
if (module.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
{
return module;
}
}
foreach (Module module in addedModules)
{
if (module.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
{
return module;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="550" endline="569">
<![CDATA[
public override Module[] GetModules(bool getResourceModules)
{
List<Module> list = new List<Module>();
foreach (ModuleBuilder module in modules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
foreach (ModuleBuilder module in modules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
foreach (Module module in addedModules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
foreach (Module module in addedModules)
{
if (getResourceModules || !module.IsResource())
{
list.Add(module);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1240" endline="1263">
<![CDATA[
public override AssemblyName[] __GetReferencedAssemblies()
{
List<AssemblyName> list = new List<AssemblyName>();
if (referencedAssemblyNames != null)
{
foreach (AssemblyName name in referencedAssemblyNames)
{
if (!list.Contains(name))
{
list.Add(name);
}
}
foreach (AssemblyName name in referencedAssemblyNames)
{
if (!list.Contains(name))
{
list.Add(name);
}
}
}
foreach (Assembly asm in referencedAssemblies.Keys)
{
AssemblyName name = asm.GetName();
if (!list.Contains(name))
{
list.Add(name);
}
}
foreach (Assembly asm in referencedAssemblies.Keys)
{
AssemblyName name = asm.GetName();
if (!list.Contains(name))
{
list.Add(name);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="115" endline="125">
<![CDATA[
internal void PopulatePropertyAndEventTables()
{
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="126" endline="135">
<![CDATA[
internal void WriteTypeDefTable(MetadataWriter mw)
{
int fieldList = 1;
int methodList = 1;
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="115" endline="125">
<![CDATA[
internal void PopulatePropertyAndEventTables()
{
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144">
<![CDATA[
internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
{
int paramList = 1;
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="115" endline="125">
<![CDATA[
internal void PopulatePropertyAndEventTables()
{
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="145" endline="152">
<![CDATA[
internal void WriteParamTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="115" endline="125">
<![CDATA[
internal void PopulatePropertyAndEventTables()
{
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
foreach (TypeBuilder type in types)
{
type.PopulatePropertyAndEventTables();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="153" endline="160">
<![CDATA[
internal void WriteFieldTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="126" endline="135">
<![CDATA[
internal void WriteTypeDefTable(MetadataWriter mw)
{
int fieldList = 1;
int methodList = 1;
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144">
<![CDATA[
internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
{
int paramList = 1;
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="126" endline="135">
<![CDATA[
internal void WriteTypeDefTable(MetadataWriter mw)
{
int fieldList = 1;
int methodList = 1;
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="145" endline="152">
<![CDATA[
internal void WriteParamTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="126" endline="135">
<![CDATA[
internal void WriteTypeDefTable(MetadataWriter mw)
{
int fieldList = 1;
int methodList = 1;
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
foreach (TypeBuilder type in types)
{
type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="153" endline="160">
<![CDATA[
internal void WriteFieldTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144">
<![CDATA[
internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
{
int paramList = 1;
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="145" endline="152">
<![CDATA[
internal void WriteParamTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144">
<![CDATA[
internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
{
int paramList = 1;
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="153" endline="160">
<![CDATA[
internal void WriteFieldTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144">
<![CDATA[
internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
{
int paramList = 1;
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
foreach (TypeBuilder type in types)
{
type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="441" endline="451">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="145" endline="152">
<![CDATA[
internal void WriteParamTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="441" endline="451">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="153" endline="160">
<![CDATA[
internal void WriteFieldTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="441" endline="451">
<![CDATA[
internal override void GetTypesImpl(List<Type> list)
{
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
foreach (Type type in types)
{
if (type != moduleType)
{
list.Add(type);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="191" endline="200">
<![CDATA[
public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="301" endline="311">
<![CDATA[
internal void AddTypeForwarder(Type type)
{
ExportType(type);
foreach (Type nested in type.GetNestedTypes(BindingFlags.Public | BindingFlags.NonPublic))
{
AddTypeForwarder(nested);
}
foreach (Type nested in type.GetNestedTypes(BindingFlags.Public | BindingFlags.NonPublic))
{
AddTypeForwarder(nested);
}
}
]]>
</clone_fragment>
</clone_pair>
</clones>
