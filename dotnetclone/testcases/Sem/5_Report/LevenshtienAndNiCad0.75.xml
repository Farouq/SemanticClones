<clones>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="666" endline="704">
<![CDATA[
internal static void WritePropertySig(ModuleBuilder module, ByteBuffer bb, CallingConventions callingConvention,
Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
{
byte flags = PROPERTY;
if ((callingConvention & CallingConventions.HasThis) != 0)
{
flags |= HASTHIS;
}
if ((callingConvention & CallingConventions.ExplicitThis) != 0)
{
flags |= EXPLICITTHIS;
}
if ((callingConvention & CallingConventions.VarArgs) != 0)
{
flags |= VARARG;
}
bb.Write(flags);
bb.WriteCompressedInt(parameterTypes == null ? 0
WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, returnTypeRequiredCustomModifiers);
WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, returnTypeOptionalCustomModifiers);
WriteType(module, bb, returnType);
if (parameterTypes != null)
{
for (int i = 0; i < parameterTypes.Length; i++)
{
if (parameterTypeRequiredCustomModifiers != null)
{
WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, parameterTypeRequiredCustomModifiers[i]);
}
if (parameterTypeOptionalCustomModifiers != null)
{
WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, parameterTypeOptionalCustomModifiers[i]);
}
WriteType(module, bb, parameterTypes[i]);
}
for (int i = 0; i < parameterTypes.Length; i++)
{
if (parameterTypeRequiredCustomModifiers != null)
{
WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, parameterTypeRequiredCustomModifiers[i]);
}
if (parameterTypeOptionalCustomModifiers != null)
{
WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, parameterTypeOptionalCustomModifiers[i]);
}
WriteType(module, bb, parameterTypes[i]);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="120" endline="156">
<![CDATA[
internal override void WriteSig(ModuleBuilder module, ByteBuffer bb)
{
byte flags = PROPERTY;
if ((callingConvention & CallingConventions.HasThis) != 0)
{
flags |= HASTHIS;
}
if ((callingConvention & CallingConventions.ExplicitThis) != 0)
{
flags |= EXPLICITTHIS;
}
if ((callingConvention & CallingConventions.VarArgs) != 0)
{
flags |= VARARG;
}
bb.Write(flags);
bb.WriteCompressedInt(parameterTypes == null ? 0
WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, requiredCustomModifiers);
WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, optionalCustomModifiers);
WriteType(module, bb, propertyType);
if (parameterTypes != null)
{
for (int i = 0; i < parameterTypes.Length; i++)
{
if (parameterRequiredCustomModifiers != null)
{
WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, parameterRequiredCustomModifiers[i]);
}
if (parameterOptionalCustomModifiers != null)
{
WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, parameterOptionalCustomModifiers[i]);
}
WriteType(module, bb, parameterTypes[i]);
}
for (int i = 0; i < parameterTypes.Length; i++)
{
if (parameterRequiredCustomModifiers != null)
{
WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, parameterRequiredCustomModifiers[i]);
}
if (parameterOptionalCustomModifiers != null)
{
WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, parameterOptionalCustomModifiers[i]);
}
WriteType(module, bb, parameterTypes[i]);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="746" endline="759">
<![CDATA[
protected static Type[] BindTypeParameters(IGenericBinder binder, Type[] types)
{
if (types == null || types.Length == 0)
{
return Type.EmptyTypes;
}
Type[] expanded = new Type[types.Length];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = types[i].BindTypeParameters(binder);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = types[i].BindTypeParameters(binder);
}
return expanded;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="111" endline="124">
<![CDATA[
internal static T[] ToArray<T, V>(List<V> list, T[] empty) where V
{
if (list == null || list.Count == 0)
{
return empty;
}
T[] array = new T[list.Count];
for (int i = 0; i < array.Length; i++)
{
array[i] = list[i];
}
for (int i = 0; i < array.Length; i++)
{
array[i] = list[i];
}
return array;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="760" endline="773">
<![CDATA[
protected static Type[][] BindTypeParameters(IGenericBinder binder, Type[][] types)
{
if (types == null)
{
return null;
}
Type[][] expanded = new Type[types.Length][];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
return expanded;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="774" endline="787">
<![CDATA[
protected static Type[][][] BindTypeParameters(IGenericBinder binder, Type[][][] types)
{
if (types == null)
{
return null;
}
Type[][][] expanded = new Type[types.Length][][];
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
for (int i = 0; i < types.Length; i++)
{
expanded[i] = BindTypeParameters(binder, types[i]);
}
return expanded;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="114" endline="133">
<![CDATA[
internal void WriteCompressedInt(int value)
{
if (value <= 0x7F)
{
Write((byte)value);
}
else if (value <= 0x3FFF)
{
Write((byte)(0x80 | (value >> 8)));
Write((byte)value);
}
else
{
Write((byte)(0xC0 | (value >> 24)));
Write((byte)(value >> 16));
Write((byte)(value >> 8));
Write((byte)value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="177" endline="196">
<![CDATA[
internal void WriteCompressedInt(int value)
{
if (value <= 0x7F)
{
Write((byte)value);
}
else if (value <= 0x3FFF)
{
Write((byte)(0x80 | (value >> 8)));
Write((byte)value);
}
else
{
Write((byte)(0xC0 | (value >> 24)));
Write((byte)(value >> 16));
Write((byte)(value >> 8));
Write((byte)value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161">
<![CDATA[
internal void WriteStringIndex(int index)
{
if (bigStrings)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173">
<![CDATA[
internal void WriteGuidIndex(int index)
{
if (bigGuids)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185">
<![CDATA[
internal void WriteBlobIndex(int index)
{
if (bigBlobs)
{
Write(index);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="186" endline="213">
<![CDATA[
internal void WriteTypeDefOrRef(int token)
{
switch (token >> 24)
{
case 0
break;
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case TypeSpecTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
if (bigTypeDefOrRef)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="359" endline="387">
<![CDATA[
internal void WriteResolutionScope(int token)
{
switch (token >> 24)
{
case ModuleTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case ModuleRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case AssemblyRefTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 2 | 3;
break;
default
throw new InvalidOperationException();
}
if (bigResolutionScope)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="186" endline="213">
<![CDATA[
internal void WriteTypeDefOrRef(int token)
{
switch (token >> 24)
{
case 0
break;
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case TypeSpecTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
if (bigTypeDefOrRef)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="471" endline="498">
<![CDATA[
internal void WriteImplementation(int token)
{
switch (token >> 24)
{
case 0
break;
case FileTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case AssemblyRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case ExportedTypeTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
if (bigImplementation)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225">
<![CDATA[
internal void WriteEncodedTypeDefOrRef(int encodedToken)
{
if (bigTypeDefOrRef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239">
<![CDATA[
internal void WriteHasCustomAttribute(int encodedToken)
{
if (bigHasCustomAttribute)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="240" endline="262">
<![CDATA[
internal void WriteCustomAttributeType(int token)
{
switch (token >> 24)
{
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 3 | 2;
break;
case MemberRefTable.Index
token = (token & 0xFFFFFF) << 3 | 3;
break;
default
throw new InvalidOperationException();
}
if (bigCustomAttributeType)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="420" endline="442">
<![CDATA[
internal void WriteMethodDefOrRef(int token)
{
switch (token >> 24)
{
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 1 | 0;
break;
case MemberRefTable.Index
token = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
if (bigMethodDefOrRef)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="240" endline="262">
<![CDATA[
internal void WriteCustomAttributeType(int token)
{
switch (token >> 24)
{
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 3 | 2;
break;
case MemberRefTable.Index
token = (token & 0xFFFFFF) << 3 | 3;
break;
default
throw new InvalidOperationException();
}
if (bigCustomAttributeType)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="527" endline="549">
<![CDATA[
internal void WriteMemberForwarded(int token)
{
switch (token >> 24)
{
case FieldTable.Index
token = (token & 0xFFFFFF) << 1 | 0;
break;
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
if (bigMemberForwarded)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274">
<![CDATA[
internal void WriteField(int index)
{
if (bigField)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286">
<![CDATA[
internal void WriteMethodDef(int index)
{
if (bigMethodDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298">
<![CDATA[
internal void WriteParam(int index)
{
if (bigParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310">
<![CDATA[
internal void WriteTypeDef(int index)
{
if (bigTypeDef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322">
<![CDATA[
internal void WriteEvent(int index)
{
if (bigEvent)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334">
<![CDATA[
internal void WriteProperty(int index)
{
if (bigProperty)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346">
<![CDATA[
internal void WriteGenericParam(int index)
{
if (bigGenericParam)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358">
<![CDATA[
internal void WriteModuleRef(int index)
{
if (bigModuleRef)
{
Write(index & 0xFFFFFF);
}
else
{
Write((short)index);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="359" endline="387">
<![CDATA[
internal void WriteResolutionScope(int token)
{
switch (token >> 24)
{
case ModuleTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case ModuleRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case AssemblyRefTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 2 | 3;
break;
default
throw new InvalidOperationException();
}
if (bigResolutionScope)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="388" endline="419">
<![CDATA[
internal void WriteMemberRefParent(int token)
{
switch (token >> 24)
{
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 3 | 0;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 3 | 1;
break;
case ModuleRefTable.Index
token = (token & 0xFFFFFF) << 3 | 2;
break;
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 3 | 3;
break;
case TypeSpecTable.Index
token = (token & 0xFFFFFF) << 3 | 4;
break;
default
throw new InvalidOperationException();
}
if (bigMemberRefParent)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="359" endline="387">
<![CDATA[
internal void WriteResolutionScope(int token)
{
switch (token >> 24)
{
case ModuleTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case ModuleRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case AssemblyRefTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 2 | 3;
break;
default
throw new InvalidOperationException();
}
if (bigResolutionScope)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="471" endline="498">
<![CDATA[
internal void WriteImplementation(int token)
{
switch (token >> 24)
{
case 0
break;
case FileTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case AssemblyRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case ExportedTypeTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
if (bigImplementation)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="420" endline="442">
<![CDATA[
internal void WriteMethodDefOrRef(int token)
{
switch (token >> 24)
{
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 1 | 0;
break;
case MemberRefTable.Index
token = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
if (bigMethodDefOrRef)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="527" endline="549">
<![CDATA[
internal void WriteMemberForwarded(int token)
{
switch (token >> 24)
{
case FieldTable.Index
token = (token & 0xFFFFFF) << 1 | 0;
break;
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
if (bigMemberForwarded)
{
Write(token);
}
else
{
Write((short)token);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456">
<![CDATA[
internal void WriteHasConstant(int encodedToken)
{
if (bigHasConstant)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470">
<![CDATA[
internal void WriteHasSemantics(int encodedToken)
{
if (bigHasSemantics)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512">
<![CDATA[
internal void WriteTypeOrMethodDef(int encodedToken)
{
if (bigTypeOrMethodDef)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526">
<![CDATA[
internal void WriteHasDeclSecurity(int encodedToken)
{
if (bigHasDeclSecurity)
{
Write(encodedToken);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563">
<![CDATA[
internal void WriteHasFieldMarshal(int encodedToken)
{
if (bigHasFieldMarshal)
{
Write(encodedToken & 0xFFFFFF);
}
else
{
Write((short)encodedToken);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473">
<![CDATA[
public EventInfo GetEvent(string name, BindingFlags bindingAttr)
{
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
foreach (EventInfo evt in GetEvents(bindingAttr))
{
if (evt.Name == name)
{
return evt;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="479" endline="509">
<![CDATA[
public EventInfo[] GetEvents(BindingFlags bindingAttr)
{
List<EventInfo> list = new List<EventInfo>();
Type type = this;
while (type != null)
{
type.CheckBaked();
foreach (EventInfo evt in type.__GetDeclaredEvents())
{
if (BindingFlagsMatch(evt.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(evt.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
{
list.Add(evt);
}
}
foreach (EventInfo evt in type.__GetDeclaredEvents())
{
if (BindingFlagsMatch(evt.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(evt.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
{
list.Add(evt);
}
}
if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
{
if ((bindingAttr & BindingFlags.FlattenHierarchy) == 0)
{
bindingAttr &= ~BindingFlags.Static;
}
type = type.BaseType;
}
else
{
break;
}
}
while (type != null)
{
type.CheckBaked();
foreach (EventInfo evt in type.__GetDeclaredEvents())
{
if (BindingFlagsMatch(evt.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(evt.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
{
list.Add(evt);
}
}
if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
{
if ((bindingAttr & BindingFlags.FlattenHierarchy) == 0)
{
bindingAttr &= ~BindingFlags.Static;
}
type = type.BaseType;
}
else
{
break;
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="779" endline="809">
<![CDATA[
public PropertyInfo[] GetProperties(BindingFlags bindingAttr)
{
List<PropertyInfo> list = new List<PropertyInfo>();
Type type = this;
while (type != null)
{
type.CheckBaked();
foreach (PropertyInfo property in type.__GetDeclaredProperties())
{
if (BindingFlagsMatch(property.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(property.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
{
list.Add(property);
}
}
foreach (PropertyInfo property in type.__GetDeclaredProperties())
{
if (BindingFlagsMatch(property.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(property.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
{
list.Add(property);
}
}
if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
{
if ((bindingAttr & BindingFlags.FlattenHierarchy) == 0)
{
bindingAttr &= ~BindingFlags.Static;
}
type = type.BaseType;
}
else
{
break;
}
}
while (type != null)
{
type.CheckBaked();
foreach (PropertyInfo property in type.__GetDeclaredProperties())
{
if (BindingFlagsMatch(property.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(property.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
{
list.Add(property);
}
}
if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
{
if ((bindingAttr & BindingFlags.FlattenHierarchy) == 0)
{
bindingAttr &= ~BindingFlags.Static;
}
type = type.BaseType;
}
else
{
break;
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526">
<![CDATA[
public FieldInfo GetField(string name, BindingFlags bindingAttr)
{
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in GetFields(bindingAttr))
{
if (field.Name == name)
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="532" endline="561">
<![CDATA[
public FieldInfo[] GetFields(BindingFlags bindingAttr)
{
List<FieldInfo> list = new List<FieldInfo>();
CheckBaked();
foreach (FieldInfo field in __GetDeclaredFields())
{
if (BindingFlagsMatch(field.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(field.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
{
list.Add(field);
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (BindingFlagsMatch(field.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(field.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
{
list.Add(field);
}
}
if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
{
for (Type type = this.BaseType; type != null; type = type.BaseType)
{
type.CheckBaked();
foreach (FieldInfo field in type.__GetDeclaredFields())
{
if ((field.Attributes & FieldAttributes.FieldAccessMask) > FieldAttributes.Private
&& BindingFlagsMatch(field.IsStatic, bindingAttr, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance))
{
list.Add(field);
}
}
foreach (FieldInfo field in type.__GetDeclaredFields())
{
if ((field.Attributes & FieldAttributes.FieldAccessMask) > FieldAttributes.Private
&& BindingFlagsMatch(field.IsStatic, bindingAttr, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance))
{
list.Add(field);
}
}
}
for (Type type = this.BaseType; type != null; type = type.BaseType)
{
type.CheckBaked();
foreach (FieldInfo field in type.__GetDeclaredFields())
{
if ((field.Attributes & FieldAttributes.FieldAccessMask) > FieldAttributes.Private
&& BindingFlagsMatch(field.IsStatic, bindingAttr, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance))
{
list.Add(field);
}
}
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="585" endline="620">
<![CDATA[
public MethodInfo[] GetMethods(BindingFlags bindingAttr)
{
CheckBaked();
List<MethodInfo> list = new List<MethodInfo>();
foreach (MethodBase mb in __GetDeclaredMethods())
{
MethodInfo mi = mb as MethodInfo;
if (mi != null
&& BindingFlagsMatch(mi.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(mi.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
{
list.Add(mi);
}
}
foreach (MethodBase mb in __GetDeclaredMethods())
{
MethodInfo mi = mb as MethodInfo;
if (mi != null
&& BindingFlagsMatch(mi.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(mi.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
{
list.Add(mi);
}
}
if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
{
for (Type type = this.BaseType; type != null; type = type.BaseType)
{
type.CheckBaked();
foreach (MethodBase mb in type.__GetDeclaredMethods())
{
MethodInfo mi = mb as MethodInfo;
if (mi != null
&& (mi.Attributes & MethodAttributes.MemberAccessMask) > MethodAttributes.Private
&& BindingFlagsMatch(mi.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(mi.IsStatic, bindingAttr, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance)
&& !FindMethod(list, mi))
{
list.Add(mi);
}
}
foreach (MethodBase mb in type.__GetDeclaredMethods())
{
MethodInfo mi = mb as MethodInfo;
if (mi != null
&& (mi.Attributes & MethodAttributes.MemberAccessMask) > MethodAttributes.Private
&& BindingFlagsMatch(mi.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(mi.IsStatic, bindingAttr, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance)
&& !FindMethod(list, mi))
{
list.Add(mi);
}
}
}
for (Type type = this.BaseType; type != null; type = type.BaseType)
{
type.CheckBaked();
foreach (MethodBase mb in type.__GetDeclaredMethods())
{
MethodInfo mi = mb as MethodInfo;
if (mi != null
&& (mi.Attributes & MethodAttributes.MemberAccessMask) > MethodAttributes.Private
&& BindingFlagsMatch(mi.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(mi.IsStatic, bindingAttr, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance)
&& !FindMethod(list, mi))
{
list.Add(mi);
}
}
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="643" endline="659">
<![CDATA[
public MethodInfo GetMethod(string name, BindingFlags bindingAttr)
{
MethodInfo found = null;
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name)
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name)
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
return found;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="670" endline="686">
<![CDATA[
public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
MethodInfo found = null;
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name && method.MethodSignature.MatchParameterTypes(types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name && method.MethodSignature.MatchParameterTypes(types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
return found;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="643" endline="659">
<![CDATA[
public MethodInfo GetMethod(string name, BindingFlags bindingAttr)
{
MethodInfo found = null;
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name)
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name)
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
return found;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="827" endline="843">
<![CDATA[
public PropertyInfo GetProperty(string name, Type returnType)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && prop.PropertyType.Equals(returnType))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && prop.PropertyType.Equals(returnType))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="643" endline="659">
<![CDATA[
public MethodInfo GetMethod(string name, BindingFlags bindingAttr)
{
MethodInfo found = null;
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name)
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name)
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
return found;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="844" endline="860">
<![CDATA[
public PropertyInfo GetProperty(string name, Type[] types)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="643" endline="659">
<![CDATA[
public MethodInfo GetMethod(string name, BindingFlags bindingAttr)
{
MethodInfo found = null;
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name)
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name)
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
return found;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="887" endline="903">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name && prop.PropertyType.Equals(returnType) && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name && prop.PropertyType.Equals(returnType) && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="670" endline="686">
<![CDATA[
public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
MethodInfo found = null;
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name && method.MethodSignature.MatchParameterTypes(types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name && method.MethodSignature.MatchParameterTypes(types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
return found;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="827" endline="843">
<![CDATA[
public PropertyInfo GetProperty(string name, Type returnType)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && prop.PropertyType.Equals(returnType))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && prop.PropertyType.Equals(returnType))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="670" endline="686">
<![CDATA[
public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
MethodInfo found = null;
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name && method.MethodSignature.MatchParameterTypes(types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name && method.MethodSignature.MatchParameterTypes(types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
return found;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="844" endline="860">
<![CDATA[
public PropertyInfo GetProperty(string name, Type[] types)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="670" endline="686">
<![CDATA[
public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
MethodInfo found = null;
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name && method.MethodSignature.MatchParameterTypes(types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
foreach (MethodInfo method in GetMethods(bindingAttr))
{
if (method.Name == name && method.MethodSignature.MatchParameterTypes(types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = method;
}
}
return found;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="887" endline="903">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name && prop.PropertyType.Equals(returnType) && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name && prop.PropertyType.Equals(returnType) && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="698" endline="714">
<![CDATA[
public ConstructorInfo[] GetConstructors(BindingFlags bindingAttr)
{
CheckBaked();
List<ConstructorInfo> list = new List<ConstructorInfo>();
foreach (MethodBase mb in __GetDeclaredMethods())
{
ConstructorInfo constructor = mb as ConstructorInfo;
if (constructor != null
&& BindingFlagsMatch(constructor.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(constructor.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
{
list.Add(constructor);
}
}
foreach (MethodBase mb in __GetDeclaredMethods())
{
ConstructorInfo constructor = mb as ConstructorInfo;
if (constructor != null
&& BindingFlagsMatch(constructor.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
&& BindingFlagsMatch(constructor.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
{
list.Add(constructor);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="760" endline="773">
<![CDATA[
public Type[] GetNestedTypes(BindingFlags bindingAttr)
{
CheckBaked();
List<Type> list = new List<Type>();
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731">
<![CDATA[
public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
{
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
{
if (constructor.MethodSignature.MatchParameterTypes(types))
{
return constructor;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754">
<![CDATA[
public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
{
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
foreach (Type type in GetNestedTypes(bindingAttr))
{
if (type.Name == name)
{
return type;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
{
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name)
{
return prop;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="760" endline="773">
<![CDATA[
public Type[] GetNestedTypes(BindingFlags bindingAttr)
{
CheckBaked();
List<Type> list = new List<Type>();
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="760" endline="773">
<![CDATA[
public Type[] GetNestedTypes(BindingFlags bindingAttr)
{
CheckBaked();
List<Type> list = new List<Type>();
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="760" endline="773">
<![CDATA[
public Type[] GetNestedTypes(BindingFlags bindingAttr)
{
CheckBaked();
List<Type> list = new List<Type>();
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="760" endline="773">
<![CDATA[
public Type[] GetNestedTypes(BindingFlags bindingAttr)
{
CheckBaked();
List<Type> list = new List<Type>();
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
foreach (Type type in __GetDeclaredTypes())
{
if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="827" endline="843">
<![CDATA[
public PropertyInfo GetProperty(string name, Type returnType)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && prop.PropertyType.Equals(returnType))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && prop.PropertyType.Equals(returnType))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="844" endline="860">
<![CDATA[
public PropertyInfo GetProperty(string name, Type[] types)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="827" endline="843">
<![CDATA[
public PropertyInfo GetProperty(string name, Type returnType)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && prop.PropertyType.Equals(returnType))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && prop.PropertyType.Equals(returnType))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="887" endline="903">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name && prop.PropertyType.Equals(returnType) && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name && prop.PropertyType.Equals(returnType) && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="844" endline="860">
<![CDATA[
public PropertyInfo GetProperty(string name, Type[] types)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties())
{
if (prop.Name == name && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="887" endline="903">
<![CDATA[
public PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)
{
PropertyInfo found = null;
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name && prop.PropertyType.Equals(returnType) && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
foreach (PropertyInfo prop in GetProperties(bindingAttr))
{
if (prop.Name == name && prop.PropertyType.Equals(returnType) && MatchParameterTypes(prop.GetIndexParameters(), types))
{
if (found != null)
{
throw new AmbiguousMatchException();
}
found = prop;
}
}
return found;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937">
<![CDATA[
public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetInterfaces())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1473" endline="1484">
<![CDATA[
internal MethodBase FindMethod(string name, MethodSignature signature)
{
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
foreach (MethodBase method in __GetDeclaredMethods())
{
if (method.Name == name && method.MethodSignature.Equals(signature))
{
return method;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1485" endline="1496">
<![CDATA[
internal FieldInfo FindField(string name, FieldSignature signature)
{
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
foreach (FieldInfo field in __GetDeclaredFields())
{
if (field.Name == name && field.FieldSignature.Equals(signature))
{
return field;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="369" endline="375">
<![CDATA[
public FieldBuilder DefineField(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes)
{
FieldBuilder fb = new FieldBuilder(this, fieldName, type, requiredCustomModifiers, optionalCustomModifiers, attributes);
fields.Add(fb);
return fb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="753" endline="759">
<![CDATA[
private AssemblyBuilder DefineDynamicAssemblyImpl(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
{
AssemblyBuilder asm = new AssemblyBuilder(this, name, dir, requiredPermissions, optionalPermissions, refusedPermissions);
dynamicAssemblies.Add(asm);
return asm;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="432" endline="441">
<![CDATA[
public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineNestedType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="191" endline="200">
<![CDATA[
public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
{
TypeBuilder tb = DefineType(name, attr, parent);
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
foreach (Type iface in interfaces)
{
tb.AddInterfaceImplementation(iface);
}
return tb;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="465" endline="473">
<![CDATA[
public void AddInterfaceImplementation(Type interfaceType)
{
if (interfaces == null)
{
interfaces = new List<Type>();
}
interfaces.Add(interfaceType);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="591" endline="600">
<![CDATA[
public void __AddDeclarativeSecurity(CustomAttributeBuilder customBuilder)
{
attribs |= TypeAttributes.HasSecurity;
if (declarativeSecurity == null)
{
declarativeSecurity = new List<CustomAttributeBuilder>();
}
declarativeSecurity.Add(customBuilder);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="465" endline="473">
<![CDATA[
public void AddInterfaceImplementation(Type interfaceType)
{
if (interfaces == null)
{
interfaces = new List<Type>();
}
interfaces.Add(interfaceType);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="66" endline="74">
<![CDATA[
public void AddOtherMethod(MethodBuilder mdBuilder)
{
if (otherMethods == null)
{
otherMethods = new List<MethodBuilder>();
}
otherMethods.Add(mdBuilder);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="465" endline="473">
<![CDATA[
public void AddInterfaceImplementation(Type interfaceType)
{
if (interfaces == null)
{
interfaces = new List<Type>();
}
interfaces.Add(interfaceType);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="267" endline="276">
<![CDATA[
public void __AddDeclarativeSecurity(CustomAttributeBuilder customBuilder)
{
attributes |= MethodAttributes.HasSecurity;
if (declarativeSecurity == null)
{
declarativeSecurity = new List<CustomAttributeBuilder>();
}
declarativeSecurity.Add(customBuilder);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="465" endline="473">
<![CDATA[
public void AddInterfaceImplementation(Type interfaceType)
{
if (interfaces == null)
{
interfaces = new List<Type>();
}
interfaces.Add(interfaceType);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="77" endline="86">
<![CDATA[
public void AddOtherMethod(MethodBuilder mdBuilder)
{
PatchCallingConvention(mdBuilder);
if (otherMethods == null)
{
otherMethods = new List<MethodBuilder>();
}
otherMethods.Add(mdBuilder);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="561" endline="590">
<![CDATA[
public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
{
Universe u = this.ModuleBuilder.universe;
Type type = customBuilder.Constructor.DeclaringType;
if (type == u.System_Runtime_InteropServices_StructLayoutAttribute)
{
SetStructLayoutPseudoCustomAttribute(customBuilder.DecodeBlob(this.Assembly));
}
else if (type == u.System_SerializableAttribute)
{
attribs |= TypeAttributes.Serializable;
}
else if (type == u.System_Runtime_InteropServices_ComImportAttribute)
{
attribs |= TypeAttributes.Import;
}
else if (type == u.System_Runtime_CompilerServices_SpecialNameAttribute)
{
attribs |= TypeAttributes.SpecialName;
}
else
{
if (type == u.System_Security_SuppressUnmanagedCodeSecurityAttribute)
{
attribs |= TypeAttributes.HasSecurity;
}
this.ModuleBuilder.SetCustomAttribute(token, customBuilder);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="236" endline="266">
<![CDATA[
public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
{
Universe u = this.ModuleBuilder.universe;
Type type = customBuilder.Constructor.DeclaringType;
if (type == u.System_Runtime_InteropServices_DllImportAttribute)
{
attributes |= MethodAttributes.PinvokeImpl;
SetDllImportPseudoCustomAttribute(customBuilder.DecodeBlob(this.Module.Assembly));
}
else if (type == u.System_Runtime_CompilerServices_MethodImplAttribute)
{
SetMethodImplAttribute(customBuilder.DecodeBlob(this.Module.Assembly));
}
else if (type == u.System_Runtime_InteropServices_PreserveSigAttribute)
{
implFlags |= MethodImplAttributes.PreserveSig;
}
else if (type == u.System_Runtime_CompilerServices_SpecialNameAttribute)
{
attributes |= MethodAttributes.SpecialName;
}
else
{
if (type == u.System_Security_SuppressUnmanagedCodeSecurityAttribute)
{
attributes |= MethodAttributes.HasSecurity;
}
this.ModuleBuilder.SetCustomAttribute(pseudoToken, customBuilder);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="591" endline="600">
<![CDATA[
public void __AddDeclarativeSecurity(CustomAttributeBuilder customBuilder)
{
attribs |= TypeAttributes.HasSecurity;
if (declarativeSecurity == null)
{
declarativeSecurity = new List<CustomAttributeBuilder>();
}
declarativeSecurity.Add(customBuilder);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="66" endline="74">
<![CDATA[
public void AddOtherMethod(MethodBuilder mdBuilder)
{
if (otherMethods == null)
{
otherMethods = new List<MethodBuilder>();
}
otherMethods.Add(mdBuilder);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="591" endline="600">
<![CDATA[
public void __AddDeclarativeSecurity(CustomAttributeBuilder customBuilder)
{
attribs |= TypeAttributes.HasSecurity;
if (declarativeSecurity == null)
{
declarativeSecurity = new List<CustomAttributeBuilder>();
}
declarativeSecurity.Add(customBuilder);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="267" endline="276">
<![CDATA[
public void __AddDeclarativeSecurity(CustomAttributeBuilder customBuilder)
{
attributes |= MethodAttributes.HasSecurity;
if (declarativeSecurity == null)
{
declarativeSecurity = new List<CustomAttributeBuilder>();
}
declarativeSecurity.Add(customBuilder);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="591" endline="600">
<![CDATA[
public void __AddDeclarativeSecurity(CustomAttributeBuilder customBuilder)
{
attribs |= TypeAttributes.HasSecurity;
if (declarativeSecurity == null)
{
declarativeSecurity = new List<CustomAttributeBuilder>();
}
declarativeSecurity.Add(customBuilder);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="77" endline="86">
<![CDATA[
public void AddOtherMethod(MethodBuilder mdBuilder)
{
PatchCallingConvention(mdBuilder);
if (otherMethods == null)
{
otherMethods = new List<MethodBuilder>();
}
otherMethods.Add(mdBuilder);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="607" endline="617">
<![CDATA[
public GenericTypeParameterBuilder[] DefineGenericParameters(params string[] names)
{
typeFlags |= TypeFlags.IsGenericTypeDefinition;
gtpb = new GenericTypeParameterBuilder[names.Length];
for (int i = 0; i < names.Length; i++)
{
gtpb[i] = new GenericTypeParameterBuilder(names[i], this, null, i);
}
for (int i = 0; i < names.Length; i++)
{
gtpb[i] = new GenericTypeParameterBuilder(names[i], this, null, i);
}
return (GenericTypeParameterBuilder[])gtpb.Clone();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="334" endline="343">
<![CDATA[
public GenericTypeParameterBuilder[] DefineGenericParameters(params string[] names)
{
gtpb = new GenericTypeParameterBuilder[names.Length];
for (int i = 0; i < names.Length; i++)
{
gtpb[i] = new GenericTypeParameterBuilder(names[i], null, this, i);
}
for (int i = 0; i < names.Length; i++)
{
gtpb[i] = new GenericTypeParameterBuilder(names[i], null, this, i);
}
return (GenericTypeParameterBuilder[])gtpb.Clone();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="921" endline="928">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="929" endline="936">
<![CDATA[
internal void WriteFieldRecords(MetadataWriter mw)
{
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="921" endline="928">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="636" endline="646">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
if (parameters != null)
{
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="921" endline="928">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="145" endline="152">
<![CDATA[
internal void WriteParamTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="921" endline="928">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
foreach (MethodBuilder mb in methods)
{
mb.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="153" endline="160">
<![CDATA[
internal void WriteFieldTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="929" endline="936">
<![CDATA[
internal void WriteFieldRecords(MetadataWriter mw)
{
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="636" endline="646">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
if (parameters != null)
{
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="929" endline="936">
<![CDATA[
internal void WriteFieldRecords(MetadataWriter mw)
{
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="145" endline="152">
<![CDATA[
internal void WriteParamTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="929" endline="936">
<![CDATA[
internal void WriteFieldRecords(MetadataWriter mw)
{
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
foreach (FieldBuilder fb in fields)
{
fb.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="153" endline="160">
<![CDATA[
internal void WriteFieldTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="956" endline="969">
<![CDATA[
}
internal MethodBase LookupMethod(int token)
{
foreach (MethodBuilder method in methods)
{
if (method.MetadataToken == token)
{
return method;
}
}
foreach (MethodBuilder method in methods)
{
if (method.MetadataToken == token)
{
return method;
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="212" endline="223">
<![CDATA[
public ModuleBuilder GetDynamicModule(string name)
{
foreach (ModuleBuilder module in modules)
{
if (module.Name == name)
{
return module;
}
}
foreach (ModuleBuilder module in modules)
{
if (module.Name == name)
{
return module;
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67">
<![CDATA[
internal int ReadStringIndex()
{
if (bigStrings)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79">
<![CDATA[
internal int ReadGuidIndex()
{
if (bigGuids)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91">
<![CDATA[
internal int ReadBlobIndex()
{
if (bigBlobs)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="92" endline="117">
<![CDATA[
internal int ReadResolutionScope()
{
int codedIndex;
if (bigResolutionScope)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (ModuleTable.Index << 24) + (codedIndex >> 2);
case 1
return (ModuleRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 3
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="118" endline="141">
<![CDATA[
internal int ReadTypeDefOrRef()
{
int codedIndex;
if (bigTypeDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (TypeSpecTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="92" endline="117">
<![CDATA[
internal int ReadResolutionScope()
{
int codedIndex;
if (bigResolutionScope)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (ModuleTable.Index << 24) + (codedIndex >> 2);
case 1
return (ModuleRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 3
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="272" endline="295">
<![CDATA[
internal int ReadHasConstant()
{
int codedIndex;
if (bigHasConstant)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 2);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 2);
case 2
return (PropertyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="92" endline="117">
<![CDATA[
internal int ReadResolutionScope()
{
int codedIndex;
if (bigResolutionScope)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (ModuleTable.Index << 24) + (codedIndex >> 2);
case 1
return (ModuleRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 3
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="340" endline="363">
<![CDATA[
internal int ReadHasDeclSecurity()
{
int codedIndex;
if (bigHasDeclSecurity)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="92" endline="117">
<![CDATA[
internal int ReadResolutionScope()
{
int codedIndex;
if (bigResolutionScope)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (ModuleTable.Index << 24) + (codedIndex >> 2);
case 1
return (ModuleRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 3
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="408" endline="431">
<![CDATA[
internal int ReadImplementation()
{
int codedIndex;
if (bigImplementation)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FileTable.Index << 24) + (codedIndex >> 2);
case 1
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="118" endline="141">
<![CDATA[
internal int ReadTypeDefOrRef()
{
int codedIndex;
if (bigTypeDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (TypeSpecTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="250" endline="271">
<![CDATA[
internal int ReadMethodDefOrRef()
{
int codedIndex;
if (bigMethodDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MemberRefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="118" endline="141">
<![CDATA[
internal int ReadTypeDefOrRef()
{
int codedIndex;
if (bigTypeDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (TypeSpecTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="272" endline="295">
<![CDATA[
internal int ReadHasConstant()
{
int codedIndex;
if (bigHasConstant)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 2);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 2);
case 2
return (PropertyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="118" endline="141">
<![CDATA[
internal int ReadTypeDefOrRef()
{
int codedIndex;
if (bigTypeDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (TypeSpecTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="296" endline="317">
<![CDATA[
internal int ReadHasSemantics()
{
int codedIndex;
if (bigHasSemantics)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (EventTable.Index << 24) + (codedIndex >> 1);
case 1
return (PropertyTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="118" endline="141">
<![CDATA[
internal int ReadTypeDefOrRef()
{
int codedIndex;
if (bigTypeDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (TypeSpecTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="318" endline="339">
<![CDATA[
internal int ReadHasFieldMarshal()
{
int codedIndex;
if (bigHasFieldMarshal)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="118" endline="141">
<![CDATA[
internal int ReadTypeDefOrRef()
{
int codedIndex;
if (bigTypeDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (TypeSpecTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="340" endline="363">
<![CDATA[
internal int ReadHasDeclSecurity()
{
int codedIndex;
if (bigHasDeclSecurity)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="118" endline="141">
<![CDATA[
internal int ReadTypeDefOrRef()
{
int codedIndex;
if (bigTypeDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (TypeSpecTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="364" endline="385">
<![CDATA[
internal int ReadTypeOrMethodDef()
{
int codedIndex;
if (bigTypeOrMethodDef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="118" endline="141">
<![CDATA[
internal int ReadTypeDefOrRef()
{
int codedIndex;
if (bigTypeDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (TypeSpecTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="386" endline="407">
<![CDATA[
internal int ReadMemberForwarded()
{
int codedIndex;
if (bigMemberForwarded)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="118" endline="141">
<![CDATA[
internal int ReadTypeDefOrRef()
{
int codedIndex;
if (bigTypeDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (TypeRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (TypeSpecTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="408" endline="431">
<![CDATA[
internal int ReadImplementation()
{
int codedIndex;
if (bigImplementation)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FileTable.Index << 24) + (codedIndex >> 2);
case 1
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="250" endline="271">
<![CDATA[
internal int ReadMethodDefOrRef()
{
int codedIndex;
if (bigMethodDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MemberRefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="272" endline="295">
<![CDATA[
internal int ReadHasConstant()
{
int codedIndex;
if (bigHasConstant)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 2);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 2);
case 2
return (PropertyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="250" endline="271">
<![CDATA[
internal int ReadMethodDefOrRef()
{
int codedIndex;
if (bigMethodDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MemberRefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="296" endline="317">
<![CDATA[
internal int ReadHasSemantics()
{
int codedIndex;
if (bigHasSemantics)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (EventTable.Index << 24) + (codedIndex >> 1);
case 1
return (PropertyTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="250" endline="271">
<![CDATA[
internal int ReadMethodDefOrRef()
{
int codedIndex;
if (bigMethodDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MemberRefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="318" endline="339">
<![CDATA[
internal int ReadHasFieldMarshal()
{
int codedIndex;
if (bigHasFieldMarshal)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="250" endline="271">
<![CDATA[
internal int ReadMethodDefOrRef()
{
int codedIndex;
if (bigMethodDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MemberRefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="340" endline="363">
<![CDATA[
internal int ReadHasDeclSecurity()
{
int codedIndex;
if (bigHasDeclSecurity)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="250" endline="271">
<![CDATA[
internal int ReadMethodDefOrRef()
{
int codedIndex;
if (bigMethodDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MemberRefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="364" endline="385">
<![CDATA[
internal int ReadTypeOrMethodDef()
{
int codedIndex;
if (bigTypeOrMethodDef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="250" endline="271">
<![CDATA[
internal int ReadMethodDefOrRef()
{
int codedIndex;
if (bigMethodDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MemberRefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="386" endline="407">
<![CDATA[
internal int ReadMemberForwarded()
{
int codedIndex;
if (bigMemberForwarded)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="250" endline="271">
<![CDATA[
internal int ReadMethodDefOrRef()
{
int codedIndex;
if (bigMethodDefOrRef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MemberRefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="408" endline="431">
<![CDATA[
internal int ReadImplementation()
{
int codedIndex;
if (bigImplementation)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FileTable.Index << 24) + (codedIndex >> 2);
case 1
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="272" endline="295">
<![CDATA[
internal int ReadHasConstant()
{
int codedIndex;
if (bigHasConstant)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 2);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 2);
case 2
return (PropertyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="296" endline="317">
<![CDATA[
internal int ReadHasSemantics()
{
int codedIndex;
if (bigHasSemantics)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (EventTable.Index << 24) + (codedIndex >> 1);
case 1
return (PropertyTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="272" endline="295">
<![CDATA[
internal int ReadHasConstant()
{
int codedIndex;
if (bigHasConstant)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 2);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 2);
case 2
return (PropertyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="318" endline="339">
<![CDATA[
internal int ReadHasFieldMarshal()
{
int codedIndex;
if (bigHasFieldMarshal)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="272" endline="295">
<![CDATA[
internal int ReadHasConstant()
{
int codedIndex;
if (bigHasConstant)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 2);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 2);
case 2
return (PropertyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="340" endline="363">
<![CDATA[
internal int ReadHasDeclSecurity()
{
int codedIndex;
if (bigHasDeclSecurity)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="272" endline="295">
<![CDATA[
internal int ReadHasConstant()
{
int codedIndex;
if (bigHasConstant)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 2);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 2);
case 2
return (PropertyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="364" endline="385">
<![CDATA[
internal int ReadTypeOrMethodDef()
{
int codedIndex;
if (bigTypeOrMethodDef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="272" endline="295">
<![CDATA[
internal int ReadHasConstant()
{
int codedIndex;
if (bigHasConstant)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 2);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 2);
case 2
return (PropertyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="386" endline="407">
<![CDATA[
internal int ReadMemberForwarded()
{
int codedIndex;
if (bigMemberForwarded)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="272" endline="295">
<![CDATA[
internal int ReadHasConstant()
{
int codedIndex;
if (bigHasConstant)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 2);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 2);
case 2
return (PropertyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="408" endline="431">
<![CDATA[
internal int ReadImplementation()
{
int codedIndex;
if (bigImplementation)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FileTable.Index << 24) + (codedIndex >> 2);
case 1
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="296" endline="317">
<![CDATA[
internal int ReadHasSemantics()
{
int codedIndex;
if (bigHasSemantics)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (EventTable.Index << 24) + (codedIndex >> 1);
case 1
return (PropertyTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="318" endline="339">
<![CDATA[
internal int ReadHasFieldMarshal()
{
int codedIndex;
if (bigHasFieldMarshal)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="296" endline="317">
<![CDATA[
internal int ReadHasSemantics()
{
int codedIndex;
if (bigHasSemantics)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (EventTable.Index << 24) + (codedIndex >> 1);
case 1
return (PropertyTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="340" endline="363">
<![CDATA[
internal int ReadHasDeclSecurity()
{
int codedIndex;
if (bigHasDeclSecurity)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="296" endline="317">
<![CDATA[
internal int ReadHasSemantics()
{
int codedIndex;
if (bigHasSemantics)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (EventTable.Index << 24) + (codedIndex >> 1);
case 1
return (PropertyTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="364" endline="385">
<![CDATA[
internal int ReadTypeOrMethodDef()
{
int codedIndex;
if (bigTypeOrMethodDef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="296" endline="317">
<![CDATA[
internal int ReadHasSemantics()
{
int codedIndex;
if (bigHasSemantics)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (EventTable.Index << 24) + (codedIndex >> 1);
case 1
return (PropertyTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="386" endline="407">
<![CDATA[
internal int ReadMemberForwarded()
{
int codedIndex;
if (bigMemberForwarded)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="296" endline="317">
<![CDATA[
internal int ReadHasSemantics()
{
int codedIndex;
if (bigHasSemantics)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (EventTable.Index << 24) + (codedIndex >> 1);
case 1
return (PropertyTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="408" endline="431">
<![CDATA[
internal int ReadImplementation()
{
int codedIndex;
if (bigImplementation)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FileTable.Index << 24) + (codedIndex >> 2);
case 1
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="318" endline="339">
<![CDATA[
internal int ReadHasFieldMarshal()
{
int codedIndex;
if (bigHasFieldMarshal)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="340" endline="363">
<![CDATA[
internal int ReadHasDeclSecurity()
{
int codedIndex;
if (bigHasDeclSecurity)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="318" endline="339">
<![CDATA[
internal int ReadHasFieldMarshal()
{
int codedIndex;
if (bigHasFieldMarshal)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="364" endline="385">
<![CDATA[
internal int ReadTypeOrMethodDef()
{
int codedIndex;
if (bigTypeOrMethodDef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="318" endline="339">
<![CDATA[
internal int ReadHasFieldMarshal()
{
int codedIndex;
if (bigHasFieldMarshal)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="386" endline="407">
<![CDATA[
internal int ReadMemberForwarded()
{
int codedIndex;
if (bigMemberForwarded)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="318" endline="339">
<![CDATA[
internal int ReadHasFieldMarshal()
{
int codedIndex;
if (bigHasFieldMarshal)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (ParamTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="408" endline="431">
<![CDATA[
internal int ReadImplementation()
{
int codedIndex;
if (bigImplementation)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FileTable.Index << 24) + (codedIndex >> 2);
case 1
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="340" endline="363">
<![CDATA[
internal int ReadHasDeclSecurity()
{
int codedIndex;
if (bigHasDeclSecurity)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="364" endline="385">
<![CDATA[
internal int ReadTypeOrMethodDef()
{
int codedIndex;
if (bigTypeOrMethodDef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="340" endline="363">
<![CDATA[
internal int ReadHasDeclSecurity()
{
int codedIndex;
if (bigHasDeclSecurity)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="386" endline="407">
<![CDATA[
internal int ReadMemberForwarded()
{
int codedIndex;
if (bigMemberForwarded)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="340" endline="363">
<![CDATA[
internal int ReadHasDeclSecurity()
{
int codedIndex;
if (bigHasDeclSecurity)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 2);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 2);
case 2
return (AssemblyTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="408" endline="431">
<![CDATA[
internal int ReadImplementation()
{
int codedIndex;
if (bigImplementation)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FileTable.Index << 24) + (codedIndex >> 2);
case 1
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="364" endline="385">
<![CDATA[
internal int ReadTypeOrMethodDef()
{
int codedIndex;
if (bigTypeOrMethodDef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="386" endline="407">
<![CDATA[
internal int ReadMemberForwarded()
{
int codedIndex;
if (bigMemberForwarded)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="364" endline="385">
<![CDATA[
internal int ReadTypeOrMethodDef()
{
int codedIndex;
if (bigTypeOrMethodDef)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (TypeDefTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="408" endline="431">
<![CDATA[
internal int ReadImplementation()
{
int codedIndex;
if (bigImplementation)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FileTable.Index << 24) + (codedIndex >> 2);
case 1
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="386" endline="407">
<![CDATA[
internal int ReadMemberForwarded()
{
int codedIndex;
if (bigMemberForwarded)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 1)
{
case 0
return (FieldTable.Index << 24) + (codedIndex >> 1);
case 1
return (MethodDefTable.Index << 24) + (codedIndex >> 1);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="408" endline="431">
<![CDATA[
internal int ReadImplementation()
{
int codedIndex;
if (bigImplementation)
{
codedIndex = br.ReadInt32();
}
else
{
codedIndex = br.ReadUInt16();
}
switch (codedIndex & 3)
{
case 0
return (FileTable.Index << 24) + (codedIndex >> 2);
case 1
return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
case 2
return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);
default
throw new BadImageFormatException();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457">
<![CDATA[
internal int ReadField()
{
if (bigField)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469">
<![CDATA[
internal int ReadMethodDef()
{
if (bigMethodDef)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481">
<![CDATA[
internal int ReadParam()
{
if (bigParam)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493">
<![CDATA[
internal int ReadProperty()
{
if (bigProperty)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505">
<![CDATA[
internal int ReadEvent()
{
if (bigEvent)
{
return br.ReadInt32();
}
else
{
return br.ReadUInt16();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="54" endline="61">
<![CDATA[
}
internal byte PeekByte()
{
if (pos == end)
throw new BadImageFormatException();
return buffer[pos];
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="62" endline="68">
<![CDATA[
internal byte ReadByte()
{
if (pos == end)
throw new BadImageFormatException();
return buffer[pos++];
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="390" endline="449">
<![CDATA[
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
set { rowCount = value; records = new T[value]; }
}
protected override int GetRowSize(RowSizeCalc rsc)
{
throw new InvalidOperationException();
}
internal int AddRecord(T newRecord)
{
if (rowCount == records.Length)
{
T[] newarr = new T[records.Length * 2];
Array.Copy(records, newarr, records.Length);
records = newarr;
}
records[rowCount++] = newRecord;
return rowCount;
}
internal int AddVirtualRecord()
{
return ++rowCount;
}
internal override void Write(MetadataWriter mw)
{
throw new InvalidOperationException();
}
}
sealed class ModuleTable
{
internal const int Index = 0x00;
internal struct Record
{
internal short Generation;
internal int Name; // -> StringHeap
internal int Mvid; // -> GuidHeap
internal int EncId; // -> GuidHeap
internal int EncBaseId; // -> GuidHeap
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="525" endline="552">
<![CDATA[
}
sealed class TypeDefTable
{
internal const int Index = 0x02;
internal struct Record
{
internal int Flags;
internal int TypeName;
internal int TypeNamespace;
internal int Extends;
internal int FieldList;
internal int MethodList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Extends = mr.ReadTypeDefOrRef();
records[i].FieldList = mr.ReadField();
records[i].MethodList = mr.ReadMethodDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Extends = mr.ReadTypeDefOrRef();
records[i].FieldList = mr.ReadField();
records[i].MethodList = mr.ReadMethodDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="390" endline="449">
<![CDATA[
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
set { rowCount = value; records = new T[value]; }
}
protected override int GetRowSize(RowSizeCalc rsc)
{
throw new InvalidOperationException();
}
internal int AddRecord(T newRecord)
{
if (rowCount == records.Length)
{
T[] newarr = new T[records.Length * 2];
Array.Copy(records, newarr, records.Length);
records = newarr;
}
records[rowCount++] = newRecord;
return rowCount;
}
internal int AddVirtualRecord()
{
return ++rowCount;
}
internal override void Write(MetadataWriter mw)
{
throw new InvalidOperationException();
}
}
sealed class ModuleTable
{
internal const int Index = 0x00;
internal struct Record
{
internal short Generation;
internal int Name; // -> StringHeap
internal int Mvid; // -> GuidHeap
internal int EncId; // -> GuidHeap
internal int EncBaseId; // -> GuidHeap
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="611" endline="639">
<![CDATA[
}
sealed class MethodDefTable
{
internal const int Index = 0x06;
private int baseRVA;
internal struct Record
{
internal int RVA;
internal short ImplFlags;
internal short Flags;
internal int Name;
internal int Signature;
internal int ParamList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].ImplFlags = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
records[i].ParamList = mr.ReadParam();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].ImplFlags = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
records[i].ParamList = mr.ReadParam();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="390" endline="449">
<![CDATA[
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
set { rowCount = value; records = new T[value]; }
}
protected override int GetRowSize(RowSizeCalc rsc)
{
throw new InvalidOperationException();
}
internal int AddRecord(T newRecord)
{
if (rowCount == records.Length)
{
T[] newarr = new T[records.Length * 2];
Array.Copy(records, newarr, records.Length);
records = newarr;
}
records[rowCount++] = newRecord;
return rowCount;
}
internal int AddVirtualRecord()
{
return ++rowCount;
}
internal override void Write(MetadataWriter mw)
{
throw new InvalidOperationException();
}
}
sealed class ModuleTable
{
internal const int Index = 0x00;
internal struct Record
{
internal short Generation;
internal int Name; // -> StringHeap
internal int Mvid; // -> GuidHeap
internal int EncId; // -> GuidHeap
internal int EncBaseId; // -> GuidHeap
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="390" endline="449">
<![CDATA[
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
set { rowCount = value; records = new T[value]; }
}
protected override int GetRowSize(RowSizeCalc rsc)
{
throw new InvalidOperationException();
}
internal int AddRecord(T newRecord)
{
if (rowCount == records.Length)
{
T[] newarr = new T[records.Length * 2];
Array.Copy(records, newarr, records.Length);
records = newarr;
}
records[rowCount++] = newRecord;
return rowCount;
}
internal int AddVirtualRecord()
{
return ++rowCount;
}
internal override void Write(MetadataWriter mw)
{
throw new InvalidOperationException();
}
}
sealed class ModuleTable
{
internal const int Index = 0x00;
internal struct Record
{
internal short Generation;
internal int Name; // -> StringHeap
internal int Mvid; // -> GuidHeap
internal int EncId; // -> GuidHeap
internal int EncBaseId; // -> GuidHeap
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2112" endline="2137">
<![CDATA[
}
sealed class ExportedTypeTable
{
internal const int Index = 0x27;
internal struct Record
{
internal int Flags;
internal int TypeDefId;
internal int TypeName;
internal int TypeNamespace;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="390" endline="449">
<![CDATA[
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
set { rowCount = value; records = new T[value]; }
}
protected override int GetRowSize(RowSizeCalc rsc)
{
throw new InvalidOperationException();
}
internal int AddRecord(T newRecord)
{
if (rowCount == records.Length)
{
T[] newarr = new T[records.Length * 2];
Array.Copy(records, newarr, records.Length);
records = newarr;
}
records[rowCount++] = newRecord;
return rowCount;
}
internal int AddVirtualRecord()
{
return ++rowCount;
}
internal override void Write(MetadataWriter mw)
{
throw new InvalidOperationException();
}
}
sealed class ModuleTable
{
internal const int Index = 0x00;
internal struct Record
{
internal short Generation;
internal int Name; // -> StringHeap
internal int Mvid; // -> GuidHeap
internal int EncId; // -> GuidHeap
internal int EncBaseId; // -> GuidHeap
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="390" endline="449">
<![CDATA[
protected int rowCount;
internal sealed override int RowCount
{
get { return rowCount; }
set { rowCount = value; records = new T[value]; }
}
protected override int GetRowSize(RowSizeCalc rsc)
{
throw new InvalidOperationException();
}
internal int AddRecord(T newRecord)
{
if (rowCount == records.Length)
{
T[] newarr = new T[records.Length * 2];
Array.Copy(records, newarr, records.Length);
records = newarr;
}
records[rowCount++] = newRecord;
return rowCount;
}
internal int AddVirtualRecord()
{
return ++rowCount;
}
internal override void Write(MetadataWriter mw)
{
throw new InvalidOperationException();
}
}
sealed class ModuleTable
{
internal const int Index = 0x00;
internal struct Record
{
internal short Generation;
internal int Name; // -> StringHeap
internal int Mvid; // -> GuidHeap
internal int EncId; // -> GuidHeap
internal int EncBaseId; // -> GuidHeap
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Generation = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Mvid = mr.ReadGuidIndex();
records[i].EncId = mr.ReadGuidIndex();
records[i].EncBaseId = mr.ReadGuidIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="450" endline="461">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="450" endline="461">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="450" endline="461">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2138" endline="2149">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="450" endline="461">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="450" endline="461">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Generation);
mw.WriteStringIndex(records[i].Name);
mw.WriteGuidIndex(records[i].Mvid);
mw.WriteGuidIndex(records[i].EncId);
mw.WriteGuidIndex(records[i].EncBaseId);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505">
<![CDATA[
}
sealed class TypeRefTable
{
internal const int Index = 0x01;
internal struct Record
{
internal int ResolutionScope;
internal int TypeName;
internal int TypeNameSpace;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].ResolutionScope = mr.ReadResolutionScope();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNameSpace = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteResolutionScope(records[i].ResolutionScope);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNameSpace);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="525" endline="552">
<![CDATA[
}
sealed class TypeDefTable
{
internal const int Index = 0x02;
internal struct Record
{
internal int Flags;
internal int TypeName;
internal int TypeNamespace;
internal int Extends;
internal int FieldList;
internal int MethodList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Extends = mr.ReadTypeDefOrRef();
records[i].FieldList = mr.ReadField();
records[i].MethodList = mr.ReadMethodDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Extends = mr.ReadTypeDefOrRef();
records[i].FieldList = mr.ReadField();
records[i].MethodList = mr.ReadMethodDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="611" endline="639">
<![CDATA[
}
sealed class MethodDefTable
{
internal const int Index = 0x06;
private int baseRVA;
internal struct Record
{
internal int RVA;
internal short ImplFlags;
internal short Flags;
internal int Name;
internal int Signature;
internal int ParamList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].ImplFlags = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
records[i].ParamList = mr.ReadParam();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].ImplFlags = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
records[i].ParamList = mr.ReadParam();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="525" endline="552">
<![CDATA[
}
sealed class TypeDefTable
{
internal const int Index = 0x02;
internal struct Record
{
internal int Flags;
internal int TypeName;
internal int TypeNamespace;
internal int Extends;
internal int FieldList;
internal int MethodList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Extends = mr.ReadTypeDefOrRef();
records[i].FieldList = mr.ReadField();
records[i].MethodList = mr.ReadMethodDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Extends = mr.ReadTypeDefOrRef();
records[i].FieldList = mr.ReadField();
records[i].MethodList = mr.ReadMethodDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="525" endline="552">
<![CDATA[
}
sealed class TypeDefTable
{
internal const int Index = 0x02;
internal struct Record
{
internal int Flags;
internal int TypeName;
internal int TypeNamespace;
internal int Extends;
internal int FieldList;
internal int MethodList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Extends = mr.ReadTypeDefOrRef();
records[i].FieldList = mr.ReadField();
records[i].MethodList = mr.ReadMethodDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Extends = mr.ReadTypeDefOrRef();
records[i].FieldList = mr.ReadField();
records[i].MethodList = mr.ReadMethodDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2112" endline="2137">
<![CDATA[
}
sealed class ExportedTypeTable
{
internal const int Index = 0x27;
internal struct Record
{
internal int Flags;
internal int TypeDefId;
internal int TypeName;
internal int TypeNamespace;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="525" endline="552">
<![CDATA[
}
sealed class TypeDefTable
{
internal const int Index = 0x02;
internal struct Record
{
internal int Flags;
internal int TypeName;
internal int TypeNamespace;
internal int Extends;
internal int FieldList;
internal int MethodList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Extends = mr.ReadTypeDefOrRef();
records[i].FieldList = mr.ReadField();
records[i].MethodList = mr.ReadMethodDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Extends = mr.ReadTypeDefOrRef();
records[i].FieldList = mr.ReadField();
records[i].MethodList = mr.ReadMethodDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="525" endline="552">
<![CDATA[
}
sealed class TypeDefTable
{
internal const int Index = 0x02;
internal struct Record
{
internal int Flags;
internal int TypeName;
internal int TypeNamespace;
internal int Extends;
internal int FieldList;
internal int MethodList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Extends = mr.ReadTypeDefOrRef();
records[i].FieldList = mr.ReadField();
records[i].MethodList = mr.ReadMethodDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Extends = mr.ReadTypeDefOrRef();
records[i].FieldList = mr.ReadField();
records[i].MethodList = mr.ReadMethodDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596">
<![CDATA[
}
sealed class FieldTable
{
internal const int Index = 0x04;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="611" endline="639">
<![CDATA[
}
sealed class MethodDefTable
{
internal const int Index = 0x06;
private int baseRVA;
internal struct Record
{
internal int RVA;
internal short ImplFlags;
internal short Flags;
internal int Name;
internal int Signature;
internal int ParamList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].ImplFlags = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
records[i].ParamList = mr.ReadParam();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].ImplFlags = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
records[i].ParamList = mr.ReadParam();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="611" endline="639">
<![CDATA[
}
sealed class MethodDefTable
{
internal const int Index = 0x06;
private int baseRVA;
internal struct Record
{
internal int RVA;
internal short ImplFlags;
internal short Flags;
internal int Name;
internal int Signature;
internal int ParamList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].ImplFlags = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
records[i].ParamList = mr.ReadParam();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].ImplFlags = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
records[i].ParamList = mr.ReadParam();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2112" endline="2137">
<![CDATA[
}
sealed class ExportedTypeTable
{
internal const int Index = 0x27;
internal struct Record
{
internal int Flags;
internal int TypeDefId;
internal int TypeName;
internal int TypeNamespace;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="611" endline="639">
<![CDATA[
}
sealed class MethodDefTable
{
internal const int Index = 0x06;
private int baseRVA;
internal struct Record
{
internal int RVA;
internal short ImplFlags;
internal short Flags;
internal int Name;
internal int Signature;
internal int ParamList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].ImplFlags = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
records[i].ParamList = mr.ReadParam();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].ImplFlags = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
records[i].ParamList = mr.ReadParam();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="611" endline="639">
<![CDATA[
}
sealed class MethodDefTable
{
internal const int Index = 0x06;
private int baseRVA;
internal struct Record
{
internal int RVA;
internal short ImplFlags;
internal short Flags;
internal int Name;
internal int Signature;
internal int ParamList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].ImplFlags = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
records[i].ParamList = mr.ReadParam();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].ImplFlags = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
records[i].ParamList = mr.ReadParam();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681">
<![CDATA[
}
sealed class ParamTable
{
internal const int Index = 0x08;
internal struct Record
{
internal short Flags;
internal short Sequence;
internal int Name;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Sequence = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714">
<![CDATA[
}
sealed class InterfaceImplTable
{
internal const int Index = 0x09;
internal struct Record
{
internal int Class;
internal int Interface;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].Interface = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteEncodedTypeDefOrRef(records[i].Interface);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="732" endline="757">
<![CDATA[
internal void Fixup()
{
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Interface;
switch (token >> 24)
{
case 0
break;
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case TypeSpecTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
records[i].Interface = token;
}
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Interface;
switch (token >> 24)
{
case 0
break;
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case TypeRefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case TypeSpecTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
records[i].Interface = token;
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1197" endline="1225">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Parent;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case AssemblyTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
records[i].Parent = token;
}
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Parent;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case AssemblyTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
records[i].Parent = token;
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="758" endline="766">
<![CDATA[
int IComparer<Record>.Compare(Record x, Record y)
{
if (x.Class == y.Class)
{
return x.Interface == y.Interface ? 0
}
return x.Class > y.Class ? 1
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2340" endline="2348">
<![CDATA[
int IComparer<Record>.Compare(Record x, Record y)
{
if (x.Owner == y.Owner)
{
return x.Number == y.Number ? 0
}
return x.Owner > y.Owner ? 1
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788">
<![CDATA[
}
sealed class MemberRefTable
{
internal const int Index = 0x0A;
internal struct Record
{
internal int Class;
internal int Name;
internal int Signature;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadMemberRefParent();
records[i].Name = mr.ReadStringIndex();
records[i].Signature = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMemberRefParent(records[i].Class);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Signature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="808" endline="821">
<![CDATA[
internal int FindOrAddRecord(Record record)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Class == record.Class
&& records[i].Name == record.Name
&& records[i].Signature == record.Signature)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Class == record.Class
&& records[i].Name == record.Name
&& records[i].Signature == record.Signature)
{
return i + 1;
}
}
return AddRecord(record);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2160" endline="2173">
<![CDATA[
internal int FindOrAddRecord(Record rec)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Implementation == rec.Implementation
&& records[i].TypeName == rec.TypeName
&& records[i].TypeNamespace == rec.TypeNamespace)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Implementation == rec.Implementation
&& records[i].TypeName == rec.TypeName
&& records[i].TypeNamespace == rec.TypeNamespace)
{
return i + 1;
}
}
return AddRecord(rec);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="808" endline="821">
<![CDATA[
internal int FindOrAddRecord(Record record)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Class == record.Class
&& records[i].Name == record.Name
&& records[i].Signature == record.Signature)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Class == record.Class
&& records[i].Name == record.Name
&& records[i].Signature == record.Signature)
{
return i + 1;
}
}
return AddRecord(record);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2419" endline="2431">
<![CDATA[
internal int FindOrAddRecord(Record record)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Method == record.Method
&& records[i].Instantiation == record.Instantiation)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Method == record.Method
&& records[i].Instantiation == record.Instantiation)
{
return i + 1;
}
}
return AddRecord(record);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1857" endline="1868">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].MemberForwarded))
{
records[i].MemberForwarded = moduleBuilder.ResolvePseudoToken(records[i].MemberForwarded);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].MemberForwarded))
{
records[i].MemberForwarded = moduleBuilder.ResolvePseudoToken(records[i].MemberForwarded);
}
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Class))
{
records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854">
<![CDATA[
}
sealed class ConstantTable
{
internal const int Index = 0x0B;
internal struct Record
{
internal short Type;
internal int Parent;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Type = mr.ReadInt16();
records[i].Parent = mr.ReadHasConstant();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Type);
mw.WriteHasConstant(records[i].Parent);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="874" endline="901">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Parent;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case FieldTable.Index
records[i].Parent = (token & 0xFFFFFF) << 2 | 0;
break;
case ParamTable.Index
records[i].Parent = (token & 0xFFFFFF) << 2 | 1;
break;
case PropertyTable.Index
records[i].Parent = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
}
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Parent;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case FieldTable.Index
records[i].Parent = (token & 0xFFFFFF) << 2 | 0;
break;
case ParamTable.Index
records[i].Parent = (token & 0xFFFFFF) << 2 | 1;
break;
case PropertyTable.Index
records[i].Parent = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1197" endline="1225">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Parent;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case AssemblyTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
records[i].Parent = token;
}
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Parent;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case AssemblyTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
records[i].Parent = token;
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="874" endline="901">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Parent;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case FieldTable.Index
records[i].Parent = (token & 0xFFFFFF) << 2 | 0;
break;
case ParamTable.Index
records[i].Parent = (token & 0xFFFFFF) << 2 | 1;
break;
case PropertyTable.Index
records[i].Parent = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
}
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Parent;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case FieldTable.Index
records[i].Parent = (token & 0xFFFFFF) << 2 | 0;
break;
case ParamTable.Index
records[i].Parent = (token & 0xFFFFFF) << 2 | 1;
break;
case PropertyTable.Index
records[i].Parent = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2314" endline="2339">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Owner;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case TypeDefTable.Index
records[i].Owner = (token & 0xFFFFFF) << 1 | 0;
break;
case MethodDefTable.Index
records[i].Owner = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
records[i].unsortedIndex = i;
}
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Owner;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case TypeDefTable.Index
records[i].Owner = (token & 0xFFFFFF) << 1 | 0;
break;
case MethodDefTable.Index
records[i].Owner = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
records[i].unsortedIndex = i;
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986">
<![CDATA[
}
sealed class CustomAttributeTable
{
internal const int Index = 0x0C;
internal struct Record
{
internal int Parent;
internal int Type;
internal int Value;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasCustomAttribute();
records[i].Type = mr.ReadCustomAttributeType();
records[i].Value = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasCustomAttribute(records[i].Parent);
mw.WriteCustomAttributeType(records[i].Type);
mw.WriteBlobIndex(records[i].Value);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112">
<![CDATA[
}
sealed class FieldMarshalTable
{
internal const int Index = 0x0D;
internal struct Record
{
internal int Parent;
internal int NativeType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadHasFieldMarshal();
records[i].NativeType = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteHasFieldMarshal(records[i].Parent);
mw.WriteBlobIndex(records[i].NativeType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1130" endline="1150">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
int token = moduleBuilder.ResolvePseudoToken(records[i].Parent);
switch (token >> 24)
{
case FieldTable.Index
records[i].Parent = (token & 0xFFFFFF) << 1 | 0;
break;
case ParamTable.Index
records[i].Parent = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
}
for (int i = 0; i < rowCount; i++)
{
int token = moduleBuilder.ResolvePseudoToken(records[i].Parent);
switch (token >> 24)
{
case FieldTable.Index
records[i].Parent = (token & 0xFFFFFF) << 1 | 0;
break;
case ParamTable.Index
records[i].Parent = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2314" endline="2339">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Owner;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case TypeDefTable.Index
records[i].Owner = (token & 0xFFFFFF) << 1 | 0;
break;
case MethodDefTable.Index
records[i].Owner = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
records[i].unsortedIndex = i;
}
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Owner;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case TypeDefTable.Index
records[i].Owner = (token & 0xFFFFFF) << 1 | 0;
break;
case MethodDefTable.Index
records[i].Owner = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
records[i].unsortedIndex = i;
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177">
<![CDATA[
}
sealed class DeclSecurityTable
{
internal const int Index = 0x0E;
internal struct Record
{
internal short Action;
internal int Parent;
internal int PermissionSet;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Action = mr.ReadInt16();
records[i].Parent = mr.ReadHasDeclSecurity();
records[i].PermissionSet = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Action);
mw.WriteHasDeclSecurity(records[i].Parent);
mw.WriteBlobIndex(records[i].PermissionSet);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1197" endline="1225">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Parent;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case AssemblyTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
records[i].Parent = token;
}
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Parent;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case TypeDefTable.Index
token = (token & 0xFFFFFF) << 2 | 0;
break;
case MethodDefTable.Index
token = (token & 0xFFFFFF) << 2 | 1;
break;
case AssemblyTable.Index
token = (token & 0xFFFFFF) << 2 | 2;
break;
default
throw new InvalidOperationException();
}
records[i].Parent = token;
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2314" endline="2339">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Owner;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case TypeDefTable.Index
records[i].Owner = (token & 0xFFFFFF) << 1 | 0;
break;
case MethodDefTable.Index
records[i].Owner = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
records[i].unsortedIndex = i;
}
for (int i = 0; i < rowCount; i++)
{
int token = records[i].Owner;
if (moduleBuilder.IsPseudoToken(token))
{
token = moduleBuilder.ResolvePseudoToken(token);
}
switch (token >> 24)
{
case TypeDefTable.Index
records[i].Owner = (token & 0xFFFFFF) << 1 | 0;
break;
case MethodDefTable.Index
records[i].Owner = (token & 0xFFFFFF) << 1 | 1;
break;
default
throw new InvalidOperationException();
}
records[i].unsortedIndex = i;
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].PackingSize = mr.ReadInt16();
records[i].ClassSize = mr.ReadInt32();
records[i].Parent = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2138" endline="2149">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
Array.Sort(records, 0, rowCount, this);
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].PackingSize);
mw.Write(records[i].ClassSize);
mw.WriteTypeDef(records[i].Parent);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322">
<![CDATA[
}
sealed class FieldLayoutTable
{
internal const int Index = 0x10;
internal struct Record
{
internal int Offset;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1340" endline="1348">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
records[i].Field = moduleBuilder.ResolvePseudoToken(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
records[i].Field = moduleBuilder.ResolvePseudoToken(records[i].Field);
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2480" endline="2489">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
int[] fixups = moduleBuilder.GenericParam.GetIndexFixup();
for (int i = 0; i < rowCount; i++)
{
records[i].Owner = fixups[records[i].Owner - 1] + 1;
}
for (int i = 0; i < rowCount; i++)
{
records[i].Owner = fixups[records[i].Owner - 1] + 1;
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1354" endline="1366">
<![CDATA[
}
sealed class StandAloneSigTable
{
internal const int Index = 0x11;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1746" endline="1758">
<![CDATA[
}
sealed class ModuleRefTable
{
internal const int Index = 0x1A;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1354" endline="1366">
<![CDATA[
}
sealed class StandAloneSigTable
{
internal const int Index = 0x11;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1786" endline="1798">
<![CDATA[
}
sealed class TypeSpecTable
{
internal const int Index = 0x1B;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1367" endline="1374">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1759" endline="1766">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteStringIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteStringIndex(records[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1367" endline="1374">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1799" endline="1806">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1380" endline="1391">
<![CDATA[
internal int FindOrAddRecord(int blob)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i] == blob)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i] == blob)
{
return i + 1;
}
}
return AddRecord(blob);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1774" endline="1785">
<![CDATA[
internal int FindOrAddRecord(int str)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i] == str)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i] == str)
{
return i + 1;
}
}
return AddRecord(str);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1380" endline="1391">
<![CDATA[
internal int FindOrAddRecord(int blob)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i] == blob)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i] == blob)
{
return i + 1;
}
}
return AddRecord(blob);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2419" endline="2431">
<![CDATA[
internal int FindOrAddRecord(Record record)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Method == record.Method
&& records[i].Instantiation == record.Instantiation)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Method == record.Method
&& records[i].Instantiation == record.Instantiation)
{
return i + 1;
}
}
return AddRecord(record);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411">
<![CDATA[
}
sealed class EventMapTable
{
internal const int Index = 0x12;
internal struct Record
{
internal int Parent;
internal int EventList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].EventList = mr.ReadEvent();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteEvent(records[i].EventList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450">
<![CDATA[
}
sealed class EventTable
{
internal const int Index = 0x14;
internal struct Record
{
internal short EventFlags;
internal int Name;
internal int EventType;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].EventFlags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].EventType = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].EventFlags);
mw.WriteStringIndex(records[i].Name);
mw.WriteTypeDefOrRef(records[i].EventType);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489">
<![CDATA[
}
sealed class PropertyMapTable
{
internal const int Index = 0x15;
internal struct Record
{
internal int Parent;
internal int PropertyList;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Parent = mr.ReadTypeDef();
records[i].PropertyList = mr.ReadProperty();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Parent);
mw.WriteProperty(records[i].PropertyList);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528">
<![CDATA[
}
sealed class PropertyTable
{
internal const int Index = 0x17;
internal struct Record
{
internal short Flags;
internal int Name;
internal int Type;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt16();
records[i].Name = mr.ReadStringIndex();
records[i].Type = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].Type);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577">
<![CDATA[
}
sealed class MethodSemanticsTable
{
internal const int Index = 0x18;
internal const short Setter = 0x0001;
internal const short Getter = 0x0002;
internal const short Other = 0x0004;
internal const short AddOn = 0x0008;
internal const short RemoveOn = 0x0010;
internal const short Fire = 0x0020;
internal struct Record
{
internal short Semantics;
internal int Method;
internal int Association;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Semantics = mr.ReadInt16();
records[i].Method = mr.ReadMethodDef();
records[i].Association = mr.ReadHasSemantics();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Semantics);
mw.WriteMethodDef(records[i].Method);
mw.WriteHasSemantics(records[i].Association);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705">
<![CDATA[
}
sealed class MethodImplTable
{
internal const int Index = 0x19;
internal struct Record
{
internal int Class;
internal int MethodBody;
internal int MethodDeclaration;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Class = mr.ReadTypeDef();
records[i].MethodBody = mr.ReadMethodDefOrRef();
records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].Class);
mw.WriteMethodDefOrRef(records[i].MethodBody);
mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1746" endline="1758">
<![CDATA[
}
sealed class ModuleRefTable
{
internal const int Index = 0x1A;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1786" endline="1798">
<![CDATA[
}
sealed class TypeSpecTable
{
internal const int Index = 0x1B;
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i] = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1759" endline="1766">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteStringIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteStringIndex(records[i]);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1799" endline="1806">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteBlobIndex(records[i]);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1774" endline="1785">
<![CDATA[
internal int FindOrAddRecord(int str)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i] == str)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i] == str)
{
return i + 1;
}
}
return AddRecord(str);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2419" endline="2431">
<![CDATA[
internal int FindOrAddRecord(Record record)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Method == record.Method
&& records[i].Instantiation == record.Instantiation)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Method == record.Method
&& records[i].Instantiation == record.Instantiation)
{
return i + 1;
}
}
return AddRecord(record);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2112" endline="2137">
<![CDATA[
}
sealed class ExportedTypeTable
{
internal const int Index = 0x27;
internal struct Record
{
internal int Flags;
internal int TypeDefId;
internal int TypeName;
internal int TypeNamespace;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835">
<![CDATA[
}
sealed class ImplMapTable
{
internal const int Index = 0x1C;
internal struct Record
{
internal short MappingFlags;
internal int MemberForwarded;
internal int ImportName;
internal int ImportScope;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MappingFlags = mr.ReadInt16();
records[i].MemberForwarded = mr.ReadMemberForwarded();
records[i].ImportName = mr.ReadStringIndex();
records[i].ImportScope = mr.ReadModuleRef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2138" endline="2149">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MappingFlags);
mw.WriteMemberForwarded(records[i].MemberForwarded);
mw.WriteStringIndex(records[i].ImportName);
mw.WriteModuleRef(records[i].ImportScope);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1857" endline="1868">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].MemberForwarded))
{
records[i].MemberForwarded = moduleBuilder.ResolvePseudoToken(records[i].MemberForwarded);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].MemberForwarded))
{
records[i].MemberForwarded = moduleBuilder.ResolvePseudoToken(records[i].MemberForwarded);
}
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1911" endline="1923">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder, int sdataRVA)
{
for (int i = 0; i < rowCount; i++)
{
records[i].RVA += sdataRVA;
if (moduleBuilder.IsPseudoToken(records[i].Field))
{
records[i].Field = moduleBuilder.ResolvePseudoToken(records[i].Field);
}
}
for (int i = 0; i < rowCount; i++)
{
records[i].RVA += sdataRVA;
if (moduleBuilder.IsPseudoToken(records[i].Field))
{
records[i].Field = moduleBuilder.ResolvePseudoToken(records[i].Field);
}
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1857" endline="1868">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].MemberForwarded))
{
records[i].MemberForwarded = moduleBuilder.ResolvePseudoToken(records[i].MemberForwarded);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].MemberForwarded))
{
records[i].MemberForwarded = moduleBuilder.ResolvePseudoToken(records[i].MemberForwarded);
}
}
Array.Sort(records, 0, rowCount, this);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442">
<![CDATA[
internal void Fixup(ModuleBuilder moduleBuilder)
{
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
for (int i = 0; i < rowCount; i++)
{
if (moduleBuilder.IsPseudoToken(records[i].Method))
{
records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893">
<![CDATA[
}
sealed class FieldRVATable
{
internal const int Index = 0x1D;
internal struct Record
{
internal int RVA;
internal int Field;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
for (int i = 0; i < records.Length; i++)
{
records[i].RVA = mr.ReadInt32();
records[i].Field = mr.ReadField();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].RVA);
mw.WriteField(records[i].Field);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1929" endline="1962">
<![CDATA[
}
sealed class AssemblyTable
{
internal const int Index = 0x20;
internal struct Record
{
internal int HashAlgId;
internal ushort MajorVersion;
internal ushort MinorVersion;
internal ushort BuildNumber;
internal ushort RevisionNumber;
internal int Flags;
internal int PublicKey;
internal int Name;
internal int Culture;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].HashAlgId = mr.ReadInt32();
records[i].MajorVersion = mr.ReadUInt16();
records[i].MinorVersion = mr.ReadUInt16();
records[i].BuildNumber = mr.ReadUInt16();
records[i].RevisionNumber = mr.ReadUInt16();
records[i].Flags = mr.ReadInt32();
records[i].PublicKey = mr.ReadBlobIndex();
records[i].Name = mr.ReadStringIndex();
records[i].Culture = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].HashAlgId = mr.ReadInt32();
records[i].MajorVersion = mr.ReadUInt16();
records[i].MinorVersion = mr.ReadUInt16();
records[i].BuildNumber = mr.ReadUInt16();
records[i].RevisionNumber = mr.ReadUInt16();
records[i].Flags = mr.ReadInt32();
records[i].PublicKey = mr.ReadBlobIndex();
records[i].Name = mr.ReadStringIndex();
records[i].Culture = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2028" endline="2043">
<![CDATA[
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].MajorVersion = mr.ReadUInt16();
records[i].MinorVersion = mr.ReadUInt16();
records[i].BuildNumber = mr.ReadUInt16();
records[i].RevisionNumber = mr.ReadUInt16();
records[i].Flags = mr.ReadInt32();
records[i].PublicKeyOrToken = mr.ReadBlobIndex();
records[i].Name = mr.ReadStringIndex();
records[i].Culture = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].MajorVersion = mr.ReadUInt16();
records[i].MinorVersion = mr.ReadUInt16();
records[i].BuildNumber = mr.ReadUInt16();
records[i].RevisionNumber = mr.ReadUInt16();
records[i].Flags = mr.ReadInt32();
records[i].PublicKeyOrToken = mr.ReadBlobIndex();
records[i].Name = mr.ReadStringIndex();
records[i].Culture = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1963" endline="1978">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].HashAlgId);
mw.Write(records[i].MajorVersion);
mw.Write(records[i].MinorVersion);
mw.Write(records[i].BuildNumber);
mw.Write(records[i].RevisionNumber);
mw.Write(records[i].Flags);
mw.WriteBlobIndex(records[i].PublicKey);
mw.WriteStringIndex(records[i].Name);
mw.WriteStringIndex(records[i].Culture);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].HashAlgId);
mw.Write(records[i].MajorVersion);
mw.Write(records[i].MinorVersion);
mw.Write(records[i].BuildNumber);
mw.Write(records[i].RevisionNumber);
mw.Write(records[i].Flags);
mw.WriteBlobIndex(records[i].PublicKey);
mw.WriteStringIndex(records[i].Name);
mw.WriteStringIndex(records[i].Culture);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2044" endline="2059">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MajorVersion);
mw.Write(records[i].MinorVersion);
mw.Write(records[i].BuildNumber);
mw.Write(records[i].RevisionNumber);
mw.Write(records[i].Flags);
mw.WriteBlobIndex(records[i].PublicKeyOrToken);
mw.WriteStringIndex(records[i].Name);
mw.WriteStringIndex(records[i].Culture);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].MajorVersion);
mw.Write(records[i].MinorVersion);
mw.Write(records[i].BuildNumber);
mw.Write(records[i].RevisionNumber);
mw.Write(records[i].Flags);
mw.WriteBlobIndex(records[i].PublicKeyOrToken);
mw.WriteStringIndex(records[i].Name);
mw.WriteStringIndex(records[i].Culture);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092">
<![CDATA[
}
sealed class FileTable
{
internal const int Index = 0x26;
internal struct Record
{
internal int Flags;
internal int Name;
internal int HashValue;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].HashValue = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteBlobIndex(records[i].HashValue);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2112" endline="2137">
<![CDATA[
}
sealed class ExportedTypeTable
{
internal const int Index = 0x27;
internal struct Record
{
internal int Flags;
internal int TypeDefId;
internal int TypeName;
internal int TypeNamespace;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2112" endline="2137">
<![CDATA[
}
sealed class ExportedTypeTable
{
internal const int Index = 0x27;
internal struct Record
{
internal int Flags;
internal int TypeDefId;
internal int TypeName;
internal int TypeNamespace;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Flags = mr.ReadInt32();
records[i].TypeDefId = mr.ReadInt32();
records[i].TypeName = mr.ReadStringIndex();
records[i].TypeNamespace = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2138" endline="2149">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2138" endline="2149">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Flags);
mw.Write(records[i].TypeDefId);
mw.WriteStringIndex(records[i].TypeName);
mw.WriteStringIndex(records[i].TypeNamespace);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2160" endline="2173">
<![CDATA[
internal int FindOrAddRecord(Record rec)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Implementation == rec.Implementation
&& records[i].TypeName == rec.TypeName
&& records[i].TypeNamespace == rec.TypeNamespace)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Implementation == rec.Implementation
&& records[i].TypeName == rec.TypeName
&& records[i].TypeNamespace == rec.TypeNamespace)
{
return i + 1;
}
}
return AddRecord(rec);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2419" endline="2431">
<![CDATA[
internal int FindOrAddRecord(Record record)
{
for (int i = 0; i < rowCount; i++)
{
if (records[i].Method == record.Method
&& records[i].Instantiation == record.Instantiation)
{
return i + 1;
}
}
for (int i = 0; i < rowCount; i++)
{
if (records[i].Method == record.Method
&& records[i].Instantiation == record.Instantiation)
{
return i + 1;
}
}
return AddRecord(record);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197">
<![CDATA[
}
sealed class ManifestResourceTable
{
internal const int Index = 0x28;
internal struct Record
{
internal int Offset;
internal int Flags;
internal int Name;
internal int Implementation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Offset = mr.ReadInt32();
records[i].Flags = mr.ReadInt32();
records[i].Name = mr.ReadStringIndex();
records[i].Implementation = mr.ReadImplementation();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293">
<![CDATA[
}
sealed class GenericParamTable
{
internal const int Index = 0x2A;
internal struct Record
{
internal short Number;
internal short Flags;
internal int Owner;
internal int Name;
internal int unsortedIndex;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Number = mr.ReadInt16();
records[i].Flags = mr.ReadInt16();
records[i].Owner = mr.ReadTypeOrMethodDef();
records[i].Name = mr.ReadStringIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Offset);
mw.Write(records[i].Flags);
mw.WriteStringIndex(records[i].Name);
mw.WriteImplementation(records[i].Implementation);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
for (int i = 0; i < rowCount; i++)
{
mw.Write(records[i].Number);
mw.Write(records[i].Flags);
mw.WriteTypeOrMethodDef(records[i].Owner);
mw.WriteStringIndex(records[i].Name);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237">
<![CDATA[
}
sealed class NestedClassTable
{
internal const int Index = 0x29;
internal struct Record
{
internal int NestedClass;
internal int EnclosingClass;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].NestedClass = mr.ReadTypeDef();
records[i].EnclosingClass = mr.ReadTypeDef();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteTypeDef(records[i].NestedClass);
mw.WriteTypeDef(records[i].EnclosingClass);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401">
<![CDATA[
}
sealed class MethodSpecTable
{
internal const int Index = 0x2B;
internal struct Record
{
internal int Method;
internal int Instantiation;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Method = mr.ReadMethodDefOrRef();
records[i].Instantiation = mr.ReadBlobIndex();
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462">
<![CDATA[
}
sealed class GenericParamConstraintTable
{
internal const int Index = 0x2C;
internal struct Record
{
internal int Owner;
internal int Constraint;
}
internal override void Read(MetadataReader mr)
{
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
for (int i = 0; i < records.Length; i++)
{
records[i].Owner = mr.ReadGenericParam();
records[i].Constraint = mr.ReadTypeDefOrRef();
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteMethodDefOrRef(records[i].Method);
mw.WriteBlobIndex(records[i].Instantiation);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471">
<![CDATA[
internal override void Write(MetadataWriter mw)
{
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
for (int i = 0; i < rowCount; i++)
{
mw.WriteGenericParam(records[i].Owner);
mw.WriteTypeDefOrRef(records[i].Constraint);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="97" endline="110">
<![CDATA[
internal static Type[][] Copy(Type[][] types)
{
if (types == null || types.Length == 0)
{
return types;
}
Type[][] newArray = new Type[types.Length][];
for (int i = 0; i < newArray.Length; i++)
{
newArray[i] = Copy(types[i]);
}
for (int i = 0; i < newArray.Length; i++)
{
newArray[i] = Copy(types[i]);
}
return newArray;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="111" endline="124">
<![CDATA[
internal static T[] ToArray<T, V>(List<V> list, T[] empty) where V
{
if (list == null || list.Count == 0)
{
return empty;
}
T[] array = new T[list.Count];
for (int i = 0; i < array.Length; i++)
{
array[i] = list[i];
}
for (int i = 0; i < array.Length; i++)
{
array[i] = list[i];
}
return array;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="125" endline="153">
<![CDATA[
internal static bool ArrayEquals(Type[] t1, Type[] t2)
{
if (t1 == t2)
{
return true;
}
if (t1 == null)
{
return t2.Length == 0;
}
else if (t2 == null)
{
return t1.Length == 0;
}
if (t1.Length == t2.Length)
{
for (int i = 0; i < t1.Length; i++)
{
if (!TypeEquals(t1[i], t2[i]))
{
return false;
}
}
for (int i = 0; i < t1.Length; i++)
{
if (!TypeEquals(t1[i], t2[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="154" endline="181">
<![CDATA[
internal static bool ArrayEquals(Type[][] t1, Type[][] t2)
{
if (t1 == t2)
{
return true;
}
if (t1 == null)
{
return t2.Length == 0;
}
else if (t2 == null)
{
return t1.Length == 0;
}
if (t1.Length == t2.Length)
{
for (int i = 0; i < t1.Length; i++)
{
if (!ArrayEquals(t1[i], t2[i]))
{
return false;
}
}
for (int i = 0; i < t1.Length; i++)
{
if (!ArrayEquals(t1[i], t2[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="125" endline="153">
<![CDATA[
internal static bool ArrayEquals(Type[] t1, Type[] t2)
{
if (t1 == t2)
{
return true;
}
if (t1 == null)
{
return t2.Length == 0;
}
else if (t2 == null)
{
return t1.Length == 0;
}
if (t1.Length == t2.Length)
{
for (int i = 0; i < t1.Length; i++)
{
if (!TypeEquals(t1[i], t2[i]))
{
return false;
}
}
for (int i = 0; i < t1.Length; i++)
{
if (!TypeEquals(t1[i], t2[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="182" endline="209">
<![CDATA[
internal static bool ArrayEquals(Type[][][] t1, Type[][][] t2)
{
if (t1 == t2)
{
return true;
}
if (t1 == null)
{
return t2.Length == 0;
}
else if (t2 == null)
{
return t1.Length == 0;
}
if (t1.Length == t2.Length)
{
for (int i = 0; i < t1.Length; i++)
{
if (!ArrayEquals(t1[i], t2[i]))
{
return false;
}
}
for (int i = 0; i < t1.Length; i++)
{
if (!ArrayEquals(t1[i], t2[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="125" endline="153">
<![CDATA[
internal static bool ArrayEquals(Type[] t1, Type[] t2)
{
if (t1 == t2)
{
return true;
}
if (t1 == null)
{
return t2.Length == 0;
}
else if (t2 == null)
{
return t1.Length == 0;
}
if (t1.Length == t2.Length)
{
for (int i = 0; i < t1.Length; i++)
{
if (!TypeEquals(t1[i], t2[i]))
{
return false;
}
}
for (int i = 0; i < t1.Length; i++)
{
if (!TypeEquals(t1[i], t2[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="324" endline="351">
<![CDATA[
internal bool MatchParameterTypes(Type[] types)
{
if (types == parameterTypes)
{
return true;
}
if (types == null)
{
return parameterTypes.Length == 0;
}
if (parameterTypes == null)
{
return types.Length == 0;
}
if (types.Length == parameterTypes.Length)
{
for (int i = 0; i < types.Length; i++)
{
if (!Util.TypeEquals(types[i], parameterTypes[i]))
{
return false;
}
}
for (int i = 0; i < types.Length; i++)
{
if (!Util.TypeEquals(types[i], parameterTypes[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="154" endline="181">
<![CDATA[
internal static bool ArrayEquals(Type[][] t1, Type[][] t2)
{
if (t1 == t2)
{
return true;
}
if (t1 == null)
{
return t2.Length == 0;
}
else if (t2 == null)
{
return t1.Length == 0;
}
if (t1.Length == t2.Length)
{
for (int i = 0; i < t1.Length; i++)
{
if (!ArrayEquals(t1[i], t2[i]))
{
return false;
}
}
for (int i = 0; i < t1.Length; i++)
{
if (!ArrayEquals(t1[i], t2[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="182" endline="209">
<![CDATA[
internal static bool ArrayEquals(Type[][][] t1, Type[][][] t2)
{
if (t1 == t2)
{
return true;
}
if (t1 == null)
{
return t2.Length == 0;
}
else if (t2 == null)
{
return t1.Length == 0;
}
if (t1.Length == t2.Length)
{
for (int i = 0; i < t1.Length; i++)
{
if (!ArrayEquals(t1[i], t2[i]))
{
return false;
}
}
for (int i = 0; i < t1.Length; i++)
{
if (!ArrayEquals(t1[i], t2[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="154" endline="181">
<![CDATA[
internal static bool ArrayEquals(Type[][] t1, Type[][] t2)
{
if (t1 == t2)
{
return true;
}
if (t1 == null)
{
return t2.Length == 0;
}
else if (t2 == null)
{
return t1.Length == 0;
}
if (t1.Length == t2.Length)
{
for (int i = 0; i < t1.Length; i++)
{
if (!ArrayEquals(t1[i], t2[i]))
{
return false;
}
}
for (int i = 0; i < t1.Length; i++)
{
if (!ArrayEquals(t1[i], t2[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="324" endline="351">
<![CDATA[
internal bool MatchParameterTypes(Type[] types)
{
if (types == parameterTypes)
{
return true;
}
if (types == null)
{
return parameterTypes.Length == 0;
}
if (parameterTypes == null)
{
return types.Length == 0;
}
if (types.Length == parameterTypes.Length)
{
for (int i = 0; i < types.Length; i++)
{
if (!Util.TypeEquals(types[i], parameterTypes[i]))
{
return false;
}
}
for (int i = 0; i < types.Length; i++)
{
if (!Util.TypeEquals(types[i], parameterTypes[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="182" endline="209">
<![CDATA[
internal static bool ArrayEquals(Type[][][] t1, Type[][][] t2)
{
if (t1 == t2)
{
return true;
}
if (t1 == null)
{
return t2.Length == 0;
}
else if (t2 == null)
{
return t1.Length == 0;
}
if (t1.Length == t2.Length)
{
for (int i = 0; i < t1.Length; i++)
{
if (!ArrayEquals(t1[i], t2[i]))
{
return false;
}
}
for (int i = 0; i < t1.Length; i++)
{
if (!ArrayEquals(t1[i], t2[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="324" endline="351">
<![CDATA[
internal bool MatchParameterTypes(Type[] types)
{
if (types == parameterTypes)
{
return true;
}
if (types == null)
{
return parameterTypes.Length == 0;
}
if (parameterTypes == null)
{
return types.Length == 0;
}
if (types.Length == parameterTypes.Length)
{
for (int i = 0; i < types.Length; i++)
{
if (!Util.TypeEquals(types[i], parameterTypes[i]))
{
return false;
}
}
for (int i = 0; i < types.Length; i++)
{
if (!Util.TypeEquals(types[i], parameterTypes[i]))
{
return false;
}
}
return true;
}
return false;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="241" endline="253">
<![CDATA[
internal static int GetHashCode(Type[][] types)
{
int h = 0;
if (types != null)
{
foreach (Type[] array in types)
{
h ^= GetHashCode(array);
}
foreach (Type[] array in types)
{
h ^= GetHashCode(array);
}
}
return h;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="254" endline="266">
<![CDATA[
internal static int GetHashCode(Type[][][] types)
{
int h = 0;
if (types != null)
{
foreach (Type[][] array in types)
{
h ^= GetHashCode(array);
}
foreach (Type[][] array in types)
{
h ^= GetHashCode(array);
}
}
return h;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="267" endline="282">
<![CDATA[
}
[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit)]
struct SingleConverter
{
[System.Runtime.InteropServices.FieldOffset(0)]
private int i;
[System.Runtime.InteropServices.FieldOffset(0)]
private float f;
internal static int SingleToInt32Bits(float v)
{
SingleConverter c = new SingleConverter();
c.f = v;
return c.i;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="283" endline="289">
<![CDATA[
internal static float Int32BitsToSingle(int v)
{
SingleConverter c = new SingleConverter();
c.i = v;
return c.f;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59">
<![CDATA[
}
public sealed override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = GetMethodInfo().GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79">
<![CDATA[
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = method.GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="319" endline="329">
<![CDATA[
private static bool ParseCulture(string str, out string culture)
{
if (str == null)
{
culture = null;
return false;
}
culture = str;
return true;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="330" endline="340">
<![CDATA[
private static bool ParsePublicKeyToken(string str, out string publicKeyToken)
{
if (str == null)
{
publicKeyToken = null;
return false;
}
publicKeyToken = str.ToLowerInvariant();
return true;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86">
<![CDATA[
}
public Type[] GetExportedTypes()
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (type.IsVisible)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="175" endline="197">
<![CDATA[
private void PopulateGenericArguments()
{
if (typeArgs == null)
{
int token = this.MetadataToken;
int first = module.GenericParam.FindFirstByOwner(token);
if (first == -1)
{
typeArgs = Type.EmptyTypes;
}
else
{
List<Type> list = new List<Type>();
int len = module.GenericParam.records.Length;
for (int i = first; i < len && module.GenericParam.records[i].Owner == token; i++)
{
list.Add(new GenericTypeParameter(module, i));
}
for (int i = first; i < len && module.GenericParam.records[i].Owner == token; i++)
{
list.Add(new GenericTypeParameter(module, i));
}
typeArgs = list.ToArray();
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="220" endline="242">
<![CDATA[
private void PopulateGenericArguments()
{
if (typeArgs == null)
{
int token = this.MetadataToken;
int first = module.GenericParam.FindFirstByOwner(token);
if (first == -1)
{
typeArgs = Type.EmptyTypes;
}
else
{
List<Type> list = new List<Type>();
int len = module.GenericParam.records.Length;
for (int i = first; i < len && module.GenericParam.records[i].Owner == token; i++)
{
list.Add(new GenericTypeParameter(module, i));
}
for (int i = first; i < len && module.GenericParam.records[i].Owner == token; i++)
{
list.Add(new GenericTypeParameter(module, i));
}
typeArgs = list.ToArray();
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="210" endline="218">
<![CDATA[
public override MethodInfo GetGenericMethodDefinition()
{
if (this.IsGenericMethodDefinition)
{
return this;
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="270" endline="279">
<![CDATA[
}
public override Type GetGenericTypeDefinition()
{
if (IsGenericTypeDefinition)
{
return this;
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="127" endline="133">
<![CDATA[
internal void WriteParamRecord(MetadataWriter mw)
{
mw.Write(flags);
mw.Write(sequence);
mw.WriteStringIndex(nameIndex);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="150" endline="156">
<![CDATA[
internal void WriteFieldRecords(MetadataWriter mw)
{
mw.Write((short)attribs);
mw.WriteStringIndex(nameIndex);
mw.WriteBlobIndex(signature);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="66" endline="74">
<![CDATA[
public void AddOtherMethod(MethodBuilder mdBuilder)
{
if (otherMethods == null)
{
otherMethods = new List<MethodBuilder>();
}
otherMethods.Add(mdBuilder);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="267" endline="276">
<![CDATA[
public void __AddDeclarativeSecurity(CustomAttributeBuilder customBuilder)
{
attributes |= MethodAttributes.HasSecurity;
if (declarativeSecurity == null)
{
declarativeSecurity = new List<CustomAttributeBuilder>();
}
declarativeSecurity.Add(customBuilder);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="66" endline="74">
<![CDATA[
public void AddOtherMethod(MethodBuilder mdBuilder)
{
if (otherMethods == null)
{
otherMethods = new List<MethodBuilder>();
}
otherMethods.Add(mdBuilder);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="77" endline="86">
<![CDATA[
public void AddOtherMethod(MethodBuilder mdBuilder)
{
PatchCallingConvention(mdBuilder);
if (otherMethods == null)
{
otherMethods = new List<MethodBuilder>();
}
otherMethods.Add(mdBuilder);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="80" endline="96">
<![CDATA[
public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
{
Universe u = typeBuilder.ModuleBuilder.universe;
if (customBuilder.Constructor.DeclaringType == u.System_Runtime_CompilerServices_SpecialNameAttribute)
{
attributes |= EventAttributes.SpecialName;
}
else
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = typeBuilder.ModuleBuilder.AllocPseudoToken();
}
typeBuilder.ModuleBuilder.SetCustomAttribute(lazyPseudoToken, customBuilder);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="92" endline="108">
<![CDATA[
public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
{
Universe u = typeBuilder.ModuleBuilder.universe;
if (customBuilder.Constructor.DeclaringType == u.System_Runtime_CompilerServices_SpecialNameAttribute)
{
attributes |= PropertyAttributes.SpecialName;
}
else
{
if (lazyPseudoToken == 0)
{
lazyPseudoToken = typeBuilder.ModuleBuilder.AllocPseudoToken();
}
typeBuilder.ModuleBuilder.SetCustomAttribute(lazyPseudoToken, customBuilder);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="161" endline="195">
<![CDATA[
}
internal void Bake()
{
EventTable.Record rec = new EventTable.Record();
rec.EventFlags = (short)attributes;
rec.Name = typeBuilder.ModuleBuilder.Strings.Add(name);
rec.EventType = eventtype;
int token = 0x14000000 | typeBuilder.ModuleBuilder.Event.AddRecord(rec);
if (lazyPseudoToken != 0)
{
typeBuilder.ModuleBuilder.RegisterTokenFixup(lazyPseudoToken, token);
}
if (addOnMethod != null)
{
AddMethodSemantics(MethodSemanticsTable.AddOn, addOnMethod.MetadataToken, token);
}
if (removeOnMethod != null)
{
AddMethodSemantics(MethodSemanticsTable.RemoveOn, removeOnMethod.MetadataToken, token);
}
if (fireMethod != null)
{
AddMethodSemantics(MethodSemanticsTable.Fire, fireMethod.MetadataToken, token);
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
AddMethodSemantics(MethodSemanticsTable.Other, method.MetadataToken, token);
}
foreach (MethodBuilder method in otherMethods)
{
AddMethodSemantics(MethodSemanticsTable.Other, method.MetadataToken, token);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="191" endline="220">
<![CDATA[
internal void Bake()
{
PropertyTable.Record rec = new PropertyTable.Record();
rec.Flags = (short)attributes;
rec.Name = typeBuilder.ModuleBuilder.Strings.Add(name);
rec.Type = typeBuilder.ModuleBuilder.GetSignatureBlobIndex(sig);
int token = 0x17000000 | typeBuilder.ModuleBuilder.Property.AddRecord(rec);
if (lazyPseudoToken != 0)
{
typeBuilder.ModuleBuilder.RegisterTokenFixup(lazyPseudoToken, token);
}
if (getter != null)
{
AddMethodSemantics(MethodSemanticsTable.Getter, getter.MetadataToken, token);
}
if (setter != null)
{
AddMethodSemantics(MethodSemanticsTable.Setter, setter.MetadataToken, token);
}
if (otherMethods != null)
{
foreach (MethodBuilder method in otherMethods)
{
AddMethodSemantics(MethodSemanticsTable.Other, method.MetadataToken, token);
}
foreach (MethodBuilder method in otherMethods)
{
AddMethodSemantics(MethodSemanticsTable.Other, method.MetadataToken, token);
}
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="196" endline="204">
<![CDATA[
private void AddMethodSemantics(short semantics, int methodToken, int propertyToken)
{
MethodSemanticsTable.Record rec = new MethodSemanticsTable.Record();
rec.Semantics = semantics;
rec.Method = methodToken;
rec.Association = propertyToken;
typeBuilder.ModuleBuilder.MethodSemantics.AddRecord(rec);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="221" endline="229">
<![CDATA[
private void AddMethodSemantics(short semantics, int methodToken, int propertyToken)
{
MethodSemanticsTable.Record rec = new MethodSemanticsTable.Record();
rec.Semantics = semantics;
rec.Method = methodToken;
rec.Association = propertyToken;
typeBuilder.ModuleBuilder.MethodSemantics.AddRecord(rec);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="196" endline="204">
<![CDATA[
private void AddMethodSemantics(short semantics, int methodToken, int propertyToken)
{
MethodSemanticsTable.Record rec = new MethodSemanticsTable.Record();
rec.Semantics = semantics;
rec.Method = methodToken;
rec.Association = propertyToken;
typeBuilder.ModuleBuilder.MethodSemantics.AddRecord(rec);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="112" endline="119">
<![CDATA[
public void SetOffset(int iOffset)
{
FieldLayoutTable.Record rec = new FieldLayoutTable.Record();
rec.Offset = iOffset;
rec.Field = pseudoToken;
typeBuilder.ModuleBuilder.FieldLayout.AddRecord(rec);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79">
<![CDATA[
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = method.GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520">
<![CDATA[
private sealed class ParameterInfoImpl
{
private readonly MethodBuilder method;
private readonly int parameter;
internal ParameterInfoImpl(MethodBuilder method, int parameter)
{
this.method = method;
this.parameter = parameter;
}
private ParameterBuilder ParameterBuilder
{
get
{
if (method.parameters != null)
{
foreach (ParameterBuilder pb in method.parameters)
{
if (pb.Position == parameter)
{
return pb;
}
}
}
return null;
}
}
public override string Name
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.Name
}
}
public override Type ParameterType
{
get { return parameter == -1 ? method.returnType
}
public override ParameterAttributes Attributes
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? (ParameterAttributes)pb.Attributes
}
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
{
return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
}
if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
{
return Missing.Value;
}
return null;
}
}
private Type[] GetCustomModifiers(int optOrReq)
{
if (method.modifiers == null || method.modifiers[parameter + 1] == null)
{
return Type.EmptyTypes;
}
return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
}
public override Type[] GetOptionalCustomModifiers()
{
return GetCustomModifiers(0);
}
public override Type[] GetRequiredCustomModifiers()
{
return GetCustomModifiers(1);
}
public override MemberInfo Member
{
get { return method; }
}
public override int MetadataToken
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.PseudoToken
}
}
internal override Module Module
{
get { return method.Module; }
}
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79">
<![CDATA[
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = method.GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79">
<![CDATA[
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = method.GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
FieldInfo[] fields = type.__GetDeclaredFields();
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
return fields;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79">
<![CDATA[
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = method.GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
Type[] interfaces = type.__GetDeclaredInterfaces();
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
return interfaces;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79">
<![CDATA[
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = method.GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
MethodBase[] methods = type.__GetDeclaredMethods();
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
return methods;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79">
<![CDATA[
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = method.GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229">
<![CDATA[
public override EventInfo[] __GetDeclaredEvents()
{
EventInfo[] events = type.__GetDeclaredEvents();
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
return events;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79">
<![CDATA[
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = method.GetParameters();
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
PropertyInfo[] properties = type.__GetDeclaredProperties();
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
return properties;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="376" endline="383">
<![CDATA[
}
public override Type[] GetOptionalCustomModifiers()
{
Type[] modifiers = parameterInfo.GetOptionalCustomModifiers();
Type.InplaceBindTypeParameters(method, modifiers);
return modifiers;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="384" endline="390">
<![CDATA[
public override Type[] GetRequiredCustomModifiers()
{
Type[] modifiers = parameterInfo.GetRequiredCustomModifiers();
Type.InplaceBindTypeParameters(method, modifiers);
return modifiers;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="33" endline="116">
<![CDATA[
}
public abstract PropertyAttributes Attributes { get; }
public abstract bool CanRead { get; }
public abstract bool CanWrite { get; }
public abstract MethodInfo GetGetMethod(bool nonPublic);
public abstract MethodInfo GetSetMethod(bool nonPublic);
public abstract MethodInfo[] GetAccessors(bool nonPublic);
public abstract object GetRawConstantValue();
internal abstract bool IsPublic { get; }
internal abstract bool IsStatic { get; }
internal abstract PropertySignature PropertySignature { get; }
private sealed class ParameterInfoImpl
{
private readonly PropertyInfo property;
private readonly int parameter;
internal ParameterInfoImpl(PropertyInfo property, int parameter)
{
this.property = property;
this.parameter = parameter;
}
public override string Name
{
get { return null; }
}
public override Type ParameterType
{
get { return property.PropertySignature.GetParameter(parameter); }
}
public override ParameterAttributes Attributes
{
get { return ParameterAttributes.None; }
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get { throw new InvalidOperationException(); }
}
public override Type[] GetOptionalCustomModifiers()
{
return property.PropertySignature.GetOptionalCustomModifiers(parameter);
}
public override Type[] GetRequiredCustomModifiers()
{
return property.PropertySignature.GetRequiredCustomModifiers(parameter);
}
public override MemberInfo Member
{
get { return property; }
}
public override int MetadataToken
{
get { return 0x08000000; }
}
internal override Module Module
{
get { return property.Module; }
}
}
public ParameterInfo[] GetIndexParameters()
{
ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520">
<![CDATA[
private sealed class ParameterInfoImpl
{
private readonly MethodBuilder method;
private readonly int parameter;
internal ParameterInfoImpl(MethodBuilder method, int parameter)
{
this.method = method;
this.parameter = parameter;
}
private ParameterBuilder ParameterBuilder
{
get
{
if (method.parameters != null)
{
foreach (ParameterBuilder pb in method.parameters)
{
if (pb.Position == parameter)
{
return pb;
}
}
}
return null;
}
}
public override string Name
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.Name
}
}
public override Type ParameterType
{
get { return parameter == -1 ? method.returnType
}
public override ParameterAttributes Attributes
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? (ParameterAttributes)pb.Attributes
}
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
{
return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
}
if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
{
return Missing.Value;
}
return null;
}
}
private Type[] GetCustomModifiers(int optOrReq)
{
if (method.modifiers == null || method.modifiers[parameter + 1] == null)
{
return Type.EmptyTypes;
}
return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
}
public override Type[] GetOptionalCustomModifiers()
{
return GetCustomModifiers(0);
}
public override Type[] GetRequiredCustomModifiers()
{
return GetCustomModifiers(1);
}
public override MemberInfo Member
{
get { return method; }
}
public override int MetadataToken
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.PseudoToken
}
}
internal override Module Module
{
get { return method.Module; }
}
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="443" endline="452">
<![CDATA[
}
private MethodInfo Wrap(MethodInfo method)
{
if (method == null)
{
return null;
}
return new GenericMethodInstance(typeInstance, method, null);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="550" endline="559">
<![CDATA[
}
private MethodInfo Wrap(MethodInfo method)
{
if (method == null)
{
return null;
}
return new GenericMethodInstance(typeInstance, method, null);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472">
<![CDATA[
public override MethodInfo[] GetAccessors(bool nonPublic)
{
MethodInfo[] accessors = property.GetAccessors(nonPublic);
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
for (int i = 0; i < accessors.Length; i++)
{
accessors[i] = Wrap(accessors[i]);
}
return accessors;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584">
<![CDATA[
public override MethodInfo[] GetOtherMethods(bool nonPublic)
{
MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
for (int i = 0; i < others.Length; i++)
{
others[i] = Wrap(others[i]);
}
return others;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="353" endline="406">
<![CDATA[
static public byte[] ToCapiPrivateKeyBlob (DSA dsa)
{
DSAParameters p = dsa.ExportParameters (true);
int keyLength = p.P.Length; // in bytes
byte[] blob = new byte [16 + keyLength + 20 + keyLength + 20 + 4 + 20];
blob [0] = 0x07;	// Type - PRIVATEKEYBLOB (0x07)
blob [1] = 0x02;	// Version - Always CUR_BLOB_VERSION (0x02)
blob [5] = 0x22;	// ALGID
blob [8] = 0x44;	// Magic
blob [9] = 0x53;
blob [10] = 0x53;
blob [11] = 0x32;
byte[] bitlen = GetBytesLE (keyLength << 3);
blob [12] = bitlen [0];
blob [13] = bitlen [1];
blob [14] = bitlen [2];
blob [15] = bitlen [3];
int pos = 16;
byte[] part = p.P;
Array.Reverse (part);
Buffer.BlockCopy (part, 0, blob, pos, keyLength);
pos += keyLength;
part = p.Q;
Array.Reverse (part);
Buffer.BlockCopy (part, 0, blob, pos, 20);
pos += 20;
part = p.G;
Array.Reverse (part);
Buffer.BlockCopy (part, 0, blob, pos, keyLength);
pos += keyLength;
part = p.X;
Array.Reverse (part);
Buffer.BlockCopy (part, 0, blob, pos, 20);
pos += 20;
Buffer.BlockCopy (GetBytesLE (p.Counter), 0, blob, pos, 4);
pos += 4;
part = p.Seed;
Array.Reverse (part);
Buffer.BlockCopy (part, 0, blob, pos, 20);
return blob;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="570" endline="625">
<![CDATA[
static public byte[] ToCapiPublicKeyBlob (DSA dsa)
{
DSAParameters p = dsa.ExportParameters (false);
int keyLength = p.P.Length; // in bytes
byte[] blob = new byte [16 + keyLength + 20 + keyLength + keyLength + 4 + 20];
blob [0] = 0x06;	// Type - PUBLICKEYBLOB (0x06)
blob [1] = 0x02;	// Version - Always CUR_BLOB_VERSION (0x02)
blob [5] = 0x22;	// ALGID
blob [8] = 0x44;	// Magic
blob [9] = 0x53;
blob [10] = 0x53;
blob [11] = 0x31;
byte[] bitlen = GetBytesLE (keyLength << 3);
blob [12] = bitlen [0];
blob [13] = bitlen [1];
blob [14] = bitlen [2];
blob [15] = bitlen [3];
int pos = 16;
byte[] part;
part = p.P;
Array.Reverse (part);
Buffer.BlockCopy (part, 0, blob, pos, keyLength);
pos += keyLength;
part = p.Q;
Array.Reverse (part);
Buffer.BlockCopy (part, 0, blob, pos, 20);
pos += 20;
part = p.G;
Array.Reverse (part);
Buffer.BlockCopy (part, 0, blob, pos, keyLength);
pos += keyLength;
part = p.Y;
Array.Reverse (part);
Buffer.BlockCopy (part, 0, blob, pos, keyLength);
pos += keyLength;
Buffer.BlockCopy (GetBytesLE (p.Counter), 0, blob, pos, 4);
pos += 4;
part = p.Seed;
Array.Reverse (part);
Buffer.BlockCopy (part, 0, blob, pos, 20);
return blob;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="691" endline="701">
<![CDATA[
static public byte[] ToCapiKeyBlob (RSA rsa, bool includePrivateKey)
{
if (rsa == null)
throw new ArgumentNullException ("rsa");
if (includePrivateKey)
return ToCapiPrivateKeyBlob (rsa);
else
return ToCapiPublicKeyBlob (rsa);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="702" endline="712">
<![CDATA[
static public byte[] ToCapiKeyBlob (DSA dsa, bool includePrivateKey)
{
if (dsa == null)
throw new ArgumentNullException ("dsa");
if (includePrivateKey)
return ToCapiPrivateKeyBlob (dsa);
else
return ToCapiPublicKeyBlob (dsa);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="267" endline="276">
<![CDATA[
public void __AddDeclarativeSecurity(CustomAttributeBuilder customBuilder)
{
attributes |= MethodAttributes.HasSecurity;
if (declarativeSecurity == null)
{
declarativeSecurity = new List<CustomAttributeBuilder>();
}
declarativeSecurity.Add(customBuilder);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="77" endline="86">
<![CDATA[
public void AddOtherMethod(MethodBuilder mdBuilder)
{
PatchCallingConvention(mdBuilder);
if (otherMethods == null)
{
otherMethods = new List<MethodBuilder>();
}
otherMethods.Add(mdBuilder);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520">
<![CDATA[
private sealed class ParameterInfoImpl
{
private readonly MethodBuilder method;
private readonly int parameter;
internal ParameterInfoImpl(MethodBuilder method, int parameter)
{
this.method = method;
this.parameter = parameter;
}
private ParameterBuilder ParameterBuilder
{
get
{
if (method.parameters != null)
{
foreach (ParameterBuilder pb in method.parameters)
{
if (pb.Position == parameter)
{
return pb;
}
}
}
return null;
}
}
public override string Name
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.Name
}
}
public override Type ParameterType
{
get { return parameter == -1 ? method.returnType
}
public override ParameterAttributes Attributes
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? (ParameterAttributes)pb.Attributes
}
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
{
return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
}
if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
{
return Missing.Value;
}
return null;
}
}
private Type[] GetCustomModifiers(int optOrReq)
{
if (method.modifiers == null || method.modifiers[parameter + 1] == null)
{
return Type.EmptyTypes;
}
return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
}
public override Type[] GetOptionalCustomModifiers()
{
return GetCustomModifiers(0);
}
public override Type[] GetRequiredCustomModifiers()
{
return GetCustomModifiers(1);
}
public override MemberInfo Member
{
get { return method; }
}
public override int MetadataToken
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.PseudoToken
}
}
internal override Module Module
{
get { return method.Module; }
}
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520">
<![CDATA[
private sealed class ParameterInfoImpl
{
private readonly MethodBuilder method;
private readonly int parameter;
internal ParameterInfoImpl(MethodBuilder method, int parameter)
{
this.method = method;
this.parameter = parameter;
}
private ParameterBuilder ParameterBuilder
{
get
{
if (method.parameters != null)
{
foreach (ParameterBuilder pb in method.parameters)
{
if (pb.Position == parameter)
{
return pb;
}
}
}
return null;
}
}
public override string Name
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.Name
}
}
public override Type ParameterType
{
get { return parameter == -1 ? method.returnType
}
public override ParameterAttributes Attributes
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? (ParameterAttributes)pb.Attributes
}
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
{
return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
}
if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
{
return Missing.Value;
}
return null;
}
}
private Type[] GetCustomModifiers(int optOrReq)
{
if (method.modifiers == null || method.modifiers[parameter + 1] == null)
{
return Type.EmptyTypes;
}
return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
}
public override Type[] GetOptionalCustomModifiers()
{
return GetCustomModifiers(0);
}
public override Type[] GetRequiredCustomModifiers()
{
return GetCustomModifiers(1);
}
public override MemberInfo Member
{
get { return method; }
}
public override int MetadataToken
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.PseudoToken
}
}
internal override Module Module
{
get { return method.Module; }
}
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
FieldInfo[] fields = type.__GetDeclaredFields();
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
return fields;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520">
<![CDATA[
private sealed class ParameterInfoImpl
{
private readonly MethodBuilder method;
private readonly int parameter;
internal ParameterInfoImpl(MethodBuilder method, int parameter)
{
this.method = method;
this.parameter = parameter;
}
private ParameterBuilder ParameterBuilder
{
get
{
if (method.parameters != null)
{
foreach (ParameterBuilder pb in method.parameters)
{
if (pb.Position == parameter)
{
return pb;
}
}
}
return null;
}
}
public override string Name
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.Name
}
}
public override Type ParameterType
{
get { return parameter == -1 ? method.returnType
}
public override ParameterAttributes Attributes
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? (ParameterAttributes)pb.Attributes
}
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
{
return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
}
if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
{
return Missing.Value;
}
return null;
}
}
private Type[] GetCustomModifiers(int optOrReq)
{
if (method.modifiers == null || method.modifiers[parameter + 1] == null)
{
return Type.EmptyTypes;
}
return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
}
public override Type[] GetOptionalCustomModifiers()
{
return GetCustomModifiers(0);
}
public override Type[] GetRequiredCustomModifiers()
{
return GetCustomModifiers(1);
}
public override MemberInfo Member
{
get { return method; }
}
public override int MetadataToken
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.PseudoToken
}
}
internal override Module Module
{
get { return method.Module; }
}
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
Type[] interfaces = type.__GetDeclaredInterfaces();
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
return interfaces;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520">
<![CDATA[
private sealed class ParameterInfoImpl
{
private readonly MethodBuilder method;
private readonly int parameter;
internal ParameterInfoImpl(MethodBuilder method, int parameter)
{
this.method = method;
this.parameter = parameter;
}
private ParameterBuilder ParameterBuilder
{
get
{
if (method.parameters != null)
{
foreach (ParameterBuilder pb in method.parameters)
{
if (pb.Position == parameter)
{
return pb;
}
}
}
return null;
}
}
public override string Name
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.Name
}
}
public override Type ParameterType
{
get { return parameter == -1 ? method.returnType
}
public override ParameterAttributes Attributes
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? (ParameterAttributes)pb.Attributes
}
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
{
return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
}
if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
{
return Missing.Value;
}
return null;
}
}
private Type[] GetCustomModifiers(int optOrReq)
{
if (method.modifiers == null || method.modifiers[parameter + 1] == null)
{
return Type.EmptyTypes;
}
return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
}
public override Type[] GetOptionalCustomModifiers()
{
return GetCustomModifiers(0);
}
public override Type[] GetRequiredCustomModifiers()
{
return GetCustomModifiers(1);
}
public override MemberInfo Member
{
get { return method; }
}
public override int MetadataToken
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.PseudoToken
}
}
internal override Module Module
{
get { return method.Module; }
}
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
MethodBase[] methods = type.__GetDeclaredMethods();
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
return methods;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520">
<![CDATA[
private sealed class ParameterInfoImpl
{
private readonly MethodBuilder method;
private readonly int parameter;
internal ParameterInfoImpl(MethodBuilder method, int parameter)
{
this.method = method;
this.parameter = parameter;
}
private ParameterBuilder ParameterBuilder
{
get
{
if (method.parameters != null)
{
foreach (ParameterBuilder pb in method.parameters)
{
if (pb.Position == parameter)
{
return pb;
}
}
}
return null;
}
}
public override string Name
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.Name
}
}
public override Type ParameterType
{
get { return parameter == -1 ? method.returnType
}
public override ParameterAttributes Attributes
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? (ParameterAttributes)pb.Attributes
}
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
{
return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
}
if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
{
return Missing.Value;
}
return null;
}
}
private Type[] GetCustomModifiers(int optOrReq)
{
if (method.modifiers == null || method.modifiers[parameter + 1] == null)
{
return Type.EmptyTypes;
}
return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
}
public override Type[] GetOptionalCustomModifiers()
{
return GetCustomModifiers(0);
}
public override Type[] GetRequiredCustomModifiers()
{
return GetCustomModifiers(1);
}
public override MemberInfo Member
{
get { return method; }
}
public override int MetadataToken
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.PseudoToken
}
}
internal override Module Module
{
get { return method.Module; }
}
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229">
<![CDATA[
public override EventInfo[] __GetDeclaredEvents()
{
EventInfo[] events = type.__GetDeclaredEvents();
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
return events;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520">
<![CDATA[
private sealed class ParameterInfoImpl
{
private readonly MethodBuilder method;
private readonly int parameter;
internal ParameterInfoImpl(MethodBuilder method, int parameter)
{
this.method = method;
this.parameter = parameter;
}
private ParameterBuilder ParameterBuilder
{
get
{
if (method.parameters != null)
{
foreach (ParameterBuilder pb in method.parameters)
{
if (pb.Position == parameter)
{
return pb;
}
}
}
return null;
}
}
public override string Name
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.Name
}
}
public override Type ParameterType
{
get { return parameter == -1 ? method.returnType
}
public override ParameterAttributes Attributes
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? (ParameterAttributes)pb.Attributes
}
}
public override int Position
{
get { return parameter; }
}
public override object RawDefaultValue
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
{
return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
}
if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
{
return Missing.Value;
}
return null;
}
}
private Type[] GetCustomModifiers(int optOrReq)
{
if (method.modifiers == null || method.modifiers[parameter + 1] == null)
{
return Type.EmptyTypes;
}
return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
}
public override Type[] GetOptionalCustomModifiers()
{
return GetCustomModifiers(0);
}
public override Type[] GetRequiredCustomModifiers()
{
return GetCustomModifiers(1);
}
public override MemberInfo Member
{
get { return method; }
}
public override int MetadataToken
{
get
{
ParameterBuilder pb = this.ParameterBuilder;
return pb != null ? pb.PseudoToken
}
}
internal override Module Module
{
get { return method.Module; }
}
}
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
for (int i = 0; i < parameters.Length; i++)
{
parameters[i] = new ParameterInfoImpl(this, i);
}
return parameters;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
PropertyInfo[] properties = type.__GetDeclaredProperties();
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
return properties;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="636" endline="646">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
if (parameters != null)
{
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="145" endline="152">
<![CDATA[
internal void WriteParamTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="636" endline="646">
<![CDATA[
internal void WriteParamRecords(MetadataWriter mw)
{
if (parameters != null)
{
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
foreach (ParameterBuilder pb in parameters)
{
pb.WriteParamRecord(mw);
}
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="153" endline="160">
<![CDATA[
internal void WriteFieldTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="670" endline="686">
<![CDATA[
}
internal override int ImportTo(ModuleBuilder other)
{
if (typeBuilder.IsGenericTypeDefinition)
{
return other.ImportMember(TypeBuilder.GetMethod(typeBuilder, this));
}
else if (other == typeBuilder.ModuleBuilder)
{
return pseudoToken;
}
else
{
return other.ImportMethodOrField(typeBuilder, name, this.MethodSignature);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="166" endline="182">
<![CDATA[
}
internal override int ImportTo(ModuleBuilder other)
{
if (typeBuilder.IsGenericTypeDefinition)
{
return other.ImportMember(TypeBuilder.GetField(typeBuilder, this));
}
else if (other == typeBuilder.ModuleBuilder)
{
return pseudoToken;
}
else
{
return other.ImportMethodOrField(typeBuilder, name, fieldSig);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346">
<![CDATA[
public Type[] FindTypes(TypeFilter filter, object filterCriteria)
{
List<Type> list = new List<Type>();
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
foreach (Type type in GetTypes())
{
if (filter(type, filterCriteria))
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69">
<![CDATA[
}
public override Type[] __GetDeclaredInterfaces()
{
List<Type> list = new List<Type>();
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
foreach (Type type in GetGenericParameterConstraints())
{
if (type.IsInterface)
{
list.Add(type);
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="593" endline="605">
<![CDATA[
internal FieldInfo GetFieldAt(TypeDefImpl owner, int index)
{
if (fields == null)
{
fields = new FieldInfo[Field.records.Length];
}
if (fields[index] == null)
{
fields[index] = new FieldDefImpl(this, owner ?? FindFieldOwner(index), index);
}
return fields[index];
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="640" endline="653">
<![CDATA[
internal MethodBase GetMethodAt(TypeDefImpl owner, int index)
{
if (methods == null)
{
methods = new MethodBase[MethodDef.records.Length];
}
if (methods[index] == null)
{
MethodDefImpl method = new MethodDefImpl(this, owner ?? FindMethodOwner(index), index);
methods[index] = method.IsConstructor ? new ConstructorInfoImpl(method)
}
return methods[index];
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="624" endline="639">
<![CDATA[
private TypeDefImpl FindFieldOwner(int fieldIndex)
{
for (int i = 0; i < TypeDef.records.Length; i++)
{
int field = TypeDef.records[i].FieldList - 1;
int end = TypeDef.records.Length > i + 1 ? TypeDef.records[i + 1].FieldList - 1
if (field <= fieldIndex && fieldIndex < end)
{
PopulateTypeDef();
return typeDefs[i];
}
}
for (int i = 0; i < TypeDef.records.Length; i++)
{
int field = TypeDef.records[i].FieldList - 1;
int end = TypeDef.records.Length > i + 1 ? TypeDef.records[i + 1].FieldList - 1
if (field <= fieldIndex && fieldIndex < end)
{
PopulateTypeDef();
return typeDefs[i];
}
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="724" endline="740">
<![CDATA[
}
private TypeDefImpl FindMethodOwner(int methodIndex)
{
for (int i = 0; i < TypeDef.records.Length; i++)
{
int method = TypeDef.records[i].MethodList - 1;
int end = TypeDef.records.Length > i + 1 ? TypeDef.records[i + 1].MethodList - 1
if (method <= methodIndex && methodIndex < end)
{
PopulateTypeDef();
return typeDefs[i];
}
}
for (int i = 0; i < TypeDef.records.Length; i++)
{
int method = TypeDef.records[i].MethodList - 1;
int end = TypeDef.records.Length > i + 1 ? TypeDef.records[i + 1].MethodList - 1
if (method <= methodIndex && methodIndex < end)
{
PopulateTypeDef();
return typeDefs[i];
}
}
throw new InvalidOperationException();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="221" endline="229">
<![CDATA[
private void AddMethodSemantics(short semantics, int methodToken, int propertyToken)
{
MethodSemanticsTable.Record rec = new MethodSemanticsTable.Record();
rec.Semantics = semantics;
rec.Method = methodToken;
rec.Association = propertyToken;
typeBuilder.ModuleBuilder.MethodSemantics.AddRecord(rec);
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="112" endline="119">
<![CDATA[
public void SetOffset(int iOffset)
{
FieldLayoutTable.Record rec = new FieldLayoutTable.Record();
rec.Offset = iOffset;
rec.Field = pseudoToken;
typeBuilder.ModuleBuilder.FieldLayout.AddRecord(rec);
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="84" endline="96">
<![CDATA[
public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, Signature.PROPERTY);
sig.returnType = returnType;
sig.returnTypeOptionalCustomModifiers = Type.EmptyTypes;
sig.returnTypeRequiredCustomModifiers = Type.EmptyTypes;
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
return sig;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="140" endline="151">
<![CDATA[
public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, 0);
sig.returnType = returnType;
sig.callingConvention = CallingConventions.Standard;
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
foreach (Type type in parameterTypes)
{
sig.AddArgument(type);
}
return sig;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="123" endline="131">
<![CDATA[
public static SignatureHelper GetMethodSigHelper(Module mod, CallingConvention unmanagedCallConv, Type returnType)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, 0);
sig.returnType = returnType;
sig.unmanaged = true;
sig.unmanagedCallConv = unmanagedCallConv;
return sig;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="132" endline="139">
<![CDATA[
public static SignatureHelper GetMethodSigHelper(Module mod, CallingConventions callingConvention, Type returnType)
{
SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, 0);
sig.returnType = returnType;
sig.callingConvention = callingConvention;
return sig;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1600" endline="1609">
<![CDATA[
}
internal sealed override int GetModuleBuilderToken()
{
if (token == 0)
{
token = ((ModuleBuilder)elementType.Module).ImportType(this);
}
return token;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2362" endline="2371">
<![CDATA[
}
internal override int GetModuleBuilderToken()
{
if (token == 0)
{
token = ((ModuleBuilder)type.Module).ImportType(this);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
FieldInfo[] fields = type.__GetDeclaredFields();
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
return fields;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
Type[] interfaces = type.__GetDeclaredInterfaces();
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
return interfaces;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
MethodBase[] methods = type.__GetDeclaredMethods();
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
return methods;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229">
<![CDATA[
public override EventInfo[] __GetDeclaredEvents()
{
EventInfo[] events = type.__GetDeclaredEvents();
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
return events;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881">
<![CDATA[
public override ParameterInfo[] GetParameters()
{
ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
for (int i = 0; i < parameterInfos.Length; i++)
{
parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
}
return parameterInfos;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
PropertyInfo[] properties = type.__GetDeclaredProperties();
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
return properties;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
FieldInfo[] fields = type.__GetDeclaredFields();
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
return fields;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
Type[] interfaces = type.__GetDeclaredInterfaces();
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
return interfaces;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
FieldInfo[] fields = type.__GetDeclaredFields();
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
return fields;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
MethodBase[] methods = type.__GetDeclaredMethods();
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
return methods;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
FieldInfo[] fields = type.__GetDeclaredFields();
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
return fields;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229">
<![CDATA[
public override EventInfo[] __GetDeclaredEvents()
{
EventInfo[] events = type.__GetDeclaredEvents();
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
return events;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
FieldInfo[] fields = type.__GetDeclaredFields();
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
for (int i = 0; i < fields.Length; i++)
{
fields[i] = fields[i].BindTypeParameters(this);
}
return fields;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
PropertyInfo[] properties = type.__GetDeclaredProperties();
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
return properties;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
Type[] interfaces = type.__GetDeclaredInterfaces();
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
return interfaces;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
MethodBase[] methods = type.__GetDeclaredMethods();
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
return methods;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
Type[] interfaces = type.__GetDeclaredInterfaces();
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
return interfaces;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229">
<![CDATA[
public override EventInfo[] __GetDeclaredEvents()
{
EventInfo[] events = type.__GetDeclaredEvents();
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
return events;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
Type[] interfaces = type.__GetDeclaredInterfaces();
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
for (int i = 0; i < interfaces.Length; i++)
{
interfaces[i] = interfaces[i].BindTypeParameters(this);
}
return interfaces;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
PropertyInfo[] properties = type.__GetDeclaredProperties();
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
return properties;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
MethodBase[] methods = type.__GetDeclaredMethods();
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
return methods;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229">
<![CDATA[
public override EventInfo[] __GetDeclaredEvents()
{
EventInfo[] events = type.__GetDeclaredEvents();
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
return events;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
MethodBase[] methods = type.__GetDeclaredMethods();
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
for (int i = 0; i < methods.Length; i++)
{
methods[i] = methods[i].BindTypeParameters(this);
}
return methods;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
PropertyInfo[] properties = type.__GetDeclaredProperties();
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
return properties;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229">
<![CDATA[
public override EventInfo[] __GetDeclaredEvents()
{
EventInfo[] events = type.__GetDeclaredEvents();
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
for (int i = 0; i < events.Length; i++)
{
events[i] = events[i].BindTypeParameters(this);
}
return events;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
PropertyInfo[] properties = type.__GetDeclaredProperties();
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
for (int i = 0; i < properties.Length; i++)
{
properties[i] = properties[i].BindTypeParameters(this);
}
return properties;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="353" endline="367">
<![CDATA[
private static FieldInfo GetField(Type type, string name)
{
for (; type != null; type = type.BaseType)
{
foreach (FieldInfo field in type.__GetDeclaredFields())
{
if (field.IsPublic && !field.IsStatic && field.Name == name)
{
return field;
}
}
foreach (FieldInfo field in type.__GetDeclaredFields())
{
if (field.IsPublic && !field.IsStatic && field.Name == name)
{
return field;
}
}
}
for (; type != null; type = type.BaseType)
{
foreach (FieldInfo field in type.__GetDeclaredFields())
{
if (field.IsPublic && !field.IsStatic && field.Name == name)
{
return field;
}
}
}
return null;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="368" endline="382">
<![CDATA[
private static PropertyInfo GetProperty(Type type, string name)
{
for (; type != null; type = type.BaseType)
{
foreach (PropertyInfo property in type.__GetDeclaredProperties())
{
if (property.IsPublic && !property.IsStatic && property.Name == name)
{
return property;
}
}
foreach (PropertyInfo property in type.__GetDeclaredProperties())
{
if (property.IsPublic && !property.IsStatic && property.Name == name)
{
return property;
}
}
}
for (; type != null; type = type.BaseType)
{
foreach (PropertyInfo property in type.__GetDeclaredProperties())
{
if (property.IsPublic && !property.IsStatic && property.Name == name)
{
return property;
}
}
}
return null;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="570" endline="581">
<![CDATA[
public static IList<CustomAttributeData> __GetDeclarativeSecurity(Type type)
{
if ((type.Attributes & TypeAttributes.HasSecurity) != 0)
{
return type.Module.GetDeclarativeSecurity(type.MetadataToken);
}
else
{
return EmptyList;
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="582" endline="593">
<![CDATA[
public static IList<CustomAttributeData> __GetDeclarativeSecurity(MethodBase method)
{
if ((method.Attributes & MethodAttributes.HasSecurity) != 0)
{
return method.Module.GetDeclarativeSecurity(method.MetadataToken);
}
else
{
return EmptyList;
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="344" endline="360">
<![CDATA[
}
public override Type[] GetGenericParameterConstraints()
{
IGenericContext context = (this.DeclaringMethod as IGenericContext) ?? this.DeclaringType;
List<Type> list = new List<Type>();
int token = this.MetadataToken;
for (int i = 0; i < module.GenericParamConstraint.records.Length; i++)
{
if (module.GenericParamConstraint.records[i].Owner == token)
{
list.Add(module.ResolveType(module.GenericParamConstraint.records[i].Constraint, context));
}
}
for (int i = 0; i < module.GenericParamConstraint.records.Length; i++)
{
if (module.GenericParamConstraint.records[i].Owner == token)
{
list.Add(module.ResolveType(module.GenericParamConstraint.records[i].Constraint, context));
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="98" endline="112">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
int token = this.MetadataToken;
List<Type> list = new List<Type>();
for (int i = 0; i < module.InterfaceImpl.records.Length; i++)
{
if (module.InterfaceImpl.records[i].Class == token)
{
list.Add(module.ResolveType(module.InterfaceImpl.records[i].Interface, this));
}
}
for (int i = 0; i < module.InterfaceImpl.records.Length; i++)
{
if (module.InterfaceImpl.records[i].Class == token)
{
list.Add(module.ResolveType(module.InterfaceImpl.records[i].Interface, this));
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="344" endline="360">
<![CDATA[
}
public override Type[] GetGenericParameterConstraints()
{
IGenericContext context = (this.DeclaringMethod as IGenericContext) ?? this.DeclaringType;
List<Type> list = new List<Type>();
int token = this.MetadataToken;
for (int i = 0; i < module.GenericParamConstraint.records.Length; i++)
{
if (module.GenericParamConstraint.records[i].Owner == token)
{
list.Add(module.ResolveType(module.GenericParamConstraint.records[i].Constraint, context));
}
}
for (int i = 0; i < module.GenericParamConstraint.records.Length; i++)
{
if (module.GenericParamConstraint.records[i].Owner == token)
{
list.Add(module.ResolveType(module.GenericParamConstraint.records[i].Constraint, context));
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="158" endline="172">
<![CDATA[
public override Type[] __GetDeclaredTypes()
{
int token = this.MetadataToken;
List<Type> list = new List<Type>();
for (int i = 0; i < module.NestedClass.records.Length; i++)
{
if (module.NestedClass.records[i].EnclosingClass == token)
{
list.Add(module.ResolveType(module.NestedClass.records[i].NestedClass));
}
}
for (int i = 0; i < module.NestedClass.records.Length; i++)
{
if (module.NestedClass.records[i].EnclosingClass == token)
{
list.Add(module.ResolveType(module.NestedClass.records[i].NestedClass));
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="64" endline="85">
<![CDATA[
}
public override EventInfo[] __GetDeclaredEvents()
{
int token = this.MetadataToken;
for (int i = 0; i < module.EventMap.records.Length; i++)
{
if (module.EventMap.records[i].Parent == token)
{
int evt = module.EventMap.records[i].EventList - 1;
int end = module.EventMap.records.Length > i + 1 ? module.EventMap.records[i + 1].EventList - 1
EventInfo[] events = new EventInfo[end - evt];
for (int j = 0; evt < end; evt++, j++)
{
events[j] = new EventInfoImpl(module, this, evt);
}
for (int j = 0; evt < end; evt++, j++)
{
events[j] = new EventInfoImpl(module, this, evt);
}
return events;
}
}
for (int i = 0; i < module.EventMap.records.Length; i++)
{
if (module.EventMap.records[i].Parent == token)
{
int evt = module.EventMap.records[i].EventList - 1;
int end = module.EventMap.records.Length > i + 1 ? module.EventMap.records[i + 1].EventList - 1
EventInfo[] events = new EventInfo[end - evt];
for (int j = 0; evt < end; evt++, j++)
{
events[j] = new EventInfoImpl(module, this, evt);
}
return events;
}
}
return Empty<EventInfo>.Array;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="173" endline="193">
<![CDATA[
public override PropertyInfo[] __GetDeclaredProperties()
{
int token = this.MetadataToken;
for (int i = 0; i < module.PropertyMap.records.Length; i++)
{
if (module.PropertyMap.records[i].Parent == token)
{
int property = module.PropertyMap.records[i].PropertyList - 1;
int end = module.PropertyMap.records.Length > i + 1 ? module.PropertyMap.records[i + 1].PropertyList - 1
PropertyInfo[] properties = new PropertyInfo[end - property];
for (int j = 0; property < end; property++, j++)
{
properties[j] = new PropertyInfoImpl(module, this, property);
}
for (int j = 0; property < end; property++, j++)
{
properties[j] = new PropertyInfoImpl(module, this, property);
}
return properties;
}
}
for (int i = 0; i < module.PropertyMap.records.Length; i++)
{
if (module.PropertyMap.records[i].Parent == token)
{
int property = module.PropertyMap.records[i].PropertyList - 1;
int end = module.PropertyMap.records.Length > i + 1 ? module.PropertyMap.records[i + 1].PropertyList - 1
PropertyInfo[] properties = new PropertyInfo[end - property];
for (int j = 0; property < end; property++, j++)
{
properties[j] = new PropertyInfoImpl(module, this, property);
}
return properties;
}
}
return Empty<PropertyInfo>.Array;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="86" endline="97">
<![CDATA[
public override FieldInfo[] __GetDeclaredFields()
{
int field = module.TypeDef.records[index].FieldList - 1;
int end = module.TypeDef.records.Length > index + 1 ? module.TypeDef.records[index + 1].FieldList - 1
FieldInfo[] fields = new FieldInfo[end - field];
for (int i = 0; field < end; i++, field++)
{
fields[i] = module.GetFieldAt(this, field);
}
for (int i = 0; field < end; i++, field++)
{
fields[i] = module.GetFieldAt(this, field);
}
return fields;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="113" endline="124">
<![CDATA[
public override MethodBase[] __GetDeclaredMethods()
{
int method = module.TypeDef.records[index].MethodList - 1;
int end = module.TypeDef.records.Length > index + 1 ? module.TypeDef.records[index + 1].MethodList - 1
MethodBase[] methods = new MethodBase[end - method];
for (int i = 0; method < end; method++, i++)
{
methods[i] = module.GetMethodAt(this, method);
}
for (int i = 0; method < end; method++, i++)
{
methods[i] = module.GetMethodAt(this, method);
}
return methods;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="98" endline="112">
<![CDATA[
public override Type[] __GetDeclaredInterfaces()
{
int token = this.MetadataToken;
List<Type> list = new List<Type>();
for (int i = 0; i < module.InterfaceImpl.records.Length; i++)
{
if (module.InterfaceImpl.records[i].Class == token)
{
list.Add(module.ResolveType(module.InterfaceImpl.records[i].Interface, this));
}
}
for (int i = 0; i < module.InterfaceImpl.records.Length; i++)
{
if (module.InterfaceImpl.records[i].Class == token)
{
list.Add(module.ResolveType(module.InterfaceImpl.records[i].Interface, this));
}
}
return list.ToArray();
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="158" endline="172">
<![CDATA[
public override Type[] __GetDeclaredTypes()
{
int token = this.MetadataToken;
List<Type> list = new List<Type>();
for (int i = 0; i < module.NestedClass.records.Length; i++)
{
if (module.NestedClass.records[i].EnclosingClass == token)
{
list.Add(module.ResolveType(module.NestedClass.records[i].NestedClass));
}
}
for (int i = 0; i < module.NestedClass.records.Length; i++)
{
if (module.NestedClass.records[i].EnclosingClass == token)
{
list.Add(module.ResolveType(module.NestedClass.records[i].NestedClass));
}
}
return list.ToArray();
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="145" endline="152">
<![CDATA[
internal void WriteParamTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteParamRecords(mw);
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="153" endline="160">
<![CDATA[
internal void WriteFieldTable(MetadataWriter mw)
{
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
foreach (TypeBuilder type in types)
{
type.WriteFieldRecords(mw);
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="462" endline="473">
<![CDATA[
public TypeToken GetTypeToken(Type type)
{
if (type.Module == this)
{
return new TypeToken(type.GetModuleBuilderToken());
}
else
{
return new TypeToken(ImportType(type));
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="551" endline="562">
<![CDATA[
public MethodToken GetConstructorToken(ConstructorInfo constructor)
{
if (constructor.Module == this && constructor.GetMethodInfo() is MethodBuilder)
{
return new MethodToken(constructor.MetadataToken);
}
else
{
return new MethodToken(ImportMember(constructor));
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="504" endline="519">
<![CDATA[
public FieldToken GetFieldToken(FieldInfo field)
{
FieldBuilder fb = field as FieldBuilder;
if (fb != null && fb.Module == this && !IsFromGenericTypeDefinition(fb))
{
return new FieldToken(fb.MetadataToken);
}
else
{
return new FieldToken(ImportMember(field));
}
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="520" endline="532">
<![CDATA[
public MethodToken GetMethodToken(MethodInfo method)
{
MethodBuilder mb = method as MethodBuilder;
if (mb != null && mb.ModuleBuilder == this)
{
return new MethodToken(mb.MetadataToken);
}
else
{
return new MethodToken(ImportMember(method));
}
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="563" endline="573">
<![CDATA[
internal int ImportMember(MethodBase member)
{
int token;
if (!importedMembers.TryGetValue(member, out token))
{
token = member.ImportTo(this);
importedMembers.Add(member, token);
}
return token;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="574" endline="584">
<![CDATA[
internal int ImportMember(FieldInfo member)
{
int token;
if (!importedMembers.TryGetValue(member, out token))
{
token = member.ImportTo(this);
importedMembers.Add(member, token);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="563" endline="573">
<![CDATA[
internal int ImportMember(MethodBase member)
{
int token;
if (!importedMembers.TryGetValue(member, out token))
{
token = member.ImportTo(this);
importedMembers.Add(member, token);
}
return token;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="636" endline="650">
<![CDATA[
private int ImportAssemblyRef(Assembly asm)
{
int token;
if (!referencedAssemblies.TryGetValue(asm, out token))
{
token = 0x23800001 + referencedAssemblies.Count;
referencedAssemblies.Add(asm, token);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="574" endline="584">
<![CDATA[
internal int ImportMember(FieldInfo member)
{
int token;
if (!importedMembers.TryGetValue(member, out token))
{
token = member.ImportTo(this);
importedMembers.Add(member, token);
}
return token;
}
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="636" endline="650">
<![CDATA[
private int ImportAssemblyRef(Assembly asm)
{
int token;
if (!referencedAssemblies.TryGetValue(asm, out token))
{
token = 0x23800001 + referencedAssemblies.Count;
referencedAssemblies.Add(asm, token);
}
return token;
}
]]>
</clone_fragment>
</clone_pair>
</clones>
