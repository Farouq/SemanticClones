<project><name></name><description></description><prog_language></prog_language><source_elements>
<source file="NULL" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="84" endline="119"><![CDATA[
 		{
 			switch (br.ReadByte())
 			{
 				case ELEMENT_TYPE_CLASS
 				case ELEMENT_TYPE_VALUETYPE
 					break;
 				default
 					throw new BadImageFormatException();
 			}
 			Type type = ReadTypeDefOrRefEncoded(module, br, context);
 			if (!type.IsGenericTypeDefinition)
 			{
 				throw new BadImageFormatException();
 			}
 			int genArgCount = br.ReadCompressedInt();
 			Type[] args = new Type[genArgCount];
 			Type[][] reqmod = null;
 			Type[][] optmod = null;
 			for (int i = 0; i < genArgCount; i++)
 			{
 				// LAMESPEC the Type production (23.2.12) doesn't include CustomMod* for genericinst, but C++ uses it, the verifier allows it and ildasm also supports it
 				CustomModifiers mods = ReadCustomModifiers(module, br, context);
 				if (mods.required != null || mods.optional != null)
 				{
 					if (reqmod == null)
 					{
 						reqmod = new Type[genArgCount][];
 						optmod = new Type[genArgCount][];
 					}
 					reqmod[i] = mods.required;
 					optmod[i] = mods.optional;
 				}
 				args[i] = ReadType(module, br, context);
 			}
 			for (int i = 0; i < genArgCount; i++)
 			{
 				// LAMESPEC the Type production (23.2.12) doesn't include CustomMod* for genericinst, but C++ uses it, the verifier allows it and ildasm also supports it
 				CustomModifiers mods = ReadCustomModifiers(module, br, context);
 				if (mods.required != null || mods.optional != null)
 				{
 					if (reqmod == null)
 					{
 						reqmod = new Type[genArgCount][];
 						optmod = new Type[genArgCount][];
 					}
 					reqmod[i] = mods.required;
 					optmod[i] = mods.optional;
 				}
 				args[i] = ReadType(module, br, context);
 			}
 			return GenericTypeInstance.Make(type, args, reqmod, optmod);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="120" endline="128"><![CDATA[
 
 		internal static Type ReadTypeSpec(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			// LAMESPEC a TypeSpec can contain custom modifiers (C++/CLI generates "newarr (TypeSpec with custom modifiers)")
 			SkipCustomModifiers(br);
 			// LAMESPEC anything can be adorned by (useless) custom modifiers
 			// also, VAR and MVAR are also used in TypeSpec (contrary to what the spec says)
 			return ReadType(module, br, context);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="129" endline="136"><![CDATA[
 
 		private static Type ReadFunctionPointer(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			// TODO like .NET we return System.IntPtr here, but ideally we should fire an event in Universe that
 			// the user can hook to provide a custom type (or we simply should build in full support for function pointer types)
 			MethodSignature.ReadStandAloneMethodSig(module, br, context);
 			return module.universe.System_IntPtr;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="137" endline="150"><![CDATA[
 
 		internal static Type[] ReadMethodSpec(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			if (br.ReadByte() != GENERICINST)
 			{
 				throw new BadImageFormatException();
 			}
 			Type[] args = new Type[br.ReadCompressedInt()];
 			for (int i = 0; i < args.Length; i++)
 			{
 				args[i] = ReadType(module, br, context);
 			}
 			for (int i = 0; i < args.Length; i++)
 			{
 				args[i] = ReadType(module, br, context);
 			}
 			return args;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="151" endline="166"><![CDATA[
 
 		private static int ReadArrayShape(ByteReader br)
 		{
 			int rank = br.ReadCompressedInt();
 			int numSizes = br.ReadCompressedInt();
 			for (int i = 0; i < numSizes; i++)
 			{
 				br.ReadCompressedInt();
 			}
 			for (int i = 0; i < numSizes; i++)
 			{
 				br.ReadCompressedInt();
 			}
 			int numLoBounds = br.ReadCompressedInt();
 			for (int i = 0; i < numLoBounds; i++)
 			{
 				br.ReadCompressedInt();
 			}
 			for (int i = 0; i < numLoBounds; i++)
 			{
 				br.ReadCompressedInt();
 			}
 			return rank;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="167" endline="179"><![CDATA[
 
 		private static Type ReadTypeOrVoid(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			if (br.PeekByte() == ELEMENT_TYPE_VOID)
 			{
 				br.ReadByte();
 				return module.universe.System_Void;
 			}
 			else
 			{
 				return ReadType(module, br, context);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="180" endline="242"><![CDATA[
 
 		// see ECMA 335 CLI spec June 2006 section 23.2.12 for this production
 		protected static Type ReadType(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			CustomModifiers mods;
 			switch (br.ReadByte())
 			{
 				case ELEMENT_TYPE_CLASS
 				case ELEMENT_TYPE_VALUETYPE
 					return ReadTypeDefOrRefEncoded(module, br, context);
 				case ELEMENT_TYPE_BOOLEAN
 					return module.universe.System_Boolean;
 				case ELEMENT_TYPE_CHAR
 					return module.universe.System_Char;
 				case ELEMENT_TYPE_I1
 					return module.universe.System_SByte;
 				case ELEMENT_TYPE_U1
 					return module.universe.System_Byte;
 				case ELEMENT_TYPE_I2
 					return module.universe.System_Int16;
 				case ELEMENT_TYPE_U2
 					return module.universe.System_UInt16;
 				case ELEMENT_TYPE_I4
 					return module.universe.System_Int32;
 				case ELEMENT_TYPE_U4
 					return module.universe.System_UInt32;
 				case ELEMENT_TYPE_I8
 					return module.universe.System_Int64;
 				case ELEMENT_TYPE_U8
 					return module.universe.System_UInt64;
 				case ELEMENT_TYPE_R4
 					return module.universe.System_Single;
 				case ELEMENT_TYPE_R8
 					return module.universe.System_Double;
 				case ELEMENT_TYPE_I
 					return module.universe.System_IntPtr;
 				case ELEMENT_TYPE_U
 					return module.universe.System_UIntPtr;
 				case ELEMENT_TYPE_STRING
 					return module.universe.System_String;
 				case ELEMENT_TYPE_OBJECT
 					return module.universe.System_Object;
 				case ELEMENT_TYPE_VAR
 					return context.GetGenericTypeArgument(br.ReadCompressedInt());
 				case ELEMENT_TYPE_MVAR
 					return context.GetGenericMethodArgument(br.ReadCompressedInt());
 				case ELEMENT_TYPE_GENERICINST
 					return ReadGenericInst(module, br, context);
 				case ELEMENT_TYPE_SZARRAY
 					mods = ReadCustomModifiers(module, br, context);
 					return ReadType(module, br, context).__MakeArrayType(mods.required, mods.optional);
 				case ELEMENT_TYPE_ARRAY
 					mods = ReadCustomModifiers(module, br, context);
 					return ReadType(module, br, context).__MakeArrayType(ReadArrayShape(br), mods.required, mods.optional);
 				case ELEMENT_TYPE_PTR
 					mods = ReadCustomModifiers(module, br, context);
 					return ReadTypeOrVoid(module, br, context).__MakePointerType(mods.required, mods.optional);
 				case ELEMENT_TYPE_FNPTR
 					return ReadFunctionPointer(module, br, context);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="243" endline="272"><![CDATA[
 
 		internal static void ReadLocalVarSig(ModuleReader module, ByteReader br, IGenericContext context, List<LocalVariableInfo> list)
 		{
 			if (br.Length < 2 || br.ReadByte() != LOCAL_SIG)
 			{
 				throw new BadImageFormatException("Invalid local variable signature");
 			}
 			int count = br.ReadCompressedInt();
 			for (int i = 0; i < count; i++)
 			{
 				if (br.PeekByte() == ELEMENT_TYPE_TYPEDBYREF)
 				{
 					br.ReadByte();
 					list.Add(new LocalVariableInfo(i, module.universe.System_TypedReference, false));
 				}
 				else
 				{
 					SkipCustomModifiers(br);
 					bool pinned = false;
 					if (br.PeekByte() == ELEMENT_TYPE_PINNED)
 					{
 						br.ReadByte();
 						pinned = true;
 					}
 					SkipCustomModifiers(br);
 					Type type = ReadTypeOrByRef(module, br, context);
 					list.Add(new LocalVariableInfo(i, type, pinned));
 				}
 			}
 			for (int i = 0; i < count; i++)
 			{
 				if (br.PeekByte() == ELEMENT_TYPE_TYPEDBYREF)
 				{
 					br.ReadByte();
 					list.Add(new LocalVariableInfo(i, module.universe.System_TypedReference, false));
 				}
 				else
 				{
 					SkipCustomModifiers(br);
 					bool pinned = false;
 					if (br.PeekByte() == ELEMENT_TYPE_PINNED)
 					{
 						br.ReadByte();
 						pinned = true;
 					}
 					SkipCustomModifiers(br);
 					Type type = ReadTypeOrByRef(module, br, context);
 					list.Add(new LocalVariableInfo(i, type, pinned));
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="273" endline="289"><![CDATA[
 
 		private static Type ReadTypeOrByRef(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			if (br.PeekByte() == ELEMENT_TYPE_BYREF)
 			{
 				br.ReadByte();
 				// LAMESPEC it is allowed (by C++/CLI, ilasm and peverify) to have custom modifiers after the BYREF
 				// (which makes sense, as it is analogous to pointers)
 				CustomModifiers mods = ReadCustomModifiers(module, br, context);
 				// C++/CLI generates void& local variables, so we need to use ReadTypeOrVoid here
 				return ReadTypeOrVoid(module, br, context).__MakeByRefType(mods.required, mods.optional);
 			}
 			else
 			{
 				return ReadType(module, br, context);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="290" endline="304"><![CDATA[
 
 		protected static Type ReadRetType(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			switch (br.PeekByte())
 			{
 				case ELEMENT_TYPE_VOID
 					br.ReadByte();
 					return module.universe.System_Void;
 				case ELEMENT_TYPE_TYPEDBYREF
 					br.ReadByte();
 					return module.universe.System_TypedReference;
 				default
 					return ReadTypeOrByRef(module, br, context);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="305" endline="316"><![CDATA[
 
 		protected static Type ReadParam(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			switch (br.PeekByte())
 			{
 				case ELEMENT_TYPE_TYPEDBYREF
 					br.ReadByte();
 					return module.universe.System_TypedReference;
 				default
 					return ReadTypeOrByRef(module, br, context);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="317" endline="459"><![CDATA[
 
 		protected static void WriteType(ModuleBuilder module, ByteBuffer bb, Type type)
 		{
 			while (type.HasElementType)
 			{
 				if (type.__IsVector)
 				{
 					bb.Write(ELEMENT_TYPE_SZARRAY);
 				}
 				else if (type.IsArray)
 				{
 					int rank = type.GetArrayRank();
 					bb.Write(ELEMENT_TYPE_ARRAY);
 					// LAMESPEC the Type production (23.2.12) doesn't include CustomMod* for arrays, but the verifier allows it and ildasm also supports it
 					WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, type.__GetRequiredCustomModifiers());
 					WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, type.__GetOptionalCustomModifiers());
 					WriteType(module, bb, type.GetElementType());
 					bb.WriteCompressedInt(rank);
 					// since a Type doesn't contain the lower/upper bounds
 					// (they act like a custom modifier, so they are part of the signature, but not of the Type),
 					// we set them to the C# compatible values and hope for the best
 					bb.WriteCompressedInt(0);	// boundsCount
 					bb.WriteCompressedInt(rank);	// loCount
 					for (int i = 0; i < rank; i++)
 					{
 						bb.WriteCompressedInt(0);
 					}
 					for (int i = 0; i < rank; i++)
 					{
 						bb.WriteCompressedInt(0);
 					}
 					return;
 				}
 				else if (type.IsByRef)
 				{
 					bb.Write(ELEMENT_TYPE_BYREF);
 				}
 				else if (type.IsPointer)
 				{
 					bb.Write(ELEMENT_TYPE_PTR);
 				}
 				WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, type.__GetRequiredCustomModifiers());
 				WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, type.__GetOptionalCustomModifiers());
 				type = type.GetElementType();
 			}
 			while (type.HasElementType)
 			{
 				if (type.__IsVector)
 				{
 					bb.Write(ELEMENT_TYPE_SZARRAY);
 				}
 				else if (type.IsArray)
 				{
 					int rank = type.GetArrayRank();
 					bb.Write(ELEMENT_TYPE_ARRAY);
 					// LAMESPEC the Type production (23.2.12) doesn't include CustomMod* for arrays, but the verifier allows it and ildasm also supports it
 					WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, type.__GetRequiredCustomModifiers());
 					WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, type.__GetOptionalCustomModifiers());
 					WriteType(module, bb, type.GetElementType());
 					bb.WriteCompressedInt(rank);
 					// since a Type doesn't contain the lower/upper bounds
 					// (they act like a custom modifier, so they are part of the signature, but not of the Type),
 					// we set them to the C# compatible values and hope for the best
 					bb.WriteCompressedInt(0);	// boundsCount
 					bb.WriteCompressedInt(rank);	// loCount
 					for (int i = 0; i < rank; i++)
 					{
 						bb.WriteCompressedInt(0);
 					}
 					return;
 				}
 				else if (type.IsByRef)
 				{
 					bb.Write(ELEMENT_TYPE_BYREF);
 				}
 				else if (type.IsPointer)
 				{
 					bb.Write(ELEMENT_TYPE_PTR);
 				}
 				WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, type.__GetRequiredCustomModifiers());
 				WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, type.__GetOptionalCustomModifiers());
 				type = type.GetElementType();
 			}
 			Universe u = module.universe;
 			if (type == u.System_Void)
 			{
 				bb.Write(ELEMENT_TYPE_VOID);
 			}
 			else if (type == u.System_Boolean)
 			{
 				bb.Write(ELEMENT_TYPE_BOOLEAN);
 			}
 			else if (type == u.System_Char)
 			{
 				bb.Write(ELEMENT_TYPE_CHAR);
 			}
 			else if (type == u.System_SByte)
 			{
 				bb.Write(ELEMENT_TYPE_I1);
 			}
 			else if (type == u.System_Byte)
 			{
 				bb.Write(ELEMENT_TYPE_U1);
 			}
 			else if (type == u.System_Int16)
 			{
 				bb.Write(ELEMENT_TYPE_I2);
 			}
 			else if (type == u.System_UInt16)
 			{
 				bb.Write(ELEMENT_TYPE_U2);
 			}
 			else if (type == u.System_Int32)
 			{
 				bb.Write(ELEMENT_TYPE_I4);
 			}
 			else if (type == u.System_UInt32)
 			{
 				bb.Write(ELEMENT_TYPE_U4);
 			}
 			else if (type == u.System_Int64)
 			{
 				bb.Write(ELEMENT_TYPE_I8);
 			}
 			else if (type == u.System_UInt64)
 			{
 				bb.Write(ELEMENT_TYPE_U8);
 			}
 			else if (type == u.System_Single)
 			{
 				bb.Write(ELEMENT_TYPE_R4);
 			}
 			else if (type == u.System_Double)
 			{
 				bb.Write(ELEMENT_TYPE_R8);
 			}
 			else if (type == u.System_String)
 			{
 				bb.Write(ELEMENT_TYPE_STRING);
 			}
 			else if (type == u.System_IntPtr)
 			{
 				bb.Write(ELEMENT_TYPE_I);
 			}
 			else if (type == u.System_UIntPtr)
 			{
 				bb.Write(ELEMENT_TYPE_U);
 			}
 			else if (type == u.System_TypedReference)
 			{
 				bb.Write(ELEMENT_TYPE_TYPEDBYREF);
 			}
 			else if (type == u.System_Object)
 			{
 				bb.Write(ELEMENT_TYPE_OBJECT);
 			}
 			else if (type.IsGenericParameter)
 			{
 				if (type is UnboundGenericMethodParameter || type.DeclaringMethod != null)
 				{
 					bb.Write(ELEMENT_TYPE_MVAR);
 				}
 				else
 				{
 					bb.Write(ELEMENT_TYPE_VAR);
 				}
 				bb.WriteCompressedInt(type.GenericParameterPosition);
 			}
 			else if (type.IsGenericType)
 			{
 				WriteGenericSignature(module, bb, type);
 			}
 			else
 			{
 				if (type.IsValueType)
 				{
 					bb.Write(ELEMENT_TYPE_VALUETYPE);
 				}
 				else
 				{
 					bb.Write(ELEMENT_TYPE_CLASS);
 				}
 				bb.WriteTypeDefOrRefEncoded(module.GetTypeToken(type).Token);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="460" endline="487"><![CDATA[
 
 		private static void WriteGenericSignature(ModuleBuilder module, ByteBuffer bb, Type type)
 		{
 			Type[] typeArguments = type.GetGenericArguments();
 			Type[][] requiredCustomModifiers = type.__GetGenericArgumentsRequiredCustomModifiers();
 			Type[][] optionalCustomModifiers = type.__GetGenericArgumentsOptionalCustomModifiers();
 			if (!type.IsGenericTypeDefinition)
 			{
 				type = type.GetGenericTypeDefinition();
 			}
 			bb.Write(ELEMENT_TYPE_GENERICINST);
 			if (type.IsValueType)
 			{
 				bb.Write(ELEMENT_TYPE_VALUETYPE);
 			}
 			else
 			{
 				bb.Write(ELEMENT_TYPE_CLASS);
 			}
 			bb.WriteTypeDefOrRefEncoded(module.GetTypeToken(type).Token);
 			bb.WriteCompressedInt(typeArguments.Length);
 			for (int i = 0; i < typeArguments.Length; i++)
 			{
 				WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, requiredCustomModifiers[i]);
 				WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, optionalCustomModifiers[i]);
 				WriteType(module, bb, typeArguments[i]);
 			}
 			for (int i = 0; i < typeArguments.Length; i++)
 			{
 				WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, requiredCustomModifiers[i]);
 				WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, optionalCustomModifiers[i]);
 				WriteType(module, bb, typeArguments[i]);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="488" endline="499"><![CDATA[
 
 		protected static void WriteCustomModifiers(ModuleBuilder module, ByteBuffer bb, byte mod, Type[] modifiers)
 		{
 			if (modifiers != null)
 			{
 				foreach (Type type in modifiers)
 				{
 					bb.Write(mod);
 					bb.WriteTypeDefOrRefEncoded(module.GetTypeTokenForMemberRef(type));
 				}
 				foreach (Type type in modifiers)
 				{
 					bb.Write(mod);
 					bb.WriteTypeDefOrRefEncoded(module.GetTypeTokenForMemberRef(type));
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="500" endline="504"><![CDATA[
 
 		protected static bool IsCustomModifier(byte b)
 		{
 			return b == ELEMENT_TYPE_CMOD_OPT || b == ELEMENT_TYPE_CMOD_REQD;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="505" endline="531"><![CDATA[
 
 		struct CustomModifiers
 		{
 			internal Type[] required;
 			internal Type[] optional;
 		}
 
 		private static CustomModifiers ReadCustomModifiers(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			CustomModifiers mods = new CustomModifiers();
 			byte b = br.PeekByte();
 			if (IsCustomModifier(b))
 			{
 				List<Type> required = new List<Type>();
 				List<Type> optional = new List<Type>();
 				while (IsCustomModifier(b))
 				{
 					bool req = br.ReadByte() == ELEMENT_TYPE_CMOD_REQD;
 					Type type = ReadTypeDefOrRefEncoded(module, br, context);
 					(req ? required 
 					b = br.PeekByte();
 				}
 				while (IsCustomModifier(b))
 				{
 					bool req = br.ReadByte() == ELEMENT_TYPE_CMOD_REQD;
 					Type type = ReadTypeDefOrRefEncoded(module, br, context);
 					(req ? required 
 					b = br.PeekByte();
 				}
 				mods.required = required.ToArray();
 				mods.optional = optional.ToArray();
 			}
 			return mods;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="532" endline="542"><![CDATA[
 
 		protected static void SkipCustomModifiers(ByteReader br)
 		{
 			byte b = br.PeekByte();
 			while (IsCustomModifier(b))
 			{
 				br.ReadByte();
 				br.ReadCompressedInt();
 				b = br.PeekByte();
 			}
 			while (IsCustomModifier(b))
 			{
 				br.ReadByte();
 				br.ReadCompressedInt();
 				b = br.PeekByte();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="543" endline="558"><![CDATA[
 
 		private static Type ReadTypeDefOrRefEncoded(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			int encoded = br.ReadCompressedInt();
 			switch (encoded & 3)
 			{
 				case 0
 					return module.ResolveType((TypeDefTable.Index << 24) + (encoded >> 2), null, null);
 				case 1
 					return module.ResolveType((TypeRefTable.Index << 24) + (encoded >> 2), null, null);
 				case 2
 					return module.ResolveType((TypeSpecTable.Index << 24) + (encoded >> 2), context);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="559" endline="589"><![CDATA[
 
 		protected static void ReadCustomModifiers(ModuleReader module, ByteReader br, IGenericContext context, out Type[] requiredCustomModifiers, out Type[] optionalCustomModifiers)
 		{
 			byte b = br.PeekByte();
 			if (IsCustomModifier(b))
 			{
 				List<Type> required = new List<Type>();
 				List<Type> optional = new List<Type>();
 				while (IsCustomModifier(b))
 				{
 					br.ReadByte();
 					Type type = ReadTypeDefOrRefEncoded(module, br, context);
 					if (b == ELEMENT_TYPE_CMOD_REQD)
 					{
 						required.Add(type);
 					}
 					else
 					{
 						optional.Add(type);
 					}
 					b = br.PeekByte();
 				}
 				while (IsCustomModifier(b))
 				{
 					br.ReadByte();
 					Type type = ReadTypeDefOrRefEncoded(module, br, context);
 					if (b == ELEMENT_TYPE_CMOD_REQD)
 					{
 						required.Add(type);
 					}
 					else
 					{
 						optional.Add(type);
 					}
 					b = br.PeekByte();
 				}
 				requiredCustomModifiers = required.ToArray();
 				optionalCustomModifiers = optional.ToArray();
 			}
 			else
 			{
 				requiredCustomModifiers = null;
 				optionalCustomModifiers = null;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="590" endline="618"><![CDATA[
 
 		// unmanaged calling convention
 		internal static void WriteStandAloneMethodSig(ModuleBuilder module, ByteBuffer bb, CallingConvention callingConvention, Type returnType, Type[] parameterTypes)
 		{
 			switch (callingConvention)
 			{
 				case CallingConvention.Cdecl
 					bb.Write((byte)0x01);	// C
 					break;
 				case CallingConvention.StdCall
 				case CallingConvention.Winapi
 					bb.Write((byte)0x02);	// STDCALL
 					break;
 				case CallingConvention.ThisCall
 					bb.Write((byte)0x03);	// THISCALL
 					break;
 				case CallingConvention.FastCall
 					bb.Write((byte)0x04);	// FASTCALL
 					break;
 				default
 					throw new ArgumentOutOfRangeException("callingConvention");
 			}
 			bb.WriteCompressedInt(parameterTypes.Length);
 			WriteType(module, bb, returnType);
 			foreach (Type t in parameterTypes)
 			{
 				WriteType(module, bb, t);
 			}
 			foreach (Type t in parameterTypes)
 			{
 				WriteType(module, bb, t);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="619" endline="651"><![CDATA[
 
 		// managed calling convention
 		internal static void WriteStandAloneMethodSig(ModuleBuilder module, ByteBuffer bb, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
 		{
 			byte flags = 0;
 			if ((callingConvention & CallingConventions.HasThis) != 0)
 			{
 				flags |= HASTHIS;
 			}
 			if ((callingConvention & CallingConventions.ExplicitThis) != 0)
 			{
 				flags |= EXPLICITTHIS;
 			}
 			if ((callingConvention & CallingConventions.VarArgs) != 0)
 			{
 				flags |= VARARG;
 			}
 			bb.Write(flags);
 			bb.WriteCompressedInt(parameterTypes.Length + optionalParameterTypes.Length);
 			WriteType(module, bb, returnType);
 			foreach (Type t in parameterTypes)
 			{
 				WriteType(module, bb, t);
 			}
 			foreach (Type t in parameterTypes)
 			{
 				WriteType(module, bb, t);
 			}
 			if (optionalParameterTypes.Length > 0)
 			{
 				bb.Write(SENTINEL);
 				foreach (Type t in optionalParameterTypes)
 				{
 					WriteType(module, bb, t);
 				}
 				foreach (Type t in optionalParameterTypes)
 				{
 					WriteType(module, bb, t);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="652" endline="665"><![CDATA[
 
 		internal static void WriteLocalVarSig(ModuleBuilder module, ByteBuffer bb, IList<LocalBuilder> locals)
 		{
 			bb.Write(LOCAL_SIG);
 			bb.WriteCompressedInt(locals.Count);
 			foreach (LocalBuilder local in locals)
 			{
 				if (local.IsPinned)
 				{
 					bb.Write(ELEMENT_TYPE_PINNED);
 				}
 				WriteType(module, bb, local.LocalType);
 			}
 			foreach (LocalBuilder local in locals)
 			{
 				if (local.IsPinned)
 				{
 					bb.Write(ELEMENT_TYPE_PINNED);
 				}
 				WriteType(module, bb, local.LocalType);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="666" endline="704"><![CDATA[
 
 		internal static void WritePropertySig(ModuleBuilder module, ByteBuffer bb, CallingConventions callingConvention,
 			Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
 			Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
 		{
 			byte flags = PROPERTY;
 			if ((callingConvention & CallingConventions.HasThis) != 0)
 			{
 				flags |= HASTHIS;
 			}
 			if ((callingConvention & CallingConventions.ExplicitThis) != 0)
 			{
 				flags |= EXPLICITTHIS;
 			}
 			if ((callingConvention & CallingConventions.VarArgs) != 0)
 			{
 				flags |= VARARG;
 			}
 			bb.Write(flags);
 			bb.WriteCompressedInt(parameterTypes == null ? 0 
 			WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, returnTypeRequiredCustomModifiers);
 			WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, returnTypeOptionalCustomModifiers);
 			WriteType(module, bb, returnType);
 			if (parameterTypes != null)
 			{
 				for (int i = 0; i < parameterTypes.Length; i++)
 				{
 					if (parameterTypeRequiredCustomModifiers != null)
 					{
 						WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, parameterTypeRequiredCustomModifiers[i]);
 					}
 					if (parameterTypeOptionalCustomModifiers != null)
 					{
 						WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, parameterTypeOptionalCustomModifiers[i]);
 					}
 					WriteType(module, bb, parameterTypes[i]);
 				}
 				for (int i = 0; i < parameterTypes.Length; i++)
 				{
 					if (parameterTypeRequiredCustomModifiers != null)
 					{
 						WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, parameterTypeRequiredCustomModifiers[i]);
 					}
 					if (parameterTypeOptionalCustomModifiers != null)
 					{
 						WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, parameterTypeOptionalCustomModifiers[i]);
 					}
 					WriteType(module, bb, parameterTypes[i]);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="705" endline="709"><![CDATA[
 
 		internal static void WriteTypeSpec(ModuleBuilder module, ByteBuffer bb, Type type)
 		{
 			WriteType(module, bb, type);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="710" endline="719"><![CDATA[
 
 		internal static void WriteMethodSpec(ModuleBuilder module, ByteBuffer bb, Type[] genArgs)
 		{
 			bb.Write(GENERICINST);
 			bb.WriteCompressedInt(genArgs.Length);
 			foreach (Type arg in genArgs)
 			{
 				WriteType(module, bb, arg);
 			}
 			foreach (Type arg in genArgs)
 			{
 				WriteType(module, bb, arg);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="720" endline="745"><![CDATA[
 
 		// this reads just the optional parameter types, from a MethodRefSig
 		internal static Type[] ReadOptionalParameterTypes(ModuleReader module, ByteReader br)
 		{
 			br.ReadByte();
 			int paramCount = br.ReadCompressedInt();
 			SkipCustomModifiers(br);
 			ReadRetType(module, br, null);
 			for (int i = 0; i < paramCount; i++)
 			{
 				if (br.PeekByte() == SENTINEL)
 				{
 					br.ReadByte();
 					Type[] types = new Type[paramCount - i];
 					for (int j = 0; j < types.Length; j++)
 					{
 						SkipCustomModifiers(br);
 						types[j] = ReadType(module, br, null);
 					}
 					for (int j = 0; j < types.Length; j++)
 					{
 						SkipCustomModifiers(br);
 						types[j] = ReadType(module, br, null);
 					}
 					return types;
 				}
 				SkipCustomModifiers(br);
 				ReadType(module, br, null);
 			}
 			for (int i = 0; i < paramCount; i++)
 			{
 				if (br.PeekByte() == SENTINEL)
 				{
 					br.ReadByte();
 					Type[] types = new Type[paramCount - i];
 					for (int j = 0; j < types.Length; j++)
 					{
 						SkipCustomModifiers(br);
 						types[j] = ReadType(module, br, null);
 					}
 					return types;
 				}
 				SkipCustomModifiers(br);
 				ReadType(module, br, null);
 			}
 			return Type.EmptyTypes;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="746" endline="759"><![CDATA[
 
 		protected static Type[] BindTypeParameters(IGenericBinder binder, Type[] types)
 		{
 			if (types == null || types.Length == 0)
 			{
 				return Type.EmptyTypes;
 			}
 			Type[] expanded = new Type[types.Length];
 			for (int i = 0; i < types.Length; i++)
 			{
 				expanded[i] = types[i].BindTypeParameters(binder);
 			}
 			for (int i = 0; i < types.Length; i++)
 			{
 				expanded[i] = types[i].BindTypeParameters(binder);
 			}
 			return expanded;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="760" endline="773"><![CDATA[
 
 		protected static Type[][] BindTypeParameters(IGenericBinder binder, Type[][] types)
 		{
 			if (types == null)
 			{
 				return null;
 			}
 			Type[][] expanded = new Type[types.Length][];
 			for (int i = 0; i < types.Length; i++)
 			{
 				expanded[i] = BindTypeParameters(binder, types[i]);
 			}
 			for (int i = 0; i < types.Length; i++)
 			{
 				expanded[i] = BindTypeParameters(binder, types[i]);
 			}
 			return expanded;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="774" endline="787"><![CDATA[
 
 		protected static Type[][][] BindTypeParameters(IGenericBinder binder, Type[][][] types)
 		{
 			if (types == null)
 			{
 				return null;
 			}
 			Type[][][] expanded = new Type[types.Length][][];
 			for (int i = 0; i < types.Length; i++)
 			{
 				expanded[i] = BindTypeParameters(binder, types[i]);
 			}
 			for (int i = 0; i < types.Length; i++)
 			{
 				expanded[i] = BindTypeParameters(binder, types[i]);
 			}
 			return expanded;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="788" endline="796"><![CDATA[
 
 		protected static Type[] BindTypeParameters(IGenericBinder binder, Type[][][] types, int index, int optOrReq)
 		{
 			if (types == null || types[index] == null)
 			{
 				return null;
 			}
 			return BindTypeParameters(binder, types[index][optOrReq]);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Signature.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterModifier.cs" startline="35" endline="37"><![CDATA[
 		{
 			values = new bool[parameterCount];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterModifier.cs" startline="38" endline="41"><![CDATA[
 
 		public bool this[int index]
 		{
 			get { return values[index]; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterModifier.cs" startline="42" endline="42"><![CDATA[
 			set { values[index] = value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Binder.cs" startline="31" endline="33"><![CDATA[
 		protected Binder()
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Binder.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Binder.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Binder.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Binder.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Binder.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Binder.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typespec.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\modifiers.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\modifiers.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\modifiers.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\modifiers.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\modifiers.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\modifiers.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\modifiers.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\modifiers.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\membercache.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\flowanalysis.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assign.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ModuleWriter.cs" startline="40" endline="300"><![CDATA[
 		{
 			moduleBuilder.FixupMethodBodyTokens();
 
 			moduleBuilder.ModuleTable.Add(0, moduleBuilder.Strings.Add(moduleBuilder.moduleName), moduleBuilder.Guids.Add(moduleBuilder.ModuleVersionId), 0, 0);
 
 			if (moduleBuilder.UserStrings.IsEmpty)
 			{
 				// for compat with Ref.Emit, if there aren't any user strings, we add one
 				moduleBuilder.UserStrings.Add(" ");
 			}
 
 			if (resources != null)
 			{
 				resources.Finish();
 			}
 
 			using (FileStream fs = new FileStream(moduleBuilder.FullyQualifiedName, FileMode.Create))
 			{
 				PEWriter writer = new PEWriter(fs);
 				switch (imageFileMachine)
 				{
 					case ImageFileMachine.I386
 						writer.Headers.FileHeader.Machine = IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386;
 						writer.Headers.FileHeader.Characteristics |= IMAGE_FILE_HEADER.IMAGE_FILE_32BIT_MACHINE;
 						break;
 					case ImageFileMachine.AMD64
 						writer.Headers.FileHeader.Machine = IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_AMD64;
 						writer.Headers.FileHeader.Characteristics |= IMAGE_FILE_HEADER.IMAGE_FILE_LARGE_ADDRESS_AWARE;
 						writer.Headers.FileHeader.SizeOfOptionalHeader = 0xF0;
 						writer.Headers.OptionalHeader.Magic = IMAGE_OPTIONAL_HEADER.IMAGE_NT_OPTIONAL_HDR64_MAGIC;
 						writer.Headers.OptionalHeader.SizeOfStackReserve = 0x400000;
 						writer.Headers.OptionalHeader.SizeOfStackCommit = 0x4000;
 						writer.Headers.OptionalHeader.SizeOfHeapCommit = 0x2000;
 						break;
 					case ImageFileMachine.IA64
 						writer.Headers.FileHeader.Machine = IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_IA64;
 						writer.Headers.FileHeader.Characteristics |= IMAGE_FILE_HEADER.IMAGE_FILE_LARGE_ADDRESS_AWARE;
 						writer.Headers.FileHeader.SizeOfOptionalHeader = 0xF0;
 						writer.Headers.OptionalHeader.Magic = IMAGE_OPTIONAL_HEADER.IMAGE_NT_OPTIONAL_HDR64_MAGIC;
 						writer.Headers.OptionalHeader.SizeOfStackReserve = 0x400000;
 						writer.Headers.OptionalHeader.SizeOfStackCommit = 0x4000;
 						writer.Headers.OptionalHeader.SizeOfHeapCommit = 0x2000;
 						break;
 					default
 						throw new ArgumentOutOfRangeException("imageFileMachine");
 				}
 				if (fileKind == PEFileKinds.Dll)
 				{
 					writer.Headers.FileHeader.Characteristics |= IMAGE_FILE_HEADER.IMAGE_FILE_DLL;
 				}
 
 				switch (fileKind)
 				{
 					case PEFileKinds.WindowApplication
 						writer.Headers.OptionalHeader.Subsystem = IMAGE_OPTIONAL_HEADER.IMAGE_SUBSYSTEM_WINDOWS_GUI;
 						break;
 					default
 						writer.Headers.OptionalHeader.Subsystem = IMAGE_OPTIONAL_HEADER.IMAGE_SUBSYSTEM_WINDOWS_CUI;
 						break;
 				}
 				writer.Headers.OptionalHeader.DllCharacteristics =
 					IMAGE_OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE |
 					IMAGE_OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_NO_SEH |
 					IMAGE_OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_NX_COMPAT |
 					IMAGE_OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE;
 
 				CliHeader cliHeader = new CliHeader();
 				cliHeader.Cb = 0x48;
 				cliHeader.MajorRuntimeVersion = 2;
 				cliHeader.MinorRuntimeVersion = moduleBuilder.MDStreamVersion < 0x20000 ? (ushort)0 
 				if ((portableExecutableKind & PortableExecutableKinds.ILOnly) != 0)
 				{
 					cliHeader.Flags |= CliHeader.COMIMAGE_FLAGS_ILONLY;
 				}
 				if ((portableExecutableKind & PortableExecutableKinds.Required32Bit) != 0)
 				{
 					cliHeader.Flags |= CliHeader.COMIMAGE_FLAGS_32BITREQUIRED;
 				}
 				if (keyPair != null)
 				{
 					cliHeader.Flags |= CliHeader.COMIMAGE_FLAGS_STRONGNAMESIGNED;
 				}
 				if (moduleBuilder.IsPseudoToken(entryPointToken))
 				{
 					entryPointToken = moduleBuilder.ResolvePseudoToken(entryPointToken);
 				}
 				cliHeader.EntryPointToken = (uint)entryPointToken;
 
 				moduleBuilder.Strings.Freeze();
 				moduleBuilder.UserStrings.Freeze();
 				moduleBuilder.Guids.Freeze();
 				moduleBuilder.Blobs.Freeze();
 				MetadataWriter mw = new MetadataWriter(moduleBuilder, fs);
 				moduleBuilder.Tables.Freeze(mw);
 				TextSection code = new TextSection(writer, cliHeader, moduleBuilder, ComputeStrongNameSignatureLength(publicKey));
 
 				// Import Directory
 				writer.Headers.OptionalHeader.DataDirectory[1].VirtualAddress = code.ImportDirectoryRVA;
 				writer.Headers.OptionalHeader.DataDirectory[1].Size = code.ImportDirectoryLength;
 
 				// Import Address Table Directory
 				writer.Headers.OptionalHeader.DataDirectory[12].VirtualAddress = code.ImportAddressTableRVA;
 				writer.Headers.OptionalHeader.DataDirectory[12].Size = code.ImportAddressTableLength;
 
 				// COM Descriptor Directory
 				writer.Headers.OptionalHeader.DataDirectory[14].VirtualAddress = code.ComDescriptorRVA;
 				writer.Headers.OptionalHeader.DataDirectory[14].Size = code.ComDescriptorLength;
 
 				// Debug Directory
 				if (code.DebugDirectoryLength != 0)
 				{
 					writer.Headers.OptionalHeader.DataDirectory[6].VirtualAddress = code.DebugDirectoryRVA;
 					writer.Headers.OptionalHeader.DataDirectory[6].Size = code.DebugDirectoryLength;
 				}
 
 				writer.Headers.FileHeader.NumberOfSections = 2;
 
 				if (moduleBuilder.initializedData.Length != 0)
 				{
 					writer.Headers.FileHeader.NumberOfSections++;
 				}
 
 				if (resources != null && resources.Length != 0)
 				{
 					writer.Headers.FileHeader.NumberOfSections++;
 				}
 
 				SectionHeader text = new SectionHeader();
 				text.Name = ".text";
 				text.VirtualAddress = code.BaseRVA;
 				text.VirtualSize = (uint)code.Length;
 				text.PointerToRawData = code.PointerToRawData;
 				text.SizeOfRawData = writer.ToFileAlignment((uint)code.Length);
 				text.Characteristics = SectionHeader.IMAGE_SCN_CNT_CODE | SectionHeader.IMAGE_SCN_MEM_EXECUTE | SectionHeader.IMAGE_SCN_MEM_READ;
 
 				SectionHeader sdata = new SectionHeader();
 				sdata.Name = ".sdata";
 				sdata.VirtualAddress = text.VirtualAddress + writer.ToSectionAlignment(text.VirtualSize);
 				sdata.VirtualSize = (uint)moduleBuilder.initializedData.Length;
 				sdata.PointerToRawData = text.PointerToRawData + text.SizeOfRawData;
 				sdata.SizeOfRawData = writer.ToFileAlignment((uint)moduleBuilder.initializedData.Length);
 				sdata.Characteristics = SectionHeader.IMAGE_SCN_CNT_INITIALIZED_DATA | SectionHeader.IMAGE_SCN_MEM_READ | SectionHeader.IMAGE_SCN_MEM_WRITE;
 
 				SectionHeader rsrc = new SectionHeader();
 				rsrc.Name = ".rsrc";
 				rsrc.VirtualAddress = sdata.VirtualAddress + writer.ToSectionAlignment(sdata.VirtualSize);
 				rsrc.PointerToRawData = sdata.PointerToRawData + sdata.SizeOfRawData;
 				rsrc.VirtualSize = resources == null ? 0 
 				rsrc.SizeOfRawData = writer.ToFileAlignment(rsrc.VirtualSize);
 				rsrc.Characteristics = SectionHeader.IMAGE_SCN_MEM_READ | SectionHeader.IMAGE_SCN_CNT_INITIALIZED_DATA;
 
 				if (rsrc.SizeOfRawData != 0)
 				{
 					// Resource Directory
 					writer.Headers.OptionalHeader.DataDirectory[2].VirtualAddress = rsrc.VirtualAddress;
 					writer.Headers.OptionalHeader.DataDirectory[2].Size = rsrc.VirtualSize;
 				}
 
 				SectionHeader reloc = new SectionHeader();
 				reloc.Name = ".reloc";
 				reloc.VirtualAddress = rsrc.VirtualAddress + writer.ToSectionAlignment(rsrc.VirtualSize);
 				reloc.VirtualSize = 12;
 				reloc.PointerToRawData = rsrc.PointerToRawData + rsrc.SizeOfRawData;
 				reloc.SizeOfRawData = writer.ToFileAlignment(reloc.VirtualSize);
 				reloc.Characteristics = SectionHeader.IMAGE_SCN_MEM_READ | SectionHeader.IMAGE_SCN_CNT_INITIALIZED_DATA | SectionHeader.IMAGE_SCN_MEM_DISCARDABLE;
 
 				// Base Relocation Directory
 				writer.Headers.OptionalHeader.DataDirectory[5].VirtualAddress = reloc.VirtualAddress;
 				writer.Headers.OptionalHeader.DataDirectory[5].Size = reloc.VirtualSize;
 
 				writer.Headers.OptionalHeader.SizeOfCode = text.SizeOfRawData;
 				writer.Headers.OptionalHeader.SizeOfInitializedData = sdata.SizeOfRawData + rsrc.SizeOfRawData + reloc.SizeOfRawData;
 				writer.Headers.OptionalHeader.SizeOfUninitializedData = 0;
 				writer.Headers.OptionalHeader.SizeOfImage = reloc.VirtualAddress + writer.ToSectionAlignment(reloc.VirtualSize);
 				writer.Headers.OptionalHeader.SizeOfHeaders = text.PointerToRawData;
 				writer.Headers.OptionalHeader.BaseOfCode = code.BaseRVA;
 				writer.Headers.OptionalHeader.BaseOfData = sdata.VirtualAddress;
 				writer.Headers.OptionalHeader.ImageBase = (ulong)moduleBuilder.__ImageBase;
 
 				if (imageFileMachine == ImageFileMachine.IA64)
 				{
 					// apparently for IA64 AddressOfEntryPoint points to the address of the entry point
 					// (i.e. there is an additional layer of indirection), so we add the offset to the pointer
 					writer.Headers.OptionalHeader.AddressOfEntryPoint = code.StartupStubRVA + 0x20;
 				}
 				else
 				{
 					writer.Headers.OptionalHeader.AddressOfEntryPoint = code.StartupStubRVA;
 				}
 
 				writer.WritePEHeaders();
 				writer.WriteSectionHeader(text);
 				if (sdata.SizeOfRawData != 0)
 				{
 					writer.WriteSectionHeader(sdata);
 				}
 				if (rsrc.SizeOfRawData != 0)
 				{
 					writer.WriteSectionHeader(rsrc);
 				}
 				writer.WriteSectionHeader(reloc);
 
 				fs.Seek(text.PointerToRawData, SeekOrigin.Begin);
 				code.Write(mw, (int)sdata.VirtualAddress);
 
 				fs.Seek(sdata.PointerToRawData, SeekOrigin.Begin);
 				mw.Write(moduleBuilder.initializedData);
 
 				if (rsrc.SizeOfRawData != 0)
 				{
 					fs.Seek(rsrc.PointerToRawData, SeekOrigin.Begin);
 					resources.Write(mw, rsrc.VirtualAddress);
 				}
 
 				fs.Seek(reloc.PointerToRawData, SeekOrigin.Begin);
 				// .reloc section
 				uint relocAddress = code.StartupStubRVA;
 				switch (imageFileMachine)
 				{
 					case ImageFileMachine.I386
 					case ImageFileMachine.AMD64
 						relocAddress += 2;
 						break;
 					case ImageFileMachine.IA64
 						relocAddress += 0x20;
 						break;
 				}
 				uint pageRVA = relocAddress & ~0xFFFU;
 				mw.Write(pageRVA);	// PageRVA
 				mw.Write(0x000C);	// Block Size
 				if (imageFileMachine == ImageFileMachine.I386)
 				{
 					mw.Write(0x3000 + relocAddress - pageRVA);				// Type / Offset
 				}
 				else if (imageFileMachine == ImageFileMachine.AMD64)
 				{
 					mw.Write(0xA000 + relocAddress - pageRVA);				// Type / Offset
 				}
 				else if (imageFileMachine == ImageFileMachine.IA64)
 				{
 					// on IA64 the StartupStubRVA is 16 byte aligned, so these two addresses won't cross a page boundary
 					mw.Write((short)(0xA000 + relocAddress - pageRVA));		// Type / Offset
 					mw.Write((short)(0xA000 + relocAddress - pageRVA + 8));	// Type / Offset
 				}
 
 				// file alignment
 				mw.Write(new byte[writer.Headers.OptionalHeader.FileAlignment - reloc.VirtualSize]);
 
 				// do the strong naming
 				if (keyPair != null)
 				{
 					StrongName(fs, keyPair, writer.HeaderSize, text.PointerToRawData, code.StrongNameSignatureRVA - text.VirtualAddress + text.PointerToRawData, code.StrongNameSignatureLength);
 				}
 			}
 
 			if (moduleBuilder.symbolWriter != null)
 			{
 				moduleBuilder.WriteSymbolTokenMap();
 				moduleBuilder.symbolWriter.Close();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ModuleWriter.cs" startline="301" endline="319"><![CDATA[
 
 		private static int ComputeStrongNameSignatureLength(byte[] publicKey)
 		{
 			if (publicKey == null)
 			{
 				return 0;
 			}
 			else if (publicKey.Length == 16)
 			{
 				// it must be the ECMA pseudo public key, we don't know the key size of the real key, but currently both Mono and Microsoft use a 1024 bit key size
 				return 128;
 			}
 			else
 			{
 				// for the supported strong naming algorithms, the signature size is the same as the key size
 				// (we have to subtract 32 for the header)
 				return publicKey.Length - 32;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ModuleWriter.cs" startline="320" endline="370"><![CDATA[
 
 		private static void StrongName(FileStream fs, StrongNameKeyPair keyPair, uint headerLength, uint textSectionFileOffset, uint strongNameSignatureFileOffset, uint strongNameSignatureLength)
 		{
 			SHA1Managed hash = new SHA1Managed();
 			using (CryptoStream cs = new CryptoStream(Stream.Null, hash, CryptoStreamMode.Write))
 			{
 				fs.Seek(0, SeekOrigin.Begin);
 				byte[] buf = new byte[8192];
 				HashChunk(fs, cs, buf, (int)headerLength);
 				fs.Seek(textSectionFileOffset, SeekOrigin.Begin);
 				HashChunk(fs, cs, buf, (int)(strongNameSignatureFileOffset - textSectionFileOffset));
 				fs.Seek(strongNameSignatureLength, SeekOrigin.Current);
 				HashChunk(fs, cs, buf, (int)(fs.Length - (strongNameSignatureFileOffset + strongNameSignatureLength)));
 			}
 			using (RSA rsa = CryptoHack.CreateRSA(keyPair))
 			{
 				RSAPKCS1SignatureFormatter sign = new RSAPKCS1SignatureFormatter(rsa);
 				byte[] signature = sign.CreateSignature(hash);
 				Array.Reverse(signature);
 				if (signature.Length != strongNameSignatureLength)
 				{
 					throw new InvalidOperationException("Signature length mismatch");
 				}
 				fs.Seek(strongNameSignatureFileOffset, SeekOrigin.Begin);
 				fs.Write(signature, 0, signature.Length);
 			}
 
 			// compute the PE checksum
 			fs.Seek(0, SeekOrigin.Begin);
 			int count = (int)fs.Length / 4;
 			BinaryReader br = new BinaryReader(fs);
 			long sum = 0;
 			for (int i = 0; i < count; i++)
 			{
 				sum += br.ReadUInt32();
 				int carry = (int)(sum >> 32);
 				sum &= 0xFFFFFFFFU;
 				sum += carry;
 			}
 			for (int i = 0; i < count; i++)
 			{
 				sum += br.ReadUInt32();
 				int carry = (int)(sum >> 32);
 				sum &= 0xFFFFFFFFU;
 				sum += carry;
 			}
 			while ((sum >> 16) != 0)
 			{
 				sum = (sum & 0xFFFF) + (sum >> 16);
 			}
 			while ((sum >> 16) != 0)
 			{
 				sum = (sum & 0xFFFF) + (sum >> 16);
 			}
 			sum += fs.Length;
 
 			// write the PE checksum, note that it is always at offset 0xD8 in the file
 			ByteBuffer bb = new ByteBuffer(4);
 			bb.Write((int)sum);
 			fs.Seek(0xD8, SeekOrigin.Begin);
 			bb.WriteTo(fs);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ModuleWriter.cs" startline="371" endline="380"><![CDATA[
 
 		internal static void HashChunk(FileStream fs, CryptoStream cs, byte[] buf, int length)
 		{
 			while (length > 0)
 			{
 				int read = fs.Read(buf, 0, Math.Min(buf.Length, length));
 				cs.Write(buf, 0, read);
 				length -= read;
 			}
 			while (length > 0)
 			{
 				int read = fs.Read(buf, 0, Math.Min(buf.Length, length));
 				cs.Write(buf, 0, read);
 				length -= read;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\MetadataRW.cs" startline="58" endline="86"><![CDATA[
 		protected MetadataRW(Module module, bool bigStrings, bool bigGuids, bool bigBlobs)
 		{
 			this.bigStrings = bigStrings;
 			this.bigGuids = bigGuids;
 			this.bigBlobs = bigBlobs;
 			this.bigField = module.Field.IsBig;
 			this.bigMethodDef = module.MethodDef.IsBig;
 			this.bigParam = module.Param.IsBig;
 			this.bigTypeDef = module.TypeDef.IsBig;
 			this.bigProperty = module.Property.IsBig;
 			this.bigEvent = module.Event.IsBig;
 			this.bigGenericParam = module.GenericParam.IsBig;
 			this.bigModuleRef = module.ModuleRef.IsBig;
 			this.bigResolutionScope = IsBig(2, module.ModuleTable, module.ModuleRef, module.AssemblyRef, module.TypeRef);
 			this.bigTypeDefOrRef = IsBig(2, module.TypeDef, module.TypeRef, module.TypeSpec);
 			this.bigMemberRefParent = IsBig(3, module.TypeDef, module.TypeRef, module.ModuleRef, module.MethodDef, module.TypeSpec);
 			this.bigMethodDefOrRef = IsBig(1, module.MethodDef, module.MemberRef);
 			this.bigHasCustomAttribute = IsBig(5, module.MethodDef, module.Field, module.TypeRef, module.TypeDef, module.Param, module.InterfaceImpl, module.MemberRef,
 				module.ModuleTable, /*module.Permission,*/ module.Property, module.Event, module.StandAloneSig, module.ModuleRef, module.TypeSpec, module.AssemblyTable,
 				module.AssemblyRef, module.File, module.ExportedType, module.ManifestResource);
 			this.bigCustomAttributeType = IsBig(3, module.MethodDef, module.MemberRef);
 			this.bigHasConstant = IsBig(2, module.Field, module.Param, module.Property);
 			this.bigHasSemantics = IsBig(1, module.Event, module.Property);
 			this.bigHasFieldMarshal = IsBig(1, module.Field, module.Param);
 			this.bigHasDeclSecurity = IsBig(2, module.TypeDef, module.MethodDef, module.AssemblyTable);
 			this.bigTypeOrMethodDef = IsBig(1, module.TypeDef, module.MethodDef);
 			this.bigMemberForwarded = IsBig(1, module.Field, module.MethodDef);
 			this.bigImplementation = IsBig(2, module.File, module.AssemblyRef, module.ExportedType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\MetadataRW.cs" startline="87" endline="99"><![CDATA[
 
 		private static bool IsBig(int bitsUsed, params Table[] tables)
 		{
 			int limit = 1 << (16 - bitsUsed);
 			foreach (Table table in tables)
 			{
 				if (table.RowCount >= limit)
 				{
 					return true;
 				}
 			}
 			foreach (Table table in tables)
 			{
 				if (table.RowCount >= limit)
 				{
 					return true;
 				}
 			}
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="37" endline="44"><![CDATA[
 		private readonly byte[] buffer = new byte[8];
 
 		internal MetadataWriter(ModuleBuilder module, Stream stream)
 			
 		{
 			this.moduleBuilder = module;
 			this.stream = stream;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="45" endline="48"><![CDATA[
 
 		internal ModuleBuilder ModuleBuilder
 		{
 			get { return moduleBuilder; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="49" endline="53"><![CDATA[
 		}
 
 		internal int Position
 		{
 			get { return (int)stream.Position; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="54" endline="59"><![CDATA[
 		}
 
 		internal void Write(ByteBuffer bb)
 		{
 			bb.WriteTo(stream);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="60" endline="64"><![CDATA[
 
 		internal void Write(byte[] value)
 		{
 			stream.Write(value, 0, value.Length);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="65" endline="69"><![CDATA[
 
 		internal void Write(byte value)
 		{
 			stream.WriteByte(value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="70" endline="74"><![CDATA[
 
 		internal void Write(ushort value)
 		{
 			Write((short)value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="75" endline="81"><![CDATA[
 
 		internal void Write(short value)
 		{
 			buffer[0] = (byte)value;
 			buffer[1] = (byte)(value >> 8);
 			stream.Write(buffer, 0, 2);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="82" endline="86"><![CDATA[
 
 		internal void Write(uint value)
 		{
 			Write((int)value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="87" endline="95"><![CDATA[
 
 		internal void Write(int value)
 		{
 			buffer[0] = (byte)value;
 			buffer[1] = (byte)(value >> 8);
 			buffer[2] = (byte)(value >> 16);
 			buffer[3] = (byte)(value >> 24);
 			stream.Write(buffer, 0, 4);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="96" endline="100"><![CDATA[
 
 		internal void Write(ulong value)
 		{
 			Write((long)value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="101" endline="113"><![CDATA[
 
 		internal void Write(long value)
 		{
 			buffer[0] = (byte)value;
 			buffer[1] = (byte)(value >> 8);
 			buffer[2] = (byte)(value >> 16);
 			buffer[3] = (byte)(value >> 24);
 			buffer[4] = (byte)(value >> 32);
 			buffer[5] = (byte)(value >> 40);
 			buffer[6] = (byte)(value >> 48);
 			buffer[7] = (byte)(value >> 56);
 			stream.Write(buffer, 0, 8);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="114" endline="133"><![CDATA[
 
 		internal void WriteCompressedInt(int value)
 		{
 			if (value <= 0x7F)
 			{
 				Write((byte)value);
 			}
 			else if (value <= 0x3FFF)
 			{
 				Write((byte)(0x80 | (value >> 8)));
 				Write((byte)value);
 			}
 			else
 			{
 				Write((byte)(0xC0 | (value >> 24)));
 				Write((byte)(value >> 16));
 				Write((byte)(value >> 8));
 				Write((byte)value);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="134" endline="149"><![CDATA[
 
 		internal static int GetCompressedIntLength(int value)
 		{
 			if (value <= 0x7F)
 			{
 				return 1;
 			}
 			else if (value <= 0x3FFF)
 			{
 				return 2;
 			}
 			else
 			{
 				return 4;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="150" endline="161"><![CDATA[
 
 		internal void WriteStringIndex(int index)
 		{
 			if (bigStrings)
 			{
 				Write(index);
 			}
 			else
 			{
 				Write((short)index);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="162" endline="173"><![CDATA[
 
 		internal void WriteGuidIndex(int index)
 		{
 			if (bigGuids)
 			{
 				Write(index);
 			}
 			else
 			{
 				Write((short)index);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="174" endline="185"><![CDATA[
 
 		internal void WriteBlobIndex(int index)
 		{
 			if (bigBlobs)
 			{
 				Write(index);
 			}
 			else
 			{
 				Write((short)index);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="186" endline="213"><![CDATA[
 
 		internal void WriteTypeDefOrRef(int token)
 		{
 			switch (token >> 24)
 			{
 				case 0
 					break;
 				case TypeDefTable.Index
 					token = (token & 0xFFFFFF) << 2 | 0;
 					break;
 				case TypeRefTable.Index
 					token = (token & 0xFFFFFF) << 2 | 1;
 					break;
 				case TypeSpecTable.Index
 					token = (token & 0xFFFFFF) << 2 | 2;
 					break;
 				default
 					throw new InvalidOperationException();
 			}
 			if (bigTypeDefOrRef)
 			{
 				Write(token);
 			}
 			else
 			{
 				Write((short)token);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="214" endline="225"><![CDATA[
 
 		internal void WriteEncodedTypeDefOrRef(int encodedToken)
 		{
 			if (bigTypeDefOrRef)
 			{
 				Write(encodedToken);
 			}
 			else
 			{
 				Write((short)encodedToken);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="226" endline="239"><![CDATA[
 
 		internal void WriteHasCustomAttribute(int encodedToken)
 		{
 			// NOTE because we've already had to do the encoding (to be able to sort the table)
 			// here we simple write the value
 			if (bigHasCustomAttribute)
 			{
 				Write(encodedToken);
 			}
 			else
 			{
 				Write((short)encodedToken);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="240" endline="262"><![CDATA[
 
 		internal void WriteCustomAttributeType(int token)
 		{
 			switch (token >> 24)
 			{
 				case MethodDefTable.Index
 					token = (token & 0xFFFFFF) << 3 | 2;
 					break;
 				case MemberRefTable.Index
 					token = (token & 0xFFFFFF) << 3 | 3;
 					break;
 				default
 					throw new InvalidOperationException();
 			}
 			if (bigCustomAttributeType)
 			{
 				Write(token);
 			}
 			else
 			{
 				Write((short)token);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="263" endline="274"><![CDATA[
 
 		internal void WriteField(int index)
 		{
 			if (bigField)
 			{
 				Write(index & 0xFFFFFF);
 			}
 			else
 			{
 				Write((short)index);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="275" endline="286"><![CDATA[
 
 		internal void WriteMethodDef(int index)
 		{
 			if (bigMethodDef)
 			{
 				Write(index & 0xFFFFFF);
 			}
 			else
 			{
 				Write((short)index);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="287" endline="298"><![CDATA[
 
 		internal void WriteParam(int index)
 		{
 			if (bigParam)
 			{
 				Write(index & 0xFFFFFF);
 			}
 			else
 			{
 				Write((short)index);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="299" endline="310"><![CDATA[
 
 		internal void WriteTypeDef(int index)
 		{
 			if (bigTypeDef)
 			{
 				Write(index & 0xFFFFFF);
 			}
 			else
 			{
 				Write((short)index);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="311" endline="322"><![CDATA[
 
 		internal void WriteEvent(int index)
 		{
 			if (bigEvent)
 			{
 				Write(index & 0xFFFFFF);
 			}
 			else
 			{
 				Write((short)index);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="323" endline="334"><![CDATA[
 
 		internal void WriteProperty(int index)
 		{
 			if (bigProperty)
 			{
 				Write(index & 0xFFFFFF);
 			}
 			else
 			{
 				Write((short)index);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="335" endline="346"><![CDATA[
 
 		internal void WriteGenericParam(int index)
 		{
 			if (bigGenericParam)
 			{
 				Write(index & 0xFFFFFF);
 			}
 			else
 			{
 				Write((short)index);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="347" endline="358"><![CDATA[
 
 		internal void WriteModuleRef(int index)
 		{
 			if (bigModuleRef)
 			{
 				Write(index & 0xFFFFFF);
 			}
 			else
 			{
 				Write((short)index);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="359" endline="387"><![CDATA[
 
 		internal void WriteResolutionScope(int token)
 		{
 			switch (token >> 24)
 			{
 				case ModuleTable.Index
 					token = (token & 0xFFFFFF) << 2 | 0;
 					break;
 				case ModuleRefTable.Index
 					token = (token & 0xFFFFFF) << 2 | 1;
 					break;
 				case AssemblyRefTable.Index
 					token = (token & 0xFFFFFF) << 2 | 2;
 					break;
 				case TypeRefTable.Index
 					token = (token & 0xFFFFFF) << 2 | 3;
 					break;
 				default
 					throw new InvalidOperationException();
 			}
 			if (bigResolutionScope)
 			{
 				Write(token);
 			}
 			else
 			{
 				Write((short)token);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="388" endline="419"><![CDATA[
 
 		internal void WriteMemberRefParent(int token)
 		{
 			switch (token >> 24)
 			{
 				case TypeDefTable.Index
 					token = (token & 0xFFFFFF) << 3 | 0;
 					break;
 				case TypeRefTable.Index
 					token = (token & 0xFFFFFF) << 3 | 1;
 					break;
 				case ModuleRefTable.Index
 					token = (token & 0xFFFFFF) << 3 | 2;
 					break;
 				case MethodDefTable.Index
 					token = (token & 0xFFFFFF) << 3 | 3;
 					break;
 				case TypeSpecTable.Index
 					token = (token & 0xFFFFFF) << 3 | 4;
 					break;
 				default
 					throw new InvalidOperationException();
 			}
 			if (bigMemberRefParent)
 			{
 				Write(token);
 			}
 			else
 			{
 				Write((short)token);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="420" endline="442"><![CDATA[
 
 		internal void WriteMethodDefOrRef(int token)
 		{
 			switch (token >> 24)
 			{
 				case MethodDefTable.Index
 					token = (token & 0xFFFFFF) << 1 | 0;
 					break;
 				case MemberRefTable.Index
 					token = (token & 0xFFFFFF) << 1 | 1;
 					break;
 				default
 					throw new InvalidOperationException();
 			}
 			if (bigMethodDefOrRef)
 			{
 				Write(token);
 			}
 			else
 			{
 				Write((short)token);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="443" endline="456"><![CDATA[
 
 		internal void WriteHasConstant(int encodedToken)
 		{
 			// NOTE because we've already had to do the encoding (to be able to sort the table)
 			// here we simple write the value
 			if (bigHasConstant)
 			{
 				Write(encodedToken);
 			}
 			else
 			{
 				Write((short)encodedToken);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="457" endline="470"><![CDATA[
 
 		internal void WriteHasSemantics(int encodedToken)
 		{
 			// NOTE because we've already had to do the encoding (to be able to sort the table)
 			// here we simple write the value
 			if (bigHasSemantics)
 			{
 				Write(encodedToken);
 			}
 			else
 			{
 				Write((short)encodedToken);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="471" endline="498"><![CDATA[
 
 		internal void WriteImplementation(int token)
 		{
 			switch (token >> 24)
 			{
 				case 0
 					break;
 				case FileTable.Index
 					token = (token & 0xFFFFFF) << 2 | 0;
 					break;
 				case AssemblyRefTable.Index
 					token = (token & 0xFFFFFF) << 2 | 1;
 					break;
 				case ExportedTypeTable.Index
 					token = (token & 0xFFFFFF) << 2 | 2;
 					break;
 				default
 					throw new InvalidOperationException();
 			}
 			if (bigImplementation)
 			{
 				Write(token);
 			}
 			else
 			{
 				Write((short)token);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="499" endline="512"><![CDATA[
 
 		internal void WriteTypeOrMethodDef(int encodedToken)
 		{
 			// NOTE because we've already had to do the encoding (to be able to sort the table)
 			// here we simple write the value
 			if (bigTypeOrMethodDef)
 			{
 				Write(encodedToken);
 			}
 			else
 			{
 				Write((short)encodedToken);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="513" endline="526"><![CDATA[
 
 		internal void WriteHasDeclSecurity(int encodedToken)
 		{
 			// NOTE because we've already had to do the encoding (to be able to sort the table)
 			// here we simple write the value
 			if (bigHasDeclSecurity)
 			{
 				Write(encodedToken);
 			}
 			else
 			{
 				Write((short)encodedToken);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="527" endline="549"><![CDATA[
 
 		internal void WriteMemberForwarded(int token)
 		{
 			switch (token >> 24)
 			{
 				case FieldTable.Index
 					token = (token & 0xFFFFFF) << 1 | 0;
 				    break;
 				case MethodDefTable.Index
 					token = (token & 0xFFFFFF) << 1 | 1;
 					break;
 				default
 					throw new InvalidOperationException();
 			}
 			if (bigMemberForwarded)
 			{
 				Write(token);
 			}
 			else
 			{
 				Write((short)token);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="550" endline="563"><![CDATA[
 
 		internal void WriteHasFieldMarshal(int encodedToken)
 		{
 			// NOTE because we've already had to do the encoding (to be able to sort the table)
 			// here we simple write the value
 			if (bigHasFieldMarshal)
 			{
 				Write(encodedToken & 0xFFFFFF);
 			}
 			else
 			{
 				Write((short)encodedToken);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\MetadataWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="42" endline="42"><![CDATA[
 			get { throw new NotSupportedException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="43" endline="53"><![CDATA[
 		}
 
 		public abstract Module Module
 		{
 			get;
 		}
 
 		public bool IsDefined(Type attributeType, bool inherit)
 		{
 			return CustomAttributeData.__GetCustomAttributes(this, attributeType, inherit).Count != 0;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="54" endline="58"><![CDATA[
 
 		public IList<CustomAttributeData> __GetCustomAttributes(Type attributeType, bool inherit)
 		{
 			return CustomAttributeData.__GetCustomAttributes(this, attributeType, inherit);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="59" endline="63"><![CDATA[
 
 		public static bool operator ==(MemberInfo m1, MemberInfo m2)
 		{
 			return ReferenceEquals(m1, m2) || (!ReferenceEquals(m1, null) && m1.Equals(m2));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="64" endline="68"><![CDATA[
 
 		public static bool operator !=(MemberInfo m1, MemberInfo m2)
 		{
 			return !(m1 == m2);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="69" endline="73"><![CDATA[
 
 		internal virtual IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			return this.Module.GetCustomAttributes(this.MetadataToken, attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="74" endline="79"><![CDATA[
 
 		internal static bool BindingFlagsMatch(bool state, BindingFlags flags, BindingFlags trueFlag, BindingFlags falseFlag)
 		{
 			return (state && (flags & trueFlag) == trueFlag)
 				|| (!state && (flags & falseFlag) == falseFlag);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MemberInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="50" endline="50"><![CDATA[
 			get { return null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="51" endline="55"><![CDATA[
 		}
 
 		public sealed override MemberTypes MemberType
 		{
 			get { return IsNested ? MemberTypes.NestedType 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="56" endline="61"><![CDATA[
 		}
 
 		public virtual string AssemblyQualifiedName
 		{
 			// NOTE the assembly name is not escaped here, only when used in a generic type instantiation
 			get { return this.FullName + ", " + this.Assembly.FullName; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="62" endline="77"><![CDATA[
 		}
 
 		public abstract Type BaseType
 		{
 			get;
 		}
 
 		public abstract TypeAttributes Attributes
 		{
 			get;
 		}
 
 		public virtual Type GetElementType()
 		{
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="78" endline="81"><![CDATA[
 
 		internal virtual void CheckBaked()
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="82" endline="86"><![CDATA[
 
 		public virtual Type[] __GetDeclaredTypes()
 		{
 			return Type.EmptyTypes;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="87" endline="91"><![CDATA[
 
 		public virtual Type[] __GetDeclaredInterfaces()
 		{
 			return Type.EmptyTypes;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="92" endline="96"><![CDATA[
 
 		public virtual MethodBase[] __GetDeclaredMethods()
 		{
 			return Empty<MethodBase>.Array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="97" endline="100"><![CDATA[
 
 		public virtual __MethodImplMap __GetMethodImplMap()
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="101" endline="106"><![CDATA[
 		}
 
 		public virtual FieldInfo[] __GetDeclaredFields()
 		{
 			return Empty<FieldInfo>.Array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="107" endline="111"><![CDATA[
 
 		public virtual EventInfo[] __GetDeclaredEvents()
 		{
 			return Empty<EventInfo>.Array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="112" endline="116"><![CDATA[
 
 		public virtual PropertyInfo[] __GetDeclaredProperties()
 		{
 			return Empty<PropertyInfo>.Array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="117" endline="121"><![CDATA[
 
 		public virtual Type[] __GetRequiredCustomModifiers()
 		{
 			return Type.EmptyTypes;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="122" endline="126"><![CDATA[
 
 		public virtual Type[] __GetOptionalCustomModifiers()
 		{
 			return Type.EmptyTypes;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="127" endline="130"><![CDATA[
 
 		public virtual bool HasElementType
 		{
 			get { return false; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="131" endline="135"><![CDATA[
 		}
 
 		public virtual bool IsArray
 		{
 			get { return false; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="136" endline="140"><![CDATA[
 		}
 
 		public virtual bool __IsVector
 		{
 			get { return false; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="141" endline="145"><![CDATA[
 		}
 
 		public virtual bool IsByRef
 		{
 			get { return false; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="146" endline="150"><![CDATA[
 		}
 
 		public virtual bool IsPointer
 		{
 			get { return false; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="151" endline="160"><![CDATA[
 		}
 
 		public virtual bool IsValueType
 		{
 			get
 			{
 				Type baseType = this.BaseType;
 				return baseType == this.Module.universe.System_Enum
 					|| (baseType == this.Module.universe.System_ValueType && this != this.Module.universe.System_Enum);
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="161" endline="165"><![CDATA[
 		}
 
 		public virtual bool IsGenericParameter
 		{
 			get { return false; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="166" endline="170"><![CDATA[
 		}
 
 		public virtual int GenericParameterPosition
 		{
 			get { throw new NotSupportedException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="171" endline="175"><![CDATA[
 		}
 
 		public virtual MethodBase DeclaringMethod
 		{
 			get { return null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="176" endline="180"><![CDATA[
 		}
 
 		public virtual Type UnderlyingSystemType
 		{
 			get { return this; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="181" endline="185"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="186" endline="194"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get
 			{
 				string fullname = FullName;
 				return fullname.Substring(fullname.LastIndexOf('.') + 1);
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="195" endline="208"><![CDATA[
 		}
 
 		public virtual string Namespace
 		{
 			get
 			{
 				if (IsNested)
 				{
 					return null;
 				}
 				string fullname = FullName;
 				int index = fullname.LastIndexOf('.');
 				return index < 0 ? null 
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="209" endline="213"><![CDATA[
 		}
 
 		internal virtual int GetModuleBuilderToken()
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="214" endline="219"><![CDATA[
 		}
 
 		public bool Equals(Type type)
 		{
 			return !ReferenceEquals(type, null) && ReferenceEquals(type.UnderlyingSystemType, this.UnderlyingSystemType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="220" endline="224"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			return Equals(obj as Type);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="225" endline="230"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			Type type = this.UnderlyingSystemType;
 			return ReferenceEquals(type, this) ? base.GetHashCode() 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="231" endline="235"><![CDATA[
 
 		public virtual Type[] GetGenericArguments()
 		{
 			return Type.EmptyTypes;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="236" endline="240"><![CDATA[
 
 		public virtual Type[][] __GetGenericArgumentsRequiredCustomModifiers()
 		{
 			return Empty<Type[]>.Array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="241" endline="245"><![CDATA[
 
 		public virtual Type[][] __GetGenericArgumentsOptionalCustomModifiers()
 		{
 			return Empty<Type[]>.Array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="246" endline="249"><![CDATA[
 
 		public virtual Type GetGenericTypeDefinition()
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="250" endline="254"><![CDATA[
 		}
 
 		public virtual StructLayoutAttribute StructLayoutAttribute
 		{
 			get { return null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="255" endline="259"><![CDATA[
 		}
 
 		public virtual bool IsGenericType
 		{
 			get { return false; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="260" endline="264"><![CDATA[
 		}
 
 		public virtual bool IsGenericTypeDefinition
 		{
 			get { return false; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="265" endline="283"><![CDATA[
 		}
 
 		public virtual bool ContainsGenericParameters
 		{
 			get
 			{
 				if (this.IsGenericParameter)
 				{
 					return true;
 				}
 				foreach (Type arg in this.GetGenericArguments())
 				{
 					if (arg.ContainsGenericParameters)
 					{
 						return true;
 					}
 				}
 				foreach (Type arg in this.GetGenericArguments())
 				{
 					if (arg.ContainsGenericParameters)
 					{
 						return true;
 					}
 				}
 				return false;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="284" endline="288"><![CDATA[
 		}
 
 		public virtual Type[] GetGenericParameterConstraints()
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="289" endline="293"><![CDATA[
 		}
 
 		public virtual GenericParameterAttributes GenericParameterAttributes
 		{
 			get { throw new InvalidOperationException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="294" endline="298"><![CDATA[
 		}
 
 		public virtual int GetArrayRank()
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="299" endline="310"><![CDATA[
 		}
 
 		// .NET 4.0 API
 		public virtual Type GetEnumUnderlyingType()
 		{
 			if (!this.IsEnum)
 			{
 				throw new ArgumentException();
 			}
 			CheckBaked();
 			return GetEnumUnderlyingTypeImpl();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="311" endline="323"><![CDATA[
 
 		internal Type GetEnumUnderlyingTypeImpl()
 		{
 			foreach (FieldInfo field in __GetDeclaredFields())
 			{
 				if (!field.IsStatic)
 				{
 					// the CLR assumes that an enum has only one instance field, so we can do the same
 					return field.FieldType;
 				}
 			}
 			foreach (FieldInfo field in __GetDeclaredFields())
 			{
 				if (!field.IsStatic)
 				{
 					// the CLR assumes that an enum has only one instance field, so we can do the same
 					return field.FieldType;
 				}
 			}
 			throw new InvalidOperationException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="324" endline="328"><![CDATA[
 
 		public override string ToString()
 		{
 			return FullName;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="329" endline="358"><![CDATA[
 
 		public virtual string FullName
 		{
 			get
 			{
 				Type decl = this.DeclaringType;
 				string ns = this.Namespace;
 				if (ns == null)
 				{
 					if (decl == null)
 					{
 						return this.Name;
 					}
 					else
 					{
 						return decl.FullName + "+" + this.Name;
 					}
 				}
 				else
 				{
 					if (decl == null)
 					{
 						return ns + "." + this.Name;
 					}
 					else
 					{
 						return decl.FullName + "+" + ns + "." + this.Name;
 					}
 				}
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="359" endline="363"><![CDATA[
 		}
 
 		internal virtual bool IsModulePseudoType
 		{
 			get { return false; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="364" endline="368"><![CDATA[
 		}
 
 		internal virtual Type GetGenericTypeArgument(int index)
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="369" endline="382"><![CDATA[
 		}
 
 		public MemberInfo[] GetDefaultMembers()
 		{
 			Type defaultMemberAttribute = this.Module.universe.Import(typeof(System.Reflection.DefaultMemberAttribute));
 			foreach (CustomAttributeData cad in CustomAttributeData.GetCustomAttributes(this))
 			{
 				if (cad.Constructor.DeclaringType.Equals(defaultMemberAttribute))
 				{
 					return GetMember((string)cad.ConstructorArguments[0].Value);
 				}
 			}
 			foreach (CustomAttributeData cad in CustomAttributeData.GetCustomAttributes(this))
 			{
 				if (cad.Constructor.DeclaringType.Equals(defaultMemberAttribute))
 				{
 					return GetMember((string)cad.ConstructorArguments[0].Value);
 				}
 			}
 			return Empty<MemberInfo>.Array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="383" endline="387"><![CDATA[
 
 		public MemberInfo[] GetMember(string name)
 		{
 			return GetMember(name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="388" endline="392"><![CDATA[
 
 		public MemberInfo[] GetMember(string name, BindingFlags bindingAttr)
 		{
 			return GetMember(name, MemberTypes.All, bindingAttr);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="393" endline="397"><![CDATA[
 
 		public MemberInfo[] GetMembers()
 		{
 			return GetMembers(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="398" endline="409"><![CDATA[
 
 		public MemberInfo[] GetMembers(BindingFlags bindingAttr)
 		{
 			List<MemberInfo> members = new List<MemberInfo>();
 			members.AddRange(GetConstructors(bindingAttr));
 			members.AddRange(GetMethods(bindingAttr));
 			members.AddRange(GetFields(bindingAttr));
 			members.AddRange(GetProperties(bindingAttr));
 			members.AddRange(GetEvents(bindingAttr));
 			members.AddRange(GetNestedTypes(bindingAttr));
 			return members.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="410" endline="415"><![CDATA[
 
 		public MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr)
 		{
 			MemberFilter filter = delegate(MemberInfo member, object filterCriteria) { return member.Name.Equals(filterCriteria); };
 			return FindMembers(type, bindingAttr, filter, name);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="416" endline="426"><![CDATA[
 
 		private static void AddMembers(List<MemberInfo> list, MemberFilter filter, object filterCriteria, MemberInfo[] members)
 		{
 			foreach (MemberInfo member in members)
 			{
 				if (filter == null || filter(member, filterCriteria))
 				{
 					list.Add(member);
 				}
 			}
 			foreach (MemberInfo member in members)
 			{
 				if (filter == null || filter(member, filterCriteria))
 				{
 					list.Add(member);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="427" endline="456"><![CDATA[
 
 		public MemberInfo[] FindMembers(MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria)
 		{
 			List<MemberInfo> members = new List<MemberInfo>();
 			if ((memberType & MemberTypes.Constructor) != 0)
 			{
 				AddMembers(members, filter, filterCriteria, GetConstructors(bindingAttr));
 			}
 			if ((memberType & MemberTypes.Method) != 0)
 			{
 				AddMembers(members, filter, filterCriteria, GetMethods(bindingAttr));
 			}
 			if ((memberType & MemberTypes.Field) != 0)
 			{
 				AddMembers(members, filter, filterCriteria, GetFields(bindingAttr));
 			}
 			if ((memberType & MemberTypes.Property) != 0)
 			{
 				AddMembers(members, filter, filterCriteria, GetProperties(bindingAttr));
 			}
 			if ((memberType & MemberTypes.Event) != 0)
 			{
 				AddMembers(members, filter, filterCriteria, GetEvents(bindingAttr));
 			}
 			if ((memberType & MemberTypes.NestedType) != 0)
 			{
 				AddMembers(members, filter, filterCriteria, GetNestedTypes(bindingAttr));
 			}
 			return members.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="457" endline="461"><![CDATA[
 
 		public EventInfo GetEvent(string name)
 		{
 			return GetEvent(name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="462" endline="473"><![CDATA[
 
 		public EventInfo GetEvent(string name, BindingFlags bindingAttr)
 		{
 			foreach (EventInfo evt in GetEvents(bindingAttr))
 			{
 				if (evt.Name == name)
 				{
 					return evt;
 				}
 			}
 			foreach (EventInfo evt in GetEvents(bindingAttr))
 			{
 				if (evt.Name == name)
 				{
 					return evt;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="474" endline="478"><![CDATA[
 
 		public EventInfo[] GetEvents()
 		{
 			return GetEvents(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="479" endline="509"><![CDATA[
 
 		public EventInfo[] GetEvents(BindingFlags bindingAttr)
 		{
 			List<EventInfo> list = new List<EventInfo>();
 			Type type = this;
 			while (type != null)
 			{
 				type.CheckBaked();
 				foreach (EventInfo evt in type.__GetDeclaredEvents())
 				{
 					if (BindingFlagsMatch(evt.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 						&& BindingFlagsMatch(evt.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
 					{
 						list.Add(evt);
 					}
 				}
 				foreach (EventInfo evt in type.__GetDeclaredEvents())
 				{
 					if (BindingFlagsMatch(evt.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 						&& BindingFlagsMatch(evt.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
 					{
 						list.Add(evt);
 					}
 				}
 				if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
 				{
 					if ((bindingAttr & BindingFlags.FlattenHierarchy) == 0)
 					{
 						bindingAttr &= ~BindingFlags.Static;
 					}
 					type = type.BaseType;
 				}
 				else
 				{
 					break;
 				}
 			}
 			while (type != null)
 			{
 				type.CheckBaked();
 				foreach (EventInfo evt in type.__GetDeclaredEvents())
 				{
 					if (BindingFlagsMatch(evt.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 						&& BindingFlagsMatch(evt.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
 					{
 						list.Add(evt);
 					}
 				}
 				if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
 				{
 					if ((bindingAttr & BindingFlags.FlattenHierarchy) == 0)
 					{
 						bindingAttr &= ~BindingFlags.Static;
 					}
 					type = type.BaseType;
 				}
 				else
 				{
 					break;
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="510" endline="514"><![CDATA[
 
 		public FieldInfo GetField(string name)
 		{
 			return GetField(name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="515" endline="526"><![CDATA[
 
 		public FieldInfo GetField(string name, BindingFlags bindingAttr)
 		{
 			foreach (FieldInfo field in GetFields(bindingAttr))
 			{
 				if (field.Name == name)
 				{
 					return field;
 				}
 			}
 			foreach (FieldInfo field in GetFields(bindingAttr))
 			{
 				if (field.Name == name)
 				{
 					return field;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="527" endline="531"><![CDATA[
 
 		public FieldInfo[] GetFields()
 		{
 			return GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="532" endline="561"><![CDATA[
 
 		public FieldInfo[] GetFields(BindingFlags bindingAttr)
 		{
 			List<FieldInfo> list = new List<FieldInfo>();
 			CheckBaked();
 			foreach (FieldInfo field in __GetDeclaredFields())
 			{
 				if (BindingFlagsMatch(field.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 					&& BindingFlagsMatch(field.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
 				{
 					list.Add(field);
 				}
 			}
 			foreach (FieldInfo field in __GetDeclaredFields())
 			{
 				if (BindingFlagsMatch(field.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 					&& BindingFlagsMatch(field.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
 				{
 					list.Add(field);
 				}
 			}
 			if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
 			{
 				for (Type type = this.BaseType; type != null; type = type.BaseType)
 				{
 					type.CheckBaked();
 					foreach (FieldInfo field in type.__GetDeclaredFields())
 					{
 						if ((field.Attributes & FieldAttributes.FieldAccessMask) > FieldAttributes.Private
 							&& BindingFlagsMatch(field.IsStatic, bindingAttr, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance))
 						{
 							list.Add(field);
 						}
 					}
 					foreach (FieldInfo field in type.__GetDeclaredFields())
 					{
 						if ((field.Attributes & FieldAttributes.FieldAccessMask) > FieldAttributes.Private
 							&& BindingFlagsMatch(field.IsStatic, bindingAttr, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance))
 						{
 							list.Add(field);
 						}
 					}
 				}
 				for (Type type = this.BaseType; type != null; type = type.BaseType)
 				{
 					type.CheckBaked();
 					foreach (FieldInfo field in type.__GetDeclaredFields())
 					{
 						if ((field.Attributes & FieldAttributes.FieldAccessMask) > FieldAttributes.Private
 							&& BindingFlagsMatch(field.IsStatic, bindingAttr, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance))
 						{
 							list.Add(field);
 						}
 					}
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="562" endline="571"><![CDATA[
 
 		public Type[] GetInterfaces()
 		{
 			List<Type> list = new List<Type>();
 			for (Type type = this; type != null; type = type.BaseType)
 			{
 				AddInterfaces(list, type);
 			}
 			for (Type type = this; type != null; type = type.BaseType)
 			{
 				AddInterfaces(list, type);
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="572" endline="584"><![CDATA[
 
 		private static void AddInterfaces(List<Type> list, Type type)
 		{
 			type.CheckBaked();
 			foreach (Type iface in type.__GetDeclaredInterfaces())
 			{
 				if (!list.Contains(iface))
 				{
 					list.Add(iface);
 					AddInterfaces(list, iface);
 				}
 			}
 			foreach (Type iface in type.__GetDeclaredInterfaces())
 			{
 				if (!list.Contains(iface))
 				{
 					list.Add(iface);
 					AddInterfaces(list, iface);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="585" endline="620"><![CDATA[
 
 		public MethodInfo[] GetMethods(BindingFlags bindingAttr)
 		{
 			CheckBaked();
 			List<MethodInfo> list = new List<MethodInfo>();
 			foreach (MethodBase mb in __GetDeclaredMethods())
 			{
 				MethodInfo mi = mb as MethodInfo;
 				if (mi != null
 					&& BindingFlagsMatch(mi.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 					&& BindingFlagsMatch(mi.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
 				{
 					list.Add(mi);
 				}
 			}
 			foreach (MethodBase mb in __GetDeclaredMethods())
 			{
 				MethodInfo mi = mb as MethodInfo;
 				if (mi != null
 					&& BindingFlagsMatch(mi.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 					&& BindingFlagsMatch(mi.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
 				{
 					list.Add(mi);
 				}
 			}
 			if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
 			{
 				for (Type type = this.BaseType; type != null; type = type.BaseType)
 				{
 					type.CheckBaked();
 					foreach (MethodBase mb in type.__GetDeclaredMethods())
 					{
 						MethodInfo mi = mb as MethodInfo;
 						if (mi != null
 							&& (mi.Attributes & MethodAttributes.MemberAccessMask) > MethodAttributes.Private
 							&& BindingFlagsMatch(mi.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 							&& BindingFlagsMatch(mi.IsStatic, bindingAttr, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance)
 							&& !FindMethod(list, mi))
 						{
 							list.Add(mi);
 						}
 					}
 					foreach (MethodBase mb in type.__GetDeclaredMethods())
 					{
 						MethodInfo mi = mb as MethodInfo;
 						if (mi != null
 							&& (mi.Attributes & MethodAttributes.MemberAccessMask) > MethodAttributes.Private
 							&& BindingFlagsMatch(mi.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 							&& BindingFlagsMatch(mi.IsStatic, bindingAttr, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance)
 							&& !FindMethod(list, mi))
 						{
 							list.Add(mi);
 						}
 					}
 				}
 				for (Type type = this.BaseType; type != null; type = type.BaseType)
 				{
 					type.CheckBaked();
 					foreach (MethodBase mb in type.__GetDeclaredMethods())
 					{
 						MethodInfo mi = mb as MethodInfo;
 						if (mi != null
 							&& (mi.Attributes & MethodAttributes.MemberAccessMask) > MethodAttributes.Private
 							&& BindingFlagsMatch(mi.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 							&& BindingFlagsMatch(mi.IsStatic, bindingAttr, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance)
 							&& !FindMethod(list, mi))
 						{
 							list.Add(mi);
 						}
 					}
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="621" endline="632"><![CDATA[
 
 		private static bool FindMethod(List<MethodInfo> methods, MethodInfo method)
 		{
 			foreach (MethodInfo m in methods)
 			{
 				if (m.Name == method.Name && m.MethodSignature.Equals(method.MethodSignature))
 				{
 					return true;
 				}
 			}
 			foreach (MethodInfo m in methods)
 			{
 				if (m.Name == method.Name && m.MethodSignature.Equals(method.MethodSignature))
 				{
 					return true;
 				}
 			}
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="633" endline="637"><![CDATA[
 
 		public MethodInfo[] GetMethods()
 		{
 			return GetMethods(BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="638" endline="642"><![CDATA[
 
 		public MethodInfo GetMethod(string name)
 		{
 			return GetMethod(name, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="643" endline="659"><![CDATA[
 
 		public MethodInfo GetMethod(string name, BindingFlags bindingAttr)
 		{
 			MethodInfo found = null;
 			foreach (MethodInfo method in GetMethods(bindingAttr))
 			{
 				if (method.Name == name)
 				{
 					if (found != null)
 					{
 						throw new AmbiguousMatchException();
 					}
 					found = method;
 				}
 			}
 			foreach (MethodInfo method in GetMethods(bindingAttr))
 			{
 				if (method.Name == name)
 				{
 					if (found != null)
 					{
 						throw new AmbiguousMatchException();
 					}
 					found = method;
 				}
 			}
 			return found;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="660" endline="664"><![CDATA[
 
 		public MethodInfo GetMethod(string name, Type[] types)
 		{
 			return GetMethod(name, types, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="665" endline="669"><![CDATA[
 
 		public MethodInfo GetMethod(string name, Type[] types, ParameterModifier[] modifiers)
 		{
 			return GetMethod(name, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public, null, types, modifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="670" endline="686"><![CDATA[
 
 		public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
 		{
 			MethodInfo found = null;
 			foreach (MethodInfo method in GetMethods(bindingAttr))
 			{
 				if (method.Name == name && method.MethodSignature.MatchParameterTypes(types))
 				{
 					if (found != null)
 					{
 						throw new AmbiguousMatchException();
 					}
 					found = method;
 				}
 			}
 			foreach (MethodInfo method in GetMethods(bindingAttr))
 			{
 				if (method.Name == name && method.MethodSignature.MatchParameterTypes(types))
 				{
 					if (found != null)
 					{
 						throw new AmbiguousMatchException();
 					}
 					found = method;
 				}
 			}
 			return found;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="687" endline="692"><![CDATA[
 
 		public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
 		{
 			// FXBUG callConvention seems to be ignored
 			return GetMethod(name, bindingAttr, binder, types, modifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="693" endline="697"><![CDATA[
 
 		public ConstructorInfo[] GetConstructors()
 		{
 			return GetConstructors(BindingFlags.Public | BindingFlags.Instance);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="698" endline="714"><![CDATA[
 
 		public ConstructorInfo[] GetConstructors(BindingFlags bindingAttr)
 		{
 			CheckBaked();
 			List<ConstructorInfo> list = new List<ConstructorInfo>();
 			foreach (MethodBase mb in __GetDeclaredMethods())
 			{
 				ConstructorInfo constructor = mb as ConstructorInfo;
 				if (constructor != null
 					&& BindingFlagsMatch(constructor.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 					&& BindingFlagsMatch(constructor.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
 				{
 					list.Add(constructor);
 				}
 			}
 			foreach (MethodBase mb in __GetDeclaredMethods())
 			{
 				ConstructorInfo constructor = mb as ConstructorInfo;
 				if (constructor != null
 					&& BindingFlagsMatch(constructor.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 					&& BindingFlagsMatch(constructor.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
 				{
 					list.Add(constructor);
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="715" endline="719"><![CDATA[
 
 		public ConstructorInfo GetConstructor(Type[] types)
 		{
 			return GetConstructor(BindingFlags.Public | BindingFlags.Instance, null, CallingConventions.Standard, types, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="720" endline="731"><![CDATA[
 
 		public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
 		{
 			foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
 			{
 				if (constructor.MethodSignature.MatchParameterTypes(types))
 				{
 					return constructor;
 				}
 			}
 			foreach (ConstructorInfo constructor in GetConstructors(bindingAttr))
 			{
 				if (constructor.MethodSignature.MatchParameterTypes(types))
 				{
 					return constructor;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="732" endline="737"><![CDATA[
 
 		public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callingConvention, Type[] types, ParameterModifier[] modifiers)
 		{
 			// FXBUG callConvention seems to be ignored
 			return GetConstructor(bindingAttr, binder, types, modifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="738" endline="742"><![CDATA[
 
 		public Type GetNestedType(string name)
 		{
 			return GetNestedType(name, BindingFlags.Public);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="743" endline="754"><![CDATA[
 
 		public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
 		{
 			foreach (Type type in GetNestedTypes(bindingAttr))
 			{
 				if (type.Name == name)
 				{
 					return type;
 				}
 			}
 			foreach (Type type in GetNestedTypes(bindingAttr))
 			{
 				if (type.Name == name)
 				{
 					return type;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="755" endline="759"><![CDATA[
 
 		public Type[] GetNestedTypes()
 		{
 			return GetNestedTypes(BindingFlags.Public);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="760" endline="773"><![CDATA[
 
 		public Type[] GetNestedTypes(BindingFlags bindingAttr)
 		{
 			CheckBaked();
 			List<Type> list = new List<Type>();
 			foreach (Type type in __GetDeclaredTypes())
 			{
 				if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
 				{
 					list.Add(type);
 				}
 			}
 			foreach (Type type in __GetDeclaredTypes())
 			{
 				if (BindingFlagsMatch(type.IsNestedPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic))
 				{
 					list.Add(type);
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="774" endline="778"><![CDATA[
 
 		public PropertyInfo[] GetProperties()
 		{
 			return GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="779" endline="809"><![CDATA[
 
 		public PropertyInfo[] GetProperties(BindingFlags bindingAttr)
 		{
 			List<PropertyInfo> list = new List<PropertyInfo>();
 			Type type = this;
 			while (type != null)
 			{
 				type.CheckBaked();
 				foreach (PropertyInfo property in type.__GetDeclaredProperties())
 				{
 					if (BindingFlagsMatch(property.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 						&& BindingFlagsMatch(property.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
 					{
 						list.Add(property);
 					}
 				}
 				foreach (PropertyInfo property in type.__GetDeclaredProperties())
 				{
 					if (BindingFlagsMatch(property.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 						&& BindingFlagsMatch(property.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
 					{
 						list.Add(property);
 					}
 				}
 				if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
 				{
 					if ((bindingAttr & BindingFlags.FlattenHierarchy) == 0)
 					{
 						bindingAttr &= ~BindingFlags.Static;
 					}
 					type = type.BaseType;
 				}
 				else
 				{
 					break;
 				}
 			}
 			while (type != null)
 			{
 				type.CheckBaked();
 				foreach (PropertyInfo property in type.__GetDeclaredProperties())
 				{
 					if (BindingFlagsMatch(property.IsPublic, bindingAttr, BindingFlags.Public, BindingFlags.NonPublic)
 						&& BindingFlagsMatch(property.IsStatic, bindingAttr, BindingFlags.Static, BindingFlags.Instance))
 					{
 						list.Add(property);
 					}
 				}
 				if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
 				{
 					if ((bindingAttr & BindingFlags.FlattenHierarchy) == 0)
 					{
 						bindingAttr &= ~BindingFlags.Static;
 					}
 					type = type.BaseType;
 				}
 				else
 				{
 					break;
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="810" endline="814"><![CDATA[
 
 		public PropertyInfo GetProperty(string name)
 		{
 			return GetProperty(name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="815" endline="826"><![CDATA[
 
 		public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
 		{
 			foreach (PropertyInfo prop in GetProperties(bindingAttr))
 			{
 				if (prop.Name == name)
 				{
 					return prop;
 				}
 			}
 			foreach (PropertyInfo prop in GetProperties(bindingAttr))
 			{
 				if (prop.Name == name)
 				{
 					return prop;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="827" endline="843"><![CDATA[
 
 		public PropertyInfo GetProperty(string name, Type returnType)
 		{
 			PropertyInfo found = null;
 			foreach (PropertyInfo prop in GetProperties())
 			{
 				if (prop.Name == name && prop.PropertyType.Equals(returnType))
 				{
 					if (found != null)
 					{
 						throw new AmbiguousMatchException();
 					}
 					found = prop;
 				}
 			}
 			foreach (PropertyInfo prop in GetProperties())
 			{
 				if (prop.Name == name && prop.PropertyType.Equals(returnType))
 				{
 					if (found != null)
 					{
 						throw new AmbiguousMatchException();
 					}
 					found = prop;
 				}
 			}
 			return found;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="844" endline="860"><![CDATA[
 
 		public PropertyInfo GetProperty(string name, Type[] types)
 		{
 			PropertyInfo found = null;
 			foreach (PropertyInfo prop in GetProperties())
 			{
 				if (prop.Name == name && MatchParameterTypes(prop.GetIndexParameters(), types))
 				{
 					if (found != null)
 					{
 						throw new AmbiguousMatchException();
 					}
 					found = prop;
 				}
 			}
 			foreach (PropertyInfo prop in GetProperties())
 			{
 				if (prop.Name == name && MatchParameterTypes(prop.GetIndexParameters(), types))
 				{
 					if (found != null)
 					{
 						throw new AmbiguousMatchException();
 					}
 					found = prop;
 				}
 			}
 			return found;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="861" endline="876"><![CDATA[
 
 		private static bool MatchParameterTypes(ParameterInfo[] parameters, Type[] types)
 		{
 			if (parameters.Length == types.Length)
 			{
 				for (int i = 0; i < parameters.Length; i++)
 				{
 					if (!parameters[i].ParameterType.Equals(types[i]))
 					{
 						return false;
 					}
 				}
 				for (int i = 0; i < parameters.Length; i++)
 				{
 					if (!parameters[i].ParameterType.Equals(types[i]))
 					{
 						return false;
 					}
 				}
 				return true;
 			}
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="877" endline="881"><![CDATA[
 
 		public PropertyInfo GetProperty(string name, Type returnType, Type[] types)
 		{
 			return GetProperty(name, returnType, types, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="882" endline="886"><![CDATA[
 
 		public PropertyInfo GetProperty(string name, Type returnType, Type[] types, ParameterModifier[] modifiers)
 		{
 			return GetProperty(name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static, null, returnType, types, modifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="887" endline="903"><![CDATA[
 
 		public PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)
 		{
 			PropertyInfo found = null;
 			foreach (PropertyInfo prop in GetProperties(bindingAttr))
 			{
 				if (prop.Name == name && prop.PropertyType.Equals(returnType) && MatchParameterTypes(prop.GetIndexParameters(), types))
 				{
 					if (found != null)
 					{
 						throw new AmbiguousMatchException();
 					}
 					found = prop;
 				}
 			}
 			foreach (PropertyInfo prop in GetProperties(bindingAttr))
 			{
 				if (prop.Name == name && prop.PropertyType.Equals(returnType) && MatchParameterTypes(prop.GetIndexParameters(), types))
 				{
 					if (found != null)
 					{
 						throw new AmbiguousMatchException();
 					}
 					found = prop;
 				}
 			}
 			return found;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="904" endline="908"><![CDATA[
 
 		public Type GetInterface(string name)
 		{
 			return GetInterface(name, false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="909" endline="924"><![CDATA[
 
 		public Type GetInterface(string name, bool ignoreCase)
 		{
 			if (ignoreCase)
 			{
 				throw new NotImplementedException();
 			}
 			foreach (Type type in GetInterfaces())
 			{
 				if (type.FullName == name)
 				{
 					return type;
 				}
 			}
 			foreach (Type type in GetInterfaces())
 			{
 				if (type.FullName == name)
 				{
 					return type;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="925" endline="937"><![CDATA[
 
 		public Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
 		{
 			List<Type> list = new List<Type>();
 			foreach (Type type in GetInterfaces())
 			{
 				if (filter(type, filterCriteria))
 				{
 					list.Add(type);
 				}
 			}
 			foreach (Type type in GetInterfaces())
 			{
 				if (filter(type, filterCriteria))
 				{
 					list.Add(type);
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="938" endline="941"><![CDATA[
 
 		public ConstructorInfo TypeInitializer
 		{
 			get { return GetConstructor(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, null, Type.EmptyTypes, null); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="942" endline="964"><![CDATA[
 		}
 
 		public bool IsPrimitive
 		{
 			get
 			{
 				Universe u = this.Module.universe;
 				return this == u.System_Boolean
 					|| this == u.System_Byte
 					|| this == u.System_SByte
 					|| this == u.System_Int16
 					|| this == u.System_UInt16
 					|| this == u.System_Int32
 					|| this == u.System_UInt32
 					|| this == u.System_Int64
 					|| this == u.System_UInt64
 					|| this == u.System_IntPtr
 					|| this == u.System_UIntPtr
 					|| this == u.System_Char
 					|| this == u.System_Double
 					|| this == u.System_Single
 					;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="965" endline="969"><![CDATA[
 		}
 
 		public bool IsEnum
 		{
 			get { return this.BaseType == this.Module.universe.System_Enum; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="970" endline="974"><![CDATA[
 		}
 
 		public bool IsSealed
 		{
 			get { return (Attributes & TypeAttributes.Sealed) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="975" endline="979"><![CDATA[
 		}
 
 		public bool IsAbstract
 		{
 			get { return (Attributes & TypeAttributes.Abstract) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="980" endline="985"><![CDATA[
 		}
 
 		private bool CheckVisibility(TypeAttributes access)
 		{
 			return (Attributes & TypeAttributes.VisibilityMask) == access;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="986" endline="989"><![CDATA[
 
 		public bool IsPublic
 		{
 			get { return CheckVisibility(TypeAttributes.Public); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="990" endline="994"><![CDATA[
 		}
 
 		public bool IsNestedPublic
 		{
 			get { return CheckVisibility(TypeAttributes.NestedPublic); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="995" endline="999"><![CDATA[
 		}
 
 		public bool IsNestedPrivate
 		{
 			get { return CheckVisibility(TypeAttributes.NestedPrivate); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1000" endline="1004"><![CDATA[
 		}
 
 		public bool IsNestedFamily
 		{
 			get { return CheckVisibility(TypeAttributes.NestedFamily); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1005" endline="1009"><![CDATA[
 		}
 
 		public bool IsNestedAssembly
 		{
 			get { return CheckVisibility(TypeAttributes.NestedAssembly); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1010" endline="1014"><![CDATA[
 		}
 
 		public bool IsNestedFamANDAssem
 		{
 			get { return CheckVisibility(TypeAttributes.NestedFamANDAssem); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1015" endline="1019"><![CDATA[
 		}
 
 		public bool IsNestedFamORAssem
 		{
 			get { return CheckVisibility(TypeAttributes.NestedFamORAssem); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1020" endline="1024"><![CDATA[
 		}
 
 		public bool IsNotPublic
 		{
 			get { return CheckVisibility(TypeAttributes.NotPublic); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1025" endline="1029"><![CDATA[
 		}
 
 		public bool IsImport
 		{
 			get { return (Attributes & TypeAttributes.Import) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1030" endline="1034"><![CDATA[
 		}
 
 		public bool IsCOMObject
 		{
 			get { return IsClass && IsImport; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1035" endline="1039"><![CDATA[
 		}
 
 		public bool IsContextful
 		{
 			get { return IsSubclassOf(this.Module.universe.Import(typeof(ContextBoundObject))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1040" endline="1044"><![CDATA[
 		}
 
 		public bool IsMarshalByRef
 		{
 			get { return IsSubclassOf(this.Module.universe.Import(typeof(MarshalByRefObject))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1045" endline="1049"><![CDATA[
 		}
 
 		public virtual bool IsVisible
 		{
 			get { return IsPublic || (IsNestedPublic && this.DeclaringType.IsVisible); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1050" endline="1054"><![CDATA[
 		}
 
 		public bool IsAnsiClass
 		{
 			get { return (Attributes & TypeAttributes.StringFormatMask) == TypeAttributes.AnsiClass; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1055" endline="1059"><![CDATA[
 		}
 
 		public bool IsUnicodeClass
 		{
 			get { return (Attributes & TypeAttributes.StringFormatMask) == TypeAttributes.UnicodeClass; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1060" endline="1064"><![CDATA[
 		}
 
 		public bool IsAutoClass
 		{
 			get { return (Attributes & TypeAttributes.StringFormatMask) == TypeAttributes.AutoClass; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1065" endline="1069"><![CDATA[
 		}
 
 		public bool IsAutoLayout
 		{
 			get { return (Attributes & TypeAttributes.LayoutMask) == TypeAttributes.AutoLayout; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1070" endline="1074"><![CDATA[
 		}
 
 		public bool IsLayoutSequential
 		{
 			get { return (Attributes & TypeAttributes.LayoutMask) == TypeAttributes.SequentialLayout; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1075" endline="1079"><![CDATA[
 		}
 
 		public bool IsExplicitLayout
 		{
 			get { return (Attributes & TypeAttributes.LayoutMask) == TypeAttributes.ExplicitLayout; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1080" endline="1084"><![CDATA[
 		}
 
 		public bool IsSpecialName
 		{
 			get { return (Attributes & TypeAttributes.SpecialName) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1085" endline="1089"><![CDATA[
 		}
 
 		public bool IsSerializable
 		{
 			get { return (Attributes & TypeAttributes.Serializable) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1090" endline="1094"><![CDATA[
 		}
 
 		public bool IsClass
 		{
 			get { return !IsInterface && !IsValueType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1095" endline="1099"><![CDATA[
 		}
 
 		public bool IsInterface
 		{
 			get { return (Attributes & TypeAttributes.Interface) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1100" endline="1106"><![CDATA[
 		}
 
 		public bool IsNested
 		{
 			// FXBUG we check the declaring type (like .NET) and this results
 			// in IsNested returning true for a generic type parameter
 			get { return this.DeclaringType != null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1107" endline="1112"><![CDATA[
 		}
 
 		public Type MakeArrayType()
 		{
 			return ArrayType.Make(this, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1113" endline="1117"><![CDATA[
 
 		public Type __MakeArrayType(Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			return ArrayType.Make(this, Util.Copy(requiredCustomModifiers), Util.Copy(optionalCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1118" endline="1122"><![CDATA[
 
 		public Type MakeArrayType(int rank)
 		{
 			return MultiArrayType.Make(this, rank, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1123" endline="1127"><![CDATA[
 
 		public Type __MakeArrayType(int rank, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			return MultiArrayType.Make(this, rank, Util.Copy(requiredCustomModifiers), Util.Copy(optionalCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1128" endline="1132"><![CDATA[
 
 		public Type MakeByRefType()
 		{
 			return ByRefType.Make(this, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1133" endline="1137"><![CDATA[
 
 		public Type __MakeByRefType(Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			return ByRefType.Make(this, Util.Copy(requiredCustomModifiers), Util.Copy(optionalCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1138" endline="1142"><![CDATA[
 
 		public Type MakePointerType()
 		{
 			return PointerType.Make(this, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1143" endline="1147"><![CDATA[
 
 		public Type __MakePointerType(Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			return PointerType.Make(this, Util.Copy(requiredCustomModifiers), Util.Copy(optionalCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1148" endline="1152"><![CDATA[
 
 		public Type MakeGenericType(params Type[] typeArguments)
 		{
 			return __MakeGenericType(typeArguments, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1153" endline="1161"><![CDATA[
 
 		public Type __MakeGenericType(Type[] typeArguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
 		{
 			if (!this.IsGenericTypeDefinition)
 			{
 				throw new InvalidOperationException();
 			}
 			return GenericTypeInstance.Make(this, Util.Copy(typeArguments), Util.Copy(requiredCustomModifiers), Util.Copy(optionalCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1162" endline="1206"><![CDATA[
 
 		public static System.Type __GetSystemType(TypeCode typeCode)
 		{
 			switch (typeCode)
 			{
 				case TypeCode.Boolean
 					return typeof(System.Boolean);
 				case TypeCode.Byte
 					return typeof(System.Byte);
 				case TypeCode.Char
 					return typeof(System.Char);
 				case TypeCode.DBNull
 					return typeof(System.DBNull);
 				case TypeCode.DateTime
 					return typeof(System.DateTime);
 				case TypeCode.Decimal
 					return typeof(System.Decimal);
 				case TypeCode.Double
 					return typeof(System.Double);
 				case TypeCode.Empty
 					return null;
 				case TypeCode.Int16
 					return typeof(System.Int16);
 				case TypeCode.Int32
 					return typeof(System.Int32);
 				case TypeCode.Int64
 					return typeof(System.Int64);
 				case TypeCode.Object
 					return typeof(System.Object);
 				case TypeCode.SByte
 					return typeof(System.SByte);
 				case TypeCode.Single
 					return typeof(System.Single);
 				case TypeCode.String
 					return typeof(System.String);
 				case TypeCode.UInt16
 					return typeof(System.UInt16);
 				case TypeCode.UInt32
 					return typeof(System.UInt32);
 				case TypeCode.UInt64
 					return typeof(System.UInt64);
 				default
 					throw new ArgumentOutOfRangeException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1207" endline="1287"><![CDATA[
 
 		public static TypeCode GetTypeCode(Type type)
 		{
 			if (type == null)
 			{
 				return TypeCode.Empty;
 			}
 			if (type.IsEnum)
 			{
 				type = type.GetEnumUnderlyingType();
 			}
 			Universe u = type.Module.universe;
 			if (type == u.System_Boolean)
 			{
 				return TypeCode.Boolean;
 			}
 			else if (type == u.System_Char)
 			{
 				return TypeCode.Char;
 			}
 			else if (type == u.System_SByte)
 			{
 				return TypeCode.SByte;
 			}
 			else if (type == u.System_Byte)
 			{
 				return TypeCode.Byte;
 			}
 			else if (type == u.System_Int16)
 			{
 				return TypeCode.Int16;
 			}
 			else if (type == u.System_UInt16)
 			{
 				return TypeCode.UInt16;
 			}
 			else if (type == u.System_Int32)
 			{
 				return TypeCode.Int32;
 			}
 			else if (type == u.System_UInt32)
 			{
 				return TypeCode.UInt32;
 			}
 			else if (type == u.System_Int64)
 			{
 				return TypeCode.Int64;
 			}
 			else if (type == u.System_UInt64)
 			{
 				return TypeCode.UInt64;
 			}
 			else if (type == u.System_Single)
 			{
 				return TypeCode.Single;
 			}
 			else if (type == u.System_Double)
 			{
 				return TypeCode.Double;
 			}
 			else if (type == u.System_DateTime)
 			{
 				return TypeCode.DateTime;
 			}
 			else if (type == u.System_DBNull)
 			{
 				return TypeCode.DBNull;
 			}
 			else if (type == u.System_Decimal)
 			{
 				return TypeCode.Decimal;
 			}
 			else if (type == u.System_String)
 			{
 				return TypeCode.String;
 			}
 			else
 			{
 				return TypeCode.Object;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1288" endline="1291"><![CDATA[
 
 		public Assembly Assembly
 		{
 			get { return Module.Assembly; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1292" endline="1339"><![CDATA[
 		}
 
 		// note that interface/delegate co- and contravariance is not considered
 		public bool IsAssignableFrom(Type type)
 		{
 			if (this.Equals(type))
 			{
 				return true;
 			}
 			else if (type == null)
 			{
 				return false;
 			}
 			else if (this.IsArray && type.IsArray)
 			{
 				if (this.GetArrayRank() != type.GetArrayRank())
 				{
 					return false;
 				}
 				else if (this.__IsVector && !type.__IsVector)
 				{
 					return false;
 				}
 				Type e1 = this.GetElementType();
 				Type e2 = type.GetElementType();
 				return e1.IsValueType == e2.IsValueType && e1.IsAssignableFrom(e2);
 			}
 			else if (this.IsSealed)
 			{
 				return false;
 			}
 			else if (this.IsInterface)
 			{
 				return Array.IndexOf(type.GetInterfaces(), this) != -1;
 			}
 			else if (type.IsInterface)
 			{
 				return this == this.Module.universe.System_Object;
 			}
 			else if (type.IsPointer)
 			{
 				return this == this.Module.universe.System_Object || this == this.Module.universe.System_ValueType;
 			}
 			else
 			{
 				return type.IsSubclassOf(this);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1340" endline="1353"><![CDATA[
 
 		public bool IsSubclassOf(Type type)
 		{
 			Type thisType = this.BaseType;
 			while (thisType != null)
 			{
 				if (thisType.Equals(type))
 				{
 					return true;
 				}
 				thisType = thisType.BaseType;
 			}
 			while (thisType != null)
 			{
 				if (thisType.Equals(type))
 				{
 					return true;
 				}
 				thisType = thisType.BaseType;
 			}
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1354" endline="1367"><![CDATA[
 
 		// This returns true if this type directly (i.e. not inherited from the base class) implements the interface.
 		// Note that a complicating factor is that the interface itself can be implemented by an interface that extends it.
 		private bool IsDirectlyImplementedInterface(Type interfaceType)
 		{
 			foreach (Type iface in __GetDeclaredInterfaces())
 			{
 				if (interfaceType.IsAssignableFrom(iface))
 				{
 					return true;
 				}
 			}
 			foreach (Type iface in __GetDeclaredInterfaces())
 			{
 				if (interfaceType.IsAssignableFrom(iface))
 				{
 					return true;
 				}
 			}
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1368" endline="1414"><![CDATA[
 
 		public InterfaceMapping GetInterfaceMap(Type interfaceType)
 		{
 			CheckBaked();
 			InterfaceMapping map = new InterfaceMapping();
 			if (!IsDirectlyImplementedInterface(interfaceType))
 			{
 				Type baseType = this.BaseType;
 				if (baseType == null)
 				{
 					throw new ArgumentException();
 				}
 				else
 				{
 					map = baseType.GetInterfaceMap(interfaceType);
 				}
 			}
 			else
 			{
 				map.InterfaceMethods = interfaceType.GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public);
 				map.InterfaceType = interfaceType;
 				map.TargetMethods = new MethodInfo[map.InterfaceMethods.Length];
 				FillInExplicitInterfaceMethods(map.InterfaceMethods, map.TargetMethods);
 				MethodInfo[] methods = GetMethods(BindingFlags.Instance | BindingFlags.Public);
 				for (int i = 0; i < map.TargetMethods.Length; i++)
 				{
 					if (map.TargetMethods[i] == null)
 					{
 						// TODO use proper method resolution (also take into account that no implicit base class implementation is used across assembly boundaries)
 						for (int j = 0; j < methods.Length; j++)
 						{
 							if (methods[j].Name == map.InterfaceMethods[i].Name
 								&& methods[j].MethodSignature.Equals(map.InterfaceMethods[i].MethodSignature))
 							{
 								map.TargetMethods[i] = methods[j];
 							}
 						}
 						for (int j = 0; j < methods.Length; j++)
 						{
 							if (methods[j].Name == map.InterfaceMethods[i].Name
 								&& methods[j].MethodSignature.Equals(map.InterfaceMethods[i].MethodSignature))
 							{
 								map.TargetMethods[i] = methods[j];
 							}
 						}
 					}
 				}
 				for (int i = 0; i < map.TargetMethods.Length; i++)
 				{
 					if (map.TargetMethods[i] == null)
 					{
 						// TODO use proper method resolution (also take into account that no implicit base class implementation is used across assembly boundaries)
 						for (int j = 0; j < methods.Length; j++)
 						{
 							if (methods[j].Name == map.InterfaceMethods[i].Name
 								&& methods[j].MethodSignature.Equals(map.InterfaceMethods[i].MethodSignature))
 							{
 								map.TargetMethods[i] = methods[j];
 							}
 						}
 					}
 				}
 				for (Type baseType = this.BaseType; baseType != null && interfaceType.IsAssignableFrom(baseType); baseType = baseType.BaseType)
 				{
 					baseType.FillInExplicitInterfaceMethods(map.InterfaceMethods, map.TargetMethods);
 				}
 				for (Type baseType = this.BaseType; baseType != null && interfaceType.IsAssignableFrom(baseType); baseType = baseType.BaseType)
 				{
 					baseType.FillInExplicitInterfaceMethods(map.InterfaceMethods, map.TargetMethods);
 				}
 			}
 			map.TargetType = this;
 			return map;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1415" endline="1430"><![CDATA[
 
 		internal void FillInExplicitInterfaceMethods(MethodInfo[] interfaceMethods, MethodInfo[] targetMethods)
 		{
 			__MethodImplMap impl = __GetMethodImplMap();
 			for (int i = 0; i < impl.MethodDeclarations.Length; i++)
 			{
 				for (int j = 0; j < impl.MethodDeclarations[i].Length; j++)
 				{
 					int index = Array.IndexOf(interfaceMethods, impl.MethodDeclarations[i][j]);
 					if (index != -1 && targetMethods[index] == null)
 					{
 						targetMethods[index] = impl.MethodBodies[i];
 					}
 				}
 				for (int j = 0; j < impl.MethodDeclarations[i].Length; j++)
 				{
 					int index = Array.IndexOf(interfaceMethods, impl.MethodDeclarations[i][j]);
 					if (index != -1 && targetMethods[index] == null)
 					{
 						targetMethods[index] = impl.MethodBodies[i];
 					}
 				}
 			}
 			for (int i = 0; i < impl.MethodDeclarations.Length; i++)
 			{
 				for (int j = 0; j < impl.MethodDeclarations[i].Length; j++)
 				{
 					int index = Array.IndexOf(interfaceMethods, impl.MethodDeclarations[i][j]);
 					if (index != -1 && targetMethods[index] == null)
 					{
 						targetMethods[index] = impl.MethodBodies[i];
 					}
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1431" endline="1435"><![CDATA[
 
 		Type IGenericContext.GetGenericTypeArgument(int index)
 		{
 			return GetGenericTypeArgument(index);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1436" endline="1439"><![CDATA[
 
 		Type IGenericContext.GetGenericMethodArgument(int index)
 		{
 			throw new BadImageFormatException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1440" endline="1445"><![CDATA[
 		}
 
 		Type IGenericBinder.BindTypeParameter(Type type)
 		{
 			return GetGenericTypeArgument(type.GenericParameterPosition);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1446" endline="1449"><![CDATA[
 
 		Type IGenericBinder.BindMethodParameter(Type type)
 		{
 			throw new BadImageFormatException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1450" endline="1464"><![CDATA[
 		}
 
 		internal virtual Type BindTypeParameters(IGenericBinder binder)
 		{
 			if (IsGenericTypeDefinition)
 			{
 				Type[] args = GetGenericArguments();
 				Type.InplaceBindTypeParameters(binder, args);
 				return GenericTypeInstance.Make(this, args, null, null);
 			}
 			else
 			{
 				return this;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1465" endline="1472"><![CDATA[
 
 		internal static void InplaceBindTypeParameters(IGenericBinder binder, Type[] types)
 		{
 			for (int i = 0; i < types.Length; i++)
 			{
 				types[i] = types[i].BindTypeParameters(binder);
 			}
 			for (int i = 0; i < types.Length; i++)
 			{
 				types[i] = types[i].BindTypeParameters(binder);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1473" endline="1484"><![CDATA[
 
 		internal MethodBase FindMethod(string name, MethodSignature signature)
 		{
 			foreach (MethodBase method in __GetDeclaredMethods())
 			{
 				if (method.Name == name && method.MethodSignature.Equals(signature))
 				{
 					return method;
 				}
 			}
 			foreach (MethodBase method in __GetDeclaredMethods())
 			{
 				if (method.Name == name && method.MethodSignature.Equals(signature))
 				{
 					return method;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1485" endline="1496"><![CDATA[
 
 		internal FieldInfo FindField(string name, FieldSignature signature)
 		{
 			foreach (FieldInfo field in __GetDeclaredFields())
 			{
 				if (field.Name == name && field.FieldSignature.Equals(signature))
 				{
 					return field;
 				}
 			}
 			foreach (FieldInfo field in __GetDeclaredFields())
 			{
 				if (field.Name == name && field.FieldSignature.Equals(signature))
 				{
 					return field;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1497" endline="1514"><![CDATA[
 
 		internal bool IsAllowMultipleCustomAttribute
 		{
 			get
 			{
 				IList<CustomAttributeData> cad = GetCustomAttributesData(this.Module.universe.System_AttributeUsageAttribute);
 				if (cad.Count == 1)
 				{
 					foreach (CustomAttributeNamedArgument arg in cad[0].NamedArguments)
 					{
 						if (arg.MemberInfo.Name == "AllowMultiple")
 						{
 							return (bool)arg.TypedValue.Value;
 						}
 					}
 					foreach (CustomAttributeNamedArgument arg in cad[0].NamedArguments)
 					{
 						if (arg.MemberInfo.Name == "AllowMultiple")
 						{
 							return (bool)arg.TypedValue.Value;
 						}
 					}
 				}
 				return false;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1515" endline="1536"><![CDATA[
 		}
 
 		internal bool IsPseudoCustomAttribute
 		{
 			get
 			{
 				Universe u = this.Module.universe;
 				return this == u.System_NonSerializedAttribute
 					|| this == u.System_SerializableAttribute
 					|| this == u.System_Runtime_InteropServices_DllImportAttribute
 					|| this == u.System_Runtime_InteropServices_FieldOffsetAttribute
 					|| this == u.System_Runtime_InteropServices_InAttribute
 					|| this == u.System_Runtime_InteropServices_MarshalAsAttribute
 					|| this == u.System_Runtime_InteropServices_OutAttribute
 					|| this == u.System_Runtime_InteropServices_StructLayoutAttribute
 					|| this == u.System_Runtime_InteropServices_OptionalAttribute
 					|| this == u.System_Runtime_InteropServices_PreserveSigAttribute
 					|| this == u.System_Runtime_InteropServices_ComImportAttribute
 					|| this == u.System_Runtime_CompilerServices_SpecialNameAttribute
 					|| this == u.System_Runtime_CompilerServices_MethodImplAttribute
 					;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="413" endline="413"><![CDATA[
 			MemberFilter filter = delegate(MemberInfo member, object filterCriteria) { return member.Name.Equals(filterCriteria); };
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="46" endline="46"><![CDATA[
 		public static readonly Type[] EmptyTypes = Empty<Type>.Array;
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="45" endline="57"><![CDATA[
 		internal GenericTypeParameterBuilder(string name, TypeBuilder type, MethodBuilder method, int position)
 		{
 			this.name = name;
 			this.type = type;
 			this.method = method;
 			this.position = position;
 			GenericParamTable.Record rec = new GenericParamTable.Record();
 			rec.Number = (short)position;
 			rec.Flags = 0;
 			rec.Owner = type != null ? type.MetadataToken 
 			rec.Name = this.ModuleBuilder.Strings.Add(name);
 			this.paramPseudoIndex = this.ModuleBuilder.GenericParam.AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="58" endline="61"><![CDATA[
 
 		public override string AssemblyQualifiedName
 		{
 			get { return null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="62" endline="66"><![CDATA[
 		}
 
 		public override bool IsValueType
 		{
 			get { return (this.GenericParameterAttributes & GenericParameterAttributes.NotNullableValueTypeConstraint) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="67" endline="71"><![CDATA[
 		}
 
 		public override Type BaseType
 		{
 			get { return baseType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="72" endline="76"><![CDATA[
 		}
 
 		public override Type[] __GetDeclaredInterfaces()
 		{
 			throw new NotImplementedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="77" endline="81"><![CDATA[
 		}
 
 		public override TypeAttributes Attributes
 		{
 			get { return TypeAttributes.Public; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="82" endline="86"><![CDATA[
 		}
 
 		public override string Namespace
 		{
 			get { return DeclaringType.Namespace; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="87" endline="91"><![CDATA[
 		}
 
 		public override Type UnderlyingSystemType
 		{
 			get { return this; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="92" endline="96"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="97" endline="101"><![CDATA[
 		}
 
 		public override string FullName
 		{
 			get { return null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="102" endline="107"><![CDATA[
 		}
 
 		public override string ToString()
 		{
 			return this.Name;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="108" endline="111"><![CDATA[
 
 		private ModuleBuilder ModuleBuilder
 		{
 			get { return type != null ? type.ModuleBuilder 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="112" endline="116"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return ModuleBuilder; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="117" endline="121"><![CDATA[
 		}
 
 		public override bool IsGenericParameter
 		{
 			get { return true; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="122" endline="126"><![CDATA[
 		}
 
 		public override int GenericParameterPosition
 		{
 			get { return position; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="127" endline="131"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return type; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="132" endline="136"><![CDATA[
 		}
 
 		public override MethodBase DeclaringMethod
 		{
 			get { return method; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="137" endline="141"><![CDATA[
 		}
 
 		public override Type[] GetGenericParameterConstraints()
 		{
 			throw new NotImplementedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="142" endline="157"><![CDATA[
 		}
 
 		public override GenericParameterAttributes GenericParameterAttributes
 		{
 			get
 			{
 				if (type != null)
 				{
 					type.CheckBaked();
 				}
 				else
 				{
 					method.CheckBaked();
 				}
 				return attr;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="158" endline="166"><![CDATA[
 		}
 
 		private void AddConstraint(Type type)
 		{
 			GenericParamConstraintTable.Record rec = new GenericParamConstraintTable.Record();
 			rec.Owner = paramPseudoIndex;
 			rec.Constraint = this.ModuleBuilder.GetTypeTokenForMemberRef(type);
 			this.ModuleBuilder.GenericParamConstraint.AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="167" endline="172"><![CDATA[
 
 		public void SetBaseTypeConstraint(Type baseTypeConstraint)
 		{
 			this.baseType = baseTypeConstraint;
 			AddConstraint(baseTypeConstraint);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="173" endline="180"><![CDATA[
 
 		public void SetInterfaceConstraints(params Type[] interfaceConstraints)
 		{
 			foreach (Type type in interfaceConstraints)
 			{
 				AddConstraint(type);
 			}
 			foreach (Type type in interfaceConstraints)
 			{
 				AddConstraint(type);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="181" endline="187"><![CDATA[
 
 		public void SetGenericParameterAttributes(GenericParameterAttributes genericParameterAttributes)
 		{
 			this.attr = genericParameterAttributes;
 			// for now we'll back patch the table
 			this.ModuleBuilder.GenericParam.PatchAttribute(paramPseudoIndex, genericParameterAttributes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="188" endline="192"><![CDATA[
 
 		public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
 		{
 			this.ModuleBuilder.SetCustomAttribute((GenericParamTable.Index << 24) | paramPseudoIndex, customBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="193" endline="197"><![CDATA[
 
 		public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
 		{
 			SetCustomAttribute(new CustomAttributeBuilder(con, binaryAttribute));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="198" endline="208"><![CDATA[
 
 		internal override int GetModuleBuilderToken()
 		{
 			if (typeToken == 0)
 			{
 				ByteBuffer spec = new ByteBuffer(5);
 				Signature.WriteTypeSpec(this.ModuleBuilder, spec, this);
 				typeToken = 0x1B000000 | this.ModuleBuilder.TypeSpec.AddRecord(this.ModuleBuilder.Blobs.Add(spec));
 			}
 			return typeToken;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="209" endline="220"><![CDATA[
 
 		internal override Type BindTypeParameters(IGenericBinder binder)
 		{
 			if (type != null)
 			{
 				return binder.BindTypeParameter(this);
 			}
 			else
 			{
 				return binder.BindMethodParameter(this);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="221" endline="268"><![CDATA[
 	}
 
 	public sealed class TypeBuilder 
 	{
 		public const int UnspecifiedTypeSize = 0;
 		private readonly ITypeOwner owner;
 		private readonly int token;
 		private int extends;
 		private Type baseType;
 		private readonly int typeName;
 		private readonly int typeNameSpace;
 		private readonly string nameOrFullName;
 		private readonly List<MethodBuilder> methods = new List<MethodBuilder>();
 		private readonly List<FieldBuilder> fields = new List<FieldBuilder>();
 		private List<PropertyBuilder> properties;
 		private List<EventBuilder> events;
 		private TypeAttributes attribs;
 		private TypeFlags typeFlags;
 		private GenericTypeParameterBuilder[] gtpb;
 		private List<CustomAttributeBuilder> declarativeSecurity;
 		private List<Type> interfaces;
 
 		[Flags]
 		private enum TypeFlags
 		{
 			IsGenericTypeDefinition = 1,
 			HasNestedTypes = 2,
 			Baked = 4,
 		}
 
 		internal TypeBuilder(ITypeOwner owner, string name, Type baseType, TypeAttributes attribs)
 		{
 			this.owner = owner;
 			this.token = this.ModuleBuilder.TypeDef.AllocToken();
 			this.nameOrFullName = TypeNameParser.Escape(name);
 			SetParent(baseType);
 			this.attribs = attribs;
 			if (!this.IsNested)
 			{
 				int lastdot = name.LastIndexOf('.');
 				if (lastdot > 0)
 				{
 					this.typeNameSpace = this.ModuleBuilder.Strings.Add(name.Substring(0, lastdot));
 					name = name.Substring(lastdot + 1);
 				}
 			}
 			this.typeName = this.ModuleBuilder.Strings.Add(name);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="269" endline="278"><![CDATA[
 
 		public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes)
 		{
 			ConstructorBuilder cb = DefineConstructor(attributes, CallingConventions.Standard, Type.EmptyTypes);
 			ILGenerator ilgen = cb.GetILGenerator();
 			ilgen.Emit(OpCodes.Ldarg_0);
 			ilgen.Emit(OpCodes.Call, baseType.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, Type.EmptyTypes, null));
 			ilgen.Emit(OpCodes.Ret);
 			return cb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="279" endline="283"><![CDATA[
 
 		public ConstructorBuilder DefineConstructor(MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes)
 		{
 			return DefineConstructor(attribs, callConv, parameterTypes, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="284" endline="291"><![CDATA[
 
 		public ConstructorBuilder DefineConstructor(MethodAttributes attribs, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
 		{
 			attribs |= MethodAttributes.RTSpecialName | MethodAttributes.SpecialName;
 			string name = (attribs & MethodAttributes.Static) == 0 ? ConstructorInfo.ConstructorName 
 			MethodBuilder mb = DefineMethod(name, attribs, callingConvention, null, null, null, parameterTypes, requiredCustomModifiers, optionalCustomModifiers);
 			return new ConstructorBuilder(mb);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="292" endline="297"><![CDATA[
 
 		public ConstructorBuilder DefineTypeInitializer()
 		{
 			MethodBuilder mb = DefineMethod(ConstructorInfo.TypeConstructorName, MethodAttributes.Private | MethodAttributes.Static | MethodAttributes.RTSpecialName | MethodAttributes.SpecialName, null, Type.EmptyTypes);
 			return new ConstructorBuilder(mb);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="298" endline="305"><![CDATA[
 
 		private MethodBuilder CreateMethodBuilder(string name, MethodAttributes attributes, CallingConventions callingConvention)
 		{
 			this.ModuleBuilder.MethodDef.AddVirtualRecord();
 			MethodBuilder mb = new MethodBuilder(this, name, attributes, callingConvention);
 			methods.Add(mb);
 			return mb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="306" endline="310"><![CDATA[
 
 		public MethodBuilder DefineMethod(string name, MethodAttributes attribs)
 		{
 			return DefineMethod(name, attribs, CallingConventions.Standard);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="311" endline="315"><![CDATA[
 
 		public MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConvention)
 		{
 			return CreateMethodBuilder(name, attribs, callingConvention);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="316" endline="320"><![CDATA[
 
 		public MethodBuilder DefineMethod(string name, MethodAttributes attribs, Type returnType, Type[] parameterTypes)
 		{
 			return DefineMethod(name, attribs, CallingConventions.Standard, returnType, null, null, parameterTypes, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="321" endline="325"><![CDATA[
 
 		public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
 		{
 			return DefineMethod(name, attributes, callingConvention, returnType, null, null, parameterTypes, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="326" endline="332"><![CDATA[
 
 		public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
 		{
 			MethodBuilder mb = CreateMethodBuilder(name, attributes, callingConvention);
 			mb.SetSignature(returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
 			return mb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="333" endline="337"><![CDATA[
 
 		public MethodBuilder DefinePInvokeMethod(string name, string dllName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet)
 		{
 			return DefinePInvokeMethod(name, dllName, null, attributes, callingConvention, returnType, null, null, parameterTypes, null, null, nativeCallConv, nativeCharSet);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="338" endline="342"><![CDATA[
 
 		public MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet)
 		{
 			return DefinePInvokeMethod(name, dllName, entryName, attributes, callingConvention, returnType, null, null, parameterTypes, null, null, nativeCallConv, nativeCharSet);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="343" endline="354"><![CDATA[
 
 		public MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention,
 			Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
 			Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers,
 			CallingConvention nativeCallConv, CharSet nativeCharSet)
 		{
 			MethodBuilder mb = DefineMethod(name, attributes | MethodAttributes.PinvokeImpl, callingConvention,
 				returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers,
 				parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
 			mb.SetDllImportPseudoCustomAttribute(dllName, entryName, nativeCallConv, nativeCharSet, null, null, null, null, null);
 			return mb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="355" endline="363"><![CDATA[
 
 		public void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration)
 		{
 			MethodImplTable.Record rec = new MethodImplTable.Record();
 			rec.Class = token;
 			rec.MethodBody = this.ModuleBuilder.GetMethodToken(methodInfoBody).Token;
 			rec.MethodDeclaration = this.ModuleBuilder.GetMethodToken(methodInfoDeclaration).Token;
 			this.ModuleBuilder.MethodImpl.AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="364" endline="368"><![CDATA[
 
 		public FieldBuilder DefineField(string name, Type fieldType, FieldAttributes attribs)
 		{
 			return DefineField(name, fieldType, null, null, attribs);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="369" endline="375"><![CDATA[
 
 		public FieldBuilder DefineField(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes)
 		{
 			FieldBuilder fb = new FieldBuilder(this, fieldName, type, requiredCustomModifiers, optionalCustomModifiers, attributes);
 			fields.Add(fb);
 			return fb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="376" endline="380"><![CDATA[
 
 		public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] parameterTypes)
 		{
 			return DefineProperty(name, attributes, returnType, null, null, parameterTypes, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="381" endline="387"><![CDATA[
 
 		public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
 			Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
 		{
 			return DefinePropertyImpl(name, attributes, CallingConventions.Standard, true, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers,
 				parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="388" endline="395"><![CDATA[
 
 		public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention,
 			Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
 			Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
 		{
 			return DefinePropertyImpl(name, attributes, callingConvention, false, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers,
 				parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="396" endline="410"><![CDATA[
 
 		private PropertyBuilder DefinePropertyImpl(string name, PropertyAttributes attributes, CallingConventions callingConvention, bool patchCallingConvention,
 			Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers,
 			Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
 		{
 			if (properties == null)
 			{
 				properties = new List<PropertyBuilder>();
 			}
 			PropertySignature sig = PropertySignature.Create(callingConvention, returnType, returnTypeOptionalCustomModifiers, returnTypeRequiredCustomModifiers,
 				parameterTypes, parameterTypeOptionalCustomModifiers, parameterTypeRequiredCustomModifiers);
 			PropertyBuilder pb = new PropertyBuilder(this, name, attributes, sig, patchCallingConvention);
 			properties.Add(pb);
 			return pb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="411" endline="421"><![CDATA[
 
 		public EventBuilder DefineEvent(string name, EventAttributes attributes, Type eventtype)
 		{
 			if (events == null)
 			{
 				events = new List<EventBuilder>();
 			}
 			EventBuilder eb = new EventBuilder(this, name, attributes, eventtype);
 			events.Add(eb);
 			return eb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="422" endline="426"><![CDATA[
 
 		public TypeBuilder DefineNestedType(string name)
 		{
 			return DefineNestedType(name, TypeAttributes.Class | TypeAttributes.NestedPrivate);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="427" endline="431"><![CDATA[
 
 		public TypeBuilder DefineNestedType(string name, TypeAttributes attribs)
 		{
 			return DefineNestedType(name, attribs, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="432" endline="441"><![CDATA[
 
 		public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
 		{
 			TypeBuilder tb = DefineNestedType(name, attr, parent);
 			foreach (Type iface in interfaces)
 			{
 				tb.AddInterfaceImplementation(iface);
 			}
 			foreach (Type iface in interfaces)
 			{
 				tb.AddInterfaceImplementation(iface);
 			}
 			return tb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="442" endline="447"><![CDATA[
 
 		public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent)
 		{
 			this.typeFlags |= TypeFlags.HasNestedTypes;
 			return this.ModuleBuilder.DefineNestedTypeHelper(this, name, attr, parent, PackingSize.Unspecified, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="448" endline="453"><![CDATA[
 
 		public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, int typeSize)
 		{
 			this.typeFlags |= TypeFlags.HasNestedTypes;
 			return this.ModuleBuilder.DefineNestedTypeHelper(this, name, attr, parent, PackingSize.Unspecified, typeSize);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="454" endline="459"><![CDATA[
 
 		public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize)
 		{
 			this.typeFlags |= TypeFlags.HasNestedTypes;
 			return this.ModuleBuilder.DefineNestedTypeHelper(this, name, attr, parent, packSize, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="460" endline="464"><![CDATA[
 
 		public void SetParent(Type parent)
 		{
 			baseType = parent;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="465" endline="473"><![CDATA[
 
 		public void AddInterfaceImplementation(Type interfaceType)
 		{
 			if (interfaces == null)
 			{
 				interfaces = new List<Type>();
 			}
 			interfaces.Add(interfaceType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="474" endline="487"><![CDATA[
 
 		public int Size
 		{
 			get
 			{
 				for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
 				{
 					if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
 					{
 						return this.ModuleBuilder.ClassLayout.records[i].ClassSize;
 					}
 				}
 				for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
 				{
 					if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
 					{
 						return this.ModuleBuilder.ClassLayout.records[i].ClassSize;
 					}
 				}
 				return 0;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="488" endline="502"><![CDATA[
 		}
 
 		public PackingSize PackingSize
 		{
 			get
 			{
 				for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
 				{
 					if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
 					{
 						return (PackingSize)this.ModuleBuilder.ClassLayout.records[i].PackingSize;
 					}
 				}
 				for (int i = 0; i < this.ModuleBuilder.ClassLayout.records.Length; i++)
 				{
 					if (this.ModuleBuilder.ClassLayout.records[i].Parent == token)
 					{
 						return (PackingSize)this.ModuleBuilder.ClassLayout.records[i].PackingSize;
 					}
 				}
 				return PackingSize.Unspecified;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="503" endline="555"><![CDATA[
 		}
 
 		private void SetStructLayoutPseudoCustomAttribute(CustomAttributeBuilder customBuilder)
 		{
 			object val = customBuilder.GetConstructorArgument(0);
 			LayoutKind layout;
 			if (val is short)
 			{
 				layout = (LayoutKind)(short)val;
 			}
 			else
 			{
 				layout = (LayoutKind)val;
 			}
 			int? pack = (int?)customBuilder.GetFieldValue("Pack");
 			int? size = (int?)customBuilder.GetFieldValue("Size");
 			if (pack.HasValue || size.HasValue)
 			{
 				ClassLayoutTable.Record rec = new ClassLayoutTable.Record();
 				rec.PackingSize = (short)(pack ?? 0);
 				rec.ClassSize = size ?? 0;
 				rec.Parent = token;
 				this.ModuleBuilder.ClassLayout.AddOrReplaceRecord(rec);
 			}
 			attribs &= ~TypeAttributes.LayoutMask;
 			switch (layout)
 			{
 				case LayoutKind.Auto
 					attribs |= TypeAttributes.AutoLayout;
 					break;
 				case LayoutKind.Explicit
 					attribs |= TypeAttributes.ExplicitLayout;
 					break;
 				case LayoutKind.Sequential
 					attribs |= TypeAttributes.SequentialLayout;
 					break;
 			}
 			CharSet? charSet = customBuilder.GetFieldValue<CharSet>("CharSet");
 			attribs &= ~TypeAttributes.StringFormatMask;
 			switch (charSet ?? CharSet.None)
 			{
 				case CharSet.None
 				case CharSet.Ansi
 					attribs |= TypeAttributes.AnsiClass;
 					break;
 				case CharSet.Auto
 					attribs |= TypeAttributes.AutoClass;
 					break;
 				case CharSet.Unicode
 					attribs |= TypeAttributes.UnicodeClass;
 					break;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="556" endline="560"><![CDATA[
 
 		public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
 		{
 			SetCustomAttribute(new CustomAttributeBuilder(con, binaryAttribute));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="561" endline="590"><![CDATA[
 
 		public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
 		{
 			Universe u = this.ModuleBuilder.universe;
 			Type type = customBuilder.Constructor.DeclaringType;
 			if (type == u.System_Runtime_InteropServices_StructLayoutAttribute)
 			{
 				SetStructLayoutPseudoCustomAttribute(customBuilder.DecodeBlob(this.Assembly));
 			}
 			else if (type == u.System_SerializableAttribute)
 			{
 				attribs |= TypeAttributes.Serializable;
 			}
 			else if (type == u.System_Runtime_InteropServices_ComImportAttribute)
 			{
 				attribs |= TypeAttributes.Import;
 			}
 			else if (type == u.System_Runtime_CompilerServices_SpecialNameAttribute)
 			{
 				attribs |= TypeAttributes.SpecialName;
 			}
 			else
 			{
 				if (type == u.System_Security_SuppressUnmanagedCodeSecurityAttribute)
 				{
 					attribs |= TypeAttributes.HasSecurity;
 				}
 				this.ModuleBuilder.SetCustomAttribute(token, customBuilder);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="591" endline="600"><![CDATA[
 
 		public void __AddDeclarativeSecurity(CustomAttributeBuilder customBuilder)
 		{
 			attribs |= TypeAttributes.HasSecurity;
 			if (declarativeSecurity == null)
 			{
 				declarativeSecurity = new List<CustomAttributeBuilder>();
 			}
 			declarativeSecurity.Add(customBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="601" endline="606"><![CDATA[
 
 		public void AddDeclarativeSecurity(System.Security.Permissions.SecurityAction securityAction, System.Security.PermissionSet permissionSet)
 		{
 			this.ModuleBuilder.AddDeclarativeSecurity(token, securityAction, permissionSet);
 			this.attribs |= TypeAttributes.HasSecurity;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="607" endline="617"><![CDATA[
 
 		public GenericTypeParameterBuilder[] DefineGenericParameters(params string[] names)
 		{
 			typeFlags |= TypeFlags.IsGenericTypeDefinition;
 			gtpb = new GenericTypeParameterBuilder[names.Length];
 			for (int i = 0; i < names.Length; i++)
 			{
 				gtpb[i] = new GenericTypeParameterBuilder(names[i], this, null, i);
 			}
 			for (int i = 0; i < names.Length; i++)
 			{
 				gtpb[i] = new GenericTypeParameterBuilder(names[i], this, null, i);
 			}
 			return (GenericTypeParameterBuilder[])gtpb.Clone();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="618" endline="622"><![CDATA[
 
 		public override Type[] GetGenericArguments()
 		{
 			return Util.Copy(gtpb);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="623" endline="627"><![CDATA[
 
 		public override Type[][] __GetGenericArgumentsOptionalCustomModifiers()
 		{
 			return gtpb == null ? Empty<Type[]>.Array 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="628" endline="632"><![CDATA[
 
 		public override Type[][] __GetGenericArgumentsRequiredCustomModifiers()
 		{
 			return gtpb == null ? Empty<Type[]>.Array 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="633" endline="637"><![CDATA[
 
 		internal override Type GetGenericTypeArgument(int index)
 		{
 			return gtpb[index];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="638" endline="641"><![CDATA[
 
 		public override bool ContainsGenericParameters
 		{
 			get { return gtpb != null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="642" endline="647"><![CDATA[
 		}
 
 		public override Type GetGenericTypeDefinition()
 		{
 			return this;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="648" endline="680"><![CDATA[
 
 		public Type CreateType()
 		{
 			if ((typeFlags & TypeFlags.Baked) != 0)
 			{
 				// .NET allows multiple invocations (subsequent invocations return the same baked type)
 				throw new NotImplementedException();
 			}
 			typeFlags |= TypeFlags.Baked;
 			foreach (MethodBuilder mb in methods)
 			{
 				mb.Bake();
 			}
 			foreach (MethodBuilder mb in methods)
 			{
 				mb.Bake();
 			}
 			if (declarativeSecurity != null)
 			{
 				this.ModuleBuilder.AddDeclarativeSecurity(token, declarativeSecurity);
 			}
 			if (baseType != null)
 			{
 				extends = this.ModuleBuilder.GetTypeToken(baseType).Token;
 			}
 			if (interfaces != null)
 			{
 				foreach (Type interfaceType in interfaces)
 				{
 					InterfaceImplTable.Record rec = new InterfaceImplTable.Record();
 					rec.Class = token;
 					rec.Interface = this.ModuleBuilder.GetTypeToken(interfaceType).Token;
 					this.ModuleBuilder.InterfaceImpl.AddRecord(rec);
 				}
 				foreach (Type interfaceType in interfaces)
 				{
 					InterfaceImplTable.Record rec = new InterfaceImplTable.Record();
 					rec.Class = token;
 					rec.Interface = this.ModuleBuilder.GetTypeToken(interfaceType).Token;
 					this.ModuleBuilder.InterfaceImpl.AddRecord(rec);
 				}
 			}
 			return new BakedType(this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="681" endline="706"><![CDATA[
 
 		internal void PopulatePropertyAndEventTables()
 		{
 			if (properties != null)
 			{
 				PropertyMapTable.Record rec = new PropertyMapTable.Record();
 				rec.Parent = token;
 				rec.PropertyList = this.ModuleBuilder.Property.RowCount + 1;
 				this.ModuleBuilder.PropertyMap.AddRecord(rec);
 				foreach (PropertyBuilder pb in properties)
 				{
 					pb.Bake();
 				}
 				foreach (PropertyBuilder pb in properties)
 				{
 					pb.Bake();
 				}
 			}
 			if (events != null)
 			{
 				EventMapTable.Record rec = new EventMapTable.Record();
 				rec.Parent = token;
 				rec.EventList = this.ModuleBuilder.Event.RowCount + 1;
 				this.ModuleBuilder.EventMap.AddRecord(rec);
 				foreach (EventBuilder eb in events)
 				{
 					eb.Bake();
 				}
 				foreach (EventBuilder eb in events)
 				{
 					eb.Bake();
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="707" endline="710"><![CDATA[
 
 		public override Type BaseType
 		{
 			get { return baseType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="711" endline="725"><![CDATA[
 		}
 
 		public override string FullName
 		{
 			get
 			{
 				if (this.IsNested)
 				{
 					return this.DeclaringType.FullName + "+" + nameOrFullName;
 				}
 				else
 				{
 					return nameOrFullName;
 				}
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="726" endline="740"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get
 			{
 				if (this.IsNested)
 				{
 					return nameOrFullName;
 				}
 				else
 				{
 					return base.Name;
 				}
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="741" endline="749"><![CDATA[
 		}
 
 		public override string Namespace
 		{
 			get
 			{
 				// for some reason, TypeBuilder doesn't return null (and mcs depends on this)
 				return base.Namespace ?? "";
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="750" endline="757"><![CDATA[
 		}
 
 		internal string GetBakedNamespace()
 		{
 			// if you refer to the TypeBuilder via its baked Type, Namespace will return null
 			// for the empty namespace (instead of "" like TypeBuilder.Namespace above does)
 			return base.Namespace;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="758" endline="761"><![CDATA[
 
 		public override TypeAttributes Attributes
 		{
 			get { return attribs; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="762" endline="767"><![CDATA[
 		}
 
 		public void __SetAttributes(TypeAttributes attributes)
 		{
 			this.attribs = attributes;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="768" endline="772"><![CDATA[
 
 		public override Type[] __GetDeclaredInterfaces()
 		{
 			return Util.ToArray(interfaces, Type.EmptyTypes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="773" endline="790"><![CDATA[
 
 		public override MethodBase[] __GetDeclaredMethods()
 		{
 			MethodBase[] methods = new MethodBase[this.methods.Count];
 			for (int i = 0; i < methods.Length; i++)
 			{
 				MethodBuilder mb = this.methods[i];
 				if (mb.IsConstructor)
 				{
 					methods[i] = new ConstructorInfoImpl(mb);
 				}
 				else
 				{
 					methods[i] = mb;
 				}
 			}
 			for (int i = 0; i < methods.Length; i++)
 			{
 				MethodBuilder mb = this.methods[i];
 				if (mb.IsConstructor)
 				{
 					methods[i] = new ConstructorInfoImpl(mb);
 				}
 				else
 				{
 					methods[i] = mb;
 				}
 			}
 			return methods;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="791" endline="823"><![CDATA[
 
 		public override StructLayoutAttribute StructLayoutAttribute
 		{
 			get
 			{
 				StructLayoutAttribute attr;
 				if ((attribs & TypeAttributes.ExplicitLayout) != 0)
 				{
 					attr = new StructLayoutAttribute(LayoutKind.Explicit);
 					attr.Pack = 8;
 					attr.Size = 0;
 					this.ModuleBuilder.ClassLayout.GetLayout(token, ref attr.Pack, ref attr.Size);
 				}
 				else
 				{
 					attr = new StructLayoutAttribute((attribs & TypeAttributes.SequentialLayout) != 0 ? LayoutKind.Sequential 
 					attr.Pack = 8;
 					attr.Size = 0;
 				}
 				switch (attribs & TypeAttributes.StringFormatMask)
 				{
 					case TypeAttributes.AutoClass
 						attr.CharSet = CharSet.Auto;
 						break;
 					case TypeAttributes.UnicodeClass
 						attr.CharSet = CharSet.Unicode;
 						break;
 					case TypeAttributes.AnsiClass
 						attr.CharSet = CharSet.Ansi;
 						break;
 				}
 				return attr;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="824" endline="828"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return owner as TypeBuilder; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="829" endline="833"><![CDATA[
 		}
 
 		public override bool IsGenericType
 		{
 			get { return IsGenericTypeDefinition; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="834" endline="838"><![CDATA[
 		}
 
 		public override bool IsGenericTypeDefinition
 		{
 			get { return (typeFlags & TypeFlags.IsGenericTypeDefinition) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="839" endline="843"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return token; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="844" endline="849"><![CDATA[
 		}
 
 		public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes)
 		{
 			return DefineInitializedData(name, new byte[size], attributes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="850" endline="863"><![CDATA[
 
 		public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes)
 		{
 			Type fieldType = this.ModuleBuilder.GetType("$ArrayType$" + data.Length);
 			if (fieldType == null)
 			{
 				TypeBuilder tb = this.ModuleBuilder.DefineType("$ArrayType$" + data.Length, TypeAttributes.Public | TypeAttributes.Sealed | TypeAttributes.ExplicitLayout, this.Module.universe.System_ValueType, PackingSize.Size1, data.Length);
 				tb.CreateType();
 				fieldType = tb;
 			}
 			FieldBuilder fb = DefineField(name, fieldType, attributes | FieldAttributes.Static);
 			fb.__SetDataAndRVA(data);
 			return fb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="864" endline="868"><![CDATA[
 
 		public static MethodInfo GetMethod(Type type, MethodInfo method)
 		{
 			return new GenericMethodInstance(type, method, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="869" endline="873"><![CDATA[
 
 		public static ConstructorInfo GetConstructor(Type type, ConstructorInfo constructor)
 		{
 			return new ConstructorInfoImpl(GetMethod(type, constructor.GetMethodInfo()));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="874" endline="878"><![CDATA[
 
 		public static FieldInfo GetField(Type type, FieldInfo field)
 		{
 			return new GenericFieldInstance(type, field);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="879" endline="882"><![CDATA[
 
 		public override Module Module
 		{
 			get { return owner.ModuleBuilder; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="883" endline="887"><![CDATA[
 		}
 
 		public TypeToken TypeToken
 		{
 			get { return new TypeToken(token); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="888" endline="900"><![CDATA[
 		}
 
 		internal void WriteTypeDefRecord(MetadataWriter mw, ref int fieldList, ref int methodList)
 		{
 			mw.Write((int)attribs);
 			mw.WriteStringIndex(typeName);
 			mw.WriteStringIndex(typeNameSpace);
 			mw.WriteTypeDefOrRef(extends);
 			mw.WriteField(fieldList);
 			mw.WriteMethodDef(methodList);
 			methodList += methods.Count;
 			fieldList += fields.Count;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="901" endline="908"><![CDATA[
 
 		internal void WriteMethodDefRecords(int baseRVA, MetadataWriter mw, ref int paramList)
 		{
 			foreach (MethodBuilder mb in methods)
 			{
 				mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
 			}
 			foreach (MethodBuilder mb in methods)
 			{
 				mb.WriteMethodDefRecord(baseRVA, mw, ref paramList);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="909" endline="920"><![CDATA[
 
 		internal void ResolveMethodAndFieldTokens(ref int methodToken, ref int fieldToken, ref int parameterToken)
 		{
 			foreach (MethodBuilder method in methods)
 			{
 				method.FixupToken(methodToken++, ref parameterToken);
 			}
 			foreach (MethodBuilder method in methods)
 			{
 				method.FixupToken(methodToken++, ref parameterToken);
 			}
 			foreach (FieldBuilder field in fields)
 			{
 				field.FixupToken(fieldToken++);
 			}
 			foreach (FieldBuilder field in fields)
 			{
 				field.FixupToken(fieldToken++);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="921" endline="928"><![CDATA[
 
 		internal void WriteParamRecords(MetadataWriter mw)
 		{
 			foreach (MethodBuilder mb in methods)
 			{
 				mb.WriteParamRecords(mw);
 			}
 			foreach (MethodBuilder mb in methods)
 			{
 				mb.WriteParamRecords(mw);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="929" endline="936"><![CDATA[
 
 		internal void WriteFieldRecords(MetadataWriter mw)
 		{
 			foreach (FieldBuilder fb in fields)
 			{
 				fb.WriteFieldRecords(mw);
 			}
 			foreach (FieldBuilder fb in fields)
 			{
 				fb.WriteFieldRecords(mw);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="937" endline="940"><![CDATA[
 
 		internal ModuleBuilder ModuleBuilder
 		{
 			get { return owner.ModuleBuilder; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="941" endline="945"><![CDATA[
 		}
 
 		ModuleBuilder ITypeOwner.ModuleBuilder
 		{
 			get { return owner.ModuleBuilder; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="946" endline="951"><![CDATA[
 		}
 
 		internal override int GetModuleBuilderToken()
 		{
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="952" endline="955"><![CDATA[
 
 		internal bool HasNestedTypes
 		{
 			get { return (typeFlags & TypeFlags.HasNestedTypes) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="956" endline="969"><![CDATA[
 		}
 
 		// helper for ModuleBuilder.ResolveMethod()
 		internal MethodBase LookupMethod(int token)
 		{
 			foreach (MethodBuilder method in methods)
 			{
 				if (method.MetadataToken == token)
 				{
 					return method;
 				}
 			}
 			foreach (MethodBuilder method in methods)
 			{
 				if (method.MetadataToken == token)
 				{
 					return method;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="970" endline="974"><![CDATA[
 
 		public bool IsCreated()
 		{
 			return (typeFlags & TypeFlags.Baked) != 0;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="975" endline="982"><![CDATA[
 
 		internal override void CheckBaked()
 		{
 			if ((typeFlags & TypeFlags.Baked) == 0)
 			{
 				throw new NotSupportedException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="983" endline="1000"><![CDATA[
 
 		public override Type[] __GetDeclaredTypes()
 		{
 			if (this.HasNestedTypes)
 			{
 				List<Type> types = new List<Type>();
 				List<int> classes = this.ModuleBuilder.NestedClass.GetNestedClasses(token);
 				foreach (int nestedClass in classes)
 				{
 					types.Add(this.ModuleBuilder.ResolveType(nestedClass));
 				}
 				foreach (int nestedClass in classes)
 				{
 					types.Add(this.ModuleBuilder.ResolveType(nestedClass));
 				}
 				return types.ToArray();
 			}
 			else
 			{
 				return Type.EmptyTypes;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1001" endline="1005"><![CDATA[
 
 		public override FieldInfo[] __GetDeclaredFields()
 		{
 			return Util.ToArray(fields, Empty<FieldInfo>.Array);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1006" endline="1010"><![CDATA[
 
 		public override EventInfo[] __GetDeclaredEvents()
 		{
 			return Util.ToArray(events, Empty<EventInfo>.Array);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1011" endline="1015"><![CDATA[
 
 		public override PropertyInfo[] __GetDeclaredProperties()
 		{
 			return Util.ToArray(properties, Empty<PropertyInfo>.Array);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1016" endline="1019"><![CDATA[
 
 		internal override bool IsModulePseudoType
 		{
 			get { return token == 0x02000001; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1020" endline="1030"><![CDATA[
 		}
 	}
 
 	sealed class BakedType 
 	{
 		private readonly TypeBuilder typeBuilder;
 
 		internal BakedType(TypeBuilder typeBuilder)
 		{
 			this.typeBuilder = typeBuilder;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1031" endline="1034"><![CDATA[
 
 		public override string AssemblyQualifiedName
 		{
 			get { return typeBuilder.AssemblyQualifiedName; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1035" endline="1039"><![CDATA[
 		}
 
 		public override Type BaseType
 		{
 			get { return typeBuilder.BaseType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1040" endline="1044"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return typeBuilder.Name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1045" endline="1049"><![CDATA[
 		}
 
 		public override string Namespace
 		{
 			get { return typeBuilder.GetBakedNamespace(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1050" endline="1054"><![CDATA[
 		}
 
 		public override string FullName
 		{
 			get { return typeBuilder.FullName; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1055" endline="1059"><![CDATA[
 		}
 
 		public override TypeAttributes Attributes
 		{
 			get { return typeBuilder.Attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1060" endline="1065"><![CDATA[
 		}
 
 		public override Type[] __GetDeclaredInterfaces()
 		{
 			return typeBuilder.__GetDeclaredInterfaces();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1066" endline="1070"><![CDATA[
 
 		public override MethodBase[] __GetDeclaredMethods()
 		{
 			return typeBuilder.__GetDeclaredMethods();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1071" endline="1075"><![CDATA[
 
 		public override __MethodImplMap __GetMethodImplMap()
 		{
 			return typeBuilder.__GetMethodImplMap();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1076" endline="1080"><![CDATA[
 
 		public override FieldInfo[] __GetDeclaredFields()
 		{
 			return typeBuilder.__GetDeclaredFields();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1081" endline="1085"><![CDATA[
 
 		public override EventInfo[] __GetDeclaredEvents()
 		{
 			return typeBuilder.__GetDeclaredEvents();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1086" endline="1090"><![CDATA[
 
 		public override PropertyInfo[] __GetDeclaredProperties()
 		{
 			return typeBuilder.__GetDeclaredProperties();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1091" endline="1095"><![CDATA[
 
 		public override Type[] __GetDeclaredTypes()
 		{
 			return typeBuilder.__GetDeclaredTypes();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1096" endline="1099"><![CDATA[
 
 		public override Type DeclaringType
 		{
 			get { return typeBuilder.DeclaringType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1100" endline="1104"><![CDATA[
 		}
 
 		public override StructLayoutAttribute StructLayoutAttribute
 		{
 			get { return typeBuilder.StructLayoutAttribute; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1105" endline="1110"><![CDATA[
 		}
 
 		public override Type UnderlyingSystemType
 		{
 			// Type.Equals/GetHashCode relies on this
 			get { return typeBuilder; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1111" endline="1116"><![CDATA[
 		}
 
 		public override Type[] GetGenericArguments()
 		{
 			return typeBuilder.GetGenericArguments();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1117" endline="1121"><![CDATA[
 
 		internal override Type GetGenericTypeArgument(int index)
 		{
 			return typeBuilder.GetGenericTypeArgument(index);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1122" endline="1126"><![CDATA[
 
 		public override Type[][] __GetGenericArgumentsOptionalCustomModifiers()
 		{
 			return typeBuilder.__GetGenericArgumentsOptionalCustomModifiers();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1127" endline="1131"><![CDATA[
 
 		public override Type[][] __GetGenericArgumentsRequiredCustomModifiers()
 		{
 			return typeBuilder.__GetGenericArgumentsRequiredCustomModifiers();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1132" endline="1135"><![CDATA[
 
 		public override bool IsGenericType
 		{
 			get { return typeBuilder.IsGenericType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1136" endline="1140"><![CDATA[
 		}
 
 		public override bool IsGenericTypeDefinition
 		{
 			get { return typeBuilder.IsGenericTypeDefinition; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1141" endline="1145"><![CDATA[
 		}
 
 		public override bool ContainsGenericParameters
 		{
 			get { return typeBuilder.ContainsGenericParameters; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1146" endline="1150"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return typeBuilder.MetadataToken; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1151" endline="1155"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return typeBuilder.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\TypeBuilder.cs" startline="1156" endline="1161"><![CDATA[
 		}
 
 		internal override int GetModuleBuilderToken()
 		{
 			return typeBuilder.GetModuleBuilderToken();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeNamedArgument.cs" startline="36" endline="39"><![CDATA[
 		{
 			this.member = member;
 			this.value = value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeNamedArgument.cs" startline="40" endline="44"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			return this == obj as CustomAttributeNamedArgument?;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeNamedArgument.cs" startline="45" endline="49"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return member.GetHashCode() ^ 53 * value.GetHashCode();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeNamedArgument.cs" startline="50" endline="53"><![CDATA[
 
 		public MemberInfo MemberInfo
 		{
 			get { return member; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeNamedArgument.cs" startline="54" endline="58"><![CDATA[
 		}
 
 		public CustomAttributeTypedArgument TypedValue
 		{
 			get { return value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeNamedArgument.cs" startline="59" endline="64"><![CDATA[
 		}
 
 		public static bool operator ==(CustomAttributeNamedArgument arg1, CustomAttributeNamedArgument arg2)
 		{
 			return arg1.member.Equals(arg2.member) && arg1.value == arg2.value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeNamedArgument.cs" startline="65" endline="69"><![CDATA[
 
 		public static bool operator !=(CustomAttributeNamedArgument arg1, CustomAttributeNamedArgument arg2)
 		{
 			return !(arg1 == arg2);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\symbolwriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\import.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="37" endline="40"><![CDATA[
 		internal ByteBuffer(int initialCapacity)
 		{
 			buffer = new byte[initialCapacity];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="41" endline="46"><![CDATA[
 
 		private ByteBuffer(byte[] wrap, int length)
 		{
 			this.buffer = wrap;
 			this.pos = length;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="47" endline="50"><![CDATA[
 
 		internal int Position
 		{
 			get { return pos; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="51" endline="57"><![CDATA[
 			set
 			{
 				if (value > this.Length || value > buffer.Length)
 					throw new ArgumentOutOfRangeException();
 				__length = Math.Max(__length, pos);
 				pos = value;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="58" endline="62"><![CDATA[
 		}
 
 		internal int Length
 		{
 			get { return Math.Max(pos, __length); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="63" endline="70"><![CDATA[
 		}
 
 		private void Grow(int minGrow)
 		{
 			byte[] newbuf = new byte[Math.Max(buffer.Length + minGrow, buffer.Length * 2)];
 			Buffer.BlockCopy(buffer, 0, newbuf, 0, buffer.Length);
 			buffer = newbuf;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="71" endline="79"><![CDATA[
 
 		// NOTE this does not advance the position
 		internal int GetInt32AtCurrentPosition()
 		{
 			return buffer[pos]
 				+ (buffer[pos + 1] << 8)
 				+ (buffer[pos + 2] << 16)
 				+ (buffer[pos + 3] << 24);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="80" endline="85"><![CDATA[
 
 		// NOTE this does not advance the position
 		internal byte GetByteAtCurrentPosition()
 		{
 			return buffer[pos];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="86" endline="93"><![CDATA[
 
 		internal void Write(byte[] value)
 		{
 			if (pos + value.Length > buffer.Length)
 				Grow(value.Length);
 			Buffer.BlockCopy(value, 0, buffer, pos, value.Length);
 			pos += value.Length;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="94" endline="100"><![CDATA[
 
 		internal void Write(byte value)
 		{
 			if (pos == buffer.Length)
 				Grow(1);
 			buffer[pos++] = value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="101" endline="105"><![CDATA[
 
 		internal void Write(sbyte value)
 		{
 			Write((byte)value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="106" endline="110"><![CDATA[
 
 		internal void Write(ushort value)
 		{
 			Write((short)value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="111" endline="118"><![CDATA[
 
 		internal void Write(short value)
 		{
 			if (pos + 2 > buffer.Length)
 				Grow(2);
 			buffer[pos++] = (byte)value;
 			buffer[pos++] = (byte)(value >> 8);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="119" endline="123"><![CDATA[
 
 		internal void Write(uint value)
 		{
 			Write((int)value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="124" endline="133"><![CDATA[
 	
 		internal void Write(int value)
 		{
 			if (pos + 4 > buffer.Length)
 				Grow(4);
 			buffer[pos++] = (byte)value;
 			buffer[pos++] = (byte)(value >> 8);
 			buffer[pos++] = (byte)(value >> 16);
 			buffer[pos++] = (byte)(value >> 24);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="134" endline="138"><![CDATA[
 
 		internal void Write(ulong value)
 		{
 			Write((long)value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="139" endline="152"><![CDATA[
 
 		internal void Write(long value)
 		{
 			if (pos + 8 > buffer.Length)
 				Grow(8);
 			buffer[pos++] = (byte)value;
 			buffer[pos++] = (byte)(value >> 8);
 			buffer[pos++] = (byte)(value >> 16);
 			buffer[pos++] = (byte)(value >> 24);
 			buffer[pos++] = (byte)(value >> 32);
 			buffer[pos++] = (byte)(value >> 40);
 			buffer[pos++] = (byte)(value >> 48);
 			buffer[pos++] = (byte)(value >> 56);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="153" endline="157"><![CDATA[
 
 		internal void Write(float value)
 		{
 			Write(SingleConverter.SingleToInt32Bits(value));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="158" endline="162"><![CDATA[
 
 		internal void Write(double value)
 		{
 			Write(BitConverter.DoubleToInt64Bits(value));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="163" endline="176"><![CDATA[
 
 		internal void Write(string str)
 		{
 			if (str == null)
 			{
 				Write((byte)0xFF);
 			}
 			else
 			{
 				byte[] buf = Encoding.UTF8.GetBytes(str);
 				WriteCompressedInt(buf.Length);
 				Write(buf);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="177" endline="196"><![CDATA[
 
 		internal void WriteCompressedInt(int value)
 		{
 			if (value <= 0x7F)
 			{
 				Write((byte)value);
 			}
 			else if (value <= 0x3FFF)
 			{
 				Write((byte)(0x80 | (value >> 8)));
 				Write((byte)value);
 			}
 			else
 			{
 				Write((byte)(0xC0 | (value >> 24)));
 				Write((byte)(value >> 16));
 				Write((byte)(value >> 8));
 				Write((byte)value);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="197" endline="204"><![CDATA[
 
 		internal void Write(ByteBuffer bb)
 		{
 			if (pos + bb.Length > buffer.Length)
 				Grow(bb.Length);
 			Buffer.BlockCopy(bb.buffer, 0, buffer, pos, bb.Length);
 			pos += bb.Length;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="205" endline="209"><![CDATA[
 
 		internal void WriteTo(System.IO.Stream stream)
 		{
 			stream.Write(buffer, 0, this.Length);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="210" endline="215"><![CDATA[
 
 		internal void Clear()
 		{
 			pos = 0;
 			__length = 0;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="216" endline="224"><![CDATA[
 
 		internal void Align(int alignment)
 		{
 			if (pos + alignment > buffer.Length)
 				Grow(alignment);
 			int newpos = (pos + alignment - 1) & ~(alignment - 1);
 			while (pos < newpos)
 				buffer[pos++] = 0;
 			while (pos < newpos)
 				buffer[pos++] = 0;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="225" endline="242"><![CDATA[
 
 		internal void WriteTypeDefOrRefEncoded(int token)
 		{
 			switch (token >> 24)
 			{
 				case TypeDefTable.Index
 					WriteCompressedInt((token & 0xFFFFFF) << 2 | 0);
 					break;
 				case TypeRefTable.Index
 					WriteCompressedInt((token & 0xFFFFFF) << 2 | 1);
 					break;
 				case TypeSpecTable.Index
 					WriteCompressedInt((token & 0xFFFFFF) << 2 | 2);
 					break;
 				default
 					throw new InvalidOperationException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="243" endline="258"><![CDATA[
 
 		internal void Write(System.IO.Stream stream)
 		{
 			const int chunkSize = 8192;
 			for (; ; )
 			{
 				if (pos + chunkSize > buffer.Length)
 					Grow(chunkSize);
 				int read = stream.Read(buffer, pos, chunkSize);
 				if (read <= 0)
 				{
 					break;
 				}
 				pos += read;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="259" endline="265"><![CDATA[
 
 		internal byte[] ToArray()
 		{
 			byte[] buf = new byte[pos];
 			Buffer.BlockCopy(buffer, 0, buf, 0, pos);
 			return buf;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="266" endline="270"><![CDATA[
 
 		internal static ByteBuffer Wrap(byte[] buf)
 		{
 			return new ByteBuffer(buf, buf.Length);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="271" endline="275"><![CDATA[
 
 		internal static ByteBuffer Wrap(byte[] buf, int length)
 		{
 			return new ByteBuffer(buf, length);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="276" endline="287"><![CDATA[
 
 		internal bool Match(int pos, ByteBuffer bb2, int pos2, int len)
 		{
 			for (int i = 0; i < len; i++)
 			{
 				if (buffer[pos + i] != bb2.buffer[pos2 + i])
 				{
 					return false;
 				}
 			}
 			for (int i = 0; i < len; i++)
 			{
 				if (buffer[pos + i] != bb2.buffer[pos2 + i])
 				{
 					return false;
 				}
 			}
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="288" endline="299"><![CDATA[
 
 		internal int Hash()
 		{
 			int hash = 0;
 			int len = this.Length;
 			for (int i = 0; i < len; i++)
 			{
 				hash *= 37;
 				hash ^= buffer[i];
 			}
 			for (int i = 0; i < len; i++)
 			{
 				hash *= 37;
 				hash ^= buffer[i];
 			}
 			return hash;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="300" endline="304"><![CDATA[
 
 		internal IKVM.Reflection.Reader.ByteReader GetBlob(int offset)
 		{
 			return IKVM.Reflection.Reader.ByteReader.FromBlob(buffer, offset);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ByteBuffer.cs" startline="305" endline="309"><![CDATA[
 
 		internal void Patch(int offset, byte b)
 		{
 			buffer[offset] = b;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="36" endline="40"><![CDATA[
 		internal MetadataReader(ModuleReader module, BinaryReader br, byte heapSizes)
 			
 		{
 			this.br = br;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="41" endline="45"><![CDATA[
 
 		internal short ReadInt16()
 		{
 			return br.ReadInt16();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="46" endline="50"><![CDATA[
 
 		internal ushort ReadUInt16()
 		{
 			return br.ReadUInt16();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="51" endline="55"><![CDATA[
 
 		internal int ReadInt32()
 		{
 			return br.ReadInt32();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="56" endline="67"><![CDATA[
 
 		internal int ReadStringIndex()
 		{
 			if (bigStrings)
 			{
 				return br.ReadInt32();
 			}
 			else
 			{
 				return br.ReadUInt16();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="68" endline="79"><![CDATA[
 
 		internal int ReadGuidIndex()
 		{
 			if (bigGuids)
 			{
 				return br.ReadInt32();
 			}
 			else
 			{
 				return br.ReadUInt16();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="80" endline="91"><![CDATA[
 
 		internal int ReadBlobIndex()
 		{
 			if (bigBlobs)
 			{
 				return br.ReadInt32();
 			}
 			else
 			{
 				return br.ReadUInt16();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="92" endline="117"><![CDATA[
 
 		internal int ReadResolutionScope()
 		{
 			int codedIndex;
 			if (bigResolutionScope)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 3)
 			{
 				case 0
 					return (ModuleTable.Index << 24) + (codedIndex >> 2);
 				case 1
 					return (ModuleRefTable.Index << 24) + (codedIndex >> 2);
 				case 2
 					return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
 				case 3
 					return (TypeRefTable.Index << 24) + (codedIndex >> 2);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="118" endline="141"><![CDATA[
 
 		internal int ReadTypeDefOrRef()
 		{
 			int codedIndex;
 			if (bigTypeDefOrRef)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 3)
 			{
 				case 0
 					return (TypeDefTable.Index << 24) + (codedIndex >> 2);
 				case 1
 					return (TypeRefTable.Index << 24) + (codedIndex >> 2);
 				case 2
 					return (TypeSpecTable.Index << 24) + (codedIndex >> 2);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="142" endline="169"><![CDATA[
 
 		internal int ReadMemberRefParent()
 		{
 			int codedIndex;
 			if (bigMemberRefParent)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 7)
 			{
 				case 0
 					return (TypeDefTable.Index << 24) + (codedIndex >> 3);
 				case 1
 					return (TypeRefTable.Index << 24) + (codedIndex >> 3);
 				case 2
 					return (ModuleRefTable.Index << 24) + (codedIndex >> 3);
 				case 3
 					return (MethodDefTable.Index << 24) + (codedIndex >> 3);
 				case 4
 					return (TypeSpecTable.Index << 24) + (codedIndex >> 3);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="170" endline="227"><![CDATA[
 
 		internal int ReadHasCustomAttribute()
 		{
 			int codedIndex;
 			if (bigHasCustomAttribute)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 31)
 			{
 				case 0
 					return (MethodDefTable.Index << 24) + (codedIndex >> 5);
 				case 1
 					return (FieldTable.Index << 24) + (codedIndex >> 5);
 				case 2
 					return (TypeRefTable.Index << 24) + (codedIndex >> 5);
 				case 3
 					return (TypeDefTable.Index << 24) + (codedIndex >> 5);
 				case 4
 					return (ParamTable.Index << 24) + (codedIndex >> 5);
 				case 5
 					return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);
 				case 6
 					return (MemberRefTable.Index << 24) + (codedIndex >> 5);
 				case 7
 					return (ModuleTable.Index << 24) + (codedIndex >> 5);
 				case 8
 					throw new BadImageFormatException();
 				case 9
 					return (PropertyTable.Index << 24) + (codedIndex >> 5);
 				case 10
 					return (EventTable.Index << 24) + (codedIndex >> 5);
 				case 11
 					return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);
 				case 12
 					return (ModuleRefTable.Index << 24) + (codedIndex >> 5);
 				case 13
 					return (TypeSpecTable.Index << 24) + (codedIndex >> 5);
 				case 14
 					return (AssemblyTable.Index << 24) + (codedIndex >> 5);
 				case 15
 					return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);
 				case 16
 					return (FileTable.Index << 24) + (codedIndex >> 5);
 				case 17
 					return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);
 				case 18
 					return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);
 				case 19
 					return (GenericParamTable.Index << 24) + (codedIndex >> 5);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="228" endline="249"><![CDATA[
 
 		internal int ReadCustomAttributeType()
 		{
 			int codedIndex;
 			if (bigCustomAttributeType)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 7)
 			{
 				case 2
 					return (MethodDefTable.Index << 24) + (codedIndex >> 3);
 				case 3
 					return (MemberRefTable.Index << 24) + (codedIndex >> 3);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="250" endline="271"><![CDATA[
 
 		internal int ReadMethodDefOrRef()
 		{
 			int codedIndex;
 			if (bigMethodDefOrRef)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 1)
 			{
 				case 0
 					return (MethodDefTable.Index << 24) + (codedIndex >> 1);
 				case 1
 					return (MemberRefTable.Index << 24) + (codedIndex >> 1);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="272" endline="295"><![CDATA[
 
 		internal int ReadHasConstant()
 		{
 			int codedIndex;
 			if (bigHasConstant)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 3)
 			{
 				case 0
 					return (FieldTable.Index << 24) + (codedIndex >> 2);
 				case 1
 					return (ParamTable.Index << 24) + (codedIndex >> 2);
 				case 2
 					return (PropertyTable.Index << 24) + (codedIndex >> 2);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="296" endline="317"><![CDATA[
 
 		internal int ReadHasSemantics()
 		{
 			int codedIndex;
 			if (bigHasSemantics)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 1)
 			{
 				case 0
 					return (EventTable.Index << 24) + (codedIndex >> 1);
 				case 1
 					return (PropertyTable.Index << 24) + (codedIndex >> 1);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="318" endline="339"><![CDATA[
 
 		internal int ReadHasFieldMarshal()
 		{
 			int codedIndex;
 			if (bigHasFieldMarshal)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 1)
 			{
 				case 0
 					return (FieldTable.Index << 24) + (codedIndex >> 1);
 				case 1
 					return (ParamTable.Index << 24) + (codedIndex >> 1);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="340" endline="363"><![CDATA[
 
 		internal int ReadHasDeclSecurity()
 		{
 			int codedIndex;
 			if (bigHasDeclSecurity)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 3)
 			{
 				case 0
 					return (TypeDefTable.Index << 24) + (codedIndex >> 2);
 				case 1
 					return (MethodDefTable.Index << 24) + (codedIndex >> 2);
 				case 2
 					return (AssemblyTable.Index << 24) + (codedIndex >> 2);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="364" endline="385"><![CDATA[
 
 		internal int ReadTypeOrMethodDef()
 		{
 			int codedIndex;
 			if (bigTypeOrMethodDef)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 1)
 			{
 				case 0
 					return (TypeDefTable.Index << 24) + (codedIndex >> 1);
 				case 1
 					return (MethodDefTable.Index << 24) + (codedIndex >> 1);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="386" endline="407"><![CDATA[
 
 		internal int ReadMemberForwarded()
 		{
 			int codedIndex;
 			if (bigMemberForwarded)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 1)
 			{
 				case 0
 					return (FieldTable.Index << 24) + (codedIndex >> 1);
 				case 1
 					return (MethodDefTable.Index << 24) + (codedIndex >> 1);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="408" endline="431"><![CDATA[
 
 		internal int ReadImplementation()
 		{
 			int codedIndex;
 			if (bigImplementation)
 			{
 				codedIndex = br.ReadInt32();
 			}
 			else
 			{
 				codedIndex = br.ReadUInt16();
 			}
 			switch (codedIndex & 3)
 			{
 				case 0
 					return (FileTable.Index << 24) + (codedIndex >> 2);
 				case 1
 					return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);
 				case 2
 					return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);
 				default
 					throw new BadImageFormatException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="432" endline="445"><![CDATA[
 
 		private int ReadToken(int table, bool big)
 		{
 			int rid;
 			if (big)
 			{
 				rid = br.ReadInt32();
 			}
 			else
 			{
 				rid = br.ReadUInt16();
 			}
 			return rid | (table << 24);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="446" endline="457"><![CDATA[
 
 		internal int ReadField()
 		{
 			if (bigField)
 			{
 				return br.ReadInt32();
 			}
 			else
 			{
 				return br.ReadUInt16();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="458" endline="469"><![CDATA[
 
 		internal int ReadMethodDef()
 		{
 			if (bigMethodDef)
 			{
 				return br.ReadInt32();
 			}
 			else
 			{
 				return br.ReadUInt16();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="470" endline="481"><![CDATA[
 
 		internal int ReadParam()
 		{
 			if (bigParam)
 			{
 				return br.ReadInt32();
 			}
 			else
 			{
 				return br.ReadUInt16();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="482" endline="493"><![CDATA[
 
 		internal int ReadProperty()
 		{
 			if (bigProperty)
 			{
 				return br.ReadInt32();
 			}
 			else
 			{
 				return br.ReadUInt16();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="494" endline="505"><![CDATA[
 
 		internal int ReadEvent()
 		{
 			if (bigEvent)
 			{
 				return br.ReadInt32();
 			}
 			else
 			{
 				return br.ReadUInt16();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="506" endline="510"><![CDATA[
 
 		internal int ReadTypeDef()
 		{
 			return ReadToken(TypeDefTable.Index, bigTypeDef);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="511" endline="515"><![CDATA[
 
 		internal int ReadGenericParam()
 		{
 			return ReadToken(GenericParamTable.Index, bigGenericParam);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\MetadataReader.cs" startline="516" endline="520"><![CDATA[
 
 		internal int ReadModuleRef()
 		{
 			return ReadToken(ModuleRefTable.Index, bigModuleRef);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="36" endline="41"><![CDATA[
 		internal ByteReader(byte[] buffer, int offset, int length)
 		{
 			this.buffer = buffer;
 			this.pos = offset;
 			this.end = pos + length;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="42" endline="49"><![CDATA[
 
 		internal static ByteReader FromBlob(byte[] blobHeap, int blob)
 		{
 			ByteReader br = new ByteReader(blobHeap, blob, 4);
 			int length = br.ReadCompressedInt();
 			br.end = br.pos + length;
 			return br;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="50" endline="53"><![CDATA[
 
 		internal int Length
 		{
 			get { return end - pos; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="54" endline="61"><![CDATA[
 		}
 
 		internal byte PeekByte()
 		{
 			if (pos == end)
 				throw new BadImageFormatException();
 			return buffer[pos];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="62" endline="68"><![CDATA[
 
 		internal byte ReadByte()
 		{
 			if (pos == end)
 				throw new BadImageFormatException();
 			return buffer[pos++];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="69" endline="80"><![CDATA[
 
 		internal byte[] ReadBytes(int count)
 		{
 			if (count < 0)
 				throw new BadImageFormatException();
 			if (end - pos < count)
 				throw new BadImageFormatException();
 			byte[] buf = new byte[count];
 			Buffer.BlockCopy(buffer, pos, buf, 0, count);
 			pos += count;
 			return buf;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="81" endline="101"><![CDATA[
 
 		internal int ReadCompressedInt()
 		{
 			byte b1 = ReadByte();
 			if (b1 <= 0x7F)
 			{
 				return b1;
 			}
 			else if ((b1 & 0xC0) == 0x80)
 			{
 				byte b2 = ReadByte();
 				return ((b1 & 0x3F) << 8) | b2;
 			}
 			else
 			{
 				byte b2 = ReadByte();
 				byte b3 = ReadByte();
 				byte b4 = ReadByte();
 				return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="102" endline="114"><![CDATA[
 
 		internal string ReadString()
 		{
 			if (PeekByte() == 0xFF)
 			{
 				pos++;
 				return null;
 			}
 			int length = ReadCompressedInt();
 			string str = Encoding.UTF8.GetString(buffer, pos, length);
 			pos += length;
 			return str;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="115" endline="119"><![CDATA[
 
 		internal char ReadChar()
 		{
 			return (char)ReadInt16();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="120" endline="124"><![CDATA[
 
 		internal sbyte ReadSByte()
 		{
 			return (sbyte)ReadByte();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="125" endline="133"><![CDATA[
 
 		internal short ReadInt16()
 		{
 			if (end - pos < 2)
 				throw new BadImageFormatException();
 			byte b1 = buffer[pos++];
 			byte b2 = buffer[pos++];
 			return (short)(b1 | (b2 << 8));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="134" endline="138"><![CDATA[
 
 		internal ushort ReadUInt16()
 		{
 			return (ushort)ReadInt16();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="139" endline="149"><![CDATA[
 
 		internal int ReadInt32()
 		{
 			if (end - pos < 4)
 				throw new BadImageFormatException();
 			byte b1 = buffer[pos++];
 			byte b2 = buffer[pos++];
 			byte b3 = buffer[pos++];
 			byte b4 = buffer[pos++];
 			return (int)(b1 | (b2 << 8) | (b3 << 16) | (b4 << 24));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="150" endline="154"><![CDATA[
 
 		internal uint ReadUInt32()
 		{
 			return (uint)ReadInt32();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="155" endline="161"><![CDATA[
 
 		internal long ReadInt64()
 		{
 			ulong lo = ReadUInt32();
 			ulong hi = ReadUInt32();
 			return (long)(lo | (hi << 32));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="162" endline="166"><![CDATA[
 
 		internal ulong ReadUInt64()
 		{
 			return (ulong)ReadInt64();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="167" endline="171"><![CDATA[
 
 		internal float ReadSingle()
 		{
 			return SingleConverter.Int32BitsToSingle(ReadInt32());
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="172" endline="176"><![CDATA[
 
 		internal double ReadDouble()
 		{
 			return BitConverter.Int64BitsToDouble(ReadInt64());
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="177" endline="185"><![CDATA[
 
 		internal ByteReader Slice(int length)
 		{
 			if (end - pos < length)
 				throw new BadImageFormatException();
 			ByteReader br = new ByteReader(buffer, pos, length);
 			pos += length;
 			return br;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="186" endline="192"><![CDATA[
 
 		// NOTE this method only works if the original offset was aligned and for alignments that are a power of 2
 		internal void Align(int alignment)
 		{
 			alignment--;
 			pos = (pos + alignment) & ~alignment;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ByteReader.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="41" endline="48"><![CDATA[
 			{
 				if ((this.Attributes & MethodAttributes.RTSpecialName) != 0)
 				{
 					string name = this.Name;
 					return name == ConstructorInfo.ConstructorName || name == ConstructorInfo.TypeConstructorName;
 				}
 				return false;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="49" endline="53"><![CDATA[
 		}
 
 		public bool IsStatic
 		{
 			get { return (Attributes & MethodAttributes.Static) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="54" endline="58"><![CDATA[
 		}
 
 		public bool IsVirtual
 		{
 			get { return (Attributes & MethodAttributes.Virtual) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="59" endline="63"><![CDATA[
 		}
 
 		public bool IsAbstract
 		{
 			get { return (Attributes & MethodAttributes.Abstract) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="64" endline="68"><![CDATA[
 		}
 
 		public bool IsFinal
 		{
 			get { return (Attributes & MethodAttributes.Final) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="69" endline="73"><![CDATA[
 		}
 
 		public bool IsPublic
 		{
 			get { return (Attributes & MethodAttributes.MemberAccessMask) == MethodAttributes.Public; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="74" endline="78"><![CDATA[
 		}
 
 		public bool IsFamily
 		{
 			get { return (Attributes & MethodAttributes.MemberAccessMask) == MethodAttributes.Family; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="79" endline="83"><![CDATA[
 		}
 
 		public bool IsFamilyOrAssembly
 		{
 			get { return (Attributes & MethodAttributes.MemberAccessMask) == MethodAttributes.FamORAssem; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="84" endline="88"><![CDATA[
 		}
 
 		public bool IsAssembly
 		{
 			get { return (Attributes & MethodAttributes.MemberAccessMask) == MethodAttributes.Assembly; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="89" endline="93"><![CDATA[
 		}
 
 		public bool IsFamilyAndAssembly
 		{
 			get { return (Attributes & MethodAttributes.MemberAccessMask) == MethodAttributes.FamANDAssem; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="94" endline="98"><![CDATA[
 		}
 
 		public bool IsPrivate
 		{
 			get { return (Attributes & MethodAttributes.MemberAccessMask) == MethodAttributes.Private; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="99" endline="103"><![CDATA[
 		}
 
 		public bool IsSpecialName
 		{
 			get { return (Attributes & MethodAttributes.SpecialName) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="104" endline="108"><![CDATA[
 		}
 
 		public bool IsHideBySig
 		{
 			get { return (Attributes & MethodAttributes.HideBySig) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="109" endline="114"><![CDATA[
 		}
 
 		public virtual Type[] GetGenericArguments()
 		{
 			return Type.EmptyTypes;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="115" endline="118"><![CDATA[
 
 		public virtual bool IsGenericMethod
 		{
 			get { return false; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="119" endline="123"><![CDATA[
 		}
 
 		public virtual bool IsGenericMethodDefinition
 		{
 			get { return false; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="124" endline="128"><![CDATA[
 		}
 
 		public virtual bool ContainsGenericParameters
 		{
 			get { return IsGenericMethodDefinition; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBase.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="37" endline="41"><![CDATA[
 		private AssemblyName(System.Reflection.AssemblyName name, string culture)
 		{
 			this.name = name;
 			this.culture = culture;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="42" endline="46"><![CDATA[
 
 		public AssemblyName()
 		{
 			name = new System.Reflection.AssemblyName();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="47" endline="51"><![CDATA[
 
 		public AssemblyName(string assemblyName)
 		{
 			name = new System.Reflection.AssemblyName(assemblyName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="52" endline="61"><![CDATA[
 
 		public override string ToString()
 		{
 			string str = name.ToString();
 			if (culture != null)
 			{
 				str = str.Replace("Culture=neutral", "Culture=" + culture);
 			}
 			return str;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="62" endline="65"><![CDATA[
 
 		public string Name
 		{
 			get { return name.Name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="66" endline="66"><![CDATA[
 			set { name.Name = value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="67" endline="71"><![CDATA[
 		}
 
 		public CultureInfo CultureInfo
 		{
 			get { return name.CultureInfo; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="72" endline="76"><![CDATA[
 			set
 			{
 				name.CultureInfo = value;
 				culture = null;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="77" endline="85"><![CDATA[
 		}
 
 		internal string Culture
 		{
 			set
 			{
 				culture = value;
 				name.CultureInfo = CultureInfo.InvariantCulture;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="86" endline="90"><![CDATA[
 		}
 
 		public Version Version
 		{
 			get { return name.Version; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="91" endline="91"><![CDATA[
 			set { name.Version = value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="92" endline="96"><![CDATA[
 		}
 
 		public StrongNameKeyPair KeyPair
 		{
 			get { return name.KeyPair == null ?  null 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="97" endline="97"><![CDATA[
 			set { name.KeyPair = value == null ? null 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="98" endline="102"><![CDATA[
 		}
 
 		public string CodeBase
 		{
 			get { return name.CodeBase; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="103" endline="103"><![CDATA[
 			set { name.CodeBase = value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="104" endline="108"><![CDATA[
 		}
 
 		public ProcessorArchitecture ProcessorArchitecture
 		{
 			get { return (ProcessorArchitecture)name.ProcessorArchitecture; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="109" endline="109"><![CDATA[
 			set { name.ProcessorArchitecture = (System.Reflection.ProcessorArchitecture)value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="110" endline="114"><![CDATA[
 		}
 
 		public AssemblyNameFlags Flags
 		{
 			get { return (AssemblyNameFlags)name.Flags; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="115" endline="115"><![CDATA[
 			set { name.Flags = (System.Reflection.AssemblyNameFlags)value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="116" endline="120"><![CDATA[
 		}
 
 		public AssemblyVersionCompatibility VersionCompatibility
 		{
 			get { return name.VersionCompatibility; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="121" endline="121"><![CDATA[
 			set { name.VersionCompatibility = value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="122" endline="127"><![CDATA[
 		}
 
 		public byte[] GetPublicKey()
 		{
 			return name.GetPublicKey();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="128" endline="132"><![CDATA[
 
 		public void SetPublicKey(byte[] publicKey)
 		{
 			name.SetPublicKey(publicKey);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="133" endline="137"><![CDATA[
 
 		public byte[] GetPublicKeyToken()
 		{
 			return name.GetPublicKeyToken();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="138" endline="142"><![CDATA[
 
 		public void SetPublicKeyToken(byte[] publicKeyToken)
 		{
 			name.SetPublicKeyToken(publicKeyToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="143" endline="146"><![CDATA[
 
 		public AssemblyHashAlgorithm HashAlgorithm
 		{
 			get { return name.HashAlgorithm; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="147" endline="147"><![CDATA[
 			set { name.HashAlgorithm = value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="148" endline="160"><![CDATA[
 		}
 
 		public string FullName
 		{
 			get
 			{
 				string str = name.FullName;
 				if (culture != null)
 				{
 					str = str.Replace("Culture=neutral", "Culture=" + culture);
 				}
 				return str;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="161" endline="167"><![CDATA[
 		}
 
 		public override bool Equals(object obj)
 		{
 			AssemblyName other = obj as AssemblyName;
 			return other != null && other.FullName == this.FullName;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="168" endline="172"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return FullName.GetHashCode();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="173" endline="177"><![CDATA[
 
 		public object Clone()
 		{
 			return new AssemblyName((System.Reflection.AssemblyName)name.Clone(), culture);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="178" endline="182"><![CDATA[
 
 		public static bool ReferenceMatchesDefinition(AssemblyName reference, AssemblyName definition)
 		{
 			return System.Reflection.AssemblyName.ReferenceMatchesDefinition(reference.name, definition.name);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AssemblyName.cs" startline="183" endline="207"><![CDATA[
 
 		public static AssemblyName GetAssemblyName(string path)
 		{
 			try
 			{
 				path = Path.GetFullPath(path);
 				using (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read))
 				{
 					ModuleReader module = new ModuleReader(null, null, fs, path);
 					if (module.Assembly == null)
 					{
 						throw new BadImageFormatException("Module does not contain a manifest");
 					}
 					return module.Assembly.GetName();
 				}
 			}
 			catch (IOException x)
 			{
 				throw new FileNotFoundException(x.Message, x);
 			}
 			catch (UnauthorizedAccessException x)
 			{
 				throw new FileNotFoundException(x.Message, x);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\field.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-tokenizer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\lambda.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="51" endline="59"><![CDATA[
 		{
 			Signature = br.ReadUInt32();
 			if (Signature != IMAGE_NT_HEADERS.MAGIC_SIGNATURE)
 			{
 				throw new BadImageFormatException();
 			}
 			FileHeader.Read(br);
 			OptionalHeader.Read(br);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="47" endline="48"><![CDATA[
 		public IMAGE_FILE_HEADER FileHeader = new IMAGE_FILE_HEADER();
 		public IMAGE_OPTIONAL_HEADER OptionalHeader = new IMAGE_OPTIONAL_HEADER();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="49" endline="90"><![CDATA[
 
 		internal void Read(BinaryReader br)
 		{
 			Signature = br.ReadUInt32();
 			if (Signature != IMAGE_NT_HEADERS.MAGIC_SIGNATURE)
 			{
 				throw new BadImageFormatException();
 			}
 			FileHeader.Read(br);
 			OptionalHeader.Read(br);
 		}
 	}
 
 	sealed class IMAGE_FILE_HEADER
 	{
 		public const WORD IMAGE_FILE_MACHINE_I386 = 0x014c;
 		public const WORD IMAGE_FILE_MACHINE_IA64 = 0x0200;
 		public const WORD IMAGE_FILE_MACHINE_AMD64 = 0x8664;
 
 		public const WORD IMAGE_FILE_32BIT_MACHINE = 0x0100;
 		public const WORD IMAGE_FILE_EXECUTABLE_IMAGE = 0x0002;
 		public const WORD IMAGE_FILE_LARGE_ADDRESS_AWARE = 0x0020;
 		public const WORD IMAGE_FILE_DLL = 0x2000;
 
 		public WORD Machine;
 		public WORD NumberOfSections;
 		public DWORD TimeDateStamp;
 		public DWORD PointerToSymbolTable;
 		public DWORD NumberOfSymbols;
 		public WORD SizeOfOptionalHeader;
 		public WORD Characteristics;
 
 		internal void Read(BinaryReader br)
 		{
 			Machine = br.ReadUInt16();
 			NumberOfSections = br.ReadUInt16();
 			TimeDateStamp = br.ReadUInt32();
 			PointerToSymbolTable = br.ReadUInt32();
 			NumberOfSymbols = br.ReadUInt32();
 			SizeOfOptionalHeader = br.ReadUInt16();
 			Characteristics = br.ReadUInt16();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="91" endline="197"><![CDATA[
 	}
 
 	sealed class IMAGE_OPTIONAL_HEADER
 	{
 		public const WORD IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10b;
 		public const WORD IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20b;
 
 		public const WORD IMAGE_SUBSYSTEM_WINDOWS_GUI = 2;
 		public const WORD IMAGE_SUBSYSTEM_WINDOWS_CUI = 3;
 
 		public const WORD IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 0x0040;
 		public const WORD IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 0x0100;
 		public const WORD IMAGE_DLLCHARACTERISTICS_NO_SEH = 0x0400;
 		public const WORD IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 0x8000;
 
 		public WORD Magic;
 		public BYTE MajorLinkerVersion;
 		public BYTE MinorLinkerVersion;
 		public DWORD SizeOfCode;
 		public DWORD SizeOfInitializedData;
 		public DWORD SizeOfUninitializedData;
 		public DWORD AddressOfEntryPoint;
 		public DWORD BaseOfCode;
 		public DWORD BaseOfData;
 		public ULONGLONG ImageBase;
 		public DWORD SectionAlignment;
 		public DWORD FileAlignment;
 		public WORD MajorOperatingSystemVersion;
 		public WORD MinorOperatingSystemVersion;
 		public WORD MajorImageVersion;
 		public WORD MinorImageVersion;
 		public WORD MajorSubsystemVersion;
 		public WORD MinorSubsystemVersion;
 		public DWORD Win32VersionValue;
 		public DWORD SizeOfImage;
 		public DWORD SizeOfHeaders;
 		public DWORD CheckSum;
 		public WORD Subsystem;
 		public WORD DllCharacteristics;
 		public ULONGLONG SizeOfStackReserve;
 		public ULONGLONG SizeOfStackCommit;
 		public ULONGLONG SizeOfHeapReserve;
 		public ULONGLONG SizeOfHeapCommit;
 		public DWORD LoaderFlags;
 		public DWORD NumberOfRvaAndSizes;
 		public IMAGE_DATA_DIRECTORY[] DataDirectory;
 
 		internal void Read(BinaryReader br)
 		{
 			Magic = br.ReadUInt16();
 			if (Magic != IMAGE_NT_OPTIONAL_HDR32_MAGIC && Magic != IMAGE_NT_OPTIONAL_HDR64_MAGIC)
 			{
 				throw new BadImageFormatException();
 			}
 			MajorLinkerVersion = br.ReadByte();
 			MinorLinkerVersion = br.ReadByte();
 			SizeOfCode = br.ReadUInt32();
 			SizeOfInitializedData = br.ReadUInt32();
 			SizeOfUninitializedData = br.ReadUInt32();
 			AddressOfEntryPoint = br.ReadUInt32();
 			BaseOfCode = br.ReadUInt32();
 			if (Magic == IMAGE_NT_OPTIONAL_HDR32_MAGIC)
 			{
 				BaseOfData = br.ReadUInt32();
 				ImageBase = br.ReadUInt32();
 			}
 			else
 			{
 				ImageBase = br.ReadUInt64();
 			}
 			SectionAlignment = br.ReadUInt32();
 			FileAlignment = br.ReadUInt32();
 			MajorOperatingSystemVersion = br.ReadUInt16();
 			MinorOperatingSystemVersion = br.ReadUInt16();
 			MajorImageVersion = br.ReadUInt16();
 			MinorImageVersion = br.ReadUInt16();
 			MajorSubsystemVersion = br.ReadUInt16();
 			MinorSubsystemVersion = br.ReadUInt16();
 			Win32VersionValue = br.ReadUInt32();
 			SizeOfImage = br.ReadUInt32();
 			SizeOfHeaders = br.ReadUInt32();
 			CheckSum = br.ReadUInt32();
 			Subsystem = br.ReadUInt16();
 			DllCharacteristics = br.ReadUInt16();
 			if (Magic == IMAGE_NT_OPTIONAL_HDR32_MAGIC)
 			{
 				SizeOfStackReserve = br.ReadUInt32();
 				SizeOfStackCommit = br.ReadUInt32();
 				SizeOfHeapReserve = br.ReadUInt32();
 				SizeOfHeapCommit = br.ReadUInt32();
 			}
 			else
 			{
 				SizeOfStackReserve = br.ReadUInt64();
 				SizeOfStackCommit = br.ReadUInt64();
 				SizeOfHeapReserve = br.ReadUInt64();
 				SizeOfHeapCommit = br.ReadUInt64();
 			}
 			LoaderFlags = br.ReadUInt32();
 			NumberOfRvaAndSizes = br.ReadUInt32();
 			DataDirectory = new IMAGE_DATA_DIRECTORY[NumberOfRvaAndSizes];
 			for (uint i = 0; i < NumberOfRvaAndSizes; i++)
 			{
 				DataDirectory[i] = new IMAGE_DATA_DIRECTORY();
 				DataDirectory[i].Read(br);
 			}
 			for (uint i = 0; i < NumberOfRvaAndSizes; i++)
 			{
 				DataDirectory[i] = new IMAGE_DATA_DIRECTORY();
 				DataDirectory[i].Read(br);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="198" endline="209"><![CDATA[
 	}
 
 	struct IMAGE_DATA_DIRECTORY
 	{
 		public DWORD VirtualAddress;
 		public DWORD Size;
 
 		internal void Read(BinaryReader br)
 		{
 			VirtualAddress = br.ReadUInt32();
 			Size = br.ReadUInt32();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="210" endline="255"><![CDATA[
 	}
 
 	class SectionHeader
 	{
 		public const DWORD IMAGE_SCN_CNT_CODE = 0x00000020;
 		public const DWORD IMAGE_SCN_CNT_INITIALIZED_DATA = 0x00000040;
 		public const DWORD IMAGE_SCN_MEM_DISCARDABLE = 0x02000000;
 		public const DWORD IMAGE_SCN_MEM_EXECUTE = 0x20000000;
 		public const DWORD IMAGE_SCN_MEM_READ = 0x40000000;
 		public const DWORD IMAGE_SCN_MEM_WRITE = 0x80000000;
 
 		public string Name;		// 8 byte UTF8 encoded 0-padded
 		public DWORD VirtualSize;
 		public DWORD VirtualAddress;
 		public DWORD SizeOfRawData;
 		public DWORD PointerToRawData;
 		public DWORD PointerToRelocations;
 		public DWORD PointerToLinenumbers;
 		public WORD NumberOfRelocations;
 		public WORD NumberOfLinenumbers;
 		public DWORD Characteristics;
 
 		internal void Read(BinaryReader br)
 		{
 			char[] name = new char[8];
 			int len = 8;
 			for (int i = 0; i < 8; i++)
 			{
 				byte b = br.ReadByte();
 				name[i] = (char)b;
 				if (b == 0 && len == 8)
 				{
 					len = i;
 				}
 			}
 			for (int i = 0; i < 8; i++)
 			{
 				byte b = br.ReadByte();
 				name[i] = (char)b;
 				if (b == 0 && len == 8)
 				{
 					len = i;
 				}
 			}
 			Name = new String(name, 0, len);
 			VirtualSize = br.ReadUInt32();
 			VirtualAddress = br.ReadUInt32();
 			SizeOfRawData = br.ReadUInt32();
 			PointerToRawData = br.ReadUInt32();
 			PointerToRelocations = br.ReadUInt32();
 			PointerToLinenumbers = br.ReadUInt32();
 			NumberOfRelocations = br.ReadUInt16();
 			NumberOfLinenumbers = br.ReadUInt16();
 			Characteristics = br.ReadUInt32();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="256" endline="283"><![CDATA[
 	}
 
 	sealed class PEReader
 	{
 		private MSDOS_HEADER msdos = new MSDOS_HEADER();
 		private IMAGE_NT_HEADERS headers = new IMAGE_NT_HEADERS();
 		private SectionHeader[] sections;
 
 		internal void Read(BinaryReader br)
 		{
 			msdos.signature = br.ReadUInt16();
 			br.BaseStream.Seek(58, SeekOrigin.Current);
 			msdos.peSignatureOffset = br.ReadUInt32();
 
 			if (msdos.signature != MSDOS_HEADER.MAGIC_MZ)
 			{
 				throw new BadImageFormatException();
 			}
 
 			br.BaseStream.Seek(msdos.peSignatureOffset, SeekOrigin.Begin);
 			headers.Read(br);
 			sections = new SectionHeader[headers.FileHeader.NumberOfSections];
 			for (int i = 0; i < sections.Length; i++)
 			{
 				sections[i] = new SectionHeader();
 				sections[i].Read(br);
 			}
 			for (int i = 0; i < sections.Length; i++)
 			{
 				sections[i] = new SectionHeader();
 				sections[i].Read(br);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="284" endline="287"><![CDATA[
 
 		internal IMAGE_FILE_HEADER FileHeader
 		{
 			get { return headers.FileHeader; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="288" endline="292"><![CDATA[
 		}
 
 		internal IMAGE_OPTIONAL_HEADER OptionalHeader
 		{
 			get { return headers.OptionalHeader; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="293" endline="298"><![CDATA[
 		}
 
 		internal DWORD GetComDescriptorVirtualAddress()
 		{
 			return headers.OptionalHeader.DataDirectory[14].VirtualAddress;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="299" endline="304"><![CDATA[
 
 		internal void GetDataDirectoryEntry(int index, out int rva, out int length)
 		{
 			rva = (int)headers.OptionalHeader.DataDirectory[index].VirtualAddress;
 			length = (int)headers.OptionalHeader.DataDirectory[index].Size;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="305" endline="316"><![CDATA[
 
 		internal long RvaToFileOffset(DWORD rva)
 		{
 			for (int i = 0; i < sections.Length; i++)
 			{
 				if (rva >= sections[i].VirtualAddress && rva < sections[i].VirtualAddress + sections[i].VirtualSize)
 				{
 					return sections[i].PointerToRawData + rva - sections[i].VirtualAddress;
 				}
 			}
 			for (int i = 0; i < sections.Length; i++)
 			{
 				if (rva >= sections[i].VirtualAddress && rva < sections[i].VirtualAddress + sections[i].VirtualSize)
 				{
 					return sections[i].PointerToRawData + rva - sections[i].VirtualAddress;
 				}
 			}
 			throw new BadImageFormatException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PEReader.cs" startline="260" endline="261"><![CDATA[
 		private MSDOS_HEADER msdos = new MSDOS_HEADER();
 		private IMAGE_NT_HEADERS headers = new IMAGE_NT_HEADERS();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="31" endline="31"><![CDATA[
 			get { return MemberTypes.Event; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="32" endline="45"><![CDATA[
 		}
 
 		public abstract EventAttributes Attributes { get; }
 		public abstract MethodInfo GetAddMethod(bool nonPublic);
 		public abstract MethodInfo GetRaiseMethod(bool nonPublic);
 		public abstract MethodInfo GetRemoveMethod(bool nonPublic);
 		public abstract MethodInfo[] GetOtherMethods(bool nonPublic);
 		public abstract Type EventHandlerType { get; }
 		internal abstract bool IsPublic { get; }
 		internal abstract bool IsStatic { get; }
 
 		public bool IsSpecialName
 		{
 			get { return (Attributes & EventAttributes.SpecialName) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="46" endline="51"><![CDATA[
 		}
 
 		public MethodInfo GetAddMethod()
 		{
 			return GetAddMethod(false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="52" endline="56"><![CDATA[
 
 		public MethodInfo GetRaiseMethod()
 		{
 			return GetRaiseMethod(false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="57" endline="61"><![CDATA[
 
 		public MethodInfo GetRemoveMethod()
 		{
 			return GetRemoveMethod(false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="62" endline="66"><![CDATA[
 
 		public MethodInfo[] GetOtherMethods()
 		{
 			return GetOtherMethods(false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="67" endline="71"><![CDATA[
 
 		internal virtual EventInfo BindTypeParameters(Type type)
 		{
 			return new GenericEventInfo(this.DeclaringType.BindTypeParameters(type), this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\EventInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="40" endline="45"><![CDATA[
 		internal EventInfoImpl(ModuleReader module, Type declaringType, int index)
 		{
 			this.module = module;
 			this.declaringType = declaringType;
 			this.index = index;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="46" endline="51"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			EventInfoImpl other = obj as EventInfoImpl;
 			return other != null && other.declaringType == declaringType && other.index == index;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="52" endline="56"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return declaringType.GetHashCode() * 123 + index;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="57" endline="60"><![CDATA[
 
 		public override EventAttributes Attributes
 		{
 			get { return (EventAttributes)module.Event.records[index].EventFlags; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="61" endline="66"><![CDATA[
 		}
 
 		public override MethodInfo GetAddMethod(bool nonPublic)
 		{
 			return module.MethodSemantics.GetMethod(module, this.MetadataToken, nonPublic, MethodSemanticsTable.AddOn);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="67" endline="71"><![CDATA[
 
 		public override MethodInfo GetRaiseMethod(bool nonPublic)
 		{
 			return module.MethodSemantics.GetMethod(module, this.MetadataToken, nonPublic, MethodSemanticsTable.Fire);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="72" endline="76"><![CDATA[
 
 		public override MethodInfo GetRemoveMethod(bool nonPublic)
 		{
 			return module.MethodSemantics.GetMethod(module, this.MetadataToken, nonPublic, MethodSemanticsTable.RemoveOn);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="77" endline="81"><![CDATA[
 
 		public override MethodInfo[] GetOtherMethods(bool nonPublic)
 		{
 			return module.MethodSemantics.GetMethods(module, this.MetadataToken, nonPublic, MethodSemanticsTable.Other);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="82" endline="85"><![CDATA[
 
 		public override Type EventHandlerType
 		{
 			get { return module.ResolveType(module.Event.records[index].EventType, declaringType); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="86" endline="90"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return module.GetString(module.Event.records[index].Name); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="91" endline="95"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return declaringType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="96" endline="100"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="101" endline="105"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return (EventTable.Index << 24) + index + 1; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="106" endline="117"><![CDATA[
 		}
 
 		internal override bool IsPublic
 		{
 			get
 			{
 				if (!flagsCached)
 				{
 					ComputeFlags();
 				}
 				return isPublic;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="118" endline="129"><![CDATA[
 		}
 
 		internal override bool IsStatic
 		{
 			get
 			{
 				if (!flagsCached)
 				{
 					ComputeFlags();
 				}
 				return isStatic;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\EventInfoImpl.cs" startline="130" endline="136"><![CDATA[
 		}
 
 		private void ComputeFlags()
 		{
 			module.MethodSemantics.ComputeFlags(module, this.MetadataToken, out isPublic, out isStatic);
 			flagsCached = true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="37" endline="37"><![CDATA[
 			get { return RowCount > 65535; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="38" endline="48"><![CDATA[
 		}
 
 		internal abstract int RowCount { get; set; }
 
 		internal abstract void Write(MetadataWriter mw);
 		internal abstract void Read(MetadataReader mr);
 
 		internal int GetLength(MetadataWriter md)
 		{
 			return RowCount * GetRowSize(new RowSizeCalc(md));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="49" endline="394"><![CDATA[
 
 		protected abstract int GetRowSize(RowSizeCalc rsc);
 
 		protected sealed class RowSizeCalc
 		{
 			private readonly MetadataWriter mw;
 			private int size;
 
 			internal RowSizeCalc(MetadataWriter mw)
 			{
 				this.mw = mw;
 			}
 
 			internal RowSizeCalc AddFixed(int size)
 			{
 				this.size += size;
 				return this;
 			}
 
 			internal RowSizeCalc WriteStringIndex()
 			{
 				if (mw.bigStrings)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteGuidIndex()
 			{
 				if (mw.bigGuids)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteBlobIndex()
 			{
 				if (mw.bigBlobs)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteTypeDefOrRef()
 			{
 				if (mw.bigTypeDefOrRef)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteField()
 			{
 				if (mw.bigField)
 				{
 					size += 4;
 				}
 				else
 				{
 					size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteMethodDef()
 			{
 				if (mw.bigMethodDef)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteParam()
 			{
 				if (mw.bigParam)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteResolutionScope()
 			{
 				if (mw.bigResolutionScope)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteMemberRefParent()
 			{
 				if (mw.bigMemberRefParent)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteHasCustomAttribute()
 			{
 				if (mw.bigHasCustomAttribute)
 				{
 					size += 4;
 				}
 				else
 				{
 					size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteCustomAttributeType()
 			{
 				if (mw.bigCustomAttributeType)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteHasConstant()
 			{
 				if (mw.bigHasConstant)
 				{
 					size += 4;
 				}
 				else
 				{
 					size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteTypeDef()
 			{
 				if (mw.bigTypeDef)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteMethodDefOrRef()
 			{
 				if (mw.bigMethodDefOrRef)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteEvent()
 			{
 				if (mw.bigEvent)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteProperty()
 			{
 				if (mw.bigProperty)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteHasSemantics()
 			{
 				if (mw.bigHasSemantics)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteImplementation()
 			{
 				if (mw.bigImplementation)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteTypeOrMethodDef()
 			{
 				if (mw.bigTypeOrMethodDef)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteGenericParam()
 			{
 				if (mw.bigGenericParam)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteHasDeclSecurity()
 			{
 				if (mw.bigHasDeclSecurity)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteMemberForwarded()
 			{
 				if (mw.bigMemberForwarded)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteModuleRef()
 			{
 				if (mw.bigModuleRef)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal RowSizeCalc WriteHasFieldMarshal()
 			{
 				if (mw.bigHasFieldMarshal)
 				{
 					this.size += 4;
 				}
 				else
 				{
 					this.size += 2;
 				}
 				return this;
 			}
 
 			internal int Value
 			{
 				get { return size; }
 			}
 		}
 	}
 
 	abstract class Table<T> 
 	{
 		internal T[] records = new T[1];
 		protected int rowCount;
 
 		internal sealed override int RowCount
 		{
 			get { return rowCount; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="395" endline="395"><![CDATA[
 			set { rowCount = value; records = new T[value]; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="396" endline="400"><![CDATA[
 		}
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="401" endline="413"><![CDATA[
 		}
 
 		internal int AddRecord(T newRecord)
 		{
 			if (rowCount == records.Length)
 			{
 				T[] newarr = new T[records.Length * 2];
 				Array.Copy(records, newarr, records.Length);
 				records = newarr;
 			}
 			records[rowCount++] = newRecord;
 			return rowCount;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="414" endline="418"><![CDATA[
 
 		internal int AddVirtualRecord()
 		{
 			return ++rowCount;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="419" endline="422"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="389" endline="389"><![CDATA[
 		internal T[] records = new T[1];
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="390" endline="449"><![CDATA[
 		protected int rowCount;
 
 		internal sealed override int RowCount
 		{
 			get { return rowCount; }
 			set { rowCount = value; records = new T[value]; }
 		}
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			throw new InvalidOperationException();
 		}
 
 		internal int AddRecord(T newRecord)
 		{
 			if (rowCount == records.Length)
 			{
 				T[] newarr = new T[records.Length * 2];
 				Array.Copy(records, newarr, records.Length);
 				records = newarr;
 			}
 			records[rowCount++] = newRecord;
 			return rowCount;
 		}
 
 		internal int AddVirtualRecord()
 		{
 			return ++rowCount;
 		}
 
 		internal override void Write(MetadataWriter mw)
 		{
 			throw new InvalidOperationException();
 		}
 	}
 
 	sealed class ModuleTable 
 	{
 		internal const int Index = 0x00;
 
 		internal struct Record
 		{
 			internal short Generation;
 			internal int Name; // -> StringHeap
 			internal int Mvid; // -> GuidHeap
 			internal int EncId; // -> GuidHeap
 			internal int EncBaseId; // -> GuidHeap
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Generation = mr.ReadInt16();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Mvid = mr.ReadGuidIndex();
 				records[i].EncId = mr.ReadGuidIndex();
 				records[i].EncBaseId = mr.ReadGuidIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Generation = mr.ReadInt16();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Mvid = mr.ReadGuidIndex();
 				records[i].EncId = mr.ReadGuidIndex();
 				records[i].EncBaseId = mr.ReadGuidIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="450" endline="461"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Generation);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteGuidIndex(records[i].Mvid);
 				mw.WriteGuidIndex(records[i].EncId);
 				mw.WriteGuidIndex(records[i].EncBaseId);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Generation);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteGuidIndex(records[i].Mvid);
 				mw.WriteGuidIndex(records[i].EncId);
 				mw.WriteGuidIndex(records[i].EncBaseId);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="462" endline="472"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(2)
 				.WriteStringIndex()
 				.WriteGuidIndex()
 				.WriteGuidIndex()
 				.WriteGuidIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="473" endline="483"><![CDATA[
 
 		internal void Add(short generation, int name, int mvid, int encid, int encbaseid)
 		{
 			Record record = new Record();
 			record.Generation = generation;
 			record.Name = name;
 			record.Mvid = mvid;
 			record.EncId = encid;
 			record.EncBaseId = encbaseid;
 			AddRecord(record);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="484" endline="505"><![CDATA[
 	}
 
 	sealed class TypeRefTable 
 	{
 		internal const int Index = 0x01;
 
 		internal struct Record
 		{
 			internal int ResolutionScope;
 			internal int TypeName;
 			internal int TypeNameSpace;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].ResolutionScope = mr.ReadResolutionScope();
 				records[i].TypeName = mr.ReadStringIndex();
 				records[i].TypeNameSpace = mr.ReadStringIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].ResolutionScope = mr.ReadResolutionScope();
 				records[i].TypeName = mr.ReadStringIndex();
 				records[i].TypeNameSpace = mr.ReadStringIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="506" endline="515"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteResolutionScope(records[i].ResolutionScope);
 				mw.WriteStringIndex(records[i].TypeName);
 				mw.WriteStringIndex(records[i].TypeNameSpace);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteResolutionScope(records[i].ResolutionScope);
 				mw.WriteStringIndex(records[i].TypeName);
 				mw.WriteStringIndex(records[i].TypeNameSpace);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="516" endline="524"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.WriteResolutionScope()
 				.WriteStringIndex()
 				.WriteStringIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="525" endline="552"><![CDATA[
 	}
 
 	sealed class TypeDefTable 
 	{
 		internal const int Index = 0x02;
 
 		internal struct Record
 		{
 			internal int Flags;
 			internal int TypeName;
 			internal int TypeNamespace;
 			internal int Extends;
 			internal int FieldList;
 			internal int MethodList;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Flags = mr.ReadInt32();
 				records[i].TypeName = mr.ReadStringIndex();
 				records[i].TypeNamespace = mr.ReadStringIndex();
 				records[i].Extends = mr.ReadTypeDefOrRef();
 				records[i].FieldList = mr.ReadField();
 				records[i].MethodList = mr.ReadMethodDef();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Flags = mr.ReadInt32();
 				records[i].TypeName = mr.ReadStringIndex();
 				records[i].TypeNamespace = mr.ReadStringIndex();
 				records[i].Extends = mr.ReadTypeDefOrRef();
 				records[i].FieldList = mr.ReadField();
 				records[i].MethodList = mr.ReadMethodDef();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="553" endline="557"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			mw.ModuleBuilder.WriteTypeDefTable(mw);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="558" endline="562"><![CDATA[
 
 		internal int AllocToken()
 		{
 			return 0x02000000 + AddVirtualRecord();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="563" endline="574"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(4)
 				.WriteStringIndex()
 				.WriteStringIndex()
 				.WriteTypeDefOrRef()
 				.WriteField()
 				.WriteMethodDef()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="575" endline="596"><![CDATA[
 	}
 
 	sealed class FieldTable 
 	{
 		internal const int Index = 0x04;
 
 		internal struct Record
 		{
 			internal short Flags;
 			internal int Name;
 			internal int Signature;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Flags = mr.ReadInt16();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Signature = mr.ReadBlobIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Flags = mr.ReadInt16();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Signature = mr.ReadBlobIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="597" endline="601"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			mw.ModuleBuilder.WriteFieldTable(mw);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="602" endline="610"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(2)
 				.WriteStringIndex()
 				.WriteBlobIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="611" endline="639"><![CDATA[
 	}
 
 	sealed class MethodDefTable 
 	{
 		internal const int Index = 0x06;
 		private int baseRVA;
 
 		internal struct Record
 		{
 			internal int RVA;
 			internal short ImplFlags;
 			internal short Flags;
 			internal int Name;
 			internal int Signature;
 			internal int ParamList;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].RVA = mr.ReadInt32();
 				records[i].ImplFlags = mr.ReadInt16();
 				records[i].Flags = mr.ReadInt16();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Signature = mr.ReadBlobIndex();
 				records[i].ParamList = mr.ReadParam();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].RVA = mr.ReadInt32();
 				records[i].ImplFlags = mr.ReadInt16();
 				records[i].Flags = mr.ReadInt16();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Signature = mr.ReadBlobIndex();
 				records[i].ParamList = mr.ReadParam();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="640" endline="644"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			mw.ModuleBuilder.WriteMethodDefTable(baseRVA, mw);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="645" endline="654"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(8)
 				.WriteStringIndex()
 				.WriteBlobIndex()
 				.WriteParam()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="655" endline="659"><![CDATA[
 
 		internal void Fixup(TextSection code)
 		{
 			baseRVA = (int)code.MethodBodiesRVA;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="660" endline="681"><![CDATA[
 	}
 
 	sealed class ParamTable 
 	{
 		internal const int Index = 0x08;
 
 		internal struct Record
 		{
 			internal short Flags;
 			internal short Sequence;
 			internal int Name;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Flags = mr.ReadInt16();
 				records[i].Sequence = mr.ReadInt16();
 				records[i].Name = mr.ReadStringIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Flags = mr.ReadInt16();
 				records[i].Sequence = mr.ReadInt16();
 				records[i].Name = mr.ReadStringIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="682" endline="686"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			mw.ModuleBuilder.WriteParamTable(mw);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="687" endline="694"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(4)
 				.WriteStringIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="695" endline="714"><![CDATA[
 	}
 
 	sealed class InterfaceImplTable 
 	{
 		internal const int Index = 0x09;
 
 		internal struct Record
 		{
 			internal int Class;
 			internal int Interface;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Class = mr.ReadTypeDef();
 				records[i].Interface = mr.ReadTypeDefOrRef();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Class = mr.ReadTypeDef();
 				records[i].Interface = mr.ReadTypeDefOrRef();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="715" endline="723"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteTypeDef(records[i].Class);
 				mw.WriteEncodedTypeDefOrRef(records[i].Interface);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteTypeDef(records[i].Class);
 				mw.WriteEncodedTypeDefOrRef(records[i].Interface);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="724" endline="731"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.WriteTypeDef()
 				.WriteTypeDefOrRef()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="732" endline="757"><![CDATA[
 
 		internal void Fixup()
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				int token = records[i].Interface;
 				switch (token >> 24)
 				{
 					case 0
 						break;
 					case TypeDefTable.Index
 						token = (token & 0xFFFFFF) << 2 | 0;
 						break;
 					case TypeRefTable.Index
 						token = (token & 0xFFFFFF) << 2 | 1;
 						break;
 					case TypeSpecTable.Index
 						token = (token & 0xFFFFFF) << 2 | 2;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 				records[i].Interface = token;
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				int token = records[i].Interface;
 				switch (token >> 24)
 				{
 					case 0
 						break;
 					case TypeDefTable.Index
 						token = (token & 0xFFFFFF) << 2 | 0;
 						break;
 					case TypeRefTable.Index
 						token = (token & 0xFFFFFF) << 2 | 1;
 						break;
 					case TypeSpecTable.Index
 						token = (token & 0xFFFFFF) << 2 | 2;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 				records[i].Interface = token;
 			}
 			Array.Sort(records, 0, rowCount, this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="758" endline="766"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			if (x.Class == y.Class)
 			{
 				return x.Interface == y.Interface ? 0 
 			}
 			return x.Class > y.Class ? 1 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="767" endline="788"><![CDATA[
 	}
 
 	sealed class MemberRefTable 
 	{
 		internal const int Index = 0x0A;
 
 		internal struct Record
 		{
 			internal int Class;
 			internal int Name;
 			internal int Signature;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Class = mr.ReadMemberRefParent();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Signature = mr.ReadBlobIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Class = mr.ReadMemberRefParent();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Signature = mr.ReadBlobIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="789" endline="798"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteMemberRefParent(records[i].Class);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteBlobIndex(records[i].Signature);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteMemberRefParent(records[i].Class);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteBlobIndex(records[i].Signature);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="799" endline="807"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.WriteMemberRefParent()
 				.WriteStringIndex()
 				.WriteBlobIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="808" endline="821"><![CDATA[
 
 		internal int FindOrAddRecord(Record record)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i].Class == record.Class
 					&& records[i].Name == record.Name
 					&& records[i].Signature == record.Signature)
 				{
 					return i + 1;
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i].Class == record.Class
 					&& records[i].Name == record.Name
 					&& records[i].Signature == record.Signature)
 				{
 					return i + 1;
 				}
 			}
 			return AddRecord(record);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="822" endline="832"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (moduleBuilder.IsPseudoToken(records[i].Class))
 				{
 					records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (moduleBuilder.IsPseudoToken(records[i].Class))
 				{
 					records[i].Class = moduleBuilder.ResolvePseudoToken(records[i].Class);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="833" endline="854"><![CDATA[
 	}
 
 	sealed class ConstantTable 
 	{
 		internal const int Index = 0x0B;
 
 		internal struct Record
 		{
 			internal short Type;
 			internal int Parent;
 			internal int Value;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Type = mr.ReadInt16();
 				records[i].Parent = mr.ReadHasConstant();
 				records[i].Value = mr.ReadBlobIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Type = mr.ReadInt16();
 				records[i].Parent = mr.ReadHasConstant();
 				records[i].Value = mr.ReadBlobIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="855" endline="864"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Type);
 				mw.WriteHasConstant(records[i].Parent);
 				mw.WriteBlobIndex(records[i].Value);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Type);
 				mw.WriteHasConstant(records[i].Parent);
 				mw.WriteBlobIndex(records[i].Value);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="865" endline="873"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(2)
 				.WriteHasConstant()
 				.WriteBlobIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="874" endline="901"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				int token = records[i].Parent;
 				if (moduleBuilder.IsPseudoToken(token))
 				{
 					token = moduleBuilder.ResolvePseudoToken(token);
 				}
 				// do the HasConstant encoding, so that we can sort the table
 				switch (token >> 24)
 				{
 					case FieldTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 2 | 0;
 						break;
 					case ParamTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 2 | 1;
 						break;
 					case PropertyTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 2 | 2;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				int token = records[i].Parent;
 				if (moduleBuilder.IsPseudoToken(token))
 				{
 					token = moduleBuilder.ResolvePseudoToken(token);
 				}
 				// do the HasConstant encoding, so that we can sort the table
 				switch (token >> 24)
 				{
 					case FieldTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 2 | 0;
 						break;
 					case ParamTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 2 | 1;
 						break;
 					case PropertyTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 2 | 2;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 			}
 			Array.Sort(records, 0, rowCount, this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="902" endline="906"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			return x.Parent == y.Parent ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="907" endline="964"><![CDATA[
 
 		internal object GetRawConstantValue(Module module, int parent)
 		{
 			// TODO use binary search (if sorted)
 			for (int i = 0; i < module.Constant.records.Length; i++)
 			{
 				if (module.Constant.records[i].Parent == parent)
 				{
 					ByteReader br = module.GetBlob(module.Constant.records[i].Value);
 					switch (module.Constant.records[i].Type)
 					{
 						// see ModuleBuilder.AddConstant for the encodings
 						case Signature.ELEMENT_TYPE_BOOLEAN
 							return br.ReadByte() != 0;
 						case Signature.ELEMENT_TYPE_I1
 							return br.ReadSByte();
 						case Signature.ELEMENT_TYPE_I2
 							return br.ReadInt16();
 						case Signature.ELEMENT_TYPE_I4
 							return br.ReadInt32();
 						case Signature.ELEMENT_TYPE_I8
 							return br.ReadInt64();
 						case Signature.ELEMENT_TYPE_U1
 							return br.ReadByte();
 						case Signature.ELEMENT_TYPE_U2
 							return br.ReadUInt16();
 						case Signature.ELEMENT_TYPE_U4
 							return br.ReadUInt32();
 						case Signature.ELEMENT_TYPE_U8
 							return br.ReadUInt64();
 						case Signature.ELEMENT_TYPE_R4
 							return br.ReadSingle();
 						case Signature.ELEMENT_TYPE_R8
 							return br.ReadDouble();
 						case Signature.ELEMENT_TYPE_CHAR
 							return br.ReadChar();
 						case Signature.ELEMENT_TYPE_STRING
 							{
 								char[] chars = new char[br.Length / 2];
 								for (int j = 0; j < chars.Length; j++)
 								{
 									chars[j] = br.ReadChar();
 								}
 								for (int j = 0; j < chars.Length; j++)
 								{
 									chars[j] = br.ReadChar();
 								}
 								return new String(chars);
 							}
 						case Signature.ELEMENT_TYPE_CLASS
 							if (br.ReadInt32() != 0)
 							{
 								throw new BadImageFormatException();
 							}
 							return null;
 						default
 							throw new BadImageFormatException();
 					}
 				}
 			}
 			for (int i = 0; i < module.Constant.records.Length; i++)
 			{
 				if (module.Constant.records[i].Parent == parent)
 				{
 					ByteReader br = module.GetBlob(module.Constant.records[i].Value);
 					switch (module.Constant.records[i].Type)
 					{
 						// see ModuleBuilder.AddConstant for the encodings
 						case Signature.ELEMENT_TYPE_BOOLEAN
 							return br.ReadByte() != 0;
 						case Signature.ELEMENT_TYPE_I1
 							return br.ReadSByte();
 						case Signature.ELEMENT_TYPE_I2
 							return br.ReadInt16();
 						case Signature.ELEMENT_TYPE_I4
 							return br.ReadInt32();
 						case Signature.ELEMENT_TYPE_I8
 							return br.ReadInt64();
 						case Signature.ELEMENT_TYPE_U1
 							return br.ReadByte();
 						case Signature.ELEMENT_TYPE_U2
 							return br.ReadUInt16();
 						case Signature.ELEMENT_TYPE_U4
 							return br.ReadUInt32();
 						case Signature.ELEMENT_TYPE_U8
 							return br.ReadUInt64();
 						case Signature.ELEMENT_TYPE_R4
 							return br.ReadSingle();
 						case Signature.ELEMENT_TYPE_R8
 							return br.ReadDouble();
 						case Signature.ELEMENT_TYPE_CHAR
 							return br.ReadChar();
 						case Signature.ELEMENT_TYPE_STRING
 							{
 								char[] chars = new char[br.Length / 2];
 								for (int j = 0; j < chars.Length; j++)
 								{
 									chars[j] = br.ReadChar();
 								}
 								return new String(chars);
 							}
 						case Signature.ELEMENT_TYPE_CLASS
 							if (br.ReadInt32() != 0)
 							{
 								throw new BadImageFormatException();
 							}
 							return null;
 						default
 							throw new BadImageFormatException();
 					}
 				}
 			}
 			throw new InvalidOperationException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="965" endline="986"><![CDATA[
 	}
 
 	sealed class CustomAttributeTable 
 	{
 		internal const int Index = 0x0C;
 
 		internal struct Record
 		{
 			internal int Parent;
 			internal int Type;
 			internal int Value;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Parent = mr.ReadHasCustomAttribute();
 				records[i].Type = mr.ReadCustomAttributeType();
 				records[i].Value = mr.ReadBlobIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Parent = mr.ReadHasCustomAttribute();
 				records[i].Type = mr.ReadCustomAttributeType();
 				records[i].Value = mr.ReadBlobIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="987" endline="996"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteHasCustomAttribute(records[i].Parent);
 				mw.WriteCustomAttributeType(records[i].Type);
 				mw.WriteBlobIndex(records[i].Value);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteHasCustomAttribute(records[i].Parent);
 				mw.WriteCustomAttributeType(records[i].Type);
 				mw.WriteBlobIndex(records[i].Value);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="997" endline="1005"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.WriteHasCustomAttribute()
 				.WriteCustomAttributeType()
 				.WriteBlobIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1006" endline="1087"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder)
 		{
 			int[] genericParamFixup = moduleBuilder.GenericParam.GetIndexFixup();
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (moduleBuilder.IsPseudoToken(records[i].Type))
 				{
 					records[i].Type = moduleBuilder.ResolvePseudoToken(records[i].Type);
 				}
 				int token = records[i].Parent;
 				if (moduleBuilder.IsPseudoToken(token))
 				{
 					token = moduleBuilder.ResolvePseudoToken(token);
 				}
 				// do the HasCustomAttribute encoding, so that we can sort the table
 				switch (token >> 24)
 				{
 					case MethodDefTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 0;
 						break;
 					case FieldTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 1;
 						break;
 					case TypeRefTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 2;
 						break;
 					case TypeDefTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 3;
 						break;
 					case ParamTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 4;
 						break;
 					case InterfaceImplTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 5;
 						break;
 					case MemberRefTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 6;
 						break;
 					case ModuleTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 7;
 						break;
 					// Permission (8) table doesn't exist in the spec
 					case PropertyTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 9;
 						break;
 					case EventTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 10;
 						break;
 					case StandAloneSigTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 11;
 						break;
 					case ModuleRefTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 12;
 						break;
 					case TypeSpecTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 13;
 						break;
 					case AssemblyTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 14;
 						break;
 					case AssemblyRefTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 15;
 						break;
 					case FileTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 16;
 						break;
 					case ExportedTypeTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 17;
 						break;
 					case ManifestResourceTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 18;
 						break;
 					case GenericParamTable.Index
 						records[i].Parent = (genericParamFixup[(token & 0xFFFFFF) - 1] + 1) << 5 | 19;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (moduleBuilder.IsPseudoToken(records[i].Type))
 				{
 					records[i].Type = moduleBuilder.ResolvePseudoToken(records[i].Type);
 				}
 				int token = records[i].Parent;
 				if (moduleBuilder.IsPseudoToken(token))
 				{
 					token = moduleBuilder.ResolvePseudoToken(token);
 				}
 				// do the HasCustomAttribute encoding, so that we can sort the table
 				switch (token >> 24)
 				{
 					case MethodDefTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 0;
 						break;
 					case FieldTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 1;
 						break;
 					case TypeRefTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 2;
 						break;
 					case TypeDefTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 3;
 						break;
 					case ParamTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 4;
 						break;
 					case InterfaceImplTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 5;
 						break;
 					case MemberRefTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 6;
 						break;
 					case ModuleTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 7;
 						break;
 					// Permission (8) table doesn't exist in the spec
 					case PropertyTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 9;
 						break;
 					case EventTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 10;
 						break;
 					case StandAloneSigTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 11;
 						break;
 					case ModuleRefTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 12;
 						break;
 					case TypeSpecTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 13;
 						break;
 					case AssemblyTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 14;
 						break;
 					case AssemblyRefTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 15;
 						break;
 					case FileTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 16;
 						break;
 					case ExportedTypeTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 17;
 						break;
 					case ManifestResourceTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 5 | 18;
 						break;
 					case GenericParamTable.Index
 						records[i].Parent = (genericParamFixup[(token & 0xFFFFFF) - 1] + 1) << 5 | 19;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 			}
 			Array.Sort(records, 0, rowCount, this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1088" endline="1092"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			return x.Parent == y.Parent ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1093" endline="1112"><![CDATA[
 	}
 
 	sealed class FieldMarshalTable 
 	{
 		internal const int Index = 0x0D;
 
 		internal struct Record
 		{
 			internal int Parent;
 			internal int NativeType;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Parent = mr.ReadHasFieldMarshal();
 				records[i].NativeType = mr.ReadBlobIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Parent = mr.ReadHasFieldMarshal();
 				records[i].NativeType = mr.ReadBlobIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1113" endline="1121"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteHasFieldMarshal(records[i].Parent);
 				mw.WriteBlobIndex(records[i].NativeType);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteHasFieldMarshal(records[i].Parent);
 				mw.WriteBlobIndex(records[i].NativeType);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1122" endline="1129"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.WriteHasFieldMarshal()
 				.WriteBlobIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1130" endline="1150"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				int token = moduleBuilder.ResolvePseudoToken(records[i].Parent);
 				// do the HasFieldMarshal encoding, so that we can sort the table
 				switch (token >> 24)
 				{
 					case FieldTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 1 | 0;
 						break;
 					case ParamTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 1 | 1;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				int token = moduleBuilder.ResolvePseudoToken(records[i].Parent);
 				// do the HasFieldMarshal encoding, so that we can sort the table
 				switch (token >> 24)
 				{
 					case FieldTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 1 | 0;
 						break;
 					case ParamTable.Index
 						records[i].Parent = (token & 0xFFFFFF) << 1 | 1;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 			}
 			Array.Sort(records, 0, rowCount, this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1151" endline="1155"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			return x.Parent == y.Parent ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1156" endline="1177"><![CDATA[
 	}
 
 	sealed class DeclSecurityTable 
 	{
 		internal const int Index = 0x0E;
 
 		internal struct Record
 		{
 			internal short Action;
 			internal int Parent;
 			internal int PermissionSet;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Action = mr.ReadInt16();
 				records[i].Parent = mr.ReadHasDeclSecurity();
 				records[i].PermissionSet = mr.ReadBlobIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Action = mr.ReadInt16();
 				records[i].Parent = mr.ReadHasDeclSecurity();
 				records[i].PermissionSet = mr.ReadBlobIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1178" endline="1187"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Action);
 				mw.WriteHasDeclSecurity(records[i].Parent);
 				mw.WriteBlobIndex(records[i].PermissionSet);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Action);
 				mw.WriteHasDeclSecurity(records[i].Parent);
 				mw.WriteBlobIndex(records[i].PermissionSet);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1188" endline="1196"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(2)
 				.WriteHasDeclSecurity()
 				.WriteBlobIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1197" endline="1225"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				int token = records[i].Parent;
 				if (moduleBuilder.IsPseudoToken(token))
 				{
 					token = moduleBuilder.ResolvePseudoToken(token);
 				}
 				// do the HasDeclSecurity encoding, so that we can sort the table
 				switch (token >> 24)
 				{
 					case TypeDefTable.Index
 						token = (token & 0xFFFFFF) << 2 | 0;
 						break;
 					case MethodDefTable.Index
 						token = (token & 0xFFFFFF) << 2 | 1;
 						break;
 					case AssemblyTable.Index
 						token = (token & 0xFFFFFF) << 2 | 2;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 				records[i].Parent = token;
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				int token = records[i].Parent;
 				if (moduleBuilder.IsPseudoToken(token))
 				{
 					token = moduleBuilder.ResolvePseudoToken(token);
 				}
 				// do the HasDeclSecurity encoding, so that we can sort the table
 				switch (token >> 24)
 				{
 					case TypeDefTable.Index
 						token = (token & 0xFFFFFF) << 2 | 0;
 						break;
 					case MethodDefTable.Index
 						token = (token & 0xFFFFFF) << 2 | 1;
 						break;
 					case AssemblyTable.Index
 						token = (token & 0xFFFFFF) << 2 | 2;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 				records[i].Parent = token;
 			}
 			Array.Sort(records, 0, rowCount, this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1226" endline="1230"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			return x.Parent == y.Parent ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1231" endline="1255"><![CDATA[
 	}
 
 	sealed class ClassLayoutTable 
 	{
 		internal const int Index = 0x0f;
 
 		internal struct Record
 		{
 			internal short PackingSize;
 			internal int ClassSize;
 			internal int Parent;
 		}
 
 		internal void AddOrReplaceRecord(Record rec)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				if (records[i].Parent == rec.Parent)
 				{
 					records[i] = rec;
 					return;
 				}
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				if (records[i].Parent == rec.Parent)
 				{
 					records[i] = rec;
 					return;
 				}
 			}
 			AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1256" endline="1265"><![CDATA[
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].PackingSize = mr.ReadInt16();
 				records[i].ClassSize = mr.ReadInt32();
 				records[i].Parent = mr.ReadTypeDef();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].PackingSize = mr.ReadInt16();
 				records[i].ClassSize = mr.ReadInt32();
 				records[i].Parent = mr.ReadTypeDef();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1266" endline="1276"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			Array.Sort(records, 0, rowCount, this);
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].PackingSize);
 				mw.Write(records[i].ClassSize);
 				mw.WriteTypeDef(records[i].Parent);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].PackingSize);
 				mw.Write(records[i].ClassSize);
 				mw.WriteTypeDef(records[i].Parent);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1277" endline="1284"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(6)
 				.WriteTypeDef()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1285" endline="1289"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			return x.Parent == y.Parent ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1290" endline="1302"><![CDATA[
 
 		internal void GetLayout(int token, ref int pack, ref int size)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i].Parent == token)
 				{
 					pack = records[i].PackingSize;
 					size = records[i].ClassSize;
 					break;
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i].Parent == token)
 				{
 					pack = records[i].PackingSize;
 					size = records[i].ClassSize;
 					break;
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1303" endline="1322"><![CDATA[
 	}
 
 	sealed class FieldLayoutTable 
 	{
 		internal const int Index = 0x10;
 
 		internal struct Record
 		{
 			internal int Offset;
 			internal int Field;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Offset = mr.ReadInt32();
 				records[i].Field = mr.ReadField();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Offset = mr.ReadInt32();
 				records[i].Field = mr.ReadField();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1323" endline="1331"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Offset);
 				mw.WriteField(records[i].Field);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Offset);
 				mw.WriteField(records[i].Field);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1332" endline="1339"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(4)
 				.WriteField()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1340" endline="1348"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				records[i].Field = moduleBuilder.ResolvePseudoToken(records[i].Field);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				records[i].Field = moduleBuilder.ResolvePseudoToken(records[i].Field);
 			}
 			Array.Sort(records, 0, rowCount, this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1349" endline="1353"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			return x.Field == y.Field ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1354" endline="1366"><![CDATA[
 	}
 
 	sealed class StandAloneSigTable 
 	{
 		internal const int Index = 0x11;
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i] = mr.ReadBlobIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i] = mr.ReadBlobIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1367" endline="1374"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteBlobIndex(records[i]);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteBlobIndex(records[i]);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1375" endline="1379"><![CDATA[
 
 		protected override int GetRowSize(Table.RowSizeCalc rsc)
 		{
 			return rsc.WriteBlobIndex().Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1380" endline="1391"><![CDATA[
 
 		internal int FindOrAddRecord(int blob)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i] == blob)
 				{
 					return i + 1;
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i] == blob)
 				{
 					return i + 1;
 				}
 			}
 			return AddRecord(blob);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1392" endline="1411"><![CDATA[
 	}
 
 	sealed class EventMapTable 
 	{
 		internal const int Index = 0x12;
 
 		internal struct Record
 		{
 			internal int Parent;
 			internal int EventList;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Parent = mr.ReadTypeDef();
 				records[i].EventList = mr.ReadEvent();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Parent = mr.ReadTypeDef();
 				records[i].EventList = mr.ReadEvent();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1412" endline="1420"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteTypeDef(records[i].Parent);
 				mw.WriteEvent(records[i].EventList);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteTypeDef(records[i].Parent);
 				mw.WriteEvent(records[i].EventList);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1421" endline="1428"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.WriteTypeDef()
 				.WriteEvent()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1429" endline="1450"><![CDATA[
 	}
 
 	sealed class EventTable 
 	{
 		internal const int Index = 0x14;
 
 		internal struct Record
 		{
 			internal short EventFlags;
 			internal int Name;
 			internal int EventType;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].EventFlags = mr.ReadInt16();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].EventType = mr.ReadTypeDefOrRef();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].EventFlags = mr.ReadInt16();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].EventType = mr.ReadTypeDefOrRef();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1451" endline="1460"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].EventFlags);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteTypeDefOrRef(records[i].EventType);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].EventFlags);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteTypeDefOrRef(records[i].EventType);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1461" endline="1469"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(2)
 				.WriteStringIndex()
 				.WriteTypeDefOrRef()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1470" endline="1489"><![CDATA[
 	}
 
 	sealed class PropertyMapTable 
 	{
 		internal const int Index = 0x15;
 
 		internal struct Record
 		{
 			internal int Parent;
 			internal int PropertyList;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Parent = mr.ReadTypeDef();
 				records[i].PropertyList = mr.ReadProperty();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Parent = mr.ReadTypeDef();
 				records[i].PropertyList = mr.ReadProperty();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1490" endline="1498"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteTypeDef(records[i].Parent);
 				mw.WriteProperty(records[i].PropertyList);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteTypeDef(records[i].Parent);
 				mw.WriteProperty(records[i].PropertyList);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1499" endline="1506"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.WriteTypeDef()
 				.WriteProperty()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1507" endline="1528"><![CDATA[
 	}
 
 	sealed class PropertyTable 
 	{
 		internal const int Index = 0x17;
 
 		internal struct Record
 		{
 			internal short Flags;
 			internal int Name;
 			internal int Type;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Flags = mr.ReadInt16();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Type = mr.ReadBlobIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Flags = mr.ReadInt16();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Type = mr.ReadBlobIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1529" endline="1538"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Flags);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteBlobIndex(records[i].Type);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Flags);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteBlobIndex(records[i].Type);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1539" endline="1547"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(2)
 				.WriteStringIndex()
 				.WriteBlobIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1548" endline="1577"><![CDATA[
 	}
 
 	sealed class MethodSemanticsTable 
 	{
 		internal const int Index = 0x18;
 
 		// semantics
 		internal const short Setter = 0x0001;
 		internal const short Getter = 0x0002;
 		internal const short Other = 0x0004;
 		internal const short AddOn = 0x0008;
 		internal const short RemoveOn = 0x0010;
 		internal const short Fire = 0x0020;
 
 		internal struct Record
 		{
 			internal short Semantics;
 			internal int Method;
 			internal int Association;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Semantics = mr.ReadInt16();
 				records[i].Method = mr.ReadMethodDef();
 				records[i].Association = mr.ReadHasSemantics();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Semantics = mr.ReadInt16();
 				records[i].Method = mr.ReadMethodDef();
 				records[i].Association = mr.ReadHasSemantics();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1578" endline="1587"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Semantics);
 				mw.WriteMethodDef(records[i].Method);
 				mw.WriteHasSemantics(records[i].Association);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Semantics);
 				mw.WriteMethodDef(records[i].Method);
 				mw.WriteHasSemantics(records[i].Association);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1588" endline="1596"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(2)
 				.WriteMethodDef()
 				.WriteHasSemantics()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1597" endline="1622"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (moduleBuilder.IsPseudoToken(records[i].Method))
 				{
 					records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
 				}
 				int token = records[i].Association;
 				// do the HasSemantics encoding, so that we can sort the table
 				switch (token >> 24)
 				{
 					case EventTable.Index
 						token = (token & 0xFFFFFF) << 1 | 0;
 						break;
 					case PropertyTable.Index
 						token = (token & 0xFFFFFF) << 1 | 1;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 				records[i].Association = token;
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (moduleBuilder.IsPseudoToken(records[i].Method))
 				{
 					records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
 				}
 				int token = records[i].Association;
 				// do the HasSemantics encoding, so that we can sort the table
 				switch (token >> 24)
 				{
 					case EventTable.Index
 						token = (token & 0xFFFFFF) << 1 | 0;
 						break;
 					case PropertyTable.Index
 						token = (token & 0xFFFFFF) << 1 | 1;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 				records[i].Association = token;
 			}
 			Array.Sort(records, 0, rowCount, this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1623" endline="1627"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			return x.Association == y.Association ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1628" endline="1633"><![CDATA[
 
 		internal MethodInfo GetMethod(Module module, int token, bool nonPublic, short semantics)
 		{
 			int i = 0;
 			return GetNextMethod(module, token, nonPublic, semantics, ref i);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1634" endline="1644"><![CDATA[
 
 		internal MethodInfo[] GetMethods(Module module, int token, bool nonPublic, short semantics)
 		{
 			List<MethodInfo> methods = new List<MethodInfo>();
 			MethodInfo method;
 			for (int i = 0; (method = GetNextMethod(module, token, nonPublic, semantics, ref i)) != null; )
 			{
 				methods.Add(method);
 			}
 			for (int i = 0; (method = GetNextMethod(module, token, nonPublic, semantics, ref i)) != null; )
 			{
 				methods.Add(method);
 			}
 			return methods.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1645" endline="1665"><![CDATA[
 
 		private MethodInfo GetNextMethod(Module module, int token, bool nonPublic, short semantics, ref int i)
 		{
 			// TODO use binary search?
 			for (; i < records.Length; i++)
 			{
 				if (records[i].Association == token)
 				{
 					if ((records[i].Semantics & semantics) != 0)
 					{
 						MethodInfo method = (MethodInfo)module.ResolveMethod((MethodDefTable.Index << 24) + records[i].Method);
 						if (nonPublic || method.IsPublic)
 						{
 							i++;
 							return method;
 						}
 					}
 				}
 			}
 			for (; i < records.Length; i++)
 			{
 				if (records[i].Association == token)
 				{
 					if ((records[i].Semantics & semantics) != 0)
 					{
 						MethodInfo method = (MethodInfo)module.ResolveMethod((MethodDefTable.Index << 24) + records[i].Method);
 						if (nonPublic || method.IsPublic)
 						{
 							i++;
 							return method;
 						}
 					}
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1666" endline="1683"><![CDATA[
 
 		internal void ComputeFlags(Module module, int token, out bool isPublic, out bool isStatic)
 		{
 			isPublic = false;
 			isStatic = false;
 			MethodInfo method;
 			for (int i = 0; (method = GetNextMethod(module, token, true, -1, ref i)) != null; )
 			{
 				if (method.IsPublic)
 				{
 					isPublic = true;
 				}
 				if (method.IsStatic)
 				{
 					isStatic = true;
 				}
 			}
 			for (int i = 0; (method = GetNextMethod(module, token, true, -1, ref i)) != null; )
 			{
 				if (method.IsPublic)
 				{
 					isPublic = true;
 				}
 				if (method.IsStatic)
 				{
 					isStatic = true;
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1684" endline="1705"><![CDATA[
 	}
 
 	sealed class MethodImplTable 
 	{
 		internal const int Index = 0x19;
 
 		internal struct Record
 		{
 			internal int Class;
 			internal int MethodBody;
 			internal int MethodDeclaration;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Class = mr.ReadTypeDef();
 				records[i].MethodBody = mr.ReadMethodDefOrRef();
 				records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Class = mr.ReadTypeDef();
 				records[i].MethodBody = mr.ReadMethodDefOrRef();
 				records[i].MethodDeclaration = mr.ReadMethodDefOrRef();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1706" endline="1715"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteTypeDef(records[i].Class);
 				mw.WriteMethodDefOrRef(records[i].MethodBody);
 				mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteTypeDef(records[i].Class);
 				mw.WriteMethodDefOrRef(records[i].MethodBody);
 				mw.WriteMethodDefOrRef(records[i].MethodDeclaration);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1716" endline="1724"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.WriteTypeDef()
 				.WriteMethodDefOrRef()
 				.WriteMethodDefOrRef()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1725" endline="1740"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (moduleBuilder.IsPseudoToken(records[i].MethodBody))
 				{
 					records[i].MethodBody = moduleBuilder.ResolvePseudoToken(records[i].MethodBody);
 				}
 				if (moduleBuilder.IsPseudoToken(records[i].MethodDeclaration))
 				{
 					records[i].MethodDeclaration = moduleBuilder.ResolvePseudoToken(records[i].MethodDeclaration);
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (moduleBuilder.IsPseudoToken(records[i].MethodBody))
 				{
 					records[i].MethodBody = moduleBuilder.ResolvePseudoToken(records[i].MethodBody);
 				}
 				if (moduleBuilder.IsPseudoToken(records[i].MethodDeclaration))
 				{
 					records[i].MethodDeclaration = moduleBuilder.ResolvePseudoToken(records[i].MethodDeclaration);
 				}
 			}
 			Array.Sort(records, 0, rowCount, this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1741" endline="1745"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			return x.Class == y.Class ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1746" endline="1758"><![CDATA[
 	}
 
 	sealed class ModuleRefTable 
 	{
 		internal const int Index = 0x1A;
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i] = mr.ReadStringIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i] = mr.ReadStringIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1759" endline="1766"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteStringIndex(records[i]);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteStringIndex(records[i]);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1767" endline="1773"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.WriteStringIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1774" endline="1785"><![CDATA[
 
 		internal int FindOrAddRecord(int str)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i] == str)
 				{
 					return i + 1;
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i] == str)
 				{
 					return i + 1;
 				}
 			}
 			return AddRecord(str);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1786" endline="1798"><![CDATA[
 	}
 
 	sealed class TypeSpecTable 
 	{
 		internal const int Index = 0x1B;
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i] = mr.ReadBlobIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i] = mr.ReadBlobIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1799" endline="1806"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteBlobIndex(records[i]);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteBlobIndex(records[i]);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1807" endline="1811"><![CDATA[
 
 		protected override int GetRowSize(Table.RowSizeCalc rsc)
 		{
 			return rsc.WriteBlobIndex().Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1812" endline="1835"><![CDATA[
 	}
 
 	sealed class ImplMapTable 
 	{
 		internal const int Index = 0x1C;
 
 		internal struct Record
 		{
 			internal short MappingFlags;
 			internal int MemberForwarded;
 			internal int ImportName;
 			internal int ImportScope;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].MappingFlags = mr.ReadInt16();
 				records[i].MemberForwarded = mr.ReadMemberForwarded();
 				records[i].ImportName = mr.ReadStringIndex();
 				records[i].ImportScope = mr.ReadModuleRef();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].MappingFlags = mr.ReadInt16();
 				records[i].MemberForwarded = mr.ReadMemberForwarded();
 				records[i].ImportName = mr.ReadStringIndex();
 				records[i].ImportScope = mr.ReadModuleRef();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1836" endline="1846"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].MappingFlags);
 				mw.WriteMemberForwarded(records[i].MemberForwarded);
 				mw.WriteStringIndex(records[i].ImportName);
 				mw.WriteModuleRef(records[i].ImportScope);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].MappingFlags);
 				mw.WriteMemberForwarded(records[i].MemberForwarded);
 				mw.WriteStringIndex(records[i].ImportName);
 				mw.WriteModuleRef(records[i].ImportScope);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1847" endline="1856"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(2)
 				.WriteMemberForwarded()
 				.WriteStringIndex()
 				.WriteModuleRef()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1857" endline="1868"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (moduleBuilder.IsPseudoToken(records[i].MemberForwarded))
 				{
 					records[i].MemberForwarded = moduleBuilder.ResolvePseudoToken(records[i].MemberForwarded);
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (moduleBuilder.IsPseudoToken(records[i].MemberForwarded))
 				{
 					records[i].MemberForwarded = moduleBuilder.ResolvePseudoToken(records[i].MemberForwarded);
 				}
 			}
 			Array.Sort(records, 0, rowCount, this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1869" endline="1873"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			return x.MemberForwarded == y.MemberForwarded ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1874" endline="1893"><![CDATA[
 	}
 
 	sealed class FieldRVATable 
 	{
 		internal const int Index = 0x1D;
 
 		internal struct Record
 		{
 			internal int RVA;
 			internal int Field;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].RVA = mr.ReadInt32();
 				records[i].Field = mr.ReadField();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].RVA = mr.ReadInt32();
 				records[i].Field = mr.ReadField();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1894" endline="1902"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].RVA);
 				mw.WriteField(records[i].Field);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].RVA);
 				mw.WriteField(records[i].Field);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1903" endline="1910"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(4)
 				.WriteField()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1911" endline="1923"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder, int sdataRVA)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				records[i].RVA += sdataRVA;
 				if (moduleBuilder.IsPseudoToken(records[i].Field))
 				{
 					records[i].Field = moduleBuilder.ResolvePseudoToken(records[i].Field);
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				records[i].RVA += sdataRVA;
 				if (moduleBuilder.IsPseudoToken(records[i].Field))
 				{
 					records[i].Field = moduleBuilder.ResolvePseudoToken(records[i].Field);
 				}
 			}
 			Array.Sort(records, 0, rowCount, this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1924" endline="1928"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			return x.Field == y.Field ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1929" endline="1962"><![CDATA[
 	}
 
 	sealed class AssemblyTable 
 	{
 		internal const int Index = 0x20;
 
 		internal struct Record
 		{
 			internal int HashAlgId;
 			internal ushort MajorVersion;
 			internal ushort MinorVersion;
 			internal ushort BuildNumber;
 			internal ushort RevisionNumber;
 			internal int Flags;
 			internal int PublicKey;
 			internal int Name;
 			internal int Culture;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].HashAlgId = mr.ReadInt32();
 				records[i].MajorVersion = mr.ReadUInt16();
 				records[i].MinorVersion = mr.ReadUInt16();
 				records[i].BuildNumber = mr.ReadUInt16();
 				records[i].RevisionNumber = mr.ReadUInt16();
 				records[i].Flags = mr.ReadInt32();
 				records[i].PublicKey = mr.ReadBlobIndex();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Culture = mr.ReadStringIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].HashAlgId = mr.ReadInt32();
 				records[i].MajorVersion = mr.ReadUInt16();
 				records[i].MinorVersion = mr.ReadUInt16();
 				records[i].BuildNumber = mr.ReadUInt16();
 				records[i].RevisionNumber = mr.ReadUInt16();
 				records[i].Flags = mr.ReadInt32();
 				records[i].PublicKey = mr.ReadBlobIndex();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Culture = mr.ReadStringIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1963" endline="1978"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].HashAlgId);
 				mw.Write(records[i].MajorVersion);
 				mw.Write(records[i].MinorVersion);
 				mw.Write(records[i].BuildNumber);
 				mw.Write(records[i].RevisionNumber);
 				mw.Write(records[i].Flags);
 				mw.WriteBlobIndex(records[i].PublicKey);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteStringIndex(records[i].Culture);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].HashAlgId);
 				mw.Write(records[i].MajorVersion);
 				mw.Write(records[i].MinorVersion);
 				mw.Write(records[i].BuildNumber);
 				mw.Write(records[i].RevisionNumber);
 				mw.Write(records[i].Flags);
 				mw.WriteBlobIndex(records[i].PublicKey);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteStringIndex(records[i].Culture);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1979" endline="1988"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(16)
 				.WriteBlobIndex()
 				.WriteStringIndex()
 				.WriteStringIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="1989" endline="2027"><![CDATA[
 	}
 
 	sealed class AssemblyRefTable 
 	{
 		internal const int Index = 0x23;
 
 		internal struct Record
 		{
 			internal ushort MajorVersion;
 			internal ushort MinorVersion;
 			internal ushort BuildNumber;
 			internal ushort RevisionNumber;
 			internal int Flags;
 			internal int PublicKeyOrToken;
 			internal int Name;
 			internal int Culture;
 			internal int HashValue;
 		}
 
 		internal int FindOrAddRecord(Record rec)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i].Name == rec.Name
 					&& records[i].MajorVersion == rec.MajorVersion
 					&& records[i].MinorVersion == rec.MinorVersion
 					&& records[i].BuildNumber == rec.BuildNumber
 					&& records[i].RevisionNumber == rec.RevisionNumber
 					&& records[i].Flags == rec.Flags
 					&& records[i].PublicKeyOrToken == rec.PublicKeyOrToken
 					&& records[i].Culture == rec.Culture
 					&& records[i].HashValue == rec.HashValue
 					)
 				{
 					return i + 1;
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i].Name == rec.Name
 					&& records[i].MajorVersion == rec.MajorVersion
 					&& records[i].MinorVersion == rec.MinorVersion
 					&& records[i].BuildNumber == rec.BuildNumber
 					&& records[i].RevisionNumber == rec.RevisionNumber
 					&& records[i].Flags == rec.Flags
 					&& records[i].PublicKeyOrToken == rec.PublicKeyOrToken
 					&& records[i].Culture == rec.Culture
 					&& records[i].HashValue == rec.HashValue
 					)
 				{
 					return i + 1;
 				}
 			}
 			return AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2028" endline="2043"><![CDATA[
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].MajorVersion = mr.ReadUInt16();
 				records[i].MinorVersion = mr.ReadUInt16();
 				records[i].BuildNumber = mr.ReadUInt16();
 				records[i].RevisionNumber = mr.ReadUInt16();
 				records[i].Flags = mr.ReadInt32();
 				records[i].PublicKeyOrToken = mr.ReadBlobIndex();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Culture = mr.ReadStringIndex();
 				records[i].HashValue = mr.ReadBlobIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].MajorVersion = mr.ReadUInt16();
 				records[i].MinorVersion = mr.ReadUInt16();
 				records[i].BuildNumber = mr.ReadUInt16();
 				records[i].RevisionNumber = mr.ReadUInt16();
 				records[i].Flags = mr.ReadInt32();
 				records[i].PublicKeyOrToken = mr.ReadBlobIndex();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Culture = mr.ReadStringIndex();
 				records[i].HashValue = mr.ReadBlobIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2044" endline="2059"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].MajorVersion);
 				mw.Write(records[i].MinorVersion);
 				mw.Write(records[i].BuildNumber);
 				mw.Write(records[i].RevisionNumber);
 				mw.Write(records[i].Flags);
 				mw.WriteBlobIndex(records[i].PublicKeyOrToken);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteStringIndex(records[i].Culture);
 				mw.WriteBlobIndex(records[i].HashValue);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].MajorVersion);
 				mw.Write(records[i].MinorVersion);
 				mw.Write(records[i].BuildNumber);
 				mw.Write(records[i].RevisionNumber);
 				mw.Write(records[i].Flags);
 				mw.WriteBlobIndex(records[i].PublicKeyOrToken);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteStringIndex(records[i].Culture);
 				mw.WriteBlobIndex(records[i].HashValue);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2060" endline="2070"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(12)
 				.WriteBlobIndex()
 				.WriteStringIndex()
 				.WriteStringIndex()
 				.WriteBlobIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2071" endline="2092"><![CDATA[
 	}
 
 	sealed class FileTable 
 	{
 		internal const int Index = 0x26;
 
 		internal struct Record
 		{
 			internal int Flags;
 			internal int Name;
 			internal int HashValue;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Flags = mr.ReadInt32();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].HashValue = mr.ReadBlobIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Flags = mr.ReadInt32();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].HashValue = mr.ReadBlobIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2093" endline="2102"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Flags);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteBlobIndex(records[i].HashValue);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Flags);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteBlobIndex(records[i].HashValue);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2103" endline="2111"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(4)
 				.WriteStringIndex()
 				.WriteBlobIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2112" endline="2137"><![CDATA[
 	}
 
 	sealed class ExportedTypeTable 
 	{
 		internal const int Index = 0x27;
 
 		internal struct Record
 		{
 			internal int Flags;
 			internal int TypeDefId;
 			internal int TypeName;
 			internal int TypeNamespace;
 			internal int Implementation;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Flags = mr.ReadInt32();
 				records[i].TypeDefId = mr.ReadInt32();
 				records[i].TypeName = mr.ReadStringIndex();
 				records[i].TypeNamespace = mr.ReadStringIndex();
 				records[i].Implementation = mr.ReadImplementation();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Flags = mr.ReadInt32();
 				records[i].TypeDefId = mr.ReadInt32();
 				records[i].TypeName = mr.ReadStringIndex();
 				records[i].TypeNamespace = mr.ReadStringIndex();
 				records[i].Implementation = mr.ReadImplementation();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2138" endline="2149"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Flags);
 				mw.Write(records[i].TypeDefId);
 				mw.WriteStringIndex(records[i].TypeName);
 				mw.WriteStringIndex(records[i].TypeNamespace);
 				mw.WriteImplementation(records[i].Implementation);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Flags);
 				mw.Write(records[i].TypeDefId);
 				mw.WriteStringIndex(records[i].TypeName);
 				mw.WriteStringIndex(records[i].TypeNamespace);
 				mw.WriteImplementation(records[i].Implementation);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2150" endline="2159"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(8)
 				.WriteStringIndex()
 				.WriteStringIndex()
 				.WriteImplementation()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2160" endline="2173"><![CDATA[
 
 		internal int FindOrAddRecord(Record rec)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i].Implementation == rec.Implementation
 					&& records[i].TypeName == rec.TypeName
 					&& records[i].TypeNamespace == rec.TypeNamespace)
 				{
 					return i + 1;
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i].Implementation == rec.Implementation
 					&& records[i].TypeName == rec.TypeName
 					&& records[i].TypeNamespace == rec.TypeNamespace)
 				{
 					return i + 1;
 				}
 			}
 			return AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2174" endline="2197"><![CDATA[
 	}
 
 	sealed class ManifestResourceTable 
 	{
 		internal const int Index = 0x28;
 
 		internal struct Record
 		{
 			internal int Offset;
 			internal int Flags;
 			internal int Name;
 			internal int Implementation;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Offset = mr.ReadInt32();
 				records[i].Flags = mr.ReadInt32();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Implementation = mr.ReadImplementation();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Offset = mr.ReadInt32();
 				records[i].Flags = mr.ReadInt32();
 				records[i].Name = mr.ReadStringIndex();
 				records[i].Implementation = mr.ReadImplementation();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2198" endline="2208"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Offset);
 				mw.Write(records[i].Flags);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteImplementation(records[i].Implementation);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Offset);
 				mw.Write(records[i].Flags);
 				mw.WriteStringIndex(records[i].Name);
 				mw.WriteImplementation(records[i].Implementation);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2209" endline="2217"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(8)
 				.WriteStringIndex()
 				.WriteImplementation()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2218" endline="2237"><![CDATA[
 	}
 
 	sealed class NestedClassTable 
 	{
 		internal const int Index = 0x29;
 
 		internal struct Record
 		{
 			internal int NestedClass;
 			internal int EnclosingClass;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].NestedClass = mr.ReadTypeDef();
 				records[i].EnclosingClass = mr.ReadTypeDef();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].NestedClass = mr.ReadTypeDef();
 				records[i].EnclosingClass = mr.ReadTypeDef();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2238" endline="2246"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteTypeDef(records[i].NestedClass);
 				mw.WriteTypeDef(records[i].EnclosingClass);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteTypeDef(records[i].NestedClass);
 				mw.WriteTypeDef(records[i].EnclosingClass);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2247" endline="2254"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.WriteTypeDef()
 				.WriteTypeDef()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2255" endline="2267"><![CDATA[
 
 		internal List<int> GetNestedClasses(int enclosingClass)
 		{
 			List<int> nestedClasses = new List<int>();
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i].EnclosingClass == enclosingClass)
 				{
 					nestedClasses.Add(records[i].NestedClass);
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i].EnclosingClass == enclosingClass)
 				{
 					nestedClasses.Add(records[i].NestedClass);
 				}
 			}
 			return nestedClasses;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2268" endline="2293"><![CDATA[
 	}
 
 	sealed class GenericParamTable 
 	{
 		internal const int Index = 0x2A;
 
 		internal struct Record
 		{
 			internal short Number;
 			internal short Flags;
 			internal int Owner;
 			internal int Name;
 			// not part of the table, we use it to be able to fixup the GenericParamConstraint table
 			internal int unsortedIndex;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Number = mr.ReadInt16();
 				records[i].Flags = mr.ReadInt16();
 				records[i].Owner = mr.ReadTypeOrMethodDef();
 				records[i].Name = mr.ReadStringIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Number = mr.ReadInt16();
 				records[i].Flags = mr.ReadInt16();
 				records[i].Owner = mr.ReadTypeOrMethodDef();
 				records[i].Name = mr.ReadStringIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2294" endline="2304"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Number);
 				mw.Write(records[i].Flags);
 				mw.WriteTypeOrMethodDef(records[i].Owner);
 				mw.WriteStringIndex(records[i].Name);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.Write(records[i].Number);
 				mw.Write(records[i].Flags);
 				mw.WriteTypeOrMethodDef(records[i].Owner);
 				mw.WriteStringIndex(records[i].Name);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2305" endline="2313"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.AddFixed(4)
 				.WriteTypeOrMethodDef()
 				.WriteStringIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2314" endline="2339"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				int token = records[i].Owner;
 				if (moduleBuilder.IsPseudoToken(token))
 				{
 					token = moduleBuilder.ResolvePseudoToken(token);
 				}
 				// do the TypeOrMethodDef encoding, so that we can sort the table
 				switch (token >> 24)
 				{
 					case TypeDefTable.Index
 						records[i].Owner = (token & 0xFFFFFF) << 1 | 0;
 						break;
 					case MethodDefTable.Index
 						records[i].Owner = (token & 0xFFFFFF) << 1 | 1;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 				records[i].unsortedIndex = i;
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				int token = records[i].Owner;
 				if (moduleBuilder.IsPseudoToken(token))
 				{
 					token = moduleBuilder.ResolvePseudoToken(token);
 				}
 				// do the TypeOrMethodDef encoding, so that we can sort the table
 				switch (token >> 24)
 				{
 					case TypeDefTable.Index
 						records[i].Owner = (token & 0xFFFFFF) << 1 | 0;
 						break;
 					case MethodDefTable.Index
 						records[i].Owner = (token & 0xFFFFFF) << 1 | 1;
 						break;
 					default
 						throw new InvalidOperationException();
 				}
 				records[i].unsortedIndex = i;
 			}
 			Array.Sort(records, 0, rowCount, this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2340" endline="2348"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			if (x.Owner == y.Owner)
 			{
 				return x.Number == y.Number ? 0 
 			}
 			return x.Owner > y.Owner ? 1 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2349" endline="2353"><![CDATA[
 
 		internal GenericParameterAttributes GetAttributes(int token)
 		{
 			return (GenericParameterAttributes)records[(token & 0xFFFFFF) - 1].Flags;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2354" endline="2358"><![CDATA[
 
 		internal void PatchAttribute(int token, GenericParameterAttributes genericParameterAttributes)
 		{
 			records[(token & 0xFFFFFF) - 1].Flags = (short)genericParameterAttributes;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2359" endline="2368"><![CDATA[
 
 		internal int[] GetIndexFixup()
 		{
 			int[] array = new int[rowCount];
 			for (int i = 0; i < rowCount; i++)
 			{
 				array[records[i].unsortedIndex] = i;
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				array[records[i].unsortedIndex] = i;
 			}
 			return array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2369" endline="2381"><![CDATA[
 
 		internal int FindFirstByOwner(int token)
 		{
 			// TODO use binary search (if sorted)
 			for (int i = 0; i < records.Length; i++)
 			{
 				if (records[i].Owner == token)
 				{
 					return i;
 				}
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				if (records[i].Owner == token)
 				{
 					return i;
 				}
 			}
 			return -1;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2382" endline="2401"><![CDATA[
 	}
 
 	sealed class MethodSpecTable 
 	{
 		internal const int Index = 0x2B;
 
 		internal struct Record
 		{
 			internal int Method;
 			internal int Instantiation;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Method = mr.ReadMethodDefOrRef();
 				records[i].Instantiation = mr.ReadBlobIndex();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Method = mr.ReadMethodDefOrRef();
 				records[i].Instantiation = mr.ReadBlobIndex();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2402" endline="2410"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteMethodDefOrRef(records[i].Method);
 				mw.WriteBlobIndex(records[i].Instantiation);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteMethodDefOrRef(records[i].Method);
 				mw.WriteBlobIndex(records[i].Instantiation);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2411" endline="2418"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.WriteMethodDefOrRef()
 				.WriteBlobIndex()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2419" endline="2431"><![CDATA[
 
 		internal int FindOrAddRecord(Record record)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i].Method == record.Method
 					&& records[i].Instantiation == record.Instantiation)
 				{
 					return i + 1;
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (records[i].Method == record.Method
 					&& records[i].Instantiation == record.Instantiation)
 				{
 					return i + 1;
 				}
 			}
 			return AddRecord(record);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2432" endline="2442"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (moduleBuilder.IsPseudoToken(records[i].Method))
 				{
 					records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
 				}
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				if (moduleBuilder.IsPseudoToken(records[i].Method))
 				{
 					records[i].Method = moduleBuilder.ResolvePseudoToken(records[i].Method);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2443" endline="2462"><![CDATA[
 	}
 
 	sealed class GenericParamConstraintTable 
 	{
 		internal const int Index = 0x2C;
 
 		internal struct Record
 		{
 			internal int Owner;
 			internal int Constraint;
 		}
 
 		internal override void Read(MetadataReader mr)
 		{
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Owner = mr.ReadGenericParam();
 				records[i].Constraint = mr.ReadTypeDefOrRef();
 			}
 			for (int i = 0; i < records.Length; i++)
 			{
 				records[i].Owner = mr.ReadGenericParam();
 				records[i].Constraint = mr.ReadTypeDefOrRef();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2463" endline="2471"><![CDATA[
 
 		internal override void Write(MetadataWriter mw)
 		{
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteGenericParam(records[i].Owner);
 				mw.WriteTypeDefOrRef(records[i].Constraint);
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				mw.WriteGenericParam(records[i].Owner);
 				mw.WriteTypeDefOrRef(records[i].Constraint);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2472" endline="2479"><![CDATA[
 
 		protected override int GetRowSize(RowSizeCalc rsc)
 		{
 			return rsc
 				.WriteGenericParam()
 				.WriteTypeDefOrRef()
 				.Value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2480" endline="2489"><![CDATA[
 
 		internal void Fixup(ModuleBuilder moduleBuilder)
 		{
 			int[] fixups = moduleBuilder.GenericParam.GetIndexFixup();
 			for (int i = 0; i < rowCount; i++)
 			{
 				records[i].Owner = fixups[records[i].Owner - 1] + 1;
 			}
 			for (int i = 0; i < rowCount; i++)
 			{
 				records[i].Owner = fixups[records[i].Owner - 1] + 1;
 			}
 			Array.Sort(records, 0, rowCount, this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2490" endline="2494"><![CDATA[
 
 		int IComparer<Record>.Compare(Record x, Record y)
 		{
 			return x.Owner == y.Owner ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\Tables.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="41" endline="45"><![CDATA[
 		public FileFormatLimitationExceededException(string message, int hresult)
 			
 		{
 			this.HResult = hresult;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="46" endline="50"><![CDATA[
 
 		private FileFormatLimitationExceededException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="51" endline="54"><![CDATA[
 
 		public int ErrorCode
 		{
 			get { return this.HResult; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="63" endline="63"><![CDATA[
 		private Missing() { }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="64" endline="68"><![CDATA[
 
 		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
 		{
 			info.SetType(typeof(SingletonSerializationHelper));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="61" endline="61"><![CDATA[
 		public static readonly Missing Value = new Missing();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="62" endline="82"><![CDATA[
 
 		private Missing() { }
 
 		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
 		{
 			info.SetType(typeof(SingletonSerializationHelper));
 		}
 
 		[Serializable]
 		private sealed class SingletonSerializationHelper 
 		{
 			public object GetRealObject(StreamingContext context)
 			{
 				return Value;
 			}
 		}
 	}
 
 	static class Empty<T>
 	{
 		internal static readonly T[] Array = new T[0];
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="83" endline="96"><![CDATA[
 	}
 
 	static class Util
 	{
 		internal static Type[] Copy(Type[] array)
 		{
 			if (array == null || array.Length == 0)
 			{
 				return Type.EmptyTypes;
 			}
 			Type[] copy = new Type[array.Length];
 			Array.Copy(array, copy, array.Length);
 			return copy;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="97" endline="110"><![CDATA[
 
 		internal static Type[][] Copy(Type[][] types)
 		{
 			if (types == null || types.Length == 0)
 			{
 				return types;
 			}
 			Type[][] newArray = new Type[types.Length][];
 			for (int i = 0; i < newArray.Length; i++)
 			{
 				newArray[i] = Copy(types[i]);
 			}
 			for (int i = 0; i < newArray.Length; i++)
 			{
 				newArray[i] = Copy(types[i]);
 			}
 			return newArray;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="111" endline="124"><![CDATA[
 
 		internal static T[] ToArray<T, V>(List<V> list, T[] empty) where V 
 		{
 			if (list == null || list.Count == 0)
 			{
 				return empty;
 			}
 			T[] array = new T[list.Count];
 			for (int i = 0; i < array.Length; i++)
 			{
 				array[i] = list[i];
 			}
 			for (int i = 0; i < array.Length; i++)
 			{
 				array[i] = list[i];
 			}
 			return array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="125" endline="153"><![CDATA[
 
 		// note that an empty array matches a null reference
 		internal static bool ArrayEquals(Type[] t1, Type[] t2)
 		{
 			if (t1 == t2)
 			{
 				return true;
 			}
 			if (t1 == null)
 			{
 				return t2.Length == 0;
 			}
 			else if (t2 == null)
 			{
 				return t1.Length == 0;
 			}
 			if (t1.Length == t2.Length)
 			{
 				for (int i = 0; i < t1.Length; i++)
 				{
 					if (!TypeEquals(t1[i], t2[i]))
 					{
 						return false;
 					}
 				}
 				for (int i = 0; i < t1.Length; i++)
 				{
 					if (!TypeEquals(t1[i], t2[i]))
 					{
 						return false;
 					}
 				}
 				return true;
 			}
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="154" endline="181"><![CDATA[
 
 		internal static bool ArrayEquals(Type[][] t1, Type[][] t2)
 		{
 			if (t1 == t2)
 			{
 				return true;
 			}
 			if (t1 == null)
 			{
 				return t2.Length == 0;
 			}
 			else if (t2 == null)
 			{
 				return t1.Length == 0;
 			}
 			if (t1.Length == t2.Length)
 			{
 				for (int i = 0; i < t1.Length; i++)
 				{
 					if (!ArrayEquals(t1[i], t2[i]))
 					{
 						return false;
 					}
 				}
 				for (int i = 0; i < t1.Length; i++)
 				{
 					if (!ArrayEquals(t1[i], t2[i]))
 					{
 						return false;
 					}
 				}
 				return true;
 			}
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="182" endline="209"><![CDATA[
 
 		internal static bool ArrayEquals(Type[][][] t1, Type[][][] t2)
 		{
 			if (t1 == t2)
 			{
 				return true;
 			}
 			if (t1 == null)
 			{
 				return t2.Length == 0;
 			}
 			else if (t2 == null)
 			{
 				return t1.Length == 0;
 			}
 			if (t1.Length == t2.Length)
 			{
 				for (int i = 0; i < t1.Length; i++)
 				{
 					if (!ArrayEquals(t1[i], t2[i]))
 					{
 						return false;
 					}
 				}
 				for (int i = 0; i < t1.Length; i++)
 				{
 					if (!ArrayEquals(t1[i], t2[i]))
 					{
 						return false;
 					}
 				}
 				return true;
 			}
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="210" endline="222"><![CDATA[
 
 		internal static bool TypeEquals(Type t1, Type t2)
 		{
 			if (t1 == t2)
 			{
 				return true;
 			}
 			if (t1 == null)
 			{
 				return false;
 			}
 			return t1.Equals(t2);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="223" endline="240"><![CDATA[
 
 		internal static int GetHashCode(Type[] types)
 		{
 			if (types == null)
 			{
 				return 0;
 			}
 			int h = 0;
 			foreach (Type t in types)
 			{
 				if (t != null)
 				{
 					h *= 3;
 					h ^= t.GetHashCode();
 				}
 			}
 			foreach (Type t in types)
 			{
 				if (t != null)
 				{
 					h *= 3;
 					h ^= t.GetHashCode();
 				}
 			}
 			return h;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="241" endline="253"><![CDATA[
 
 		internal static int GetHashCode(Type[][] types)
 		{
 			int h = 0;
 			if (types != null)
 			{
 				foreach (Type[] array in types)
 				{
 					h ^= GetHashCode(array);
 				}
 				foreach (Type[] array in types)
 				{
 					h ^= GetHashCode(array);
 				}
 			}
 			return h;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="254" endline="266"><![CDATA[
 
 		internal static int GetHashCode(Type[][][] types)
 		{
 			int h = 0;
 			if (types != null)
 			{
 				foreach (Type[][] array in types)
 				{
 					h ^= GetHashCode(array);
 				}
 				foreach (Type[][] array in types)
 				{
 					h ^= GetHashCode(array);
 				}
 			}
 			return h;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="267" endline="282"><![CDATA[
 	}
 
 	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit)]
 	struct SingleConverter
 	{
 		[System.Runtime.InteropServices.FieldOffset(0)]
 		private int i;
 		[System.Runtime.InteropServices.FieldOffset(0)]
 		private float f;
 
 		internal static int SingleToInt32Bits(float v)
 		{
 			SingleConverter c = new SingleConverter();
 			c.f = v;
 			return c.i;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Util.cs" startline="283" endline="289"><![CDATA[
 
 		internal static float Int32BitsToSingle(int v)
 		{
 			SingleConverter c = new SingleConverter();
 			c.i = v;
 			return c.f;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBody.cs" startline="40" endline="121"><![CDATA[
 		internal MethodBody(ModuleReader module, int rva, IGenericContext context)
 		{
 			const byte CorILMethod_TinyFormat = 0x02;
 			const byte CorILMethod_FatFormat = 0x03;
 			const byte CorILMethod_MoreSects = 0x08;
 			const byte CorILMethod_InitLocals = 0x10;
 			const byte CorILMethod_Sect_EHTable = 0x01;
 			const byte CorILMethod_Sect_FatFormat = 0x40;
 			const byte CorILMethod_Sect_MoreSects = 0x80;
 
 			List<ExceptionHandlingClause> exceptionClauses = new List<ExceptionHandlingClause>();
 			List<LocalVariableInfo> locals = new List<LocalVariableInfo>();
 			module.SeekRVA(rva);
 			BinaryReader br = new BinaryReader(module.stream);
 			byte b = br.ReadByte();
 			if ((b & 3) == CorILMethod_TinyFormat)
 			{
 				initLocals = true;
 				body = br.ReadBytes(b >> 2);
 			}
 			else if ((b & 3) == CorILMethod_FatFormat)
 			{
 				initLocals = (b & CorILMethod_InitLocals) != 0;
 				short flagsAndSize = (short)(b | (br.ReadByte() << 8));
 				if ((flagsAndSize >> 12) != 3)
 				{
 					throw new BadImageFormatException("Fat format method header size should be 3");
 				}
 				maxStack = br.ReadUInt16();
 				int codeLength = br.ReadInt32();
 				localVarSigTok = br.ReadInt32();
 				body = br.ReadBytes(codeLength);
 				if ((b & CorILMethod_MoreSects) != 0)
 				{
 					module.stream.Position = (module.stream.Position + 3) & ~3;
 					int hdr = br.ReadInt32();
 					if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0)
 					{
 						throw new NotImplementedException();
 					}
 					else if ((hdr & CorILMethod_Sect_FatFormat) != 0)
 					{
 						int count = ComputeExceptionCount((hdr >> 8) & 0xFFFFFF, 24);
 						for (int i = 0; i < count; i++)
 						{
 							int flags = br.ReadInt32();
 							int tryOffset = br.ReadInt32();
 							int tryLength = br.ReadInt32();
 							int handlerOffset = br.ReadInt32();
 							int handlerLength = br.ReadInt32();
 							int classTokenOrFilterOffset = br.ReadInt32();
 							exceptionClauses.Add(new ExceptionHandlingClause(module, flags, tryOffset, tryLength, handlerOffset, handlerLength, classTokenOrFilterOffset, context));
 						}
 						for (int i = 0; i < count; i++)
 						{
 							int flags = br.ReadInt32();
 							int tryOffset = br.ReadInt32();
 							int tryLength = br.ReadInt32();
 							int handlerOffset = br.ReadInt32();
 							int handlerLength = br.ReadInt32();
 							int classTokenOrFilterOffset = br.ReadInt32();
 							exceptionClauses.Add(new ExceptionHandlingClause(module, flags, tryOffset, tryLength, handlerOffset, handlerLength, classTokenOrFilterOffset, context));
 						}
 					}
 					else
 					{
 						int count = ComputeExceptionCount((hdr >> 8) & 0xFF, 12);
 						for (int i = 0; i < count; i++)
 						{
 							int flags = br.ReadUInt16();
 							int tryOffset = br.ReadUInt16();
 							int tryLength = br.ReadByte();
 							int handlerOffset = br.ReadUInt16();
 							int handlerLength = br.ReadByte();
 							int classTokenOrFilterOffset = br.ReadInt32();
 							exceptionClauses.Add(new ExceptionHandlingClause(module, flags, tryOffset, tryLength, handlerOffset, handlerLength, classTokenOrFilterOffset, context));
 						}
 						for (int i = 0; i < count; i++)
 						{
 							int flags = br.ReadUInt16();
 							int tryOffset = br.ReadUInt16();
 							int tryLength = br.ReadByte();
 							int handlerOffset = br.ReadUInt16();
 							int handlerLength = br.ReadByte();
 							int classTokenOrFilterOffset = br.ReadInt32();
 							exceptionClauses.Add(new ExceptionHandlingClause(module, flags, tryOffset, tryLength, handlerOffset, handlerLength, classTokenOrFilterOffset, context));
 						}
 					}
 				}
 				if (localVarSigTok != 0)
 				{
 					ByteReader sig = module.ResolveSignature(localVarSigTok);
 					Signature.ReadLocalVarSig(module, sig, context, locals);
 				}
 			}
 			else
 			{
 				throw new BadImageFormatException();
 			}
 			this.exceptionClauses = exceptionClauses.AsReadOnly();
 			this.locals = locals.AsReadOnly();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBody.cs" startline="122" endline="129"><![CDATA[
 
 		private static int ComputeExceptionCount(int size, int itemLength)
 		{
 			// LAMESPEC according to the spec, the count should be calculated as "(size - 4) / itemLength",
 			// FXBUG but to workaround a VB compiler bug that specifies the size incorrectly,
 			// we do a truncating division instead.
 			return size / itemLength;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBody.cs" startline="130" endline="133"><![CDATA[
 
 		public IList<ExceptionHandlingClause> ExceptionHandlingClauses
 		{
 			get { return exceptionClauses; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBody.cs" startline="134" endline="138"><![CDATA[
 		}
 
 		public bool InitLocals
 		{
 			get { return initLocals; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBody.cs" startline="139" endline="143"><![CDATA[
 		}
 
 		public IList<LocalVariableInfo> LocalVariables
 		{
 			get { return locals; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBody.cs" startline="144" endline="149"><![CDATA[
 		}
 
 		public byte[] GetILAsByteArray()
 		{
 			return body;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBody.cs" startline="150" endline="153"><![CDATA[
 
 		public int LocalSignatureMetadataToken
 		{
 			get { return localVarSigTok; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodBody.cs" startline="154" endline="158"><![CDATA[
 		}
 
 		public int MaxStackSize
 		{
 			get { return maxStack; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="37" endline="39"><![CDATA[
 		{
 			return new ConstructorInfoImpl((MethodInfo)GetMethodInfo().BindTypeParameters(type));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="40" endline="43"><![CDATA[
 
 		public sealed override MemberTypes MemberType
 		{
 			get { return MemberTypes.Constructor; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="44" endline="48"><![CDATA[
 		}
 
 		public override bool ContainsGenericParameters
 		{
 			get { return GetMethodInfo().ContainsGenericParameters; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="49" endline="59"><![CDATA[
 		}
 
 		public sealed override ParameterInfo[] GetParameters()
 		{
 			ParameterInfo[] parameters = GetMethodInfo().GetParameters();
 			for (int i = 0; i < parameters.Length; i++)
 			{
 				parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
 			}
 			for (int i = 0; i < parameters.Length; i++)
 			{
 				parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
 			}
 			return parameters;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="31" endline="32"><![CDATA[
 		public static readonly string ConstructorName = ".ctor";
 		public static readonly string TypeConstructorName = ".cctor";
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="31" endline="34"><![CDATA[
 		{
 			ParameterInfo other = obj as ParameterInfo;
 			return other != null && other.Member == this.Member && other.Position == this.Position;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="35" endline="39"><![CDATA[
 
 		public sealed override int GetHashCode()
 		{
 			return this.Member.GetHashCode() * 1777 + this.Position;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="40" endline="44"><![CDATA[
 
 		public static bool operator ==(ParameterInfo p1, ParameterInfo p2)
 		{
 			return ReferenceEquals(p1, p2) || (!ReferenceEquals(p1, null) && p1.Equals(p2));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="45" endline="49"><![CDATA[
 
 		public static bool operator !=(ParameterInfo p1, ParameterInfo p2)
 		{
 			return !(p1 == p2);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="50" endline="64"><![CDATA[
 
 		public abstract string Name { get; }
 		public abstract Type ParameterType { get; }
 		public abstract ParameterAttributes Attributes { get; }
 		public abstract int Position { get; }
 		public abstract object RawDefaultValue { get; }
 		public abstract Type[] GetOptionalCustomModifiers();
 		public abstract Type[] GetRequiredCustomModifiers();
 		public abstract MemberInfo Member { get; }
 		public abstract int MetadataToken { get; }
 		internal abstract Module Module { get; }
 
 		public bool IsIn
 		{
 			get { return (Attributes & ParameterAttributes.In) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="65" endline="69"><![CDATA[
 		}
 
 		public bool IsOut
 		{
 			get { return (Attributes & ParameterAttributes.Out) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="70" endline="74"><![CDATA[
 		}
 
 		public bool IsLcid
 		{
 			get { return (Attributes & ParameterAttributes.Lcid) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="75" endline="79"><![CDATA[
 		}
 
 		public bool IsRetval
 		{
 			get { return (Attributes & ParameterAttributes.Retval) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="80" endline="84"><![CDATA[
 		}
 
 		public bool IsOptional
 		{
 			get { return (Attributes & ParameterAttributes.Optional) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="85" endline="90"><![CDATA[
 		}
 
 		public bool IsDefined(Type attributeType, bool inherit)
 		{
 			return CustomAttributeData.__GetCustomAttributes(this, attributeType, inherit).Count != 0;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="91" endline="95"><![CDATA[
 
 		public IList<CustomAttributeData> __GetCustomAttributes(Type attributeType, bool inherit)
 		{
 			return CustomAttributeData.__GetCustomAttributes(this, attributeType, inherit);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="96" endline="100"><![CDATA[
 
 		internal virtual IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			return this.Module.GetCustomAttributes(this.MetadataToken, attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ParameterInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="133" endline="136"><![CDATA[
 		internal ConstructorInfoImpl(MethodInfo method)
 		{
 			this.method = method;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="137" endline="142"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			ConstructorInfoImpl other = obj as ConstructorInfoImpl;
 			return other != null && other.method.Equals(method);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="143" endline="147"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return method.GetHashCode();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="148" endline="152"><![CDATA[
 
 		public override MethodBody GetMethodBody()
 		{
 			return method.GetMethodBody();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="153" endline="156"><![CDATA[
 
 		public override CallingConventions CallingConvention
 		{
 			get { return method.CallingConvention; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="157" endline="161"><![CDATA[
 		}
 
 		public override MethodAttributes Attributes
 		{
 			get { return method.Attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="162" endline="167"><![CDATA[
 		}
 
 		public override MethodImplAttributes GetMethodImplementationFlags()
 		{
 			return method.GetMethodImplementationFlags();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="168" endline="171"><![CDATA[
 
 		internal override int ParameterCount
 		{
 			get { return method.ParameterCount; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="172" endline="176"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return method.DeclaringType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="177" endline="181"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return method.Name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="182" endline="187"><![CDATA[
 		}
 
 		public override string ToString()
 		{
 			return method.ToString();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="188" endline="191"><![CDATA[
 
 		public override Module Module
 		{
 			get { return method.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="192" endline="196"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return method.MetadataToken; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="197" endline="202"><![CDATA[
 		}
 
 		internal override MethodInfo GetMethodInfo()
 		{
 			return method;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="203" endline="207"><![CDATA[
 
 		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			return method.GetCustomAttributesData(attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="208" endline="212"><![CDATA[
 
 		internal override MethodInfo GetMethodOnTypeDefinition()
 		{
 			return method.GetMethodOnTypeDefinition();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="213" endline="216"><![CDATA[
 
 		internal override MethodSignature MethodSignature
 		{
 			get { return method.MethodSignature; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ConstructorInfo.cs" startline="217" endline="222"><![CDATA[
 		}
 
 		internal override int ImportTo(Emit.ModuleBuilder module)
 		{
 			return method.ImportTo(module);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\linq.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="38" endline="47"><![CDATA[
 		{
 			int pos = mw.Position;
 			WriteImpl(mw);
 			Debug.Assert(mw.Position == pos + unalignedlength);
 			int align = Length - unalignedlength;
 			for (int i = 0; i < align; i++)
 			{
 				mw.Write((byte)0);
 			}
 			for (int i = 0; i < align; i++)
 			{
 				mw.Write((byte)0);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="48" endline="51"><![CDATA[
 
 		internal bool IsBig
 		{
 			get { return Length > 65535; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="52" endline="61"><![CDATA[
 		}
 
 		internal int Length
 		{
 			get
 			{
 				if (!frozen)
 					throw new InvalidOperationException();
 				return (unalignedlength + 3) & ~3;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="62" endline="75"><![CDATA[
 		}
 
 		protected abstract void WriteImpl(MetadataWriter mw);
 	}
 
 	abstract class SimpleHeap 
 	{
 		internal void Freeze()
 		{
 			if (frozen)
 				throw new InvalidOperationException();
 			frozen = true;
 			unalignedlength = GetLength();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="76" endline="88"><![CDATA[
 
 		protected abstract int GetLength();
 	}
 
 	sealed class TableHeap 
 	{
 		internal void Freeze(MetadataWriter mw)
 		{
 			if (frozen)
 				throw new InvalidOperationException();
 			frozen = true;
 			unalignedlength = GetLength(mw);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="89" endline="146"><![CDATA[
 
 		protected override void WriteImpl(MetadataWriter mw)
 		{
 			Table[] tables = mw.ModuleBuilder.GetTables();
 			// Header
 			mw.Write(0);		// Reserved
 			int ver = mw.ModuleBuilder.MDStreamVersion;
 			mw.Write((byte)(ver >> 16));	// MajorVersion
 			mw.Write((byte)ver);			// MinorVersion
 			byte heapSizes = 0;
 			if (mw.ModuleBuilder.Strings.IsBig)
 			{
 				heapSizes |= 0x01;
 			}
 			if (mw.ModuleBuilder.Guids.IsBig)
 			{
 				heapSizes |= 0x02;
 			}
 			if (mw.ModuleBuilder.Blobs.IsBig)
 			{
 				heapSizes |= 0x04;
 			}
 			mw.Write(heapSizes);// HeapSizes
 			// LAMESPEC spec says reserved, but .NET 2.0 Ref.Emit sets it to 0x10
 			mw.Write((byte)0x10);	// Reserved
 			long bit = 1;
 			long valid = 0;
 			foreach (Table table in tables)
 			{
 				if (table != null && table.RowCount > 0)
 				{
 					valid |= bit;
 				}
 				bit <<= 1;
 			}
 			foreach (Table table in tables)
 			{
 				if (table != null && table.RowCount > 0)
 				{
 					valid |= bit;
 				}
 				bit <<= 1;
 			}
 			mw.Write(valid);	// Valid
 			mw.Write(0x0016003301FA00L);	// Sorted
 			// Rows
 			foreach (Table table in tables)
 			{
 				if (table != null && table.RowCount > 0)
 				{
 					mw.Write(table.RowCount);
 				}
 			}
 			foreach (Table table in tables)
 			{
 				if (table != null && table.RowCount > 0)
 				{
 					mw.Write(table.RowCount);
 				}
 			}
 			// Tables
 			foreach (Table table in tables)
 			{
 				if (table != null && table.RowCount > 0)
 				{
 					int pos = mw.Position;
 					table.Write(mw);
 					Debug.Assert(mw.Position - pos == table.GetLength(mw));
 				}
 			}
 			foreach (Table table in tables)
 			{
 				if (table != null && table.RowCount > 0)
 				{
 					int pos = mw.Position;
 					table.Write(mw);
 					Debug.Assert(mw.Position - pos == table.GetLength(mw));
 				}
 			}
 			// unexplained extra padding
 			mw.Write((byte)0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="147" endline="161"><![CDATA[
 
 		private int GetLength(MetadataWriter mw)
 		{
 			int len = 4 + 4 + 8 + 8;
 			foreach (Table table in mw.ModuleBuilder.GetTables())
 			{
 				if (table != null && table.RowCount > 0)
 				{
 					len += 4;	// row count
 					len += table.GetLength(mw);
 				}
 			}
 			foreach (Table table in mw.ModuleBuilder.GetTables())
 			{
 				if (table != null && table.RowCount > 0)
 				{
 					len += 4;	// row count
 					len += table.GetLength(mw);
 				}
 			}
 			// note that we pad one extra (unexplained) byte
 			return len + 1;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="162" endline="173"><![CDATA[
 	}
 
 	sealed class StringHeap 
 	{
 		private List<string> list = new List<string>();
 		private Dictionary<string, int> strings = new Dictionary<string, int>();
 		private int nextOffset;
 
 		internal StringHeap()
 		{
 			Add("");
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="174" endline="187"><![CDATA[
 
 		internal int Add(string str)
 		{
 			Debug.Assert(!frozen);
 			int offset;
 			if (!strings.TryGetValue(str, out offset))
 			{
 				offset = nextOffset;
 				nextOffset += System.Text.Encoding.UTF8.GetByteCount(str) + 1;
 				list.Add(str);
 				strings.Add(str, offset);
 			}
 			return offset;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="188" endline="192"><![CDATA[
 
 		protected override int GetLength()
 		{
 			return nextOffset;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="193" endline="201"><![CDATA[
 
 		protected override void WriteImpl(MetadataWriter mw)
 		{
 			foreach (string str in list)
 			{
 				mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
 				mw.Write((byte)0);
 			}
 			foreach (string str in list)
 			{
 				mw.Write(System.Text.Encoding.UTF8.GetBytes(str));
 				mw.Write((byte)0);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="202" endline="213"><![CDATA[
 	}
 
 	sealed class UserStringHeap 
 	{
 		private List<string> list = new List<string>();
 		private Dictionary<string, int> strings = new Dictionary<string, int>();
 		private int nextOffset;
 
 		internal UserStringHeap()
 		{
 			nextOffset = 1;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="214" endline="217"><![CDATA[
 
 		internal bool IsEmpty
 		{
 			get { return nextOffset == 1; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="218" endline="237"><![CDATA[
 		}
 
 		internal int Add(string str)
 		{
 			Debug.Assert(!frozen);
 			int offset;
 			if (!strings.TryGetValue(str, out offset))
 			{
 				int length = str.Length * 2 + 1 + MetadataWriter.GetCompressedIntLength(str.Length * 2 + 1);
 				if (nextOffset + length > 0xFFFFFF)
 				{
 					throw new FileFormatLimitationExceededException("No logical space left to create more user strings.", FileFormatLimitationExceededException.META_E_STRINGSPACE_FULL);
 				}
 				offset = nextOffset;
 				nextOffset += length;
 				list.Add(str);
 				strings.Add(str, offset);
 			}
 			return offset;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="238" endline="242"><![CDATA[
 
 		protected override int GetLength()
 		{
 			return nextOffset;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="243" endline="268"><![CDATA[
 
 		protected override void WriteImpl(MetadataWriter mw)
 		{
 			mw.Write((byte)0);
 			foreach (string str in list)
 			{
 				mw.WriteCompressedInt(str.Length * 2 + 1);
 				byte hasSpecialChars = 0;
 				foreach (char ch in str)
 				{
 					mw.Write((ushort)ch);
 					if (hasSpecialChars == 0 && (ch < 0x20 || ch > 0x7E))
 					{
 						if (ch > 0x7E
 							|| (ch >= 0x01 && ch <= 0x08)
 							|| (ch >= 0x0E && ch <= 0x1F)
 							|| ch == 0x27
 							|| ch == 0x2D)
 						{
 							hasSpecialChars = 1;
 						}
 					}
 				}
 				foreach (char ch in str)
 				{
 					mw.Write((ushort)ch);
 					if (hasSpecialChars == 0 && (ch < 0x20 || ch > 0x7E))
 					{
 						if (ch > 0x7E
 							|| (ch >= 0x01 && ch <= 0x08)
 							|| (ch >= 0x0E && ch <= 0x1F)
 							|| ch == 0x27
 							|| ch == 0x2D)
 						{
 							hasSpecialChars = 1;
 						}
 					}
 				}
 				mw.Write(hasSpecialChars);
 			}
 			foreach (string str in list)
 			{
 				mw.WriteCompressedInt(str.Length * 2 + 1);
 				byte hasSpecialChars = 0;
 				foreach (char ch in str)
 				{
 					mw.Write((ushort)ch);
 					if (hasSpecialChars == 0 && (ch < 0x20 || ch > 0x7E))
 					{
 						if (ch > 0x7E
 							|| (ch >= 0x01 && ch <= 0x08)
 							|| (ch >= 0x0E && ch <= 0x1F)
 							|| ch == 0x27
 							|| ch == 0x2D)
 						{
 							hasSpecialChars = 1;
 						}
 					}
 				}
 				mw.Write(hasSpecialChars);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="269" endline="277"><![CDATA[
 	}
 
 	sealed class GuidHeap 
 	{
 		private List<Guid> list = new List<Guid>();
 
 		internal GuidHeap()
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="278" endline="284"><![CDATA[
 
 		internal int Add(Guid guid)
 		{
 			Debug.Assert(!frozen);
 			list.Add(guid);
 			return list.Count;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="285" endline="289"><![CDATA[
 
 		protected override int GetLength()
 		{
 			return list.Count * 16;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="290" endline="297"><![CDATA[
 
 		protected override void WriteImpl(MetadataWriter mw)
 		{
 			foreach (Guid guid in list)
 			{
 				mw.Write(guid.ToByteArray());
 			}
 			foreach (Guid guid in list)
 			{
 				mw.Write(guid.ToByteArray());
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="298" endline="316"><![CDATA[
 	}
 
 	sealed class BlobHeap 
 	{
 		private Key[] map = new Key[8179];
 		private readonly ByteBuffer buf = new ByteBuffer(32);
 
 		private struct Key
 		{
 			internal Key[] next;
 			internal int len;
 			internal int hash;
 			internal int offset;
 		}
 
 		internal BlobHeap()
 		{
 			buf.Write((byte)0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="317" endline="360"><![CDATA[
 
 		internal int Add(ByteBuffer bb)
 		{
 			Debug.Assert(!frozen);
 			if (bb.Length == 0)
 			{
 				return 0;
 			}
 			int lenlen = MetadataWriter.GetCompressedIntLength(bb.Length);
 			int hash = bb.Hash();
 			int index = (hash & 0x7FFFFFFF) % map.Length;
 			Key[] keys = map;
 			int last = index;
 			while (keys[index].offset != 0)
 			{
 				if (keys[index].hash == hash
 					&& keys[index].len == bb.Length
 					&& buf.Match(keys[index].offset + lenlen, bb, 0, bb.Length))
 				{
 					return keys[index].offset;
 				}
 				if (index == last)
 				{
 					if (keys[index].next == null)
 					{
 						keys[index].next = new Key[4];
 						keys = keys[index].next;
 						index = 0;
 						break;
 					}
 					keys = keys[index].next;
 					index = -1;
 					last = keys.Length - 1;
 				}
 				index++;
 			}
 			while (keys[index].offset != 0)
 			{
 				if (keys[index].hash == hash
 					&& keys[index].len == bb.Length
 					&& buf.Match(keys[index].offset + lenlen, bb, 0, bb.Length))
 				{
 					return keys[index].offset;
 				}
 				if (index == last)
 				{
 					if (keys[index].next == null)
 					{
 						keys[index].next = new Key[4];
 						keys = keys[index].next;
 						index = 0;
 						break;
 					}
 					keys = keys[index].next;
 					index = -1;
 					last = keys.Length - 1;
 				}
 				index++;
 			}
 			int offset = buf.Position;
 			buf.WriteCompressedInt(bb.Length);
 			buf.Write(bb);
 			keys[index].len = bb.Length;
 			keys[index].hash = hash;
 			keys[index].offset = offset;
 			return offset;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="361" endline="365"><![CDATA[
 
 		protected override int GetLength()
 		{
 			return buf.Position;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="366" endline="370"><![CDATA[
 
 		protected override void WriteImpl(MetadataWriter mw)
 		{
 			mw.Write(buf);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="371" endline="374"><![CDATA[
 
 		internal bool IsEmpty
 		{
 			get { return buf.Position == 1; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\Heaps.cs" startline="375" endline="380"><![CDATA[
 		}
 
 		internal IKVM.Reflection.Reader.ByteReader GetBlob(int blobIndex)
 		{
 			return buf.GetBlob(blobIndex);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="33" endline="33"><![CDATA[
 			get { return MemberTypes.Method; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="34" endline="41"><![CDATA[
 		}
 
 		public abstract Type ReturnType { get; }
 		public abstract ParameterInfo ReturnParameter { get; }
 
 		public virtual MethodInfo MakeGenericMethod(params Type[] typeArguments)
 		{
 			throw new NotSupportedException(this.GetType().FullName);
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="42" endline="46"><![CDATA[
 		}
 
 		public virtual MethodInfo GetGenericMethodDefinition()
 		{
 			throw new NotSupportedException(this.GetType().FullName);
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="47" endline="74"><![CDATA[
 		}
 
 		public override string ToString()
 		{
 			StringBuilder sb = new StringBuilder();
 			sb.Append(this.ReturnType.Name).Append(' ').Append(this.Name);
 			string sep;
 			if (this.IsGenericMethod)
 			{
 				sb.Append('[');
 				sep = "";
 				foreach (Type arg in GetGenericArguments())
 				{
 					sb.Append(sep).Append(arg);
 					sep = ", ";
 				}
 				foreach (Type arg in GetGenericArguments())
 				{
 					sb.Append(sep).Append(arg);
 					sep = ", ";
 				}
 				sb.Append(']');
 			}
 			sb.Append('(');
 			sep = "";
 			foreach (ParameterInfo arg in GetParameters())
 			{
 				sb.Append(sep).Append(arg.ParameterType);
 				sep = ", ";
 			}
 			foreach (ParameterInfo arg in GetParameters())
 			{
 				sb.Append(sep).Append(arg.ParameterType);
 				sep = ", ";
 			}
 			sb.Append(')');
 			return sb.ToString();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="75" endline="78"><![CDATA[
 
 		internal bool IsNewSlot
 		{
 			get { return (this.Attributes & MethodAttributes.NewSlot) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="79" endline="96"><![CDATA[
 		}
 
 		public MethodInfo GetBaseDefinition()
 		{
 			MethodInfo match = this;
 			if (match.IsVirtual)
 			{
 				for (Type type = this.DeclaringType.BaseType; type != null && !match.IsNewSlot; type = type.BaseType)
 				{
 					MethodInfo method = type.FindMethod(this.Name, this.MethodSignature) as MethodInfo;
 					if (method != null && method.IsVirtual)
 					{
 						match = method;
 					}
 				}
 				for (Type type = this.DeclaringType.BaseType; type != null && !match.IsNewSlot; type = type.BaseType)
 				{
 					MethodInfo method = type.FindMethod(this.Name, this.MethodSignature) as MethodInfo;
 					if (method != null && method.IsVirtual)
 					{
 						match = method;
 					}
 				}
 			}
 			return match;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="97" endline="101"><![CDATA[
 
 		Type IGenericContext.GetGenericTypeArgument(int index)
 		{
 			return this.DeclaringType.GetGenericTypeArgument(index);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="102" endline="106"><![CDATA[
 
 		Type IGenericContext.GetGenericMethodArgument(int index)
 		{
 			return GetGenericMethodArgument(index);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="107" endline="110"><![CDATA[
 
 		internal virtual Type GetGenericMethodArgument(int index)
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="111" endline="115"><![CDATA[
 		}
 
 		internal virtual int GetGenericMethodArgumentCount()
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="116" endline="121"><![CDATA[
 		}
 
 		internal override MethodInfo GetMethodOnTypeDefinition()
 		{
 			return this;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="122" endline="126"><![CDATA[
 
 		Type IGenericBinder.BindTypeParameter(Type type)
 		{
 			return this.DeclaringType.GetGenericTypeArgument(type.GenericParameterPosition);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="127" endline="131"><![CDATA[
 
 		Type IGenericBinder.BindMethodParameter(Type type)
 		{
 			return GetGenericMethodArgument(type.GenericParameterPosition);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="132" endline="136"><![CDATA[
 
 		internal override MethodBase BindTypeParameters(Type type)
 		{
 			return new GenericMethodInstance(this.DeclaringType.BindTypeParameters(type), this, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="137" endline="143"><![CDATA[
 
 		// This method is used by ILGenerator and exists to allow ArrayMethod to override it,
 		// because ArrayMethod doesn't have a working MethodAttributes property, so it needs
 		// to base the result of this on the CallingConvention.
 		internal virtual bool HasThis
 		{
 			get { return !IsStatic; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MarshalSpec.cs" startline="40" endline="164"><![CDATA[
 		{
 			// TODO use binary search?
 			for (int i = 0; i < module.FieldMarshal.records.Length; i++)
 			{
 				if (module.FieldMarshal.records[i].Parent == token)
 				{
 					ByteReader blob = module.GetBlob(module.FieldMarshal.records[i].NativeType);
 					UnmanagedType unmanagedType = (UnmanagedType)blob.ReadCompressedInt();
 					UnmanagedType? arraySubType = null;
 					short? sizeParamIndex = null;
 					int? sizeConst = null;
 					VarEnum? safeArraySubType = null;
 					Type safeArrayUserDefinedSubType = null;
 					int? iidParameterIndex = null;
 					string marshalType = null;
 					string marshalCookie = null;
 					Type marshalTypeRef = null;
 					if (unmanagedType == UnmanagedType.LPArray)
 					{
 						arraySubType = (UnmanagedType)blob.ReadCompressedInt();
 						if (arraySubType == NATIVE_TYPE_MAX)
 						{
 							arraySubType = null;
 						}
 						if (blob.Length != 0)
 						{
 							sizeParamIndex = (short)blob.ReadCompressedInt();
 							if (blob.Length != 0)
 							{
 								sizeConst = blob.ReadCompressedInt();
 								if (blob.Length != 0 && blob.ReadCompressedInt() == 0)
 								{
 									sizeParamIndex = null;
 								}
 							}
 						}
 					}
 					else if (unmanagedType == UnmanagedType.SafeArray)
 					{
 						if (blob.Length != 0)
 						{
 							safeArraySubType = (VarEnum)blob.ReadCompressedInt();
 							if (blob.Length != 0)
 							{
 								safeArrayUserDefinedSubType = ReadType(module, blob);
 							}
 						}
 					}
 					else if (unmanagedType == UnmanagedType.ByValArray)
 					{
 						sizeConst = blob.ReadCompressedInt();
 						if (blob.Length != 0)
 						{
 							arraySubType = (UnmanagedType)blob.ReadCompressedInt();
 						}
 					}
 					else if (unmanagedType == UnmanagedType.ByValTStr)
 					{
 						sizeConst = blob.ReadCompressedInt();
 					}
 					else if (unmanagedType == UnmanagedType.Interface
 						|| unmanagedType == UnmanagedType.IDispatch
 						|| unmanagedType == UnmanagedType.IUnknown)
 					{
 						if (blob.Length != 0)
 						{
 							iidParameterIndex = blob.ReadCompressedInt();
 						}
 					}
 					else if (unmanagedType == UnmanagedType.CustomMarshaler)
 					{
 						blob.ReadCompressedInt();
 						blob.ReadCompressedInt();
 						marshalType = ReadString(blob);
 						marshalCookie = ReadString(blob);
 						marshalTypeRef = module.Assembly.GetType(marshalType) ?? module.universe.GetType(marshalType);
 					}
 
 					Type typeofMarshalAs = module.universe.System_Runtime_InteropServices_MarshalAsAttribute;
 					Type typeofUnmanagedType = module.universe.System_Runtime_InteropServices_UnmanagedType;
 					Type typeofVarEnum = module.universe.System_Runtime_InteropServices_VarEnum;
 					Type typeofType = module.universe.System_Type;
 					List<CustomAttributeNamedArgument> named = new List<CustomAttributeNamedArgument>();
 					if (arraySubType != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("ArraySubType"), new CustomAttributeTypedArgument(typeofUnmanagedType, arraySubType.Value)));
 					}
 					if (sizeParamIndex != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("SizeParamIndex"), new CustomAttributeTypedArgument(module.universe.System_Int16, sizeParamIndex.Value)));
 					}
 					if (sizeConst != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("SizeConst"), new CustomAttributeTypedArgument(module.universe.System_Int32, sizeConst.Value)));
 					}
 					if (safeArraySubType != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("SafeArraySubType"), new CustomAttributeTypedArgument(typeofVarEnum, safeArraySubType.Value)));
 					}
 					if (safeArrayUserDefinedSubType != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("SafeArrayUserDefinedSubType"), new CustomAttributeTypedArgument(typeofType, safeArrayUserDefinedSubType)));
 					}
 					if (iidParameterIndex != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("IidParameterIndex"), new CustomAttributeTypedArgument(module.universe.System_Int32, iidParameterIndex.Value)));
 					}
 					if (marshalType != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("MarshalType"), new CustomAttributeTypedArgument(module.universe.System_String, marshalType)));
 					}
 					if (marshalTypeRef != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("MarshalTypeRef"), new CustomAttributeTypedArgument(module.universe.System_Type, marshalTypeRef)));
 					}
 					if (marshalCookie != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("MarshalCookie"), new CustomAttributeTypedArgument(module.universe.System_String, marshalCookie)));
 					}
 					ConstructorInfo constructor = typeofMarshalAs.GetConstructor(new Type[] { typeofUnmanagedType });
 					return new CustomAttributeData(constructor, new object[] { unmanagedType }, named);
 				}
 			}
 			for (int i = 0; i < module.FieldMarshal.records.Length; i++)
 			{
 				if (module.FieldMarshal.records[i].Parent == token)
 				{
 					ByteReader blob = module.GetBlob(module.FieldMarshal.records[i].NativeType);
 					UnmanagedType unmanagedType = (UnmanagedType)blob.ReadCompressedInt();
 					UnmanagedType? arraySubType = null;
 					short? sizeParamIndex = null;
 					int? sizeConst = null;
 					VarEnum? safeArraySubType = null;
 					Type safeArrayUserDefinedSubType = null;
 					int? iidParameterIndex = null;
 					string marshalType = null;
 					string marshalCookie = null;
 					Type marshalTypeRef = null;
 					if (unmanagedType == UnmanagedType.LPArray)
 					{
 						arraySubType = (UnmanagedType)blob.ReadCompressedInt();
 						if (arraySubType == NATIVE_TYPE_MAX)
 						{
 							arraySubType = null;
 						}
 						if (blob.Length != 0)
 						{
 							sizeParamIndex = (short)blob.ReadCompressedInt();
 							if (blob.Length != 0)
 							{
 								sizeConst = blob.ReadCompressedInt();
 								if (blob.Length != 0 && blob.ReadCompressedInt() == 0)
 								{
 									sizeParamIndex = null;
 								}
 							}
 						}
 					}
 					else if (unmanagedType == UnmanagedType.SafeArray)
 					{
 						if (blob.Length != 0)
 						{
 							safeArraySubType = (VarEnum)blob.ReadCompressedInt();
 							if (blob.Length != 0)
 							{
 								safeArrayUserDefinedSubType = ReadType(module, blob);
 							}
 						}
 					}
 					else if (unmanagedType == UnmanagedType.ByValArray)
 					{
 						sizeConst = blob.ReadCompressedInt();
 						if (blob.Length != 0)
 						{
 							arraySubType = (UnmanagedType)blob.ReadCompressedInt();
 						}
 					}
 					else if (unmanagedType == UnmanagedType.ByValTStr)
 					{
 						sizeConst = blob.ReadCompressedInt();
 					}
 					else if (unmanagedType == UnmanagedType.Interface
 						|| unmanagedType == UnmanagedType.IDispatch
 						|| unmanagedType == UnmanagedType.IUnknown)
 					{
 						if (blob.Length != 0)
 						{
 							iidParameterIndex = blob.ReadCompressedInt();
 						}
 					}
 					else if (unmanagedType == UnmanagedType.CustomMarshaler)
 					{
 						blob.ReadCompressedInt();
 						blob.ReadCompressedInt();
 						marshalType = ReadString(blob);
 						marshalCookie = ReadString(blob);
 						marshalTypeRef = module.Assembly.GetType(marshalType) ?? module.universe.GetType(marshalType);
 					}
 
 					Type typeofMarshalAs = module.universe.System_Runtime_InteropServices_MarshalAsAttribute;
 					Type typeofUnmanagedType = module.universe.System_Runtime_InteropServices_UnmanagedType;
 					Type typeofVarEnum = module.universe.System_Runtime_InteropServices_VarEnum;
 					Type typeofType = module.universe.System_Type;
 					List<CustomAttributeNamedArgument> named = new List<CustomAttributeNamedArgument>();
 					if (arraySubType != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("ArraySubType"), new CustomAttributeTypedArgument(typeofUnmanagedType, arraySubType.Value)));
 					}
 					if (sizeParamIndex != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("SizeParamIndex"), new CustomAttributeTypedArgument(module.universe.System_Int16, sizeParamIndex.Value)));
 					}
 					if (sizeConst != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("SizeConst"), new CustomAttributeTypedArgument(module.universe.System_Int32, sizeConst.Value)));
 					}
 					if (safeArraySubType != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("SafeArraySubType"), new CustomAttributeTypedArgument(typeofVarEnum, safeArraySubType.Value)));
 					}
 					if (safeArrayUserDefinedSubType != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("SafeArrayUserDefinedSubType"), new CustomAttributeTypedArgument(typeofType, safeArrayUserDefinedSubType)));
 					}
 					if (iidParameterIndex != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("IidParameterIndex"), new CustomAttributeTypedArgument(module.universe.System_Int32, iidParameterIndex.Value)));
 					}
 					if (marshalType != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("MarshalType"), new CustomAttributeTypedArgument(module.universe.System_String, marshalType)));
 					}
 					if (marshalTypeRef != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("MarshalTypeRef"), new CustomAttributeTypedArgument(module.universe.System_Type, marshalTypeRef)));
 					}
 					if (marshalCookie != null)
 					{
 						named.Add(new CustomAttributeNamedArgument(typeofMarshalAs.GetField("MarshalCookie"), new CustomAttributeTypedArgument(module.universe.System_String, marshalCookie)));
 					}
 					ConstructorInfo constructor = typeofMarshalAs.GetConstructor(new Type[] { typeofUnmanagedType });
 					return new CustomAttributeData(constructor, new object[] { unmanagedType }, named);
 				}
 			}
 			throw new BadImageFormatException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MarshalSpec.cs" startline="165" endline="173"><![CDATA[
 
 		internal static void SetMarshalAsAttribute(ModuleBuilder module, int token, CustomAttributeBuilder attribute)
 		{
 			attribute = attribute.DecodeBlob(module.Assembly);
 			FieldMarshalTable.Record rec = new FieldMarshalTable.Record();
 			rec.Parent = token;
 			rec.NativeType = WriteMarshallingDescriptor(module, attribute);
 			module.FieldMarshal.AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MarshalSpec.cs" startline="174" endline="270"><![CDATA[
 
 		private static int WriteMarshallingDescriptor(ModuleBuilder module, CustomAttributeBuilder attribute)
 		{
 			UnmanagedType unmanagedType;
 			object val = attribute.GetConstructorArgument(0);
 			if (val is short)
 			{
 				unmanagedType = (UnmanagedType)(short)val;
 			}
 			else if (val is int)
 			{
 				unmanagedType = (UnmanagedType)(int)val;
 			}
 			else
 			{
 				unmanagedType = (UnmanagedType)val;
 			}
 
 			ByteBuffer bb = new ByteBuffer(5);
 			bb.WriteCompressedInt((int)unmanagedType);
 
 			if (unmanagedType == UnmanagedType.LPArray)
 			{
 				UnmanagedType arraySubType = attribute.GetFieldValue<UnmanagedType>("ArraySubType") ?? NATIVE_TYPE_MAX;
 				bb.WriteCompressedInt((int)arraySubType);
 				int? sizeParamIndex = attribute.GetFieldValue<short>("SizeParamIndex");
 				int? sizeConst = attribute.GetFieldValue<int>("SizeConst");
 				if (sizeParamIndex != null)
 				{
 					bb.WriteCompressedInt(sizeParamIndex.Value);
 					if (sizeConst != null)
 					{
 						bb.WriteCompressedInt(sizeConst.Value);
 						bb.WriteCompressedInt(1); // flag that says that SizeParamIndex was specified
 					}
 				}
 				else if (sizeConst != null)
 				{
 					bb.WriteCompressedInt(0); // SizeParamIndex
 					bb.WriteCompressedInt(sizeConst.Value);
 					bb.WriteCompressedInt(0); // flag that says that SizeParamIndex was not specified
 				}
 			}
 			else if (unmanagedType == UnmanagedType.SafeArray)
 			{
 				VarEnum? safeArraySubType = attribute.GetFieldValue<VarEnum>("SafeArraySubType");
 				if (safeArraySubType != null)
 				{
 					bb.WriteCompressedInt((int)safeArraySubType);
 					Type safeArrayUserDefinedSubType = (Type)attribute.GetFieldValue("SafeArrayUserDefinedSubType");
 					if (safeArrayUserDefinedSubType != null)
 					{
 						WriteType(module, bb, safeArrayUserDefinedSubType);
 					}
 				}
 			}
 			else if (unmanagedType == UnmanagedType.ByValArray)
 			{
 				bb.WriteCompressedInt(attribute.GetFieldValue<int>("SizeConst") ?? 1);
 				UnmanagedType? arraySubType = attribute.GetFieldValue<UnmanagedType>("ArraySubType");
 				if (arraySubType != null)
 				{
 					bb.WriteCompressedInt((int)arraySubType);
 				}
 			}
 			else if (unmanagedType == UnmanagedType.ByValTStr)
 			{
 				bb.WriteCompressedInt(attribute.GetFieldValue<int>("SizeConst").Value);
 			}
 			else if (unmanagedType == UnmanagedType.Interface
 				|| unmanagedType == UnmanagedType.IDispatch
 				|| unmanagedType == UnmanagedType.IUnknown)
 			{
 				int? iidParameterIndex = attribute.GetFieldValue<int>("IidParameterIndex");
 				if (iidParameterIndex != null)
 				{
 					bb.WriteCompressedInt(iidParameterIndex.Value);
 				}
 			}
 			else if (unmanagedType == UnmanagedType.CustomMarshaler)
 			{
 				bb.WriteCompressedInt(0);
 				bb.WriteCompressedInt(0);
 				string marshalType = (string)attribute.GetFieldValue("MarshalType");
 				if (marshalType != null)
 				{
 					WriteString(bb, marshalType);
 				}
 				else
 				{
 					WriteType(module, bb, (Type)attribute.GetFieldValue("MarshalTypeRef"));
 				}
 				WriteString(bb, (string)attribute.GetFieldValue("MarshalCookie") ?? "");
 			}
 
 			return module.Blobs.Add(bb);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MarshalSpec.cs" startline="271" endline="280"><![CDATA[
 
 		private static Type ReadType(Module module, ByteReader br)
 		{
 			string str = ReadString(br);
 			if (str == "")
 			{
 				return null;
 			}
 			return module.Assembly.GetType(str) ?? module.universe.GetType(str, true);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MarshalSpec.cs" startline="281" endline="285"><![CDATA[
 
 		private static void WriteType(Module module, ByteBuffer bb, Type type)
 		{
 			WriteString(bb, type.Assembly == module.Assembly ? type.FullName 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MarshalSpec.cs" startline="286" endline="290"><![CDATA[
 
 		private static string ReadString(ByteReader br)
 		{
 			return Encoding.UTF8.GetString(br.ReadBytes(br.ReadCompressedInt()));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MarshalSpec.cs" startline="291" endline="297"><![CDATA[
 
 		private static void WriteString(ByteBuffer bb, string str)
 		{
 			byte[] buf = Encoding.UTF8.GetBytes(str);
 			bb.WriteCompressedInt(buf.Length);
 			bb.Write(buf);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="34" endline="39"><![CDATA[
 		internal LocalVariableInfo(int index, Type type, bool pinned)
 		{
 			this.index = index;
 			this.type = type;
 			this.pinned = pinned;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="40" endline="43"><![CDATA[
 
 		public virtual bool IsPinned
 		{
 			get { return pinned; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="44" endline="48"><![CDATA[
 		}
 
 		public virtual int LocalIndex
 		{
 			get { return index; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\LocalVariableInfo.cs" startline="49" endline="53"><![CDATA[
 		}
 
 		public virtual Type LocalType
 		{
 			get { return type; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="45" endline="56"><![CDATA[
 		{
 			if (UseNativeFusion)
 			{
 				bool equivalent;
 				Marshal.ThrowExceptionForHR(CompareAssemblyIdentity(assemblyIdentity1, unified1, assemblyIdentity2, unified2, out equivalent, out result));
 				return equivalent;
 			}
 			else
 			{
 				return CompareAssemblyIdentityPure(assemblyIdentity1, unified1, assemblyIdentity2, unified2, out result);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="57" endline="161"><![CDATA[
 
 		[DllImport("fusion", CharSet = CharSet.Unicode)]
 		private static extern int CompareAssemblyIdentity(string pwzAssemblyIdentity1, bool fUnified1, string pwzAssemblyIdentity2, bool fUnified2, out bool pfEquivalent, out AssemblyComparisonResult pResult);
 
 		// internal for use by mcs
 		internal static bool CompareAssemblyIdentityPure(string assemblyIdentity1, bool unified1, string assemblyIdentity2, bool unified2, out AssemblyComparisonResult result)
 		{
 			ParsedAssemblyName name1;
 			ParsedAssemblyName name2;
 
 			if (!ParseAssemblyName(assemblyIdentity1, out name1)
 				|| !ParseAssemblyName(assemblyIdentity2, out name2))
 			{
 				result = AssemblyComparisonResult.NonEquivalent;
 				throw new ArgumentException();
 			}
 
 			bool partial = IsPartial(name1);
 
 			if ((partial && unified1) || IsPartial(name2))
 			{
 				result = AssemblyComparisonResult.NonEquivalent;
 				throw new ArgumentException();
 			}
 			if (!name1.Name.Equals(name2.Name, StringComparison.InvariantCultureIgnoreCase))
 			{
 				result = AssemblyComparisonResult.NonEquivalent;
 				return false;
 			}
 			if (name1.Name.Equals("mscorlib", StringComparison.InvariantCultureIgnoreCase))
 			{
 				result = AssemblyComparisonResult.EquivalentFullMatch;
 				return true;
 			}
 			if (partial && name1.Culture == null)
 			{
 			}
 			else if (!name1.Culture.Equals(name2.Culture, StringComparison.InvariantCultureIgnoreCase))
 			{
 				result = AssemblyComparisonResult.NonEquivalent;
 				return false;
 			}
 			if (IsStrongNamed(name2))
 			{
 				if (partial && name1.PublicKeyToken == null)
 				{
 				}
 				else if (name1.PublicKeyToken != name2.PublicKeyToken)
 				{
 					result = AssemblyComparisonResult.NonEquivalent;
 					return false;
 				}
 				if (partial && name1.Version == null)
 				{
 					result = AssemblyComparisonResult.EquivalentPartialMatch;
 					return true;
 				}
 				else if (IsFrameworkAssembly(name2))
 				{
 					result = partial ? AssemblyComparisonResult.EquivalentPartialFXUnified 
 					return true;
 				}
 				else if (name1.Version < name2.Version)
 				{
 					if (unified2)
 					{
 						result = partial ? AssemblyComparisonResult.EquivalentPartialUnified 
 						return true;
 					}
 					else
 					{
 						result = partial ? AssemblyComparisonResult.NonEquivalentPartialVersion 
 						return false;
 					}
 				}
 				else if (name1.Version > name2.Version)
 				{
 					if (unified1)
 					{
 						result = partial ? AssemblyComparisonResult.EquivalentPartialUnified 
 						return true;
 					}
 					else
 					{
 						result = partial ? AssemblyComparisonResult.NonEquivalentPartialVersion 
 						return false;
 					}
 				}
 				else
 				{
 					result = partial ? AssemblyComparisonResult.EquivalentPartialMatch 
 					return true;
 				}
 			}
 			else if (IsStrongNamed(name1))
 			{
 				result = AssemblyComparisonResult.NonEquivalent;
 				return false;
 			}
 			else
 			{
 				result = partial ? AssemblyComparisonResult.EquivalentPartialWeakNamed 
 				return true;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="162" endline="217"><![CDATA[
 
 		static bool IsFrameworkAssembly(ParsedAssemblyName name)
 		{
 			// A list of FX assemblies which require some form of remapping
 			// When 4.0 + 1 version  is release, assemblies introduced in v4.0
 			// will have to be added
 			switch (name.Name)
 			{
 				case "System"
 				case "System.Core"
 				case "System.Data"
 				case "System.Data.DataSetExtensions"
 				case "System.Data.Linq"
 				case "System.Data.OracleClient"
 				case "System.Data.Services"
 				case "System.Data.Services.Client"
 				case "System.IdentityModel"
 				case "System.IdentityModel.Selectors"
 				case "System.Runtime.Remoting"
 				case "System.Runtime.Serialization"
 				case "System.ServiceModel"
 				case "System.Transactions"
 				case "System.Windows.Forms"
 				case "System.Xml"
 				case "System.Xml.Linq"
 					return name.PublicKeyToken == "b77a5c561934e089";
 
 				case "System.Configuration"
 				case "System.Configuration.Install"
 				case "System.Design"
 				case "System.DirectoryServices"
 				case "System.Drawing"
 				case "System.Drawing.Design"
 				case "System.EnterpriseServices"
 				case "System.Management"
 				case "System.Messaging"
 				case "System.Runtime.Serialization.Formatters.Soap"
 				case "System.Security"
 				case "System.ServiceProcess"
 				case "System.Web"
 				case "System.Web.Mobile"
 				case "System.Web.Services"
 					return name.PublicKeyToken == "b03f5f7f11d50a3a";
 
 				case "System.ComponentModel.DataAnnotations"
 				case "System.ServiceModel.Web"
 				case "System.Web.Abstractions"
 				case "System.Web.Extensions"
 				case "System.Web.Extensions.Design"
 				case "System.Web.DynamicData"
 				case "System.Web.Routing"
 					return name.PublicKeyToken == "31bf3856ad364e35";
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="218" endline="299"><![CDATA[
 
 		// note that this is the fusion specific parser, it is not the same as System.Reflection.AssemblyName
 		private static bool ParseAssemblyName(string fullName, out ParsedAssemblyName parsedName)
 		{
 			parsedName = new ParsedAssemblyName();
 			StringBuilder sb = new StringBuilder();
 			int pos = 0;
 			while (pos < fullName.Length)
 			{
 				char ch = fullName[pos++];
 				if (ch == '\\')
 				{
 					if (pos == fullName.Length)
 					{
 						return false;
 					}
 					ch = fullName[pos++];
 				}
 				else if (ch == ',')
 				{
 					break;
 				}
 				sb.Append(ch);
 			}
 			while (pos < fullName.Length)
 			{
 				char ch = fullName[pos++];
 				if (ch == '\\')
 				{
 					if (pos == fullName.Length)
 					{
 						return false;
 					}
 					ch = fullName[pos++];
 				}
 				else if (ch == ',')
 				{
 					break;
 				}
 				sb.Append(ch);
 			}
 			parsedName.Name = sb.ToString().Trim();
 			if (pos < fullName.Length)
 			{
 				string[] parts = fullName.Substring(pos).Split(',');
 				for (int i = 0; i < parts.Length; i++)
 				{
 					string[] kv = parts[i].Split('=');
 					if (kv.Length != 2)
 					{
 						return false;
 					}
 					switch (kv[0].Trim().ToLowerInvariant())
 					{
 						case "version"
 							if (parsedName.Version != null)
 							{
 								return false;
 							}
 							if (!ParseVersion(kv[1].Trim(), out parsedName.Version))
 							{
 								return false;
 							}
 							break;
 						case "culture"
 							if (parsedName.Culture != null)
 							{
 								return false;
 							}
 							if (!ParseCulture(kv[1].Trim(), out parsedName.Culture))
 							{
 								return false;
 							}
 							break;
 						case "publickeytoken"
 							if (parsedName.PublicKeyToken != null)
 							{
 								return false;
 							}
 							if (!ParsePublicKeyToken(kv[1].Trim(), out parsedName.PublicKeyToken))
 							{
 								return false;
 							}
 							break;
 						case "publickey"
 							if (parsedName.PublicKeyToken != null)
 							{
 								return false;
 							}
 							if (!ParsePublicKey(kv[1].Trim(), out parsedName.PublicKeyToken))
 							{
 								return false;
 							}
 							break;
 					}
 				}
 				for (int i = 0; i < parts.Length; i++)
 				{
 					string[] kv = parts[i].Split('=');
 					if (kv.Length != 2)
 					{
 						return false;
 					}
 					switch (kv[0].Trim().ToLowerInvariant())
 					{
 						case "version"
 							if (parsedName.Version != null)
 							{
 								return false;
 							}
 							if (!ParseVersion(kv[1].Trim(), out parsedName.Version))
 							{
 								return false;
 							}
 							break;
 						case "culture"
 							if (parsedName.Culture != null)
 							{
 								return false;
 							}
 							if (!ParseCulture(kv[1].Trim(), out parsedName.Culture))
 							{
 								return false;
 							}
 							break;
 						case "publickeytoken"
 							if (parsedName.PublicKeyToken != null)
 							{
 								return false;
 							}
 							if (!ParsePublicKeyToken(kv[1].Trim(), out parsedName.PublicKeyToken))
 							{
 								return false;
 							}
 							break;
 						case "publickey"
 							if (parsedName.PublicKeyToken != null)
 							{
 								return false;
 							}
 							if (!ParsePublicKey(kv[1].Trim(), out parsedName.PublicKeyToken))
 							{
 								return false;
 							}
 							break;
 					}
 				}
 			}
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="300" endline="318"><![CDATA[
 
 		private static bool ParseVersion(string str, out Version version)
 		{
 			string[] parts = str.Split('.');
 			if (parts.Length == 4)
 			{
 				ushort major, minor, build, revision;
 				if (ushort.TryParse(parts[0], System.Globalization.NumberStyles.Integer, null, out major)
 					&& ushort.TryParse(parts[1], System.Globalization.NumberStyles.Integer, null, out minor)
 					&& ushort.TryParse(parts[2], System.Globalization.NumberStyles.Integer, null, out build)
 					&& ushort.TryParse(parts[3], System.Globalization.NumberStyles.Integer, null, out revision))
 				{
 					version = new Version(major, minor, build, revision);
 					return true;
 				}
 			}
 			version = null;
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="319" endline="329"><![CDATA[
 
 		private static bool ParseCulture(string str, out string culture)
 		{
 			if (str == null)
 			{
 				culture = null;
 				return false;
 			}
 			culture = str;
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="330" endline="340"><![CDATA[
 
 		private static bool ParsePublicKeyToken(string str, out string publicKeyToken)
 		{
 			if (str == null)
 			{
 				publicKeyToken = null;
 				return false;
 			}
 			publicKeyToken = str.ToLowerInvariant();
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="341" endline="358"><![CDATA[
 
 		private static bool ParsePublicKey(string str, out string publicKeyToken)
 		{
 			if (str == null)
 			{
 				publicKeyToken = null;
 				return false;
 			}
 			// HACK use AssemblyName to convert PublicKey to PublicKeyToken
 			byte[] token = new AssemblyName("Foo, PublicKey=" + str).GetPublicKeyToken();
 			StringBuilder sb = new StringBuilder(token.Length * 2);
 			for (int i = 0; i < token.Length; i++)
 			{
 				sb.AppendFormat("{0
 			}
 			for (int i = 0; i < token.Length; i++)
 			{
 				sb.AppendFormat("{0
 			}
 			publicKeyToken = sb.ToString();
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="359" endline="363"><![CDATA[
 
 		private static bool IsPartial(ParsedAssemblyName name)
 		{
 			return name.Version == null || name.Culture == null || name.PublicKeyToken == null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="364" endline="368"><![CDATA[
 
 		private static bool IsStrongNamed(ParsedAssemblyName name)
 		{
 			return name.PublicKeyToken != null && name.PublicKeyToken != "null";
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="369" endline="384"><![CDATA[
 
 		private static bool IsEqual(byte[] b1, byte[] b2)
 		{
 			if (b1.Length != b2.Length)
 			{
 				return false;
 			}
 			for (int i = 0; i < b1.Length; i++)
 			{
 				if (b1[i] != b2[i])
 				{
 					return false;
 				}
 			}
 			for (int i = 0; i < b1.Length; i++)
 			{
 				if (b1[i] != b2[i])
 				{
 					return false;
 				}
 			}
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Fusion.cs" startline="42" endline="42"><![CDATA[
 		private static readonly bool UseNativeFusion = Environment.OSVersion.Platform == PlatformID.Win32NT && System.Type.GetType("Mono.Runtime") == null && Environment.GetEnvironmentVariable("IKVM_DISABLE_FUSION") == null;
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\property.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\location.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\enum.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ecore.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\const.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\complete.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\CliHeader.cs" startline="53" endline="70"><![CDATA[
 		{
 			Cb = br.ReadUInt32();
 			MajorRuntimeVersion = br.ReadUInt16();
 			MinorRuntimeVersion = br.ReadUInt16();
 			MetaDataRVA = br.ReadUInt32();
 			MetaDataSize = br.ReadUInt32();
 			Flags = br.ReadUInt32();
 			EntryPointToken = br.ReadUInt32();
 			ResourcesRVA = br.ReadUInt32();
 			ResourcesSize = br.ReadUInt32();
 			StrongNameSignatureRVA = br.ReadUInt32();
 			StrongNameSignatureSize = br.ReadUInt32();
 			CodeManagerTable = br.ReadUInt32();
 			VTableFixupsRVA = br.ReadUInt32();
 			VTableFixupsSize = br.ReadUInt32();
 			ExportAddressTableJumps = br.ReadUInt32();
 			ManagedNativeHeader = br.ReadUInt32();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\CliHeader.cs" startline="71" endline="90"><![CDATA[
 
 		internal void Write(IKVM.Reflection.Writer.MetadataWriter mw)
 		{
 			mw.Write(Cb);
 			mw.Write(MajorRuntimeVersion);
 			mw.Write(MinorRuntimeVersion);
 			mw.Write(MetaDataRVA);
 			mw.Write(MetaDataSize);
 			mw.Write(Flags);
 			mw.Write(EntryPointToken);
 			mw.Write(ResourcesRVA);
 			mw.Write(ResourcesSize);
 			mw.Write(StrongNameSignatureRVA);
 			mw.Write(StrongNameSignatureSize);
 			mw.Write(CodeManagerTable);
 			mw.Write(VTableFixupsRVA);
 			mw.Write(VTableFixupsSize);
 			mw.Write(ExportAddressTableJumps);
 			mw.Write(ManagedNativeHeader);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Metadata\CliHeader.cs" startline="35" endline="35"><![CDATA[
 		internal uint Cb = 0x48;
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="74" endline="76"><![CDATA[
 		{
 			this.value = value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="77" endline="81"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			return this == obj as OpCode?;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="82" endline="86"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="87" endline="91"><![CDATA[
 
 		public bool Equals(OpCode other)
 		{
 			return this == other;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="92" endline="96"><![CDATA[
 
 		public static bool operator ==(OpCode a, OpCode b)
 		{
 			return a.value == b.value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="97" endline="101"><![CDATA[
 
 		public static bool operator !=(OpCode a, OpCode b)
 		{
 			return !(a == b);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="102" endline="105"><![CDATA[
 
 		public short Value
 		{
 			get { return (short)(value >> 22); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="106" endline="110"><![CDATA[
 		}
 
 		public int Size
 		{
 			get { return value < 0 ? 2 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="111" endline="116"><![CDATA[
 		}
 
 #if !GENERATOR
 		public string Name
 		{
 			get { return OpCodes.GetName(this.Value); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="117" endline="122"><![CDATA[
 		}
 #endif
 
 		public OperandType OperandType
 		{
 			get { return (OperandType)((value & 0x3FFFFF) % OperandTypeCount); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="123" endline="127"><![CDATA[
 		}
 
 		public FlowControl FlowControl
 		{
 			get { return (FlowControl)(((value & 0x3FFFFF) / OperandTypeCount) % FlowControlCount); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="128" endline="132"><![CDATA[
 		}
 
 		internal int StackDiff
 		{
 			get { return ((((value & 0x3FFFFF) / (OperandTypeCount * FlowControlCount)) % StackDiffCount) - 3); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="133" endline="137"><![CDATA[
 		}
 
 		public OpCodeType OpCodeType
 		{
 			get { return (OpCodeType)(((value & 0x3FFFFF) / (OperandTypeCount * FlowControlCount * StackDiffCount)) % OpCodeTypeCount); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="138" endline="142"><![CDATA[
 		}
 
 		public StackBehaviour StackBehaviourPop
 		{
 			get { return pop[(((value & 0x3FFFFF) / (OperandTypeCount * FlowControlCount * StackDiffCount * OpCodeTypeCount)) % StackBehaviourPopCount)]; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="143" endline="147"><![CDATA[
 		}
 
 		public StackBehaviour StackBehaviourPush
 		{
 			get { return push[(((value & 0x3FFFFF) / (OperandTypeCount * FlowControlCount * StackDiffCount * OpCodeTypeCount * StackBehaviourPopCount)) % StackBehaviourPushCount)]; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCode.cs" startline="38" endline="60"><![CDATA[
 		private static readonly StackBehaviour[] pop = {
 			StackBehaviour.Pop0,
 			StackBehaviour.Pop1,
 			StackBehaviour.Pop1_pop1,
 			StackBehaviour.Popi,
 			StackBehaviour.Popi_pop1,
 			StackBehaviour.Popi_popi,
 			StackBehaviour.Popi_popi8,
 			StackBehaviour.Popi_popi_popi,
 			StackBehaviour.Popi_popr4,
 			StackBehaviour.Popi_popr8,
 			StackBehaviour.Popref,
 			StackBehaviour.Popref_pop1,
 			StackBehaviour.Popref_popi,
 			StackBehaviour.Popref_popi_popi,
 			StackBehaviour.Popref_popi_popi8,
 			StackBehaviour.Popref_popi_popr4,
 			StackBehaviour.Popref_popi_popr8,
 			StackBehaviour.Popref_popi_popref,
 			StackBehaviour.Varpop,
 			StackBehaviour.Popref_popi_pop1
 		};
 		private static readonly StackBehaviour[] push = {
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="33" endline="36"><![CDATA[
 		internal Assembly(Universe universe)
 		{
 			this.universe = universe;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="37" endline="58"><![CDATA[
 
 		public abstract Type[] GetTypes();
 		public abstract string FullName { get; }
 		public abstract AssemblyName GetName();
 		public abstract string ImageRuntimeVersion { get; }
 		public abstract Module ManifestModule { get; }
 		public abstract MethodInfo EntryPoint { get; }
 		public abstract string Location { get; }
 		public abstract AssemblyName[] GetReferencedAssemblies();
 		public abstract Module[] GetModules(bool getResourceModules);
 		public abstract Module[] GetLoadedModules(bool getResourceModules);
 		public abstract Module GetModule(string name);
 		public abstract string[] GetManifestResourceNames();
 		public abstract ManifestResourceInfo GetManifestResourceInfo(string resourceName);
 		public abstract System.IO.Stream GetManifestResourceStream(string resourceName);
 
 		internal abstract Type GetTypeImpl(string typeName);
 
 		public Module[] GetModules()
 		{
 			return GetModules(true);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="59" endline="63"><![CDATA[
 
 		public Module[] GetLoadedModules()
 		{
 			return GetLoadedModules(true);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="64" endline="68"><![CDATA[
 
 		public AssemblyName GetName(bool copiedName)
 		{
 			return GetName();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="69" endline="72"><![CDATA[
 
 		public bool ReflectionOnly
 		{
 			get { return true; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="73" endline="86"><![CDATA[
 		}
 
 		public Type[] GetExportedTypes()
 		{
 			List<Type> list = new List<Type>();
 			foreach (Type type in GetTypes())
 			{
 				if (type.IsVisible)
 				{
 					list.Add(type);
 				}
 			}
 			foreach (Type type in GetTypes())
 			{
 				if (type.IsVisible)
 				{
 					list.Add(type);
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="87" endline="91"><![CDATA[
 
 		public Type GetType(string typeName)
 		{
 			return GetType(typeName, false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="92" endline="112"><![CDATA[
 
 		public Type GetType(string typeName, bool throwOnError)
 		{
 			TypeNameParser parser = TypeNameParser.Parse(typeName, throwOnError);
 			if (parser.Error)
 			{
 				return null;
 			}
 			if (parser.AssemblyName != null)
 			{
 				if (throwOnError)
 				{
 					throw new ArgumentException("Type names passed to Assembly.GetType() must not specify an assembly.");
 				}
 				else
 				{
 					return null;
 				}
 			}
 			return parser.Expand(GetTypeImpl(parser.FirstNamePart), this, throwOnError, typeName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="113" endline="116"><![CDATA[
 
 		public virtual Module LoadModule(string moduleName, byte[] rawModule)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="117" endline="122"><![CDATA[
 		}
 
 		public Module LoadModule(string moduleName, byte[] rawModule, byte[] rawSymbolStore)
 		{
 			return LoadModule(moduleName, rawModule);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="123" endline="127"><![CDATA[
 
 		public bool IsDefined(Type attributeType, bool inherit)
 		{
 			return CustomAttributeData.__GetCustomAttributes(this, attributeType, inherit).Count != 0;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="128" endline="132"><![CDATA[
 
 		public IList<CustomAttributeData> __GetCustomAttributes(Type attributeType, bool inherit)
 		{
 			return CustomAttributeData.__GetCustomAttributes(this, attributeType, inherit);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="133" endline="137"><![CDATA[
 
 		public static string CreateQualifiedName(string assemblyName, string typeName)
 		{
 			return assemblyName == null ? typeName 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="138" endline="142"><![CDATA[
 
 		public static Assembly GetAssembly(Type type)
 		{
 			return type.Assembly;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="143" endline="154"><![CDATA[
 
 		public string CodeBase
 		{
 			get
 			{
 				string path = this.Location.Replace(System.IO.Path.DirectorySeparatorChar, '/');
 				if (!path.StartsWith("/"))
 				{
 					path = "/" + path;
 				}
 				return "file
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\delegate.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\CryptoHack.cs" startline="35" endline="54"><![CDATA[
 		{
 			// HACK use serialization to get at the private key or key container name,
 			// this should be more future proof than using reflection to access the fields directly.
 			SerializationInfo ser = new SerializationInfo(typeof(StrongNameKeyPair), new FormatterConverter());
 			((ISerializable)keyPair.keyPair).GetObjectData(ser, new StreamingContext());
 			byte[] key = (byte[])ser.GetValue("_keyPairArray", typeof(byte[]));
 			string keycontainer = ser.GetString("_keyPairContainer");
 			if (keycontainer != null)
 			{
 				CspParameters parm = new CspParameters();
 				parm.Flags = CspProviderFlags.UseMachineKeyStore;
 				parm.KeyContainerName = keycontainer;
 				parm.KeyNumber = 2;	// Signature
 				return new RSACryptoServiceProvider(parm);
 			}
 			else
 			{
 				return Mono.Security.Cryptography.CryptoConvert.FromCapiKeyBlob(key);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="42" endline="48"><![CDATA[
 		internal TextSection(PEWriter peWriter, CliHeader cliHeader, ModuleBuilder moduleBuilder, int strongNameSignatureLength)
 		{
 			this.peWriter = peWriter;
 			this.cliHeader = cliHeader;
 			this.moduleBuilder = moduleBuilder;
 			this.strongNameSignatureLength = (uint)strongNameSignatureLength;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="49" endline="52"><![CDATA[
 
 		internal uint PointerToRawData
 		{
 			get { return peWriter.ToFileAlignment(peWriter.HeaderSize); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="53" endline="57"><![CDATA[
 		}
 
 		internal uint BaseRVA
 		{
 			get { return 0x2000; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="58" endline="62"><![CDATA[
 		}
 
 		internal uint ImportAddressTableRVA
 		{
 			get { return BaseRVA; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="63" endline="77"><![CDATA[
 		}
 
 		internal uint ImportAddressTableLength
 		{
 			get
 			{
 				if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386)
 				{
 					return 8;
 				}
 				else
 				{
 					return 16;
 				}
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="78" endline="82"><![CDATA[
 		}
 
 		internal uint ComDescriptorRVA
 		{
 			get { return ImportAddressTableRVA + ImportAddressTableLength; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="83" endline="87"><![CDATA[
 		}
 
 		internal uint ComDescriptorLength
 		{
 			get { return cliHeader.Cb; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="88" endline="92"><![CDATA[
 		}
 
 		internal uint MethodBodiesRVA
 		{
 			get { return (ComDescriptorRVA + ComDescriptorLength + 7) & ~7U; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="93" endline="97"><![CDATA[
 		}
 
 		private uint MethodBodiesLength
 		{
 			get { return (uint)moduleBuilder.methodBodies.Length; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="98" endline="112"><![CDATA[
 		}
 
 		private uint ResourcesRVA
 		{
 			get
 			{
 				if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386)
 				{
 					return (MethodBodiesRVA + MethodBodiesLength + 3) & ~3U;
 				}
 				else
 				{
 					return (MethodBodiesRVA + MethodBodiesLength + 15) & ~15U;
 				}
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="113" endline="117"><![CDATA[
 		}
 
 		private uint ResourcesLength
 		{
 			get { return (uint)moduleBuilder.manifestResources.Length; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="118" endline="125"><![CDATA[
 		}
 
 		internal uint StrongNameSignatureRVA
 		{
 			get
 			{
 				return (ResourcesRVA + ResourcesLength + 3) & ~3U;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="126" endline="133"><![CDATA[
 		}
 
 		internal uint StrongNameSignatureLength
 		{
 			get
 			{
 				return strongNameSignatureLength;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="134" endline="141"><![CDATA[
 		}
 
 		private uint MetadataRVA
 		{
 			get
 			{
 				return (StrongNameSignatureRVA + StrongNameSignatureLength + 3) & ~3U;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="142" endline="146"><![CDATA[
 		}
 
 		private uint MetadataLength
 		{
 			get { return (uint)moduleBuilder.MetadataLength; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="147" endline="151"><![CDATA[
 		}
 
 		internal uint DebugDirectoryRVA
 		{
 			get { return MetadataRVA + MetadataLength; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="152" endline="163"><![CDATA[
 		}
 
 		internal uint DebugDirectoryLength
 		{
 			get
 			{
 				if (DebugDirectoryContentsLength != 0)
 				{
 					return 28;
 				}
 				return 0;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="164" endline="176"><![CDATA[
 		}
 
 		private uint DebugDirectoryContentsLength
 		{
 			get
 			{
 				if (moduleBuilder.symbolWriter != null)
 				{
 					IMAGE_DEBUG_DIRECTORY idd = new IMAGE_DEBUG_DIRECTORY();
 					return (uint)SymbolSupport.GetDebugInfo(moduleBuilder.symbolWriter, ref idd).Length;
 				}
 				return 0;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="177" endline="182"><![CDATA[
 		}
 
 		internal uint ImportDirectoryRVA
 		{
 			// on AMD64 (and probably IA64) the import directory needs to be 16 byte aligned (on I386 4 byte alignment is sufficient)
 			get { return (DebugDirectoryRVA + DebugDirectoryLength + DebugDirectoryContentsLength + 15) & ~15U; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="183" endline="187"><![CDATA[
 		}
 
 		internal uint ImportDirectoryLength
 		{
 			get { return (ImportHintNameTableRVA - ImportDirectoryRVA) + 27; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="188" endline="202"><![CDATA[
 		}
 
 		private uint ImportHintNameTableRVA
 		{
 			get
 			{
 				if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386)
 				{
 					return (ImportDirectoryRVA + 48 + 15) & ~15U;
 				}
 				else
 				{
 					return (ImportDirectoryRVA + 48 + 4 + 15) & ~15U;
 				}
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="203" endline="219"><![CDATA[
 		}
 
 		internal uint StartupStubRVA
 		{
 			get
 			{
 				if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_IA64)
 				{
 					// note that the alignment is driven by the requirement that the two relocation fixups are in a single page
 					return (ImportDirectoryRVA + ImportDirectoryLength + 15U) & ~15U;
 				}
 				else
 				{
 					// the additional 2 bytes padding are to align the address in the jump (which is a relocation fixup)
 					return 2 + ((ImportDirectoryRVA + ImportDirectoryLength + 3U) & ~3U);
 				}
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="220" endline="238"><![CDATA[
 		}
 
 		internal uint StartupStubLength
 		{
 			get
 			{
 				if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_AMD64)
 				{
 					return 12;
 				}
 				else if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_IA64)
 				{
 					return 48;
 				}
 				else
 				{
 					return 6;
 				}
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="239" endline="251"><![CDATA[
 		}
 
 		private void WriteRVA(MetadataWriter mw, uint rva)
 		{
 			if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386)
 			{
 				mw.Write(rva);
 			}
 			else
 			{
 				mw.Write((ulong)rva);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="252" endline="370"><![CDATA[
 
 		internal void Write(MetadataWriter mw, int sdataRVA)
 		{
 			// Now that we're ready to start writing, we need to do some fix ups
 			moduleBuilder.MethodDef.Fixup(this);
 			moduleBuilder.MethodImpl.Fixup(moduleBuilder);
 			moduleBuilder.MethodSemantics.Fixup(moduleBuilder);
 			moduleBuilder.InterfaceImpl.Fixup();
 			moduleBuilder.MemberRef.Fixup(moduleBuilder);
 			moduleBuilder.Constant.Fixup(moduleBuilder);
 			moduleBuilder.FieldMarshal.Fixup(moduleBuilder);
 			moduleBuilder.DeclSecurity.Fixup(moduleBuilder);
 			moduleBuilder.GenericParam.Fixup(moduleBuilder);
 			moduleBuilder.CustomAttribute.Fixup(moduleBuilder);
 			moduleBuilder.FieldLayout.Fixup(moduleBuilder);
 			moduleBuilder.FieldRVA.Fixup(moduleBuilder, sdataRVA);
 			moduleBuilder.ImplMap.Fixup(moduleBuilder);
 			moduleBuilder.MethodSpec.Fixup(moduleBuilder);
 			moduleBuilder.GenericParamConstraint.Fixup(moduleBuilder);
 
 			// Import Address Table
 			AssertRVA(mw, ImportAddressTableRVA);
 			WriteRVA(mw, ImportHintNameTableRVA);
 			WriteRVA(mw, 0);
 
 			// CLI Header
 			AssertRVA(mw, ComDescriptorRVA);
 			cliHeader.MetaDataRVA = MetadataRVA;
 			cliHeader.MetaDataSize = MetadataLength;
 			if (ResourcesLength != 0)
 			{
 				cliHeader.ResourcesRVA = ResourcesRVA;
 				cliHeader.ResourcesSize = ResourcesLength;
 			}
 			if (StrongNameSignatureLength != 0)
 			{
 				cliHeader.StrongNameSignatureRVA = StrongNameSignatureRVA;
 				cliHeader.StrongNameSignatureSize = StrongNameSignatureLength;
 			}
 			cliHeader.Write(mw);
 
 			// alignment padding
 			for (int i = (int)(MethodBodiesRVA - (ComDescriptorRVA + ComDescriptorLength)); i > 0; i--)
 			{
 				mw.Write((byte)0);
 			}
 			for (int i = (int)(MethodBodiesRVA - (ComDescriptorRVA + ComDescriptorLength)); i > 0; i--)
 			{
 				mw.Write((byte)0);
 			}
 
 			// Method Bodies
 			mw.Write(moduleBuilder.methodBodies);
 
 			// alignment padding
 			for (int i = (int)(ResourcesRVA - (MethodBodiesRVA + MethodBodiesLength)); i > 0; i--)
 			{
 				mw.Write((byte)0);
 			}
 			for (int i = (int)(ResourcesRVA - (MethodBodiesRVA + MethodBodiesLength)); i > 0; i--)
 			{
 				mw.Write((byte)0);
 			}
 
 			// Resources
 			mw.Write(moduleBuilder.manifestResources);
 
 			// The strong name signature live here (if it exists), but it will written later
 			// and the following alignment padding will take care of reserving the space.
 
 			// alignment padding
 			for (int i = (int)(MetadataRVA - (ResourcesRVA + ResourcesLength)); i > 0; i--)
 			{
 				mw.Write((byte)0);
 			}
 			for (int i = (int)(MetadataRVA - (ResourcesRVA + ResourcesLength)); i > 0; i--)
 			{
 				mw.Write((byte)0);
 			}
 
 			// Metadata
 			AssertRVA(mw, MetadataRVA);
 			moduleBuilder.WriteMetadata(mw);
 
 			// Debug Directory
 			AssertRVA(mw, DebugDirectoryRVA);
 			WriteDebugDirectory(mw);
 
 			// alignment padding
 			for (int i = (int)(ImportDirectoryRVA - (DebugDirectoryRVA + DebugDirectoryLength + DebugDirectoryContentsLength)); i > 0; i--)
 			{
 				mw.Write((byte)0);
 			}
 			for (int i = (int)(ImportDirectoryRVA - (DebugDirectoryRVA + DebugDirectoryLength + DebugDirectoryContentsLength)); i > 0; i--)
 			{
 				mw.Write((byte)0);
 			}
 
 			// Import Directory
 			AssertRVA(mw, ImportDirectoryRVA);
 			WriteImportDirectory(mw);
 
 			// alignment padding
 			for (int i = (int)(StartupStubRVA - (ImportDirectoryRVA + ImportDirectoryLength)); i > 0; i--)
 			{
 				mw.Write((byte)0);
 			}
 			for (int i = (int)(StartupStubRVA - (ImportDirectoryRVA + ImportDirectoryLength)); i > 0; i--)
 			{
 				mw.Write((byte)0);
 			}
 
 			// Startup Stub
 			AssertRVA(mw, StartupStubRVA);
 			if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_AMD64)
 			{
 				/*
 				 *   48 A1 00 20 40 00 00 00 00 00        mov         rax,qword ptr [0000000000402000h]
 				 *   FF E0                                jmp         rax
 				 */
 				mw.Write((ushort)0xA148);
 				mw.Write(peWriter.Headers.OptionalHeader.ImageBase + ImportAddressTableRVA);
 				mw.Write((ushort)0xE0FF);
 			}
 			else if (peWriter.Headers.FileHeader.Machine == IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_IA64)
 			{
 				mw.Write(new byte[] {
 						0x0B, 0x48, 0x00, 0x02, 0x18, 0x10, 0xA0, 0x40, 0x24, 0x30, 0x28, 0x00, 0x00, 0x00, 0x04, 0x00,
 						0x10, 0x08, 0x00, 0x12, 0x18, 0x10, 0x60, 0x50, 0x04, 0x80, 0x03, 0x00, 0x60, 0x00, 0x80, 0x00
 					});
 				mw.Write(peWriter.Headers.OptionalHeader.ImageBase + StartupStubRVA);
 				mw.Write(peWriter.Headers.OptionalHeader.ImageBase + BaseRVA);
 			}
 			else
 			{
 				mw.Write((ushort)0x25FF);
 				mw.Write((uint)peWriter.Headers.OptionalHeader.ImageBase + ImportAddressTableRVA);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="371" endline="376"><![CDATA[
 
 		[Conditional("DEBUG")]
 		private void AssertRVA(MetadataWriter mw, uint rva)
 		{
 			Debug.Assert(mw.Position - PointerToRawData + BaseRVA == rva);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="377" endline="397"><![CDATA[
 
 		private void WriteDebugDirectory(MetadataWriter mw)
 		{
 			if (DebugDirectoryLength != 0)
 			{
 				IMAGE_DEBUG_DIRECTORY idd = new IMAGE_DEBUG_DIRECTORY();
 				idd.Characteristics = 0;
 				idd.TimeDateStamp = peWriter.Headers.FileHeader.TimeDateStamp;
 				byte[] buf = SymbolSupport.GetDebugInfo(moduleBuilder.symbolWriter, ref idd);
 				idd.PointerToRawData = (DebugDirectoryRVA - BaseRVA) + DebugDirectoryLength + PointerToRawData;
 				mw.Write(idd.Characteristics);
 				mw.Write(idd.TimeDateStamp);
 				mw.Write(idd.MajorVersion);
 				mw.Write(idd.MinorVersion);
 				mw.Write(idd.Type);
 				mw.Write(idd.SizeOfData);
 				mw.Write(idd.AddressOfRawData);
 				mw.Write(idd.PointerToRawData);
 				mw.Write(buf);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="398" endline="438"><![CDATA[
 
 		private void WriteImportDirectory(MetadataWriter mw)
 		{
 			mw.Write(ImportDirectoryRVA + 40);		// ImportLookupTable
 			mw.Write(0);							// DateTimeStamp
 			mw.Write(0);							// ForwarderChain
 			mw.Write(ImportHintNameTableRVA + 14);	// Name
 			mw.Write(ImportAddressTableRVA);
 			mw.Write(new byte[20]);
 			// Import Lookup Table
 			mw.Write(ImportHintNameTableRVA);		// Hint/Name Table RVA
 			int size = 48;
 			if (peWriter.Headers.FileHeader.Machine != IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386)
 			{
 				size += 4;
 				mw.Write(0);
 			}
 			mw.Write(0);
 
 			// alignment padding
 			for (int i = (int)(ImportHintNameTableRVA - (ImportDirectoryRVA + size)); i > 0; i--)
 			{
 				mw.Write((byte)0);
 			}
 			for (int i = (int)(ImportHintNameTableRVA - (ImportDirectoryRVA + size)); i > 0; i--)
 			{
 				mw.Write((byte)0);
 			}
 
 			// Hint/Name Table
 			AssertRVA(mw, ImportHintNameTableRVA);
 			mw.Write((ushort)0);		// Hint
 			if ((peWriter.Headers.FileHeader.Characteristics & IMAGE_FILE_HEADER.IMAGE_FILE_DLL) != 0)
 			{
 				mw.Write(System.Text.Encoding.ASCII.GetBytes("_CorDllMain"));
 			}
 			else
 			{
 				mw.Write(System.Text.Encoding.ASCII.GetBytes("_CorExeMain"));
 			}
 			mw.Write((byte)0);
 			// Name
 			mw.Write(System.Text.Encoding.ASCII.GetBytes("mscoree.dll"));
 			mw.Write((ushort)0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\TextSection.cs" startline="439" endline="442"><![CDATA[
 
 		internal int Length
 		{
 			get { return (int)(StartupStubRVA - BaseRVA + StartupStubLength); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeTypedArgument.cs" startline="36" endline="39"><![CDATA[
 		{
 			this.type = type;
 			this.value = value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeTypedArgument.cs" startline="40" endline="44"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			return this == obj as CustomAttributeTypedArgument?;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeTypedArgument.cs" startline="45" endline="49"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return type.GetHashCode() ^ 77 * (value == null ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeTypedArgument.cs" startline="50" endline="53"><![CDATA[
 
 		public Type ArgumentType
 		{
 			get { return type; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeTypedArgument.cs" startline="54" endline="58"><![CDATA[
 		}
 
 		public Object Value
 		{
 			get { return value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeTypedArgument.cs" startline="59" endline="64"><![CDATA[
 		}
 
 		public static bool operator ==(CustomAttributeTypedArgument arg1, CustomAttributeTypedArgument arg2)
 		{
 			return arg1.type.Equals(arg2.type) && (arg1.value == arg2.value || (arg1.value != null && arg1.value.Equals(arg2.value)));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeTypedArgument.cs" startline="65" endline="69"><![CDATA[
 
 		public static bool operator !=(CustomAttributeTypedArgument arg1, CustomAttributeTypedArgument arg2)
 		{
 			return !(arg1 == arg2);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\report.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\tools\monop\outline.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\namespace.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.jay" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cs-parser.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cfold.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cfold.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cfold.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cfold.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cfold.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cfold.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\cfold.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="41" endline="46"><![CDATA[
 		internal MethodDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
 		{
 			this.module = module;
 			this.index = index;
 			this.declaringType = declaringType;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="47" endline="51"><![CDATA[
 
 		public override MethodBody GetMethodBody()
 		{
 			return GetMethodBody(this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="52" endline="62"><![CDATA[
 
 		internal MethodBody GetMethodBody(IGenericContext context)
 		{
 			if ((GetMethodImplementationFlags() & MethodImplAttributes.CodeTypeMask) != MethodImplAttributes.IL)
 			{
 				// method is not IL
 				return null;
 			}
 			int rva = module.MethodDef.records[index].RVA;
 			return rva == 0 ? null 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="63" endline="66"><![CDATA[
 
 		public override CallingConventions CallingConvention
 		{
 			get { return this.MethodSignature.CallingConvention; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="67" endline="71"><![CDATA[
 		}
 
 		public override MethodAttributes Attributes
 		{
 			get { return (MethodAttributes)module.MethodDef.records[index].Flags; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="72" endline="77"><![CDATA[
 		}
 
 		public override MethodImplAttributes GetMethodImplementationFlags()
 		{
 			return (MethodImplAttributes)module.MethodDef.records[index].ImplFlags;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="78" endline="83"><![CDATA[
 
 		public override ParameterInfo[] GetParameters()
 		{
 			PopulateParameters();
 			return (ParameterInfo[])parameters.Clone();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="84" endline="117"><![CDATA[
 
 		private void PopulateParameters()
 		{
 			if (parameters == null)
 			{
 				MethodSignature methodSignature = this.MethodSignature;
 				parameters = new ParameterInfo[methodSignature.GetParameterCount()];
 				int parameter = module.MethodDef.records[index].ParamList - 1;
 				int end = module.MethodDef.records.Length > index + 1 ? module.MethodDef.records[index + 1].ParamList - 1 
 				for (; parameter < end; parameter++)
 				{
 					int seq = module.Param.records[parameter].Sequence - 1;
 					if (seq == -1)
 					{
 						returnParameter = new ParameterInfoImpl(this, seq, parameter);
 					}
 					else
 					{
 						parameters[seq] = new ParameterInfoImpl(this, seq, parameter);
 					}
 				}
 				for (; parameter < end; parameter++)
 				{
 					int seq = module.Param.records[parameter].Sequence - 1;
 					if (seq == -1)
 					{
 						returnParameter = new ParameterInfoImpl(this, seq, parameter);
 					}
 					else
 					{
 						parameters[seq] = new ParameterInfoImpl(this, seq, parameter);
 					}
 				}
 				for (int i = 0; i < parameters.Length; i++)
 				{
 					if (parameters[i] == null)
 					{
 						parameters[i] = new ParameterInfoImpl(this, i, -1);
 					}
 				}
 				for (int i = 0; i < parameters.Length; i++)
 				{
 					if (parameters[i] == null)
 					{
 						parameters[i] = new ParameterInfoImpl(this, i, -1);
 					}
 				}
 				if (returnParameter == null)
 				{
 					returnParameter = new ParameterInfoImpl(this, -1, -1);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="118" endline="121"><![CDATA[
 
 		internal override int ParameterCount
 		{
 			get { return this.MethodSignature.GetParameterCount(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="122" endline="130"><![CDATA[
 		}
 
 		public override ParameterInfo ReturnParameter
 		{
 			get
 			{
 				PopulateParameters();
 				return returnParameter;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="131" endline="138"><![CDATA[
 		}
 
 		public override Type ReturnType
 		{
 			get
 			{
 				return this.ReturnParameter.ParameterType;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="139" endline="143"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return declaringType.IsModulePseudoType ? null 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="144" endline="148"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return module.GetString(module.MethodDef.records[index].Name); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="149" endline="153"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return (MethodDefTable.Index << 24) + index + 1; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="154" endline="162"><![CDATA[
 		}
 
 		public override bool IsGenericMethodDefinition
 		{
 			get
 			{
 				PopulateGenericArguments();
 				return typeArgs.Length > 0;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="163" endline="167"><![CDATA[
 		}
 
 		public override bool IsGenericMethod
 		{
 			get { return IsGenericMethodDefinition; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="168" endline="174"><![CDATA[
 		}
 
 		public override Type[] GetGenericArguments()
 		{
 			PopulateGenericArguments();
 			return Util.Copy(typeArgs);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="175" endline="197"><![CDATA[
 
 		private void PopulateGenericArguments()
 		{
 			if (typeArgs == null)
 			{
 				int token = this.MetadataToken;
 				int first = module.GenericParam.FindFirstByOwner(token);
 				if (first == -1)
 				{
 					typeArgs = Type.EmptyTypes;
 				}
 				else
 				{
 					List<Type> list = new List<Type>();
 					int len = module.GenericParam.records.Length;
 					for (int i = first; i < len && module.GenericParam.records[i].Owner == token; i++)
 					{
 						list.Add(new GenericTypeParameter(module, i));
 					}
 					for (int i = first; i < len && module.GenericParam.records[i].Owner == token; i++)
 					{
 						list.Add(new GenericTypeParameter(module, i));
 					}
 					typeArgs = list.ToArray();
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="198" endline="203"><![CDATA[
 
 		internal override Type GetGenericMethodArgument(int index)
 		{
 			PopulateGenericArguments();
 			return typeArgs[index];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="204" endline="209"><![CDATA[
 
 		internal override int GetGenericMethodArgumentCount()
 		{
 			PopulateGenericArguments();
 			return typeArgs.Length;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="210" endline="218"><![CDATA[
 
 		public override MethodInfo GetGenericMethodDefinition()
 		{
 			if (this.IsGenericMethodDefinition)
 			{
 				return this;
 			}
 			throw new InvalidOperationException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="219" endline="223"><![CDATA[
 
 		public override MethodInfo MakeGenericMethod(params Type[] typeArguments)
 		{
 			return new GenericMethodInstance(declaringType, this, typeArguments);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="224" endline="227"><![CDATA[
 
 		public override Module Module
 		{
 			get { return module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="228" endline="239"><![CDATA[
 		}
 
 		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			List<CustomAttributeData> list = module.GetCustomAttributes(this.MetadataToken, attributeType);
 			if ((this.Attributes & MethodAttributes.PinvokeImpl) != 0
 				&& (attributeType == null || attributeType.IsAssignableFrom(module.universe.System_Runtime_InteropServices_DllImportAttribute)))
 			{
 				CreateDllImportPseudoCustomAttribute(list);
 			}
 			return list;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="240" endline="332"><![CDATA[
 
 		private void CreateDllImportPseudoCustomAttribute(List<CustomAttributeData> attribs)
 		{
 			int token = this.MetadataToken;
 			// TODO use binary search?
 			for (int i = 0; i < module.ImplMap.records.Length; i++)
 			{
 				if (module.ImplMap.records[i].MemberForwarded == token)
 				{
 					const short NoMangle = 0x0001;
 					const short CharSetMask = 0x0006;
 					const short CharSetNotSpec = 0x0000;
 					const short CharSetAnsi = 0x0002;
 					const short CharSetUnicode = 0x0004;
 					const short CharSetAuto = 0x0006;
 					const short SupportsLastError = 0x0040;
 					const short CallConvMask = 0x0700;
 					const short CallConvWinapi = 0x0100;
 					const short CallConvCdecl = 0x0200;
 					const short CallConvStdcall = 0x0300;
 					const short CallConvThiscall = 0x0400;
 					const short CallConvFastcall = 0x0500;
 					// non-standard flags
 					const short BestFitOn = 0x0010;
 					const short BestFitOff = 0x0020;
 					const short CharMapErrorOn = 0x1000;
 					const short CharMapErrorOff = 0x2000;
 
 					Type type = module.universe.System_Runtime_InteropServices_DllImportAttribute;
 					ConstructorInfo constructor = type.GetConstructor(new Type[] { module.universe.System_String });
 					List<CustomAttributeNamedArgument> list = new List<CustomAttributeNamedArgument>();
 					int flags = module.ImplMap.records[i].MappingFlags;
 					string entryPoint = module.GetString(module.ImplMap.records[i].ImportName);
 					string dllName = module.GetString(module.ModuleRef.records[(module.ImplMap.records[i].ImportScope & 0xFFFFFF) - 1]);
 					System.Runtime.InteropServices.CharSet? charSet;
 					switch (flags & CharSetMask)
 					{
 						case CharSetAnsi
 							charSet = System.Runtime.InteropServices.CharSet.Ansi;
 							break;
 						case CharSetUnicode
 							charSet = System.Runtime.InteropServices.CharSet.Unicode;
 							break;
 						case CharSetAuto
 							charSet = System.Runtime.InteropServices.CharSet.Auto;
 							break;
 						case CharSetNotSpec
 						default
 							charSet = null;
 							break;
 					}
 					System.Runtime.InteropServices.CallingConvention callingConvention;
 					switch (flags & CallConvMask)
 					{
 						case CallConvCdecl
 							callingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl;
 							break;
 						case CallConvFastcall
 							callingConvention = System.Runtime.InteropServices.CallingConvention.FastCall;
 							break;
 						case CallConvStdcall
 							callingConvention = System.Runtime.InteropServices.CallingConvention.StdCall;
 							break;
 						case CallConvThiscall
 							callingConvention = System.Runtime.InteropServices.CallingConvention.ThisCall;
 							break;
 						case CallConvWinapi
 						default
 							callingConvention = System.Runtime.InteropServices.CallingConvention.Winapi;
 							break;
 					}
 					list.Add(MakeNamedArgument(type, "EntryPoint", entryPoint));
 					list.Add(MakeNamedArgument(type, "ExactSpelling", flags, NoMangle));
 					list.Add(MakeNamedArgument(type, "SetLastError", flags, SupportsLastError));
 					list.Add(MakeNamedArgument(type, "PreserveSig", (int)GetMethodImplementationFlags(), (int)MethodImplAttributes.PreserveSig));
 					list.Add(MakeNamedArgument(type, "CallingConvention", (int)callingConvention));
 					if (charSet.HasValue)
 					{
 						list.Add(MakeNamedArgument(type, "CharSet", (int)charSet.Value));
 					}
 					if ((flags & (BestFitOn | BestFitOff)) != 0)
 					{
 						list.Add(MakeNamedArgument(type, "BestFitMapping", flags, BestFitOn));
 					}
 					if ((flags & (CharMapErrorOn | CharMapErrorOff)) != 0)
 					{
 						list.Add(MakeNamedArgument(type, "ThrowOnUnmappableChar", flags, CharMapErrorOn));
 					}
 					attribs.Add(new CustomAttributeData(constructor, new object[] { dllName }, list));
 					return;
 				}
 			}
 			for (int i = 0; i < module.ImplMap.records.Length; i++)
 			{
 				if (module.ImplMap.records[i].MemberForwarded == token)
 				{
 					const short NoMangle = 0x0001;
 					const short CharSetMask = 0x0006;
 					const short CharSetNotSpec = 0x0000;
 					const short CharSetAnsi = 0x0002;
 					const short CharSetUnicode = 0x0004;
 					const short CharSetAuto = 0x0006;
 					const short SupportsLastError = 0x0040;
 					const short CallConvMask = 0x0700;
 					const short CallConvWinapi = 0x0100;
 					const short CallConvCdecl = 0x0200;
 					const short CallConvStdcall = 0x0300;
 					const short CallConvThiscall = 0x0400;
 					const short CallConvFastcall = 0x0500;
 					// non-standard flags
 					const short BestFitOn = 0x0010;
 					const short BestFitOff = 0x0020;
 					const short CharMapErrorOn = 0x1000;
 					const short CharMapErrorOff = 0x2000;
 
 					Type type = module.universe.System_Runtime_InteropServices_DllImportAttribute;
 					ConstructorInfo constructor = type.GetConstructor(new Type[] { module.universe.System_String });
 					List<CustomAttributeNamedArgument> list = new List<CustomAttributeNamedArgument>();
 					int flags = module.ImplMap.records[i].MappingFlags;
 					string entryPoint = module.GetString(module.ImplMap.records[i].ImportName);
 					string dllName = module.GetString(module.ModuleRef.records[(module.ImplMap.records[i].ImportScope & 0xFFFFFF) - 1]);
 					System.Runtime.InteropServices.CharSet? charSet;
 					switch (flags & CharSetMask)
 					{
 						case CharSetAnsi
 							charSet = System.Runtime.InteropServices.CharSet.Ansi;
 							break;
 						case CharSetUnicode
 							charSet = System.Runtime.InteropServices.CharSet.Unicode;
 							break;
 						case CharSetAuto
 							charSet = System.Runtime.InteropServices.CharSet.Auto;
 							break;
 						case CharSetNotSpec
 						default
 							charSet = null;
 							break;
 					}
 					System.Runtime.InteropServices.CallingConvention callingConvention;
 					switch (flags & CallConvMask)
 					{
 						case CallConvCdecl
 							callingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl;
 							break;
 						case CallConvFastcall
 							callingConvention = System.Runtime.InteropServices.CallingConvention.FastCall;
 							break;
 						case CallConvStdcall
 							callingConvention = System.Runtime.InteropServices.CallingConvention.StdCall;
 							break;
 						case CallConvThiscall
 							callingConvention = System.Runtime.InteropServices.CallingConvention.ThisCall;
 							break;
 						case CallConvWinapi
 						default
 							callingConvention = System.Runtime.InteropServices.CallingConvention.Winapi;
 							break;
 					}
 					list.Add(MakeNamedArgument(type, "EntryPoint", entryPoint));
 					list.Add(MakeNamedArgument(type, "ExactSpelling", flags, NoMangle));
 					list.Add(MakeNamedArgument(type, "SetLastError", flags, SupportsLastError));
 					list.Add(MakeNamedArgument(type, "PreserveSig", (int)GetMethodImplementationFlags(), (int)MethodImplAttributes.PreserveSig));
 					list.Add(MakeNamedArgument(type, "CallingConvention", (int)callingConvention));
 					if (charSet.HasValue)
 					{
 						list.Add(MakeNamedArgument(type, "CharSet", (int)charSet.Value));
 					}
 					if ((flags & (BestFitOn | BestFitOff)) != 0)
 					{
 						list.Add(MakeNamedArgument(type, "BestFitMapping", flags, BestFitOn));
 					}
 					if ((flags & (CharMapErrorOn | CharMapErrorOff)) != 0)
 					{
 						list.Add(MakeNamedArgument(type, "ThrowOnUnmappableChar", flags, CharMapErrorOn));
 					}
 					attribs.Add(new CustomAttributeData(constructor, new object[] { dllName }, list));
 					return;
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="333" endline="337"><![CDATA[
 
 		private static CustomAttributeNamedArgument MakeNamedArgument(Type type, string field, string value)
 		{
 			return new CustomAttributeNamedArgument(type.GetField(field), new CustomAttributeTypedArgument(type.Module.universe.System_String, value));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="338" endline="342"><![CDATA[
 
 		private static CustomAttributeNamedArgument MakeNamedArgument(Type type, string field, int value)
 		{
 			return new CustomAttributeNamedArgument(type.GetField(field), new CustomAttributeTypedArgument(type.Module.universe.System_Int32, value));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="343" endline="347"><![CDATA[
 
 		private static CustomAttributeNamedArgument MakeNamedArgument(Type type, string field, int flags, int flagMask)
 		{
 			return new CustomAttributeNamedArgument(type.GetField(field), new CustomAttributeTypedArgument(type.Module.universe.System_Boolean, (flags & flagMask) != 0));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="348" endline="351"><![CDATA[
 
 		internal override MethodSignature MethodSignature
 		{
 			get { return lazyMethodSignature ?? (lazyMethodSignature = MethodSignature.ReadSig(module, module.GetBlob(module.MethodDef.records[index].Signature), this)); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="352" endline="357"><![CDATA[
 		}
 
 		internal override int ImportTo(Emit.ModuleBuilder module)
 		{
 			return module.ImportMethodOrField(declaringType, this.Name, this.MethodSignature);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="358" endline="371"><![CDATA[
 	}
 
 	sealed class ParameterInfoImpl 
 	{
 		private readonly MethodDefImpl method;
 		private readonly int position;
 		private readonly int index;
 
 		internal ParameterInfoImpl(MethodDefImpl method, int position, int index)
 		{
 			this.method = method;
 			this.position = position;
 			this.index = index;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="372" endline="375"><![CDATA[
 
 		public override string Name
 		{
 			get { return index == -1 ? null 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="376" endline="380"><![CDATA[
 		}
 
 		public override Type ParameterType
 		{
 			get { return position == -1 ? method.MethodSignature.GetReturnType(method) 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="381" endline="385"><![CDATA[
 		}
 
 		public override ParameterAttributes Attributes
 		{
 			get { return index == -1 ? ParameterAttributes.None 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="386" endline="390"><![CDATA[
 		}
 
 		public override int Position
 		{
 			get { return position; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="391" endline="437"><![CDATA[
 		}
 
 		public override object RawDefaultValue
 		{
 			get
 			{
 				if ((this.Attributes & ParameterAttributes.HasDefault) != 0)
 				{
 					return this.Module.Constant.GetRawConstantValue(this.Module, this.MetadataToken);
 				}
 				Universe universe = this.Module.universe;
 				if (this.ParameterType == universe.System_Decimal)
 				{
 					Type attr = universe.System_Runtime_CompilerServices_DecimalConstantAttribute;
 					if (attr != null)
 					{
 						foreach (CustomAttributeData cad in GetCustomAttributesData(attr))
 						{
 							IList<CustomAttributeTypedArgument> args = cad.ConstructorArguments;
 							if (args.Count == 5)
 							{
 								if (args[0].ArgumentType == universe.System_Byte
 									&& args[1].ArgumentType == universe.System_Byte
 									&& args[2].ArgumentType == universe.System_Int32
 									&& args[3].ArgumentType == universe.System_Int32
 									&& args[4].ArgumentType == universe.System_Int32)
 								{
 									return new Decimal((int)args[4].Value, (int)args[3].Value, (int)args[2].Value, (byte)args[1].Value != 0, (byte)args[0].Value);
 								}
 								else if (args[0].ArgumentType == universe.System_Byte
 									&& args[1].ArgumentType == universe.System_Byte
 									&& args[2].ArgumentType == universe.System_UInt32
 									&& args[3].ArgumentType == universe.System_UInt32
 									&& args[4].ArgumentType == universe.System_UInt32)
 								{
 									return new Decimal(unchecked((int)(uint)args[4].Value), unchecked((int)(uint)args[3].Value), unchecked((int)(uint)args[2].Value), (byte)args[1].Value != 0, (byte)args[0].Value);
 								}
 							}
 						}
 						foreach (CustomAttributeData cad in GetCustomAttributesData(attr))
 						{
 							IList<CustomAttributeTypedArgument> args = cad.ConstructorArguments;
 							if (args.Count == 5)
 							{
 								if (args[0].ArgumentType == universe.System_Byte
 									&& args[1].ArgumentType == universe.System_Byte
 									&& args[2].ArgumentType == universe.System_Int32
 									&& args[3].ArgumentType == universe.System_Int32
 									&& args[4].ArgumentType == universe.System_Int32)
 								{
 									return new Decimal((int)args[4].Value, (int)args[3].Value, (int)args[2].Value, (byte)args[1].Value != 0, (byte)args[0].Value);
 								}
 								else if (args[0].ArgumentType == universe.System_Byte
 									&& args[1].ArgumentType == universe.System_Byte
 									&& args[2].ArgumentType == universe.System_UInt32
 									&& args[3].ArgumentType == universe.System_UInt32
 									&& args[4].ArgumentType == universe.System_UInt32)
 								{
 									return new Decimal(unchecked((int)(uint)args[4].Value), unchecked((int)(uint)args[3].Value), unchecked((int)(uint)args[2].Value), (byte)args[1].Value != 0, (byte)args[0].Value);
 								}
 							}
 						}
 					}
 				}
 				if ((this.Attributes & ParameterAttributes.Optional) != 0)
 				{
 					return Missing.Value;
 				}
 				return null;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="438" endline="443"><![CDATA[
 		}
 
 		public override Type[] GetRequiredCustomModifiers()
 		{
 			return Util.Copy(position == -1 ? method.MethodSignature.GetReturnTypeRequiredCustomModifiers(method) 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="444" endline="448"><![CDATA[
 
 		public override Type[] GetOptionalCustomModifiers()
 		{
 			return Util.Copy(position == -1 ? method.MethodSignature.GetReturnTypeOptionalCustomModifiers(method) 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="449" endline="456"><![CDATA[
 
 		public override MemberInfo Member
 		{
 			get
 			{
 				// return the right ConstructorInfo wrapper
 				return method.Module.ResolveMethod(method.MetadataToken);
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="457" endline="466"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get
 			{
 				// for parameters that don't have a row in the Param table, we return 0x08000000 (because index is -1 in that case),
 				// just like .NET
 				return (ParamTable.Index << 24) + index + 1;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="467" endline="471"><![CDATA[
 		}
 
 		internal override Module Module
 		{
 			get { return method.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Method.cs" startline="472" endline="483"><![CDATA[
 		}
 
 		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			IList<CustomAttributeData> list = base.GetCustomAttributesData(attributeType);
 			if ((this.Attributes & ParameterAttributes.HasFieldMarshal) != 0
 				&& (attributeType == null || attributeType.IsAssignableFrom(this.Module.universe.System_Runtime_InteropServices_MarshalAsAttribute)))
 			{
 				list.Add(MarshalSpec.GetMarshalAsAttribute(this.Module, this.MetadataToken));
 			}
 			return list;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="39" endline="46"><![CDATA[
 		internal ParameterBuilder(ModuleBuilder moduleBuilder, int sequence, ParameterAttributes attribs, string name)
 		{
 			this.moduleBuilder = moduleBuilder;
 			this.flags = (short)attribs;
 			this.sequence = (short)sequence;
 			this.nameIndex = name == null ? 0 
 			this.name = name;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="47" endline="58"><![CDATA[
 
 		internal int PseudoToken
 		{
 			get
 			{
 				if (lazyPseudoToken == 0)
 				{
 					// we lazily create the token, because if we don't need it we don't want the token fixup cost
 					lazyPseudoToken = moduleBuilder.AllocPseudoToken();
 				}
 				return lazyPseudoToken;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="59" endline="63"><![CDATA[
 		}
 
 		public string Name
 		{
 			get { return name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="64" endline="68"><![CDATA[
 		}
 
 		public int Position
 		{
 			get { return sequence - 1; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="69" endline="73"><![CDATA[
 		}
 
 		public int Attributes
 		{
 			get { return flags; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="74" endline="78"><![CDATA[
 		}
 
 		public bool IsIn
 		{
 			get { return (flags & (short)ParameterAttributes.In) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="79" endline="83"><![CDATA[
 		}
 
 		public bool IsOut
 		{
 			get { return (flags & (short)ParameterAttributes.Out) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="84" endline="88"><![CDATA[
 		}
 
 		public bool IsOptional
 		{
 			get { return (flags & (short)ParameterAttributes.Optional) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="89" endline="94"><![CDATA[
 		}
 
 		public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
 		{
 			SetCustomAttribute(new CustomAttributeBuilder(con, binaryAttribute));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="95" endline="120"><![CDATA[
 
 		public void SetCustomAttribute(CustomAttributeBuilder customAttributeBuilder)
 		{
 			Universe u = moduleBuilder.universe;
 			if (customAttributeBuilder.Constructor.DeclaringType == u.System_Runtime_InteropServices_InAttribute)
 			{
 				flags |= (short)ParameterAttributes.In;
 			}
 			else if (customAttributeBuilder.Constructor.DeclaringType == u.System_Runtime_InteropServices_OutAttribute)
 			{
 				flags |= (short)ParameterAttributes.Out;
 			}
 			else if (customAttributeBuilder.Constructor.DeclaringType == u.System_Runtime_InteropServices_OptionalAttribute)
 			{
 				flags |= (short)ParameterAttributes.Optional;
 			}
 			else if (customAttributeBuilder.Constructor.DeclaringType == u.System_Runtime_InteropServices_MarshalAsAttribute)
 			{
 				MarshalSpec.SetMarshalAsAttribute(moduleBuilder, PseudoToken, customAttributeBuilder);
 				flags |= (short)ParameterAttributes.HasFieldMarshal;
 			}
 			else
 			{
 				moduleBuilder.SetCustomAttribute(PseudoToken, customAttributeBuilder);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="121" endline="126"><![CDATA[
 
 		public void SetConstant(object defaultValue)
 		{
 			flags |= (short)ParameterAttributes.HasDefault;
 			moduleBuilder.AddConstant(PseudoToken, defaultValue);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="127" endline="133"><![CDATA[
 
 		internal void WriteParamRecord(MetadataWriter mw)
 		{
 			mw.Write(flags);
 			mw.Write(sequence);
 			mw.WriteStringIndex(nameIndex);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ParameterBuilder.cs" startline="134" endline="141"><![CDATA[
 
 		internal void FixupToken(int parameterToken)
 		{
 			if (lazyPseudoToken != 0)
 			{
 				moduleBuilder.RegisterTokenFixup(lazyPseudoToken, parameterToken);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="44" endline="50"><![CDATA[
 		internal EventBuilder(TypeBuilder typeBuilder, string name, EventAttributes attributes, Type eventtype)
 		{
 			this.typeBuilder = typeBuilder;
 			this.name = name;
 			this.attributes = attributes;
 			this.eventtype = typeBuilder.ModuleBuilder.GetTypeTokenForMemberRef(eventtype);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="51" endline="55"><![CDATA[
 
 		public void SetAddOnMethod(MethodBuilder mdBuilder)
 		{
 			addOnMethod = mdBuilder;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="56" endline="60"><![CDATA[
 
 		public void SetRemoveOnMethod(MethodBuilder mdBuilder)
 		{
 			removeOnMethod = mdBuilder;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="61" endline="65"><![CDATA[
 
 		public void SetRaiseMethod(MethodBuilder mdBuilder)
 		{
 			fireMethod = mdBuilder;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="66" endline="74"><![CDATA[
 
 		public void AddOtherMethod(MethodBuilder mdBuilder)
 		{
 			if (otherMethods == null)
 			{
 				otherMethods = new List<MethodBuilder>();
 			}
 			otherMethods.Add(mdBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="75" endline="79"><![CDATA[
 
 		public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
 		{
 			SetCustomAttribute(new CustomAttributeBuilder(con, binaryAttribute));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="80" endline="96"><![CDATA[
 
 		public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
 		{
 			Universe u = typeBuilder.ModuleBuilder.universe;
 			if (customBuilder.Constructor.DeclaringType == u.System_Runtime_CompilerServices_SpecialNameAttribute)
 			{
 				attributes |= EventAttributes.SpecialName;
 			}
 			else
 			{
 				if (lazyPseudoToken == 0)
 				{
 					lazyPseudoToken = typeBuilder.ModuleBuilder.AllocPseudoToken();
 				}
 				typeBuilder.ModuleBuilder.SetCustomAttribute(lazyPseudoToken, customBuilder);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="97" endline="100"><![CDATA[
 
 		public override EventAttributes Attributes
 		{
 			get { return attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="101" endline="106"><![CDATA[
 		}
 
 		public override MethodInfo GetAddMethod(bool nonPublic)
 		{
 			return nonPublic || (addOnMethod != null && addOnMethod.IsPublic) ? addOnMethod 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="107" endline="111"><![CDATA[
 
 		public override MethodInfo GetRemoveMethod(bool nonPublic)
 		{
 			return nonPublic || (removeOnMethod != null && removeOnMethod.IsPublic) ? removeOnMethod 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="112" endline="116"><![CDATA[
 
 		public override MethodInfo GetRaiseMethod(bool nonPublic)
 		{
 			return nonPublic || (fireMethod != null && fireMethod.IsPublic) ? fireMethod 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="117" endline="132"><![CDATA[
 
 		public override MethodInfo[] GetOtherMethods(bool nonPublic)
 		{
 			List<MethodInfo> list = new List<MethodInfo>();
 			if (otherMethods != null)
 			{
 				foreach (MethodInfo method in otherMethods)
 				{
 					if (nonPublic || method.IsPublic)
 					{
 						list.Add(method);
 					}
 				}
 				foreach (MethodInfo method in otherMethods)
 				{
 					if (nonPublic || method.IsPublic)
 					{
 						list.Add(method);
 					}
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="133" endline="136"><![CDATA[
 
 		public override Type DeclaringType
 		{
 			get { return typeBuilder; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="137" endline="141"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="142" endline="146"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return typeBuilder.ModuleBuilder; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="147" endline="156"><![CDATA[
 		}
 
 		public EventToken GetEventToken()
 		{
 			if (lazyPseudoToken == 0)
 			{
 				lazyPseudoToken = typeBuilder.ModuleBuilder.AllocPseudoToken();
 			}
 			return new EventToken(lazyPseudoToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="157" endline="160"><![CDATA[
 
 		public override Type EventHandlerType
 		{
 			get { return typeBuilder.ModuleBuilder.ResolveType(eventtype); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="161" endline="195"><![CDATA[
 		}
 
 		internal void Bake()
 		{
 			EventTable.Record rec = new EventTable.Record();
 			rec.EventFlags = (short)attributes;
 			rec.Name = typeBuilder.ModuleBuilder.Strings.Add(name);
 			rec.EventType = eventtype;
 			int token = 0x14000000 | typeBuilder.ModuleBuilder.Event.AddRecord(rec);
 
 			if (lazyPseudoToken != 0)
 			{
 				typeBuilder.ModuleBuilder.RegisterTokenFixup(lazyPseudoToken, token);
 			}
 
 			if (addOnMethod != null)
 			{
 				AddMethodSemantics(MethodSemanticsTable.AddOn, addOnMethod.MetadataToken, token);
 			}
 			if (removeOnMethod != null)
 			{
 				AddMethodSemantics(MethodSemanticsTable.RemoveOn, removeOnMethod.MetadataToken, token);
 			}
 			if (fireMethod != null)
 			{
 				AddMethodSemantics(MethodSemanticsTable.Fire, fireMethod.MetadataToken, token);
 			}
 			if (otherMethods != null)
 			{
 				foreach (MethodBuilder method in otherMethods)
 				{
 					AddMethodSemantics(MethodSemanticsTable.Other, method.MetadataToken, token);
 				}
 				foreach (MethodBuilder method in otherMethods)
 				{
 					AddMethodSemantics(MethodSemanticsTable.Other, method.MetadataToken, token);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="196" endline="204"><![CDATA[
 
 		private void AddMethodSemantics(short semantics, int methodToken, int propertyToken)
 		{
 			MethodSemanticsTable.Record rec = new MethodSemanticsTable.Record();
 			rec.Semantics = semantics;
 			rec.Method = methodToken;
 			rec.Association = propertyToken;
 			typeBuilder.ModuleBuilder.MethodSemantics.AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="205" endline="225"><![CDATA[
 
 		internal override bool IsPublic
 		{
 			get
 			{
 				if ((addOnMethod != null && addOnMethod.IsPublic) || (removeOnMethod != null && removeOnMethod.IsPublic) || (fireMethod != null && fireMethod.IsPublic))
 				{
 					return true;
 				}
 				if (otherMethods != null)
 				{
 					foreach (MethodBuilder method in otherMethods)
 					{
 						if (method.IsPublic)
 						{
 							return true;
 						}
 					}
 					foreach (MethodBuilder method in otherMethods)
 					{
 						if (method.IsPublic)
 						{
 							return true;
 						}
 					}
 				}
 				return false;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EventBuilder.cs" startline="226" endline="247"><![CDATA[
 		}
 
 		internal override bool IsStatic
 		{
 			get
 			{
 				if ((addOnMethod != null && addOnMethod.IsStatic) || (removeOnMethod != null && removeOnMethod.IsStatic) || (fireMethod != null && fireMethod.IsStatic))
 				{
 					return true;
 				}
 				if (otherMethods != null)
 				{
 					foreach (MethodBuilder method in otherMethods)
 					{
 						if (method.IsStatic)
 						{
 							return true;
 						}
 					}
 					foreach (MethodBuilder method in otherMethods)
 					{
 						if (method.IsStatic)
 						{
 							return true;
 						}
 					}
 				}
 				return false;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="39" endline="45"><![CDATA[
 		internal GenericMethodInstance(Type declaringType, MethodInfo method, Type[] methodArgs)
 		{
 			System.Diagnostics.Debug.Assert(!(method is GenericMethodInstance));
 			this.declaringType = declaringType;
 			this.method = method;
 			this.methodArgs = methodArgs;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="46" endline="54"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			GenericMethodInstance other = obj as GenericMethodInstance;
 			return other != null
 				&& other.method.Equals(method)
 				&& other.declaringType.Equals(declaringType)
 				&& Util.ArrayEquals(other.methodArgs, methodArgs);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="55" endline="59"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return declaringType.GetHashCode() * 33 ^ method.GetHashCode() ^ Util.GetHashCode(methodArgs);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="60" endline="63"><![CDATA[
 
 		public override Type ReturnType
 		{
 			get { return method.ReturnType.BindTypeParameters(this); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="64" endline="68"><![CDATA[
 		}
 
 		public override ParameterInfo ReturnParameter
 		{
 			get { return new GenericParameterInfoImpl(this, method.ReturnParameter); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="69" endline="79"><![CDATA[
 		}
 
 		public override ParameterInfo[] GetParameters()
 		{
 			ParameterInfo[] parameters = method.GetParameters();
 			for (int i = 0; i < parameters.Length; i++)
 			{
 				parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
 			}
 			for (int i = 0; i < parameters.Length; i++)
 			{
 				parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
 			}
 			return parameters;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="80" endline="83"><![CDATA[
 
 		internal override int ParameterCount
 		{
 			get { return method.ParameterCount; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="84" endline="88"><![CDATA[
 		}
 
 		public override CallingConventions CallingConvention
 		{
 			get { return method.CallingConvention; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="89" endline="93"><![CDATA[
 		}
 
 		public override MethodAttributes Attributes
 		{
 			get { return method.Attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="94" endline="99"><![CDATA[
 		}
 
 		public override MethodImplAttributes GetMethodImplementationFlags()
 		{
 			return method.GetMethodImplementationFlags();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="100" endline="103"><![CDATA[
 
 		public override string Name
 		{
 			get { return method.Name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="104" endline="108"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return declaringType.IsModulePseudoType ? null 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="109" endline="113"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return method.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="114" endline="118"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return method.MetadataToken; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="119" endline="129"><![CDATA[
 		}
 
 		public override MethodBody GetMethodBody()
 		{
 			IKVM.Reflection.Reader.MethodDefImpl md = method as IKVM.Reflection.Reader.MethodDefImpl;
 			if (md != null)
 			{
 				return md.GetMethodBody(this);
 			}
 			throw new NotSupportedException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="130" endline="134"><![CDATA[
 
 		public override MethodInfo MakeGenericMethod(params Type[] typeArguments)
 		{
 			return new GenericMethodInstance(declaringType, method, typeArguments);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="135" endline="138"><![CDATA[
 
 		public override bool IsGenericMethod
 		{
 			get { return method.IsGenericMethod; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="139" endline="143"><![CDATA[
 		}
 
 		public override bool IsGenericMethodDefinition
 		{
 			get { return method.IsGenericMethodDefinition && methodArgs == null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="144" endline="165"><![CDATA[
 		}
 
 		public override bool ContainsGenericParameters
 		{
 			get
 			{
 				if (declaringType.ContainsGenericParameters)
 				{
 					return true;
 				}
 				if (methodArgs != null)
 				{
 					foreach (Type type in methodArgs)
 					{
 						if (type.ContainsGenericParameters)
 						{
 							return true;
 						}
 					}
 					foreach (Type type in methodArgs)
 					{
 						if (type.ContainsGenericParameters)
 						{
 							return true;
 						}
 					}
 				}
 				return false;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="166" endline="186"><![CDATA[
 		}
 
 		public override MethodInfo GetGenericMethodDefinition()
 		{
 			if (this.IsGenericMethod)
 			{
 				if (this.IsGenericMethodDefinition)
 				{
 					return this;
 				}
 				else if (declaringType.IsGenericType && !declaringType.IsGenericTypeDefinition)
 				{
 					return new GenericMethodInstance(declaringType, method, null);
 				}
 				else
 				{
 					return method;
 				}
 			}
 			throw new InvalidOperationException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="187" endline="198"><![CDATA[
 
 		public override Type[] GetGenericArguments()
 		{
 			if (methodArgs == null)
 			{
 				return method.GetGenericArguments();
 			}
 			else
 			{
 				return (Type[])methodArgs.Clone();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="199" endline="210"><![CDATA[
 
 		internal override Type GetGenericMethodArgument(int index)
 		{
 			if (methodArgs == null)
 			{
 				return method.GetGenericMethodArgument(index);
 			}
 			else
 			{
 				return methodArgs[index];
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="211" endline="215"><![CDATA[
 
 		internal override int GetGenericMethodArgumentCount()
 		{
 			return method.GetGenericMethodArgumentCount();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="216" endline="220"><![CDATA[
 
 		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			return method.GetCustomAttributesData(attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="221" endline="225"><![CDATA[
 
 		internal override MethodInfo GetMethodOnTypeDefinition()
 		{
 			return method.GetMethodOnTypeDefinition();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="226" endline="250"><![CDATA[
 
 		internal override int ImportTo(Emit.ModuleBuilder module)
 		{
 			if (methodArgs == null)
 			{
 				return module.ImportMethodOrField(declaringType, method.Name, method.MethodSignature);
 			}
 			else
 			{
 				Writer.ByteBuffer spec = new Writer.ByteBuffer(10);
 				Signature.WriteMethodSpec(module, spec, methodArgs);
 				Metadata.MethodSpecTable.Record rec = new Metadata.MethodSpecTable.Record();
 				Emit.MethodBuilder mb = method as Emit.MethodBuilder;
 				if (mb != null && mb.ModuleBuilder == module && !declaringType.IsGenericType)
 				{
 					rec.Method = mb.MetadataToken;
 				}
 				else
 				{
 					rec.Method = module.ImportMember(GetGenericMethodDefinition());
 				}
 				rec.Instantiation = module.Blobs.Add(spec);
 				return 0x2B000000 | module.MethodSpec.FindOrAddRecord(rec);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="251" endline="254"><![CDATA[
 
 		internal override MethodSignature MethodSignature
 		{
 			get { return lazyMethodSignature ?? (lazyMethodSignature = method.MethodSignature.Bind(declaringType, methodArgs)); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="255" endline="261"><![CDATA[
 		}
 
 		internal override MethodBase BindTypeParameters(Type type)
 		{
 			System.Diagnostics.Debug.Assert(methodArgs == null);
 			return new GenericMethodInstance(declaringType.BindTypeParameters(type), method, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="32" endline="32"><![CDATA[
 			get { return MemberTypes.Field; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="33" endline="42"><![CDATA[
 		}
 
 		public abstract FieldAttributes Attributes { get; }
 		public abstract void __GetDataFromRVA(byte[] data, int offset, int length);
 		public abstract Object GetRawConstantValue();
 		internal abstract FieldSignature FieldSignature { get; }
 
 		public Type FieldType
 		{
 			get { return this.FieldSignature.FieldType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="43" endline="48"><![CDATA[
 		}
 
 		public Type[] GetOptionalCustomModifiers()
 		{
 			return this.FieldSignature.GetOptionalCustomModifiers();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="49" endline="53"><![CDATA[
 
 		public Type[] GetRequiredCustomModifiers()
 		{
 			return this.FieldSignature.GetRequiredCustomModifiers();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="54" endline="57"><![CDATA[
 
 		public bool IsStatic
 		{
 			get { return (Attributes & FieldAttributes.Static) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="58" endline="62"><![CDATA[
 		}
 
 		public bool IsLiteral
 		{
 			get { return (Attributes & FieldAttributes.Literal) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="63" endline="67"><![CDATA[
 		}
 
 		public bool IsInitOnly
 		{
 			get { return (Attributes & FieldAttributes.InitOnly) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="68" endline="72"><![CDATA[
 		}
 
 		public bool IsNotSerialized
 		{
 			get { return (Attributes & FieldAttributes.NotSerialized) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="73" endline="77"><![CDATA[
 		}
 
 		public bool IsSpecialName
 		{
 			get { return (Attributes & FieldAttributes.SpecialName) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="78" endline="82"><![CDATA[
 		}
 
 		public bool IsPublic
 		{
 			get { return (Attributes & FieldAttributes.FieldAccessMask) == FieldAttributes.Public; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="83" endline="87"><![CDATA[
 		}
 
 		public bool IsPrivate
 		{
 			get { return (Attributes & FieldAttributes.FieldAccessMask) == FieldAttributes.Private; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="88" endline="92"><![CDATA[
 		}
 
 		public bool IsFamily
 		{
 			get { return (Attributes & FieldAttributes.FieldAccessMask) == FieldAttributes.Family; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="93" endline="97"><![CDATA[
 		}
 
 		public bool IsFamilyOrAssembly
 		{
 			get { return (Attributes & FieldAttributes.FieldAccessMask) == FieldAttributes.FamORAssem; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="98" endline="102"><![CDATA[
 		}
 
 		public bool IsAssembly
 		{
 			get { return (Attributes & FieldAttributes.FieldAccessMask) == FieldAttributes.Family; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="103" endline="107"><![CDATA[
 		}
 
 		public bool IsFamilyAndAssembly
 		{
 			get { return (Attributes & FieldAttributes.FieldAccessMask) == FieldAttributes.FamANDAssem; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="108" endline="112"><![CDATA[
 		}
 
 		public bool IsPinvokeImpl
 		{
 			get { return (Attributes & FieldAttributes.PinvokeImpl) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="113" endline="120"><![CDATA[
 		}
 
 		internal abstract int ImportTo(Emit.ModuleBuilder module);
 
 		internal virtual FieldInfo BindTypeParameters(Type type)
 		{
 			return new GenericFieldInstance(this.DeclaringType.BindTypeParameters(type), this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="269" endline="273"><![CDATA[
 		internal GenericFieldInstance(Type declaringType, FieldInfo field)
 		{
 			this.declaringType = declaringType;
 			this.field = field;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="274" endline="279"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			GenericFieldInstance other = obj as GenericFieldInstance;
 			return other != null && other.declaringType.Equals(declaringType) && other.field.Equals(field);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="280" endline="284"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return declaringType.GetHashCode() * 3 ^ field.GetHashCode();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="285" endline="288"><![CDATA[
 
 		public override FieldAttributes Attributes
 		{
 			get { return field.Attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="289" endline="293"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return field.Name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="294" endline="298"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return declaringType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="299" endline="303"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return declaringType.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="304" endline="308"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return field.MetadataToken; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="309" endline="314"><![CDATA[
 		}
 
 		public override object GetRawConstantValue()
 		{
 			return field.GetRawConstantValue();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="315" endline="319"><![CDATA[
 
 		public override void __GetDataFromRVA(byte[] data, int offset, int length)
 		{
 			field.__GetDataFromRVA(data, offset, length);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="320" endline="324"><![CDATA[
 
 		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			return field.GetCustomAttributesData(attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="325" endline="328"><![CDATA[
 
 		internal override FieldSignature FieldSignature
 		{
 			get { return field.FieldSignature.ExpandTypeParameters(declaringType); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="329" endline="334"><![CDATA[
 		}
 
 		internal override int ImportTo(Emit.ModuleBuilder module)
 		{
 			return module.ImportMethodOrField(declaringType, field.Name, field.FieldSignature);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="335" endline="339"><![CDATA[
 
 		internal override FieldInfo BindTypeParameters(Type type)
 		{
 			return new GenericFieldInstance(declaringType.BindTypeParameters(type), field);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="340" endline="351"><![CDATA[
 	}
 
 	sealed class GenericParameterInfoImpl 
 	{
 		private readonly GenericMethodInstance method;
 		private readonly ParameterInfo parameterInfo;
 
 		internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
 		{
 			this.method = method;
 			this.parameterInfo = parameterInfo;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="352" endline="355"><![CDATA[
 
 		public override string Name
 		{
 			get { return parameterInfo.Name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="356" endline="360"><![CDATA[
 		}
 
 		public override Type ParameterType
 		{
 			get { return parameterInfo.ParameterType.BindTypeParameters(method); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="361" endline="365"><![CDATA[
 		}
 
 		public override ParameterAttributes Attributes
 		{
 			get { return parameterInfo.Attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="366" endline="370"><![CDATA[
 		}
 
 		public override int Position
 		{
 			get { return parameterInfo.Position; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="371" endline="375"><![CDATA[
 		}
 
 		public override object RawDefaultValue
 		{
 			get { return parameterInfo.RawDefaultValue; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="376" endline="383"><![CDATA[
 		}
 
 		public override Type[] GetOptionalCustomModifiers()
 		{
 			Type[] modifiers = parameterInfo.GetOptionalCustomModifiers();
 			Type.InplaceBindTypeParameters(method, modifiers);
 			return modifiers;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="384" endline="390"><![CDATA[
 
 		public override Type[] GetRequiredCustomModifiers()
 		{
 			Type[] modifiers = parameterInfo.GetRequiredCustomModifiers();
 			Type.InplaceBindTypeParameters(method, modifiers);
 			return modifiers;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="391" endline="394"><![CDATA[
 
 		public override MemberInfo Member
 		{
 			get { return method; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="395" endline="399"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return parameterInfo.MetadataToken; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="400" endline="404"><![CDATA[
 		}
 
 		internal override Module Module
 		{
 			get { return method.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="32" endline="32"><![CDATA[
 			get { return MemberTypes.Property; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="33" endline="116"><![CDATA[
 		}
 
 		public abstract PropertyAttributes Attributes { get; }
 		public abstract bool CanRead { get; }
 		public abstract bool CanWrite { get; }
 		public abstract MethodInfo GetGetMethod(bool nonPublic);
 		public abstract MethodInfo GetSetMethod(bool nonPublic);
 		public abstract MethodInfo[] GetAccessors(bool nonPublic);
 		public abstract object GetRawConstantValue();
 		internal abstract bool IsPublic { get; }
 		internal abstract bool IsStatic { get; }
 		internal abstract PropertySignature PropertySignature { get; }
 
 		private sealed class ParameterInfoImpl 
 		{
 			private readonly PropertyInfo property;
 			private readonly int parameter;
 
 			internal ParameterInfoImpl(PropertyInfo property, int parameter)
 			{
 				this.property = property;
 				this.parameter = parameter;
 			}
 
 			public override string Name
 			{
 				get { return null; }
 			}
 
 			public override Type ParameterType
 			{
 				get { return property.PropertySignature.GetParameter(parameter); }
 			}
 
 			public override ParameterAttributes Attributes
 			{
 				get { return ParameterAttributes.None; }
 			}
 
 			public override int Position
 			{
 				get { return parameter; }
 			}
 
 			public override object RawDefaultValue
 			{
 				get { throw new InvalidOperationException(); }
 			}
 
 			public override Type[] GetOptionalCustomModifiers()
 			{
 				return property.PropertySignature.GetOptionalCustomModifiers(parameter);
 			}
 
 			public override Type[] GetRequiredCustomModifiers()
 			{
 				return property.PropertySignature.GetRequiredCustomModifiers(parameter);
 			}
 
 			public override MemberInfo Member
 			{
 				get { return property; }
 			}
 
 			public override int MetadataToken
 			{
 				get { return 0x08000000; }
 			}
 
 			internal override Module Module
 			{
 				get { return property.Module; }
 			}
 		}
 
 		public ParameterInfo[] GetIndexParameters()
 		{
 			ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
 			for (int i = 0; i < parameters.Length; i++)
 			{
 				parameters[i] = new ParameterInfoImpl(this, i);
 			}
 			for (int i = 0; i < parameters.Length; i++)
 			{
 				parameters[i] = new ParameterInfoImpl(this, i);
 			}
 			return parameters;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="117" endline="120"><![CDATA[
 
 		public Type PropertyType
 		{
 			get { return this.PropertySignature.PropertyType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="121" endline="126"><![CDATA[
 		}
 
 		public Type[] GetRequiredCustomModifiers()
 		{
 			return this.PropertySignature.GetRequiredCustomModifiers();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="127" endline="131"><![CDATA[
 
 		public Type[] GetOptionalCustomModifiers()
 		{
 			return this.PropertySignature.GetOptionalCustomModifiers();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="132" endline="135"><![CDATA[
 
 		public bool IsSpecialName
 		{
 			get { return (Attributes & PropertyAttributes.SpecialName) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="136" endline="141"><![CDATA[
 		}
 
 		public MethodInfo GetGetMethod()
 		{
 			return GetGetMethod(false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="142" endline="146"><![CDATA[
 
 		public MethodInfo GetSetMethod()
 		{
 			return GetSetMethod(false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="147" endline="151"><![CDATA[
 
 		public MethodInfo[] GetAccessors()
 		{
 			return GetAccessors(false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="152" endline="156"><![CDATA[
 
 		internal virtual PropertyInfo BindTypeParameters(Type type)
 		{
 			return new GenericPropertyInfo(this.DeclaringType.BindTypeParameters(type), this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertyInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="413" endline="417"><![CDATA[
 		internal GenericPropertyInfo(Type typeInstance, PropertyInfo property)
 		{
 			this.typeInstance = typeInstance;
 			this.property = property;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="418" endline="423"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			GenericPropertyInfo other = obj as GenericPropertyInfo;
 			return other != null && other.typeInstance == typeInstance && other.property == property;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="424" endline="428"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return typeInstance.GetHashCode() * 537 + property.GetHashCode();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="429" endline="432"><![CDATA[
 
 		public override PropertyAttributes Attributes
 		{
 			get { return property.Attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="433" endline="437"><![CDATA[
 		}
 
 		public override bool CanRead
 		{
 			get { return property.CanRead; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="438" endline="442"><![CDATA[
 		}
 
 		public override bool CanWrite
 		{
 			get { return property.CanWrite; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="443" endline="452"><![CDATA[
 		}
 
 		private MethodInfo Wrap(MethodInfo method)
 		{
 			if (method == null)
 			{
 				return null;
 			}
 			return new GenericMethodInstance(typeInstance, method, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="453" endline="457"><![CDATA[
 
 		public override MethodInfo GetGetMethod(bool nonPublic)
 		{
 			return Wrap(property.GetGetMethod(nonPublic));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="458" endline="462"><![CDATA[
 
 		public override MethodInfo GetSetMethod(bool nonPublic)
 		{
 			return Wrap(property.GetSetMethod(nonPublic));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="463" endline="472"><![CDATA[
 
 		public override MethodInfo[] GetAccessors(bool nonPublic)
 		{
 			MethodInfo[] accessors = property.GetAccessors(nonPublic);
 			for (int i = 0; i < accessors.Length; i++)
 			{
 				accessors[i] = Wrap(accessors[i]);
 			}
 			for (int i = 0; i < accessors.Length; i++)
 			{
 				accessors[i] = Wrap(accessors[i]);
 			}
 			return accessors;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="473" endline="477"><![CDATA[
 
 		public override object GetRawConstantValue()
 		{
 			return property.GetRawConstantValue();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="478" endline="481"><![CDATA[
 
 		internal override bool IsPublic
 		{
 			get { return property.IsPublic; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="482" endline="486"><![CDATA[
 		}
 
 		internal override bool IsStatic
 		{
 			get { return property.IsStatic; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="487" endline="491"><![CDATA[
 		}
 
 		internal override PropertySignature PropertySignature
 		{
 			get { return property.PropertySignature.ExpandTypeParameters(typeInstance); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="492" endline="496"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return property.Name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="497" endline="501"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return typeInstance; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="502" endline="506"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return typeInstance.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="507" endline="511"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return property.MetadataToken; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="512" endline="517"><![CDATA[
 		}
 
 		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			return property.GetCustomAttributesData(attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="518" endline="522"><![CDATA[
 
 		internal override PropertyInfo BindTypeParameters(Type type)
 		{
 			return new GenericPropertyInfo(typeInstance.BindTypeParameters(type), property);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="523" endline="534"><![CDATA[
 	}
 
 	sealed class GenericEventInfo 
 	{
 		private readonly Type typeInstance;
 		private readonly EventInfo eventInfo;
 
 		internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
 		{
 			this.typeInstance = typeInstance;
 			this.eventInfo = eventInfo;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="535" endline="540"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			GenericEventInfo other = obj as GenericEventInfo;
 			return other != null && other.typeInstance == typeInstance && other.eventInfo == eventInfo;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="541" endline="545"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return typeInstance.GetHashCode() * 777 + eventInfo.GetHashCode();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="546" endline="549"><![CDATA[
 
 		public override EventAttributes Attributes
 		{
 			get { return eventInfo.Attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="550" endline="559"><![CDATA[
 		}
 
 		private MethodInfo Wrap(MethodInfo method)
 		{
 			if (method == null)
 			{
 				return null;
 			}
 			return new GenericMethodInstance(typeInstance, method, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="560" endline="564"><![CDATA[
 
 		public override MethodInfo GetAddMethod(bool nonPublic)
 		{
 			return Wrap(eventInfo.GetAddMethod(nonPublic));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="565" endline="569"><![CDATA[
 
 		public override MethodInfo GetRaiseMethod(bool nonPublic)
 		{
 			return Wrap(eventInfo.GetRaiseMethod(nonPublic));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="570" endline="574"><![CDATA[
 
 		public override MethodInfo GetRemoveMethod(bool nonPublic)
 		{
 			return Wrap(eventInfo.GetRemoveMethod(nonPublic));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="575" endline="584"><![CDATA[
 
 		public override MethodInfo[] GetOtherMethods(bool nonPublic)
 		{
 			MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
 			for (int i = 0; i < others.Length; i++)
 			{
 				others[i] = Wrap(others[i]);
 			}
 			for (int i = 0; i < others.Length; i++)
 			{
 				others[i] = Wrap(others[i]);
 			}
 			return others;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="585" endline="588"><![CDATA[
 
 		public override Type EventHandlerType
 		{
 			get { return eventInfo.EventHandlerType.BindTypeParameters(typeInstance); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="589" endline="593"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return eventInfo.Name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="594" endline="598"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return typeInstance; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="599" endline="603"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return eventInfo.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="604" endline="608"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return eventInfo.MetadataToken; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="609" endline="614"><![CDATA[
 		}
 
 		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			return eventInfo.GetCustomAttributesData(attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="615" endline="619"><![CDATA[
 
 		internal override EventInfo BindTypeParameters(Type type)
 		{
 			return new GenericEventInfo(typeInstance.BindTypeParameters(type), eventInfo);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="620" endline="623"><![CDATA[
 
 		internal override bool IsPublic
 		{
 			get { return eventInfo.IsPublic; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\GenericWrappers.cs" startline="624" endline="628"><![CDATA[
 		}
 
 		internal override bool IsStatic
 		{
 			get { return eventInfo.IsStatic; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\typemanager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\literal.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\doc.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\convert.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="42" endline="44"><![CDATA[
 		{
 			root[new OrdinalOrName(RT_VERSION)][new OrdinalOrName(1)][new OrdinalOrName(0)].Data = versionInfo;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="45" endline="88"><![CDATA[
 
 		internal void AddIcon(byte[] iconFile)
 		{
 			BinaryReader br = new BinaryReader(new MemoryStream(iconFile));
 			ushort idReserved = br.ReadUInt16();
 			ushort idType = br.ReadUInt16();
 			ushort idCount = br.ReadUInt16();
 			if (idReserved != 0 || idType != 1)
 			{
 				throw new ArgumentException("The supplied byte array is not a valid .ico file.");
 			}
 			ByteBuffer group = new ByteBuffer(6 + 14 * idCount);
 			group.Write(idReserved);
 			group.Write(idType);
 			group.Write(idCount);
 			for (int i = 0; i < idCount; i++)
 			{
 				byte bWidth = br.ReadByte();
 				byte bHeight = br.ReadByte();
 				byte bColorCount = br.ReadByte();
 				byte bReserved = br.ReadByte();
 				ushort wPlanes = br.ReadUInt16();
 				ushort wBitCount = br.ReadUInt16();
 				uint dwBytesInRes = br.ReadUInt32();
 				uint dwImageOffset = br.ReadUInt32();
 
 				// we start the icon IDs at 2
 				ushort id = (ushort)(2 + i);
 
 				group.Write(bWidth);
 				group.Write(bHeight);
 				group.Write(bColorCount);
 				group.Write(bReserved);
 				group.Write(wPlanes);
 				group.Write(wBitCount);
 				group.Write(dwBytesInRes);
 				group.Write(id);
 
 				byte[] icon = new byte[dwBytesInRes];
 				Buffer.BlockCopy(iconFile, (int)dwImageOffset, icon, 0, icon.Length);
 				root[new OrdinalOrName(RT_ICON)][new OrdinalOrName(id)][new OrdinalOrName(0)].Data = ByteBuffer.Wrap(icon);
 			}
 			for (int i = 0; i < idCount; i++)
 			{
 				byte bWidth = br.ReadByte();
 				byte bHeight = br.ReadByte();
 				byte bColorCount = br.ReadByte();
 				byte bReserved = br.ReadByte();
 				ushort wPlanes = br.ReadUInt16();
 				ushort wBitCount = br.ReadUInt16();
 				uint dwBytesInRes = br.ReadUInt32();
 				uint dwImageOffset = br.ReadUInt32();
 
 				// we start the icon IDs at 2
 				ushort id = (ushort)(2 + i);
 
 				group.Write(bWidth);
 				group.Write(bHeight);
 				group.Write(bColorCount);
 				group.Write(bReserved);
 				group.Write(wPlanes);
 				group.Write(wBitCount);
 				group.Write(dwBytesInRes);
 				group.Write(id);
 
 				byte[] icon = new byte[dwBytesInRes];
 				Buffer.BlockCopy(iconFile, (int)dwImageOffset, icon, 0, icon.Length);
 				root[new OrdinalOrName(RT_ICON)][new OrdinalOrName(id)][new OrdinalOrName(0)].Data = ByteBuffer.Wrap(icon);
 			}
 			root[new OrdinalOrName(RT_GROUP_ICON)][new OrdinalOrName(32512)][new OrdinalOrName(0)].Data = group;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="89" endline="102"><![CDATA[
 
 		internal void ExtractResources(byte[] buf)
 		{
 			ByteReader br = new ByteReader(buf, 0, buf.Length);
 			while (br.Length >= 32)
 			{
 				br.Align(4);
 				RESOURCEHEADER hdr = new RESOURCEHEADER(br);
 				if (hdr.DataSize != 0)
 				{
 					root[hdr.TYPE][hdr.NAME][new OrdinalOrName(hdr.LanguageId)].Data = ByteBuffer.Wrap(br.ReadBytes(hdr.DataSize));
 				}
 			}
 			while (br.Length >= 32)
 			{
 				br.Align(4);
 				RESOURCEHEADER hdr = new RESOURCEHEADER(br);
 				if (hdr.DataSize != 0)
 				{
 					root[hdr.TYPE][hdr.NAME][new OrdinalOrName(hdr.LanguageId)].Data = ByteBuffer.Wrap(br.ReadBytes(hdr.DataSize));
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="103" endline="114"><![CDATA[
 
 		internal void Finish()
 		{
 			if (bb != null)
 			{
 				throw new InvalidOperationException();
 			}
 			bb = new ByteBuffer(1024);
 			linkOffsets = new List<int>();
 			root.Write(bb, linkOffsets);
 			root = null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="115" endline="118"><![CDATA[
 
 		internal int Length
 		{
 			get { return bb.Length; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="119" endline="129"><![CDATA[
 		}
 
 		internal void Write(MetadataWriter mw, uint rva)
 		{
 			foreach (int offset in linkOffsets)
 			{
 				bb.Position = offset;
 				bb.Write(bb.GetInt32AtCurrentPosition() + (int)rva);
 			}
 			foreach (int offset in linkOffsets)
 			{
 				bb.Position = offset;
 				bb.Write(bb.GetInt32AtCurrentPosition() + (int)rva);
 			}
 			mw.Write(bb);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="37" endline="37"><![CDATA[
 		private ResourceDirectoryEntry root = new ResourceDirectoryEntry(new OrdinalOrName("root"));
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="38" endline="142"><![CDATA[
 		private ByteBuffer bb;
 		private List<int> linkOffsets;
 
 		internal void AddVersionInfo(ByteBuffer versionInfo)
 		{
 			root[new OrdinalOrName(RT_VERSION)][new OrdinalOrName(1)][new OrdinalOrName(0)].Data = versionInfo;
 		}
 
 		internal void AddIcon(byte[] iconFile)
 		{
 			BinaryReader br = new BinaryReader(new MemoryStream(iconFile));
 			ushort idReserved = br.ReadUInt16();
 			ushort idType = br.ReadUInt16();
 			ushort idCount = br.ReadUInt16();
 			if (idReserved != 0 || idType != 1)
 			{
 				throw new ArgumentException("The supplied byte array is not a valid .ico file.");
 			}
 			ByteBuffer group = new ByteBuffer(6 + 14 * idCount);
 			group.Write(idReserved);
 			group.Write(idType);
 			group.Write(idCount);
 			for (int i = 0; i < idCount; i++)
 			{
 				byte bWidth = br.ReadByte();
 				byte bHeight = br.ReadByte();
 				byte bColorCount = br.ReadByte();
 				byte bReserved = br.ReadByte();
 				ushort wPlanes = br.ReadUInt16();
 				ushort wBitCount = br.ReadUInt16();
 				uint dwBytesInRes = br.ReadUInt32();
 				uint dwImageOffset = br.ReadUInt32();
 
 				// we start the icon IDs at 2
 				ushort id = (ushort)(2 + i);
 
 				group.Write(bWidth);
 				group.Write(bHeight);
 				group.Write(bColorCount);
 				group.Write(bReserved);
 				group.Write(wPlanes);
 				group.Write(wBitCount);
 				group.Write(dwBytesInRes);
 				group.Write(id);
 
 				byte[] icon = new byte[dwBytesInRes];
 				Buffer.BlockCopy(iconFile, (int)dwImageOffset, icon, 0, icon.Length);
 				root[new OrdinalOrName(RT_ICON)][new OrdinalOrName(id)][new OrdinalOrName(0)].Data = ByteBuffer.Wrap(icon);
 			}
 			root[new OrdinalOrName(RT_GROUP_ICON)][new OrdinalOrName(32512)][new OrdinalOrName(0)].Data = group;
 		}
 
 		internal void ExtractResources(byte[] buf)
 		{
 			ByteReader br = new ByteReader(buf, 0, buf.Length);
 			while (br.Length >= 32)
 			{
 				br.Align(4);
 				RESOURCEHEADER hdr = new RESOURCEHEADER(br);
 				if (hdr.DataSize != 0)
 				{
 					root[hdr.TYPE][hdr.NAME][new OrdinalOrName(hdr.LanguageId)].Data = ByteBuffer.Wrap(br.ReadBytes(hdr.DataSize));
 				}
 			}
 		}
 
 		internal void Finish()
 		{
 			if (bb != null)
 			{
 				throw new InvalidOperationException();
 			}
 			bb = new ByteBuffer(1024);
 			linkOffsets = new List<int>();
 			root.Write(bb, linkOffsets);
 			root = null;
 		}
 
 		internal int Length
 		{
 			get { return bb.Length; }
 		}
 
 		internal void Write(MetadataWriter mw, uint rva)
 		{
 			foreach (int offset in linkOffsets)
 			{
 				bb.Position = offset;
 				bb.Write(bb.GetInt32AtCurrentPosition() + (int)rva);
 			}
 			mw.Write(bb);
 		}
 	}
 
 	sealed class ResourceDirectoryEntry
 	{
 		internal readonly OrdinalOrName OrdinalOrName;
 		internal ByteBuffer Data;
 		private int namedEntries;
 		private readonly List<ResourceDirectoryEntry> entries = new List<ResourceDirectoryEntry>();
 
 		internal ResourceDirectoryEntry(OrdinalOrName id)
 		{
 			this.OrdinalOrName = id;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="143" endline="165"><![CDATA[
 
 		internal ResourceDirectoryEntry this[OrdinalOrName id]
 		{
 			get
 			{
 				foreach (ResourceDirectoryEntry entry in entries)
 				{
 					if (entry.OrdinalOrName.Ordinal == id.Ordinal && entry.OrdinalOrName.Name == id.Name)
 					{
 						return entry;
 					}
 				}
 				foreach (ResourceDirectoryEntry entry in entries)
 				{
 					if (entry.OrdinalOrName.Ordinal == id.Ordinal && entry.OrdinalOrName.Name == id.Name)
 					{
 						return entry;
 					}
 				}
 				ResourceDirectoryEntry newEntry = new ResourceDirectoryEntry(id);
 				if (id.Name == null)
 				{
 					entries.Add(newEntry);
 				}
 				else
 				{
 					entries.Insert(namedEntries++, newEntry);
 				}
 				return newEntry;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="166" endline="185"><![CDATA[
 		}
 
 		private int DirectoryLength
 		{
 			get
 			{
 				if (Data != null)
 				{
 					return 16;
 				}
 				else
 				{
 					int length = 16 + entries.Count * 8;
 					foreach (ResourceDirectoryEntry entry in entries)
 					{
 						length += entry.DirectoryLength;
 					}
 					foreach (ResourceDirectoryEntry entry in entries)
 					{
 						length += entry.DirectoryLength;
 					}
 					return length;
 				}
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="186" endline="208"><![CDATA[
 		}
 
 		internal void Write(ByteBuffer bb, List<int> linkOffsets)
 		{
 			if (entries.Count != 0)
 			{
 				int stringTableOffset = this.DirectoryLength;
 				Dictionary<string, int> strings = new Dictionary<string, int>();
 				ByteBuffer stringTable = new ByteBuffer(16);
 				int offset = 16 + entries.Count * 8;
 				for (int pass = 0; pass < 3; pass++)
 				{
 					Write(bb, pass, 0, ref offset, strings, ref stringTableOffset, stringTable);
 				}
 				for (int pass = 0; pass < 3; pass++)
 				{
 					Write(bb, pass, 0, ref offset, strings, ref stringTableOffset, stringTable);
 				}
 				// the pecoff spec says that the string table is between the directory entries and the data entries,
 				// but the windows linker puts them after the data entries, so we do too.
 				stringTable.Align(4);
 				offset += stringTable.Length;
 				WriteResourceDataEntries(bb, linkOffsets, ref offset);
 				bb.Write(stringTable);
 				WriteData(bb);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="209" endline="228"><![CDATA[
 
 		private void WriteResourceDataEntries(ByteBuffer bb, List<int> linkOffsets, ref int offset)
 		{
 			foreach (ResourceDirectoryEntry entry in entries)
 			{
 				if (entry.Data != null)
 				{
 					linkOffsets.Add(bb.Position);
 					bb.Write(offset);
 					bb.Write(entry.Data.Length);
 					bb.Write(0);	// code page
 					bb.Write(0);	// reserved
 					offset += (entry.Data.Length + 3) & ~3;
 				}
 				else
 				{
 					entry.WriteResourceDataEntries(bb, linkOffsets, ref offset);
 				}
 			}
 			foreach (ResourceDirectoryEntry entry in entries)
 			{
 				if (entry.Data != null)
 				{
 					linkOffsets.Add(bb.Position);
 					bb.Write(offset);
 					bb.Write(entry.Data.Length);
 					bb.Write(0);	// code page
 					bb.Write(0);	// reserved
 					offset += (entry.Data.Length + 3) & ~3;
 				}
 				else
 				{
 					entry.WriteResourceDataEntries(bb, linkOffsets, ref offset);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="229" endline="244"><![CDATA[
 
 		private void WriteData(ByteBuffer bb)
 		{
 			foreach (ResourceDirectoryEntry entry in entries)
 			{
 				if (entry.Data != null)
 				{
 					bb.Write(entry.Data);
 					bb.Align(4);
 				}
 				else
 				{
 					entry.WriteData(bb);
 				}
 			}
 			foreach (ResourceDirectoryEntry entry in entries)
 			{
 				if (entry.Data != null)
 				{
 					bb.Write(entry.Data);
 					bb.Align(4);
 				}
 				else
 				{
 					entry.WriteData(bb);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="245" endline="268"><![CDATA[
 
 		private void Write(ByteBuffer bb, int writeDepth, int currentDepth, ref int offset, Dictionary<string, int> strings, ref int stringTableOffset, ByteBuffer stringTable)
 		{
 			if (currentDepth == writeDepth)
 			{
 				// directory header
 				bb.Write(0);	// Characteristics
 				bb.Write(0);	// Time/Date Stamp
 				bb.Write(0);	// Version (Major / Minor)
 				bb.Write((ushort)namedEntries);
 				bb.Write((ushort)(entries.Count - namedEntries));
 			}
 			foreach (ResourceDirectoryEntry entry in entries)
 			{
 				if (currentDepth == writeDepth)
 				{
 					entry.WriteEntry(bb, ref offset, strings, ref stringTableOffset, stringTable);
 				}
 				else
 				{
 					entry.Write(bb, writeDepth, currentDepth + 1, ref offset, strings, ref stringTableOffset, stringTable);
 				}
 			}
 			foreach (ResourceDirectoryEntry entry in entries)
 			{
 				if (currentDepth == writeDepth)
 				{
 					entry.WriteEntry(bb, ref offset, strings, ref stringTableOffset, stringTable);
 				}
 				else
 				{
 					entry.Write(bb, writeDepth, currentDepth + 1, ref offset, strings, ref stringTableOffset, stringTable);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="269" endline="282"><![CDATA[
 
 		private void WriteEntry(ByteBuffer bb, ref int offset, Dictionary<string, int> strings, ref int stringTableOffset, ByteBuffer stringTable)
 		{
 			WriteNameOrOrdinal(bb, OrdinalOrName, strings, ref stringTableOffset, stringTable);
 			if (Data == null)
 			{
 				bb.Write(0x80000000U | (uint)offset);
 			}
 			else
 			{
 				bb.Write(offset);
 			}
 			offset += 16 + entries.Count * 8;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="283" endline="306"><![CDATA[
 
 		private static void WriteNameOrOrdinal(ByteBuffer bb, OrdinalOrName id, Dictionary<string, int> strings, ref int stringTableOffset, ByteBuffer stringTable)
 		{
 			if (id.Name == null)
 			{
 				bb.Write((int)id.Ordinal);
 			}
 			else
 			{
 				int stringOffset;
 				if (!strings.TryGetValue(id.Name, out stringOffset))
 				{
 					stringOffset = stringTableOffset;
 					strings.Add(id.Name, stringOffset);
 					stringTableOffset += id.Name.Length * 2 + 2;
 					stringTable.Write((ushort)id.Name.Length);
 					foreach (char c in id.Name)
 					{
 						stringTable.Write((short)c);
 					}
 					foreach (char c in id.Name)
 					{
 						stringTable.Write((short)c);
 					}
 				}
 				bb.Write(0x80000000U | (uint)stringOffset);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="307" endline="318"><![CDATA[
 	}
 
 	struct OrdinalOrName
 	{
 		internal readonly ushort Ordinal;
 		internal readonly string Name;
 
 		internal OrdinalOrName(ushort value)
 		{
 			Ordinal = value;
 			Name = null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="319" endline="324"><![CDATA[
 
 		internal OrdinalOrName(string value)
 		{
 			Ordinal = 0xFFFF;
 			Name = value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="325" endline="351"><![CDATA[
 	}
 
 	struct RESOURCEHEADER
 	{
 		internal int DataSize;
 		internal int HeaderSize;
 		internal OrdinalOrName TYPE;
 		internal OrdinalOrName NAME;
 		internal int DataVersion;
 		internal ushort MemoryFlags;
 		internal ushort LanguageId;
 		internal int Version;
 		internal int Characteristics;
 
 		internal RESOURCEHEADER(ByteReader br)
 		{
 			DataSize = br.ReadInt32();
 			HeaderSize = br.ReadInt32();
 			TYPE = ReadOrdinalOrName(br);
 			NAME = ReadOrdinalOrName(br);
 			br.Align(4);
 			DataVersion = br.ReadInt32();
 			MemoryFlags = br.ReadUInt16();
 			LanguageId = br.ReadUInt16();
 			Version = br.ReadInt32();
 			Characteristics = br.ReadInt32();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\ResourceSection.cs" startline="352" endline="370"><![CDATA[
 
 		private static OrdinalOrName ReadOrdinalOrName(ByteReader br)
 		{
 			char c = br.ReadChar();
 			if (c == 0xFFFF)
 			{
 				return new OrdinalOrName(br.ReadUInt16());
 			}
 			else
 			{
 				StringBuilder sb = new StringBuilder();
 				while (c != 0)
 				{
 					sb.Append(c);
 					c = br.ReadChar();
 				}
 				while (c != 0)
 				{
 					sb.Append(c);
 					c = br.ReadChar();
 				}
 				return new OrdinalOrName(sb.ToString());
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="41" endline="48"><![CDATA[
 		private MethodSignature(Type returnType, Type[] parameterTypes, Type[][][] modifiers, CallingConventions callingConvention, int genericParamCount)
 		{
 			this.returnType = returnType;
 			this.parameterTypes = parameterTypes;
 			this.modifiers = modifiers;
 			this.callingConvention = callingConvention;
 			this.genericParamCount = genericParamCount;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="49" endline="59"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			MethodSignature other = obj as MethodSignature;
 			return other != null
 				&& other.callingConvention == callingConvention
 				&& other.genericParamCount == genericParamCount
 				&& other.returnType.Equals(returnType)
 				&& Util.ArrayEquals(other.parameterTypes, parameterTypes)
 				&& Util.ArrayEquals(other.modifiers, modifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="60" endline="67"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return genericParamCount ^ 77 * (int)callingConvention
 				^ 3 * returnType.GetHashCode()
 				^ Util.GetHashCode(parameterTypes) * 5
 				^ Util.GetHashCode(modifiers) * 55;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="68" endline="147"><![CDATA[
 
 		private sealed class UnboundGenericMethodContext 
 		{
 			private readonly IGenericContext original;
 
 			internal UnboundGenericMethodContext(IGenericContext original)
 			{
 				this.original = original;
 			}
 
 			public Type GetGenericTypeArgument(int index)
 			{
 				return original.GetGenericTypeArgument(index);
 			}
 
 			public Type GetGenericMethodArgument(int index)
 			{
 				return UnboundGenericMethodParameter.Make(index);
 			}
 		}
 
 		internal static MethodSignature ReadSig(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			CallingConventions callingConvention;
 			int genericParamCount;
 			Type returnType;
 			Type[] parameterTypes;
 			byte flags = br.ReadByte();
 			switch (flags & 7)
 			{
 				case DEFAULT
 					callingConvention = CallingConventions.Standard;
 					break;
 				case VARARG
 					callingConvention = CallingConventions.VarArgs;
 					break;
 				default
 					throw new BadImageFormatException();
 			}
 			if ((flags & HASTHIS) != 0)
 			{
 				callingConvention |= CallingConventions.HasThis;
 			}
 			if ((flags & EXPLICITTHIS) != 0)
 			{
 				callingConvention |= CallingConventions.ExplicitThis;
 			}
 			genericParamCount = 0;
 			if ((flags & GENERIC) != 0)
 			{
 				genericParamCount = br.ReadCompressedInt();
 				context = new UnboundGenericMethodContext(context);
 			}
 			int paramCount = br.ReadCompressedInt();
 			Type[][][] modifiers = null;
 			Type[] optionalCustomModifiers;
 			Type[] requiredCustomModifiers;
 			ReadCustomModifiers(module, br, context, out requiredCustomModifiers, out optionalCustomModifiers);
 			returnType = ReadRetType(module, br, context);
 			parameterTypes = new Type[paramCount];
 			PackedCustomModifiers.SetModifiers(ref modifiers, 0, 0, optionalCustomModifiers, paramCount + 1);
 			PackedCustomModifiers.SetModifiers(ref modifiers, 0, 1, requiredCustomModifiers, paramCount + 1);
 			for (int i = 0; i < parameterTypes.Length; i++)
 			{
 				if ((callingConvention & CallingConventions.VarArgs) != 0 && br.PeekByte() == SENTINEL)
 				{
 					Array.Resize(ref parameterTypes, i);
 					if (modifiers != null)
 					{
 						Array.Resize(ref modifiers, i + 1);
 					}
 					break;
 				}
 				ReadCustomModifiers(module, br, context, out requiredCustomModifiers, out optionalCustomModifiers);
 				PackedCustomModifiers.SetModifiers(ref modifiers, i + 1, 0, optionalCustomModifiers, paramCount + 1);
 				PackedCustomModifiers.SetModifiers(ref modifiers, i + 1, 1, requiredCustomModifiers, paramCount + 1);
 				parameterTypes[i] = ReadParam(module, br, context);
 			}
 			for (int i = 0; i < parameterTypes.Length; i++)
 			{
 				if ((callingConvention & CallingConventions.VarArgs) != 0 && br.PeekByte() == SENTINEL)
 				{
 					Array.Resize(ref parameterTypes, i);
 					if (modifiers != null)
 					{
 						Array.Resize(ref modifiers, i + 1);
 					}
 					break;
 				}
 				ReadCustomModifiers(module, br, context, out requiredCustomModifiers, out optionalCustomModifiers);
 				PackedCustomModifiers.SetModifiers(ref modifiers, i + 1, 0, optionalCustomModifiers, paramCount + 1);
 				PackedCustomModifiers.SetModifiers(ref modifiers, i + 1, 1, requiredCustomModifiers, paramCount + 1);
 				parameterTypes[i] = ReadParam(module, br, context);
 			}
 			return new MethodSignature(returnType, parameterTypes, modifiers, callingConvention, genericParamCount);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="148" endline="213"><![CDATA[
 
 		internal static __StandAloneMethodSig ReadStandAloneMethodSig(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			CallingConventions callingConvention = 0;
 			System.Runtime.InteropServices.CallingConvention unmanagedCallingConvention = 0;
 			bool unmanaged;
 			byte flags = br.ReadByte();
 			switch (flags & 7)
 			{
 				case DEFAULT
 					callingConvention = CallingConventions.Standard;
 					unmanaged = false;
 					break;
 				case 0x01
 					unmanagedCallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl;
 					unmanaged = true;
 					break;
 				case 0x02
 					unmanagedCallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall;
 					unmanaged = true;
 					break;
 				case 0x03
 					unmanagedCallingConvention = System.Runtime.InteropServices.CallingConvention.ThisCall;
 					unmanaged = true;
 					break;
 				case 0x04
 					unmanagedCallingConvention = System.Runtime.InteropServices.CallingConvention.FastCall;
 					unmanaged = true;
 					break;
 				case VARARG
 					callingConvention = CallingConventions.VarArgs;
 					unmanaged = false;
 					break;
 				default
 					throw new BadImageFormatException();
 			}
 			if ((flags & HASTHIS) != 0)
 			{
 				callingConvention |= CallingConventions.HasThis;
 			}
 			if ((flags & EXPLICITTHIS) != 0)
 			{
 				callingConvention |= CallingConventions.ExplicitThis;
 			}
 			if ((flags & GENERIC) != 0)
 			{
 				throw new BadImageFormatException();
 			}
 			int paramCount = br.ReadCompressedInt();
 			SkipCustomModifiers(br);
 			Type returnType = ReadRetType(module, br, context);
 			List<Type> parameterTypes = new List<Type>();
 			List<Type> optionalParameterTypes = new List<Type>();
 			List<Type> curr = parameterTypes;
 			for (int i = 0; i < paramCount; i++)
 			{
 				if (br.PeekByte() == SENTINEL)
 				{
 					br.ReadByte();
 					curr = optionalParameterTypes;
 				}
 				SkipCustomModifiers(br);
 				curr.Add(ReadParam(module, br, context));
 			}
 			for (int i = 0; i < paramCount; i++)
 			{
 				if (br.PeekByte() == SENTINEL)
 				{
 					br.ReadByte();
 					curr = optionalParameterTypes;
 				}
 				SkipCustomModifiers(br);
 				curr.Add(ReadParam(module, br, context));
 			}
 			return new __StandAloneMethodSig(unmanaged, unmanagedCallingConvention, callingConvention, returnType, parameterTypes.ToArray(), optionalParameterTypes.ToArray());
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="214" endline="218"><![CDATA[
 
 		internal int GetParameterCount()
 		{
 			return parameterTypes.Length;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="219" endline="223"><![CDATA[
 
 		internal Type GetParameterType(int index)
 		{
 			return parameterTypes[index];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="224" endline="228"><![CDATA[
 
 		internal Type GetReturnType(IGenericBinder binder)
 		{
 			return returnType.BindTypeParameters(binder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="229" endline="233"><![CDATA[
 
 		internal Type[] GetReturnTypeOptionalCustomModifiers(IGenericBinder binder)
 		{
 			return BindTypeParameters(binder, modifiers, 0, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="234" endline="238"><![CDATA[
 
 		internal Type[] GetReturnTypeRequiredCustomModifiers(IGenericBinder binder)
 		{
 			return BindTypeParameters(binder, modifiers, 0, 1);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="239" endline="243"><![CDATA[
 
 		internal Type GetParameterType(IGenericBinder binder, int index)
 		{
 			return parameterTypes[index].BindTypeParameters(binder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="244" endline="248"><![CDATA[
 
 		internal Type[] GetParameterOptionalCustomModifiers(IGenericBinder binder, int index)
 		{
 			return BindTypeParameters(binder, modifiers, index + 1, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="249" endline="253"><![CDATA[
 
 		internal Type[] GetParameterRequiredCustomModifiers(IGenericBinder binder, int index)
 		{
 			return BindTypeParameters(binder, modifiers, index + 1, 1);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="254" endline="257"><![CDATA[
 
 		internal CallingConventions CallingConvention
 		{
 			get { return callingConvention; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="258" endline="293"><![CDATA[
 		}
 
 		private sealed class Binder 
 		{
 			private readonly Type declaringType;
 			private readonly Type[] methodArgs;
 
 			internal Binder(Type declaringType, Type[] methodArgs)
 			{
 				this.declaringType = declaringType;
 				this.methodArgs = methodArgs;
 			}
 
 			public Type BindTypeParameter(Type type)
 			{
 				return declaringType.GetGenericTypeArgument(type.GenericParameterPosition);
 			}
 
 			public Type BindMethodParameter(Type type)
 			{
 				if (methodArgs == null)
 				{
 					return type;
 				}
 				return methodArgs[type.GenericParameterPosition];
 			}
 		}
 
 		internal MethodSignature Bind(Type type, Type[] methodArgs)
 		{
 			Binder binder = new Binder(type, methodArgs);
 			return new MethodSignature(returnType.BindTypeParameters(binder),
 				BindTypeParameters(binder, parameterTypes),
 				BindTypeParameters(binder, modifiers),
 				callingConvention, genericParamCount);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="294" endline="323"><![CDATA[
 
 		private sealed class Unbinder 
 		{
 			internal static readonly Unbinder Instance = new Unbinder();
 
 			private Unbinder()
 			{
 			}
 
 			public Type BindTypeParameter(Type type)
 			{
 				return type;
 			}
 
 			public Type BindMethodParameter(Type type)
 			{
 				return UnboundGenericMethodParameter.Make(type.GenericParameterPosition);
 			}
 		}
 
 		internal static MethodSignature MakeFromBuilder(Type returnType, Type[] parameterTypes, Type[][][] modifiers, CallingConventions callingConvention, int genericParamCount)
 		{
 			if (genericParamCount > 0)
 			{
 				returnType = returnType.BindTypeParameters(Unbinder.Instance);
 				parameterTypes = BindTypeParameters(Unbinder.Instance, parameterTypes);
 				modifiers = BindTypeParameters(Unbinder.Instance, modifiers);
 			}
 			return new MethodSignature(returnType, parameterTypes, modifiers, callingConvention, genericParamCount);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="324" endline="351"><![CDATA[
 
 		internal bool MatchParameterTypes(Type[] types)
 		{
 			if (types == parameterTypes)
 			{
 				return true;
 			}
 			if (types == null)
 			{
 				return parameterTypes.Length == 0;
 			}
 			if (parameterTypes == null)
 			{
 				return types.Length == 0;
 			}
 			if (types.Length == parameterTypes.Length)
 			{
 				for (int i = 0; i < types.Length; i++)
 				{
 					if (!Util.TypeEquals(types[i], parameterTypes[i]))
 					{
 						return false;
 					}
 				}
 				for (int i = 0; i < types.Length; i++)
 				{
 					if (!Util.TypeEquals(types[i], parameterTypes[i]))
 					{
 						return false;
 					}
 				}
 				return true;
 			}
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="352" endline="356"><![CDATA[
 
 		internal override void WriteSig(ModuleBuilder module, ByteBuffer bb)
 		{
 			WriteSigImpl(module, bb, parameterTypes.Length);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="357" endline="369"><![CDATA[
 
 		internal void WriteMethodRefSig(ModuleBuilder module, ByteBuffer bb, Type[] optionalParameterTypes)
 		{
 			WriteSigImpl(module, bb, parameterTypes.Length + optionalParameterTypes.Length);
 			if (optionalParameterTypes.Length > 0)
 			{
 				bb.Write(SENTINEL);
 				foreach (Type type in optionalParameterTypes)
 				{
 					WriteType(module, bb, type);
 				}
 				foreach (Type type in optionalParameterTypes)
 				{
 					WriteType(module, bb, type);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="370" endline="418"><![CDATA[
 
 		private void WriteSigImpl(ModuleBuilder module, ByteBuffer bb, int parameterCount)
 		{
 			byte first;
 			if ((callingConvention & CallingConventions.Any) == CallingConventions.VarArgs)
 			{
 				Debug.Assert(genericParamCount == 0);
 				first = VARARG;
 			}
 			else if (genericParamCount > 0)
 			{
 				first = GENERIC;
 			}
 			else
 			{
 				first = DEFAULT;
 			}
 			if ((callingConvention & CallingConventions.HasThis) != 0)
 			{
 				first |= HASTHIS;
 			}
 			if ((callingConvention & CallingConventions.ExplicitThis) != 0)
 			{
 				first |= EXPLICITTHIS;
 			}
 			bb.Write(first);
 			if (genericParamCount > 0)
 			{
 				bb.WriteCompressedInt(genericParamCount);
 			}
 			bb.WriteCompressedInt(parameterCount);
 			// RetType
 			if (modifiers != null && modifiers[0] != null)
 			{
 				WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, modifiers[0][0]);
 				WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, modifiers[0][1]);
 			}
 			WriteType(module, bb, returnType);
 			// Param
 			for (int i = 0; i < parameterTypes.Length; i++)
 			{
 				if (modifiers != null && modifiers[i + 1] != null)
 				{
 					WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, modifiers[i + 1][0]);
 					WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, modifiers[i + 1][1]);
 				}
 				WriteType(module, bb, parameterTypes[i]);
 			}
 			for (int i = 0; i < parameterTypes.Length; i++)
 			{
 				if (modifiers != null && modifiers[i + 1] != null)
 				{
 					WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, modifiers[i + 1][0]);
 					WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, modifiers[i + 1][1]);
 				}
 				WriteType(module, bb, parameterTypes[i]);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="419" endline="446"><![CDATA[
 	}
 
 	static class PackedCustomModifiers
 	{
 		// modifiers are packed in a very specific way (and required to be so, otherwise equality checks will fail)
 		// For modifiers[x][y][z]
 		//  x = parameter index, 0 = return type, 1 = first parameters, ...
 		//  y = 0 = optional custom modifiers, 1 = required custom modifiers
 		//  z = the custom modifiers
 		// At any level the reference can be null (and *must* be null, if there are no modifiers below that level).
 		// Empty arrays are not allowed at any level.
 
 		// this can be used to "add" elements to the modifiers array (and the elements are assumed to already be in normalized form)
 		internal static void SetModifiers(ref Type[][][] modifiers, int index, int optOrReq, Type[] add, int count)
 		{
 			if (add != null)
 			{
 				if (modifiers == null)
 				{
 					modifiers = new Type[count][][];
 				}
 				if (modifiers[index] == null)
 				{
 					modifiers[index] = new Type[2][];
 				}
 				modifiers[index][optOrReq] = add;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="447" endline="460"><![CDATA[
 
 		// this method make a copy of the incoming arrays (where necessary) and returns a normalized modifiers array
 		internal static Type[][][] CreateFromExternal(Type[] returnOptional, Type[] returnRequired, Type[][] parameterOptional, Type[][] parameterRequired, int parameterCount)
 		{
 			Type[][][] modifiers = null;
 			SetModifiers(ref modifiers, 0, 0, NormalizeAndCopy(returnOptional), parameterCount + 1);
 			SetModifiers(ref modifiers, 0, 1, NormalizeAndCopy(returnRequired), parameterCount + 1);
 			for (int i = 0; i < parameterCount; i++)
 			{
 				SetModifiers(ref modifiers, i + 1, 0, NormalizeAndCopy(parameterOptional, i), parameterCount + 1);
 				SetModifiers(ref modifiers, i + 1, 1, NormalizeAndCopy(parameterRequired, i), parameterCount + 1);
 			}
 			for (int i = 0; i < parameterCount; i++)
 			{
 				SetModifiers(ref modifiers, i + 1, 0, NormalizeAndCopy(parameterOptional, i), parameterCount + 1);
 				SetModifiers(ref modifiers, i + 1, 1, NormalizeAndCopy(parameterRequired, i), parameterCount + 1);
 			}
 			return modifiers;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="461" endline="481"><![CDATA[
 
 		private static Type[] NormalizeAndCopy(Type[] array)
 		{
 			if (array == null || array.Length == 0)
 			{
 				return null;
 			}
 			Type[] copy = null;
 			for (int i = 0; i < array.Length; i++)
 			{
 				if (array[i] != null)
 				{
 					if (copy == null)
 					{
 						copy = new Type[array.Length];
 					}
 					copy[i] = array[i];
 				}
 			}
 			for (int i = 0; i < array.Length; i++)
 			{
 				if (array[i] != null)
 				{
 					if (copy == null)
 					{
 						copy = new Type[array.Length];
 					}
 					copy[i] = array[i];
 				}
 			}
 			return copy;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\MethodSignature.cs" startline="482" endline="490"><![CDATA[
 
 		private static Type[] NormalizeAndCopy(Type[][] array, int index)
 		{
 			if (array == null || array.Length == 0)
 			{
 				return null;
 			}
 			return NormalizeAndCopy(array[index]);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\statement.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\reflection.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\nullable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\constant.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\assembly.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="44" endline="46"><![CDATA[
 		private CryptoConvert () 
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="47" endline="51"><![CDATA[
 
 		static private int ToInt32LE (byte [] bytes, int offset)
 		{
 			return (bytes [offset+3] << 24) | (bytes [offset+2] << 16) | (bytes [offset+1] << 8) | bytes [offset];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="52" endline="56"><![CDATA[
 
 		static private uint ToUInt32LE (byte [] bytes, int offset)
 		{
 			return (uint)((bytes [offset+3] << 24) | (bytes [offset+2] << 16) | (bytes [offset+1] << 8) | bytes [offset]);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="57" endline="66"><![CDATA[
 
 		static private byte [] GetBytesLE (int val)
 		{
 			return new byte [] { 
 				(byte) (val & 0xff), 
 				(byte) ((val >> 8) & 0xff), 
 				(byte) ((val >> 16) & 0xff), 
 				(byte) ((val >> 24) & 0xff)
 			};
                 }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="67" endline="78"><![CDATA[
 
 		static private byte[] Trim (byte[] array) 
 		{
 			for (int i=0; i < array.Length; i++) {
 				if (array [i] != 0x00) {
 					byte[] result = new byte [array.Length - i];
 					Buffer.BlockCopy (array, i, result, 0, result.Length);
 					return result;
 				}
 			}
 			for (int i=0; i < array.Length; i++) {
 				if (array [i] != 0x00) {
 					byte[] result = new byte [array.Length - i];
 					Buffer.BlockCopy (array, i, result, 0, result.Length);
 					return result;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="79" endline="86"><![CDATA[
 
 		// convert the key from PRIVATEKEYBLOB to RSA
 		// http
 		// e.g. SNK files, PVK files
 		static public RSA FromCapiPrivateKeyBlob (byte[] blob) 
 		{
 			return FromCapiPrivateKeyBlob (blob, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="87" endline="195"><![CDATA[
 
 		static public RSA FromCapiPrivateKeyBlob (byte[] blob, int offset) 
 		{
 			if (blob == null)
 				throw new ArgumentNullException ("blob");
 			if (offset >= blob.Length)
 				throw new ArgumentException ("blob is too small.");
 
 			RSAParameters rsap = new RSAParameters ();
 			try {
 				if ((blob [offset]   != 0x07) ||				// PRIVATEKEYBLOB (0x07)
 				    (blob [offset+1] != 0x02) ||				// Version (0x02)
 				    (blob [offset+2] != 0x00) ||				// Reserved (word)
 				    (blob [offset+3] != 0x00) ||
 				    (ToUInt32LE (blob, offset+8) != 0x32415352))	// DWORD magic = RSA2
 					throw new CryptographicException ("Invalid blob header");
 				
 				// ALGID (CALG_RSA_SIGN, CALG_RSA_KEYX, ...)
 				// int algId = ToInt32LE (blob, offset+4);
 
 				// DWORD bitlen
 				int bitLen = ToInt32LE (blob, offset+12);
 
 				// DWORD public exponent
 				byte[] exp = new byte [4];
 				Buffer.BlockCopy (blob, offset+16, exp, 0, 4);
 				Array.Reverse (exp);
 				rsap.Exponent = Trim (exp);
 			
 				int pos = offset+20;
 				// BYTE modulus[rsapubkey.bitlen/8];
 				int byteLen = (bitLen >> 3);
 				rsap.Modulus = new byte [byteLen];
 				Buffer.BlockCopy (blob, pos, rsap.Modulus, 0, byteLen);
 				Array.Reverse (rsap.Modulus);
 				pos += byteLen;
 
 				// BYTE prime1[rsapubkey.bitlen/16];
 				int byteHalfLen = (byteLen >> 1);
 				rsap.P = new byte [byteHalfLen];
 				Buffer.BlockCopy (blob, pos, rsap.P, 0, byteHalfLen);
 				Array.Reverse (rsap.P);
 				pos += byteHalfLen;
 
 				// BYTE prime2[rsapubkey.bitlen/16];
 				rsap.Q = new byte [byteHalfLen];
 				Buffer.BlockCopy (blob, pos, rsap.Q, 0, byteHalfLen);
 				Array.Reverse (rsap.Q);
 				pos += byteHalfLen;
 
 				// BYTE exponent1[rsapubkey.bitlen/16];
 				rsap.DP = new byte [byteHalfLen];
 				Buffer.BlockCopy (blob, pos, rsap.DP, 0, byteHalfLen);
 				Array.Reverse (rsap.DP);
 				pos += byteHalfLen;
 
 				// BYTE exponent2[rsapubkey.bitlen/16];
 				rsap.DQ = new byte [byteHalfLen];
 				Buffer.BlockCopy (blob, pos, rsap.DQ, 0, byteHalfLen);
 				Array.Reverse (rsap.DQ);
 				pos += byteHalfLen;
 
 				// BYTE coefficient[rsapubkey.bitlen/16];
 				rsap.InverseQ = new byte [byteHalfLen];
 				Buffer.BlockCopy (blob, pos, rsap.InverseQ, 0, byteHalfLen);
 				Array.Reverse (rsap.InverseQ);
 				pos += byteHalfLen;
 
 				// ok, this is hackish but CryptoAPI support it so...
 				// note
 				// http
 				rsap.D = new byte [byteLen]; // must be allocated
 				if (pos + byteLen + offset <= blob.Length) {
 					// BYTE privateExponent[rsapubkey.bitlen/8];
 					Buffer.BlockCopy (blob, pos, rsap.D, 0, byteLen);
 					Array.Reverse (rsap.D);
 				}
 			}
 			catch (Exception e) {
 				throw new CryptographicException ("Invalid blob.", e);
 			}
 
 #if NET_2_1
 			RSA rsa = RSA.Create ();
 			rsa.ImportParameters (rsap);
 #else
 			RSA rsa = null;
 			try {
 				rsa = RSA.Create ();
 				rsa.ImportParameters (rsap);
 			}
 			catch (CryptographicException ce) {
 				// this may cause problem when this code is run under
 				// the SYSTEM identity on Windows (e.g. ASP.NET). See
 				// http
 				try {
 					CspParameters csp = new CspParameters ();
 					csp.Flags = CspProviderFlags.UseMachineKeyStore;
 					rsa = new RSACryptoServiceProvider (csp);
 					rsa.ImportParameters (rsap);
 				}
 				catch {
 					// rethrow original, not the later, exception if this fails
 					throw ce;
 				}
 			}
 #endif
 			return rsa;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="196" endline="200"><![CDATA[
 
 		static public DSA FromCapiPrivateKeyBlobDSA (byte[] blob)
 		{
 			return FromCapiPrivateKeyBlobDSA (blob, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="201" endline="280"><![CDATA[
 
 		static public DSA FromCapiPrivateKeyBlobDSA (byte[] blob, int offset)
 		{
 			if (blob == null)
 				throw new ArgumentNullException ("blob");
 			if (offset >= blob.Length)
 				throw new ArgumentException ("blob is too small.");
 
 			DSAParameters dsap = new DSAParameters ();
 			try {
 				if ((blob [offset] != 0x07) ||				// PRIVATEKEYBLOB (0x07)
 				    (blob [offset + 1] != 0x02) ||			// Version (0x02)
 				    (blob [offset + 2] != 0x00) ||			// Reserved (word)
 				    (blob [offset + 3] != 0x00) ||
 				    (ToUInt32LE (blob, offset + 8) != 0x32535344))	// DWORD magic
 					throw new CryptographicException ("Invalid blob header");
 
 				int bitlen = ToInt32LE (blob, offset + 12);
 				int bytelen = bitlen >> 3;
 				int pos = offset + 16;
 
 				dsap.P = new byte [bytelen];
 				Buffer.BlockCopy (blob, pos, dsap.P, 0, bytelen);
 				Array.Reverse (dsap.P);
 				pos += bytelen;
 
 				dsap.Q = new byte [20];
 				Buffer.BlockCopy (blob, pos, dsap.Q, 0, 20);
 				Array.Reverse (dsap.Q);
 				pos += 20;
 
 				dsap.G = new byte [bytelen];
 				Buffer.BlockCopy (blob, pos, dsap.G, 0, bytelen);
 				Array.Reverse (dsap.G);
 				pos += bytelen;
 
 				dsap.X = new byte [20];
 				Buffer.BlockCopy (blob, pos, dsap.X, 0, 20);
 				Array.Reverse (dsap.X);
 				pos += 20;
 
 				dsap.Counter = ToInt32LE (blob, pos);
 				pos += 4;
 
 				dsap.Seed = new byte [20];
 				Buffer.BlockCopy (blob, pos, dsap.Seed, 0, 20);
 				Array.Reverse (dsap.Seed);
 				pos += 20;
 			}
 			catch (Exception e) {
 				throw new CryptographicException ("Invalid blob.", e);
 			}
 
 #if NET_2_1
 			DSA dsa = (DSA)DSA.Create ();
 			dsa.ImportParameters (dsap);
 #else
 			DSA dsa = null;
 			try {
 				dsa = (DSA)DSA.Create ();
 				dsa.ImportParameters (dsap);
 			}
 			catch (CryptographicException ce) {
 				// this may cause problem when this code is run under
 				// the SYSTEM identity on Windows (e.g. ASP.NET). See
 				// http
 				try {
 					CspParameters csp = new CspParameters ();
 					csp.Flags = CspProviderFlags.UseMachineKeyStore;
 					dsa = new DSACryptoServiceProvider (csp);
 					dsa.ImportParameters (dsap);
 				}
 				catch {
 					// rethrow original, not the later, exception if this fails
 					throw ce;
 				}
 			}
 #endif
 			return dsa;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="281" endline="352"><![CDATA[
 
 		static public byte[] ToCapiPrivateKeyBlob (RSA rsa) 
 		{
 			RSAParameters p = rsa.ExportParameters (true);
 			int keyLength = p.Modulus.Length; // in bytes
 			byte[] blob = new byte [20 + (keyLength << 2) + (keyLength >> 1)];
 
 			blob [0] = 0x07;	// Type - PRIVATEKEYBLOB (0x07)
 			blob [1] = 0x02;	// Version - Always CUR_BLOB_VERSION (0x02)
 			// [2], [3]		// RESERVED - Always 0
 			blob [5] = 0x24;	// ALGID - Always 00 24 00 00 (for CALG_RSA_SIGN)
 			blob [8] = 0x52;	// Magic - RSA2 (ASCII in hex)
 			blob [9] = 0x53;
 			blob [10] = 0x41;
 			blob [11] = 0x32;
 
 			byte[] bitlen = GetBytesLE (keyLength << 3);
 			blob [12] = bitlen [0];	// bitlen
 			blob [13] = bitlen [1];	
 			blob [14] = bitlen [2];	
 			blob [15] = bitlen [3];
 
 			// public exponent (DWORD)
 			int pos = 16;
 			int n = p.Exponent.Length;
 			while (n > 0)
 				blob [pos++] = p.Exponent [--n];
 			while (n > 0)
 				blob [pos++] = p.Exponent [--n];
 			// modulus
 			pos = 20;
 			byte[] part = p.Modulus;
 			int len = part.Length;
 			Array.Reverse (part, 0, len);
 			Buffer.BlockCopy (part, 0, blob, pos, len);
 			pos += len;
 			// private key
 			part = p.P;
 			len = part.Length;
 			Array.Reverse (part, 0, len);
 			Buffer.BlockCopy (part, 0, blob, pos, len);
 			pos += len;
 
 			part = p.Q;
 			len = part.Length;
 			Array.Reverse (part, 0, len);
 			Buffer.BlockCopy (part, 0, blob, pos, len);
 			pos += len;
 
 			part = p.DP;
 			len = part.Length;
 			Array.Reverse (part, 0, len);
 			Buffer.BlockCopy (part, 0, blob, pos, len);
 			pos += len;
 
 			part = p.DQ;
 			len = part.Length;
 			Array.Reverse (part, 0, len);
 			Buffer.BlockCopy (part, 0, blob, pos, len);
 			pos += len;
 
 			part = p.InverseQ;
 			len = part.Length;
 			Array.Reverse (part, 0, len);
 			Buffer.BlockCopy (part, 0, blob, pos, len);
 			pos += len;
 
 			part = p.D;
 			len = part.Length;
 			Array.Reverse (part, 0, len);
 			Buffer.BlockCopy (part, 0, blob, pos, len);
 
 			return blob;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="353" endline="406"><![CDATA[
 
 		static public byte[] ToCapiPrivateKeyBlob (DSA dsa)
 		{
 			DSAParameters p = dsa.ExportParameters (true);
 			int keyLength = p.P.Length; // in bytes
 
 			// header + P + Q + G + X + count + seed
 			byte[] blob = new byte [16 + keyLength + 20 + keyLength + 20 + 4 + 20];
 
 			blob [0] = 0x07;	// Type - PRIVATEKEYBLOB (0x07)
 			blob [1] = 0x02;	// Version - Always CUR_BLOB_VERSION (0x02)
 			// [2], [3]		// RESERVED - Always 0
 			blob [5] = 0x22;	// ALGID
 			blob [8] = 0x44;	// Magic
 			blob [9] = 0x53;
 			blob [10] = 0x53;
 			blob [11] = 0x32;
 
 			byte[] bitlen = GetBytesLE (keyLength << 3);
 			blob [12] = bitlen [0];
 			blob [13] = bitlen [1];
 			blob [14] = bitlen [2];
 			blob [15] = bitlen [3];
 
 			int pos = 16;
 			byte[] part = p.P;
 			Array.Reverse (part);
 			Buffer.BlockCopy (part, 0, blob, pos, keyLength);
 			pos += keyLength;
 
 			part = p.Q;
 			Array.Reverse (part);
 			Buffer.BlockCopy (part, 0, blob, pos, 20);
 			pos += 20;
 
 			part = p.G;
 			Array.Reverse (part);
 			Buffer.BlockCopy (part, 0, blob, pos, keyLength);
 			pos += keyLength;
 
 			part = p.X;
 			Array.Reverse (part);
 			Buffer.BlockCopy (part, 0, blob, pos, 20);
 			pos += 20;
 
 			Buffer.BlockCopy (GetBytesLE (p.Counter), 0, blob, pos, 4);
 			pos += 4;
 
 			part = p.Seed;
 			Array.Reverse (part);
 			Buffer.BlockCopy (part, 0, blob, pos, 20);
 
 			return blob;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="407" endline="411"><![CDATA[
 
 		static public RSA FromCapiPublicKeyBlob (byte[] blob) 
 		{
 			return FromCapiPublicKeyBlob (blob, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="412" endline="471"><![CDATA[
 
 		static public RSA FromCapiPublicKeyBlob (byte[] blob, int offset) 
 		{
 			if (blob == null)
 				throw new ArgumentNullException ("blob");
 			if (offset >= blob.Length)
 				throw new ArgumentException ("blob is too small.");
 
 			try {
 				if ((blob [offset]   != 0x06) ||				// PUBLICKEYBLOB (0x06)
 				    (blob [offset+1] != 0x02) ||				// Version (0x02)
 				    (blob [offset+2] != 0x00) ||				// Reserved (word)
 				    (blob [offset+3] != 0x00) || 
 				    (ToUInt32LE (blob, offset+8) != 0x31415352))	// DWORD magic = RSA1
 					throw new CryptographicException ("Invalid blob header");
 
 				// ALGID (CALG_RSA_SIGN, CALG_RSA_KEYX, ...)
 				// int algId = ToInt32LE (blob, offset+4);
 
 				// DWORD bitlen
 				int bitLen = ToInt32LE (blob, offset+12);
 
 				// DWORD public exponent
 				RSAParameters rsap = new RSAParameters ();
 				rsap.Exponent = new byte [3];
 				rsap.Exponent [0] = blob [offset+18];
 				rsap.Exponent [1] = blob [offset+17];
 				rsap.Exponent [2] = blob [offset+16];
 			
 				int pos = offset+20;
 				// BYTE modulus[rsapubkey.bitlen/8];
 				int byteLen = (bitLen >> 3);
 				rsap.Modulus = new byte [byteLen];
 				Buffer.BlockCopy (blob, pos, rsap.Modulus, 0, byteLen);
 				Array.Reverse (rsap.Modulus);
 #if NET_2_1
 				RSA rsa = RSA.Create ();
 				rsa.ImportParameters (rsap);
 #else
 				RSA rsa = null;
 				try {
 					rsa = RSA.Create ();
 					rsa.ImportParameters (rsap);
 				}
 				catch (CryptographicException) {
 					// this may cause problem when this code is run under
 					// the SYSTEM identity on Windows (e.g. ASP.NET). See
 					// http
 					CspParameters csp = new CspParameters ();
 					csp.Flags = CspProviderFlags.UseMachineKeyStore;
 					rsa = new RSACryptoServiceProvider (csp);
 					rsa.ImportParameters (rsap);
 				}
 #endif
 				return rsa;
 			}
 			catch (Exception e) {
 				throw new CryptographicException ("Invalid blob.", e);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="472" endline="476"><![CDATA[
 
 		static public DSA FromCapiPublicKeyBlobDSA (byte[] blob)
 		{
 			return FromCapiPublicKeyBlobDSA (blob, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="477" endline="533"><![CDATA[
 
 		static public DSA FromCapiPublicKeyBlobDSA (byte[] blob, int offset)
 		{
 			if (blob == null)
 				throw new ArgumentNullException ("blob");
 			if (offset >= blob.Length)
 				throw new ArgumentException ("blob is too small.");
 
 			try {
 				if ((blob [offset] != 0x06) ||				// PUBLICKEYBLOB (0x06)
 				    (blob [offset + 1] != 0x02) ||			// Version (0x02)
 				    (blob [offset + 2] != 0x00) ||			// Reserved (word)
 				    (blob [offset + 3] != 0x00) ||
 				    (ToUInt32LE (blob, offset + 8) != 0x31535344))	// DWORD magic
 					throw new CryptographicException ("Invalid blob header");
 
 				int bitlen = ToInt32LE (blob, offset + 12);
 				DSAParameters dsap = new DSAParameters ();
 				int bytelen = bitlen >> 3;
 				int pos = offset + 16;
 
 				dsap.P = new byte [bytelen];
 				Buffer.BlockCopy (blob, pos, dsap.P, 0, bytelen);
 				Array.Reverse (dsap.P);
 				pos += bytelen;
 
 				dsap.Q = new byte [20];
 				Buffer.BlockCopy (blob, pos, dsap.Q, 0, 20);
 				Array.Reverse (dsap.Q);
 				pos += 20;
 
 				dsap.G = new byte [bytelen];
 				Buffer.BlockCopy (blob, pos, dsap.G, 0, bytelen);
 				Array.Reverse (dsap.G);
 				pos += bytelen;
 
 				dsap.Y = new byte [bytelen];
 				Buffer.BlockCopy (blob, pos, dsap.Y, 0, bytelen);
 				Array.Reverse (dsap.Y);
 				pos += bytelen;
 
 				dsap.Counter = ToInt32LE (blob, pos);
 				pos += 4;
 
 				dsap.Seed = new byte [20];
 				Buffer.BlockCopy (blob, pos, dsap.Seed, 0, 20);
 				Array.Reverse (dsap.Seed);
 				pos += 20;
 
 				DSA dsa = (DSA)DSA.Create ();
 				dsa.ImportParameters (dsap);
 				return dsa;
 			}
 			catch (Exception e) {
 				throw new CryptographicException ("Invalid blob.", e);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="534" endline="569"><![CDATA[
 
 		static public byte[] ToCapiPublicKeyBlob (RSA rsa) 
 		{
 			RSAParameters p = rsa.ExportParameters (false);
 			int keyLength = p.Modulus.Length; // in bytes
 			byte[] blob = new byte [20 + keyLength];
 
 			blob [0] = 0x06;	// Type - PUBLICKEYBLOB (0x06)
 			blob [1] = 0x02;	// Version - Always CUR_BLOB_VERSION (0x02)
 			// [2], [3]		// RESERVED - Always 0
 			blob [5] = 0x24;	// ALGID - Always 00 24 00 00 (for CALG_RSA_SIGN)
 			blob [8] = 0x52;	// Magic - RSA1 (ASCII in hex)
 			blob [9] = 0x53;
 			blob [10] = 0x41;
 			blob [11] = 0x31;
 
 			byte[] bitlen = GetBytesLE (keyLength << 3);
 			blob [12] = bitlen [0];	// bitlen
 			blob [13] = bitlen [1];	
 			blob [14] = bitlen [2];	
 			blob [15] = bitlen [3];
 
 			// public exponent (DWORD)
 			int pos = 16;
 			int n = p.Exponent.Length;
 			while (n > 0)
 				blob [pos++] = p.Exponent [--n];
 			while (n > 0)
 				blob [pos++] = p.Exponent [--n];
 			// modulus
 			pos = 20;
 			byte[] part = p.Modulus;
 			int len = part.Length;
 			Array.Reverse (part, 0, len);
 			Buffer.BlockCopy (part, 0, blob, pos, len);
 			pos += len;
 			return blob;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="570" endline="625"><![CDATA[
 
 		static public byte[] ToCapiPublicKeyBlob (DSA dsa)
 		{
 			DSAParameters p = dsa.ExportParameters (false);
 			int keyLength = p.P.Length; // in bytes
 
 			// header + P + Q + G + Y + count + seed
 			byte[] blob = new byte [16 + keyLength + 20 + keyLength + keyLength + 4 + 20];
 
 			blob [0] = 0x06;	// Type - PUBLICKEYBLOB (0x06)
 			blob [1] = 0x02;	// Version - Always CUR_BLOB_VERSION (0x02)
 			// [2], [3]		// RESERVED - Always 0
 			blob [5] = 0x22;	// ALGID
 			blob [8] = 0x44;	// Magic
 			blob [9] = 0x53;
 			blob [10] = 0x53;
 			blob [11] = 0x31;
 
 			byte[] bitlen = GetBytesLE (keyLength << 3);
 			blob [12] = bitlen [0];
 			blob [13] = bitlen [1];
 			blob [14] = bitlen [2];
 			blob [15] = bitlen [3];
 
 			int pos = 16;
 			byte[] part;
 
 			part = p.P;
 			Array.Reverse (part);
 			Buffer.BlockCopy (part, 0, blob, pos, keyLength);
 			pos += keyLength;
 
 			part = p.Q;
 			Array.Reverse (part);
 			Buffer.BlockCopy (part, 0, blob, pos, 20);
 			pos += 20;
 
 			part = p.G;
 			Array.Reverse (part);
 			Buffer.BlockCopy (part, 0, blob, pos, keyLength);
 			pos += keyLength;
 
 			part = p.Y;
 			Array.Reverse (part);
 			Buffer.BlockCopy (part, 0, blob, pos, keyLength);
 			pos += keyLength;
 
 			Buffer.BlockCopy (GetBytesLE (p.Counter), 0, blob, pos, 4);
 			pos += 4;
 
 			part = p.Seed;
 			Array.Reverse (part);
 			Buffer.BlockCopy (part, 0, blob, pos, 20);
 
 			return blob;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="626" endline="632"><![CDATA[
 
 		// PRIVATEKEYBLOB
 		// PUBLICKEYBLOB
 		static public RSA FromCapiKeyBlob (byte[] blob) 
 		{
 			return FromCapiKeyBlob (blob, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="633" endline="655"><![CDATA[
 
 		static public RSA FromCapiKeyBlob (byte[] blob, int offset) 
 		{
 			if (blob == null)
 				throw new ArgumentNullException ("blob");
 			if (offset >= blob.Length)
 				throw new ArgumentException ("blob is too small.");
 
 			switch (blob [offset]) {
 				case 0x00
 					// this could be a public key inside an header
 					// like "sn -e" would produce
 					if (blob [offset + 12] == 0x06) {
 						return FromCapiPublicKeyBlob (blob, offset + 12);
 					}
 					break;
 				case 0x06
 					return FromCapiPublicKeyBlob (blob, offset);
 				case 0x07
 					return FromCapiPrivateKeyBlob (blob, offset);
 			}
 			throw new CryptographicException ("Unknown blob format.");
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="656" endline="660"><![CDATA[
 
 		static public DSA FromCapiKeyBlobDSA (byte[] blob)
 		{
 			return FromCapiKeyBlobDSA (blob, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="661" endline="676"><![CDATA[
 
 		static public DSA FromCapiKeyBlobDSA (byte[] blob, int offset)
 		{
 			if (blob == null)
 				throw new ArgumentNullException ("blob");
 			if (offset >= blob.Length)
 				throw new ArgumentException ("blob is too small.");
 
 			switch (blob [offset]) {
 				case 0x06
 					return FromCapiPublicKeyBlobDSA (blob, offset);
 				case 0x07
 					return FromCapiPrivateKeyBlobDSA (blob, offset);
 			}
 			throw new CryptographicException ("Unknown blob format.");
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="677" endline="690"><![CDATA[
 
 		static public byte[] ToCapiKeyBlob (AsymmetricAlgorithm keypair, bool includePrivateKey) 
 		{
 			if (keypair == null)
 				throw new ArgumentNullException ("keypair");
 
 			// check between RSA and DSA (and potentially others like DH)
 			if (keypair is RSA)
 				return ToCapiKeyBlob ((RSA)keypair, includePrivateKey);
 			else if (keypair is DSA)
 				return ToCapiKeyBlob ((DSA)keypair, includePrivateKey);
 			else
 				return null;	// TODO
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="691" endline="701"><![CDATA[
 
 		static public byte[] ToCapiKeyBlob (RSA rsa, bool includePrivateKey) 
 		{
 			if (rsa == null)
 				throw new ArgumentNullException ("rsa");
 
 			if (includePrivateKey)
 				return ToCapiPrivateKeyBlob (rsa);
 			else
 				return ToCapiPublicKeyBlob (rsa);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="702" endline="712"><![CDATA[
 
 		static public byte[] ToCapiKeyBlob (DSA dsa, bool includePrivateKey)
 		{
 			if (dsa == null)
 				throw new ArgumentNullException ("dsa");
 
 			if (includePrivateKey)
 				return ToCapiPrivateKeyBlob (dsa);
 			else
 				return ToCapiPublicKeyBlob (dsa);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="713" endline="724"><![CDATA[
 
 		static public string ToHex (byte[] input) 
 		{
 			if (input == null)
 				return null;
 
 			StringBuilder sb = new StringBuilder (input.Length * 2);
 			foreach (byte b in input) {
 				sb.Append (b.ToString ("X2", CultureInfo.InvariantCulture));
 			}
 			foreach (byte b in input) {
 				sb.Append (b.ToString ("X2", CultureInfo.InvariantCulture));
 			}
 			return sb.ToString ();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="725" endline="735"><![CDATA[
 
 		static private byte FromHexChar (char c) 
 		{
 			if ((c >= 'a') && (c <= 'f'))
 				return (byte) (c - 'a' + 10);
 			if ((c >= 'A') && (c <= 'F'))
 				return (byte) (c - 'A' + 10);
 			if ((c >= '0') && (c <= '9'))
 				return (byte) (c - '0');
 			throw new ArgumentException ("invalid hex char");
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\corlib\Mono.Security.Cryptography\CryptoConvert.cs" startline="736" endline="752"><![CDATA[
 
 		static public byte[] FromHex (string hex) 
 		{
 			if (hex == null)
 				return null;
 			if ((hex.Length & 0x1) == 0x1)
 				throw new ArgumentException ("Length must be a multiple of 2");
 
 			byte[] result = new byte [hex.Length >> 1];
 			int n = 0;
 			int i = 0;
 			while (n < result.Length) {
 				result [n] = (byte) (FromHexChar (hex [i++]) << 4);
 				result [n++] += FromHexChar (hex [i++]);
 			}
 			while (n < result.Length) {
 				result [n] = (byte) (FromHexChar (hex [i++]) << 4);
 				result [n++] += FromHexChar (hex [i++]);
 			}
 			return result;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="36" endline="42"><![CDATA[
 		private readonly IMAGE_NT_HEADERS hdr = new IMAGE_NT_HEADERS();
 
 		internal PEWriter(Stream stream)
 		{
 			bw = new BinaryWriter(stream);
 			WriteMSDOSHeader();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="43" endline="46"><![CDATA[
 
 		public IMAGE_NT_HEADERS Headers
 		{
 			get { return hdr; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="47" endline="59"><![CDATA[
 		}
 
 		public uint HeaderSize
 		{
 			get
 			{
 				return (uint)
 					((8 * 16) +	// MSDOS header
 					4 +				// signature
 					20 +			// IMAGE_FILE_HEADER
 					hdr.FileHeader.SizeOfOptionalHeader +
 					hdr.FileHeader.NumberOfSections * 40);
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="60" endline="82"><![CDATA[
 		}
 
 		private void WriteMSDOSHeader()
 		{
 			bw.Write(new byte[] {
 				0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00,
 				0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
 				0xB8, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00,
 				0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 				0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
 				0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD,
 				0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68,
 				0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72,
 				0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F,
 				0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E,
 				0x20, 0x69, 0x6E, 0x20, 0x44, 0x4F, 0x53, 0x20,
 				0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A,
 				0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 			});
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="83" endline="99"><![CDATA[
 
 		internal void WritePEHeaders()
 		{
 			bw.Write(hdr.Signature);
 
 			// IMAGE_FILE_HEADER
 			bw.Write(hdr.FileHeader.Machine);
 			bw.Write(hdr.FileHeader.NumberOfSections);
 			bw.Write(hdr.FileHeader.TimeDateStamp);
 			bw.Write(hdr.FileHeader.PointerToSymbolTable);
 			bw.Write(hdr.FileHeader.NumberOfSymbols);
 			bw.Write(hdr.FileHeader.SizeOfOptionalHeader);
 			bw.Write(hdr.FileHeader.Characteristics);
 
 			// IMAGE_OPTIONAL_HEADER
 			hdr.OptionalHeader.Write(bw);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="100" endline="115"><![CDATA[
 
 		internal void WriteSectionHeader(SectionHeader sectionHeader)
 		{
 			byte[] name = new byte[8];
 			System.Text.Encoding.UTF8.GetBytes(sectionHeader.Name, 0, sectionHeader.Name.Length, name, 0);
 			bw.Write(name);
 			bw.Write(sectionHeader.VirtualSize);
 			bw.Write(sectionHeader.VirtualAddress);
 			bw.Write(sectionHeader.SizeOfRawData);
 			bw.Write(sectionHeader.PointerToRawData);
 			bw.Write(sectionHeader.PointerToRelocations);
 			bw.Write(sectionHeader.PointerToLinenumbers);
 			bw.Write(sectionHeader.NumberOfRelocations);
 			bw.Write(sectionHeader.NumberOfLinenumbers);
 			bw.Write(sectionHeader.Characteristics);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="116" endline="120"><![CDATA[
 
 		internal uint ToFileAlignment(uint p)
 		{
 			return (p + (Headers.OptionalHeader.FileAlignment - 1)) & ~(Headers.OptionalHeader.FileAlignment - 1);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="121" endline="125"><![CDATA[
 
 		internal uint ToSectionAlignment(uint p)
 		{
 			return (p + (Headers.OptionalHeader.SectionAlignment - 1)) & ~(Headers.OptionalHeader.SectionAlignment - 1);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="126" endline="132"><![CDATA[
 	}
 
 	sealed class IMAGE_NT_HEADERS
 	{
 		public DWORD Signature = 0x00004550;	// "PE\0\0"
 		public IMAGE_FILE_HEADER FileHeader = new IMAGE_FILE_HEADER();
 		public IMAGE_OPTIONAL_HEADER OptionalHeader = new IMAGE_OPTIONAL_HEADER();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="133" endline="152"><![CDATA[
 	}
 
 	sealed class IMAGE_FILE_HEADER
 	{
 		public const WORD IMAGE_FILE_MACHINE_I386 = 0x014c;
 		public const WORD IMAGE_FILE_MACHINE_IA64 = 0x0200;
 		public const WORD IMAGE_FILE_MACHINE_AMD64 = 0x8664;
 
 		public const WORD IMAGE_FILE_32BIT_MACHINE = 0x0100;
 		public const WORD IMAGE_FILE_EXECUTABLE_IMAGE = 0x0002;
 		public const WORD IMAGE_FILE_LARGE_ADDRESS_AWARE = 0x0020;
 		public const WORD IMAGE_FILE_DLL = 0x2000;
 
 		public WORD Machine;
 		public WORD NumberOfSections;
 		public DWORD TimeDateStamp = (uint)(DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalSeconds;
 		public DWORD PointerToSymbolTable = 0;
 		public DWORD NumberOfSymbols = 0;
 		public WORD SizeOfOptionalHeader = 0xE0;
 		public WORD Characteristics = IMAGE_FILE_EXECUTABLE_IMAGE;
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="153" endline="272"><![CDATA[
 	}
 
 	sealed class IMAGE_OPTIONAL_HEADER
 	{
 		public const WORD IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10b;
 		public const WORD IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20b;
 
 		public const WORD IMAGE_SUBSYSTEM_WINDOWS_GUI = 2;
 		public const WORD IMAGE_SUBSYSTEM_WINDOWS_CUI = 3;
 
 		public const WORD IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 0x0040;
 		public const WORD IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 0x0100;
 		public const WORD IMAGE_DLLCHARACTERISTICS_NO_SEH = 0x0400;
 		public const WORD IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 0x8000;
 
 		public WORD Magic = IMAGE_NT_OPTIONAL_HDR32_MAGIC;
 		public BYTE MajorLinkerVersion = 8;
 		public BYTE MinorLinkerVersion = 0;
 		public DWORD SizeOfCode;
 		public DWORD SizeOfInitializedData;
 		public DWORD SizeOfUninitializedData;
 		public DWORD AddressOfEntryPoint;
 		public DWORD BaseOfCode;
 		public DWORD BaseOfData;
 		public ULONGLONG ImageBase;
 		public DWORD SectionAlignment = 0x2000;
 		public DWORD FileAlignment = 0x200;
 		public WORD MajorOperatingSystemVersion = 4;
 		public WORD MinorOperatingSystemVersion = 0;
 		public WORD MajorImageVersion = 0;
 		public WORD MinorImageVersion = 0;
 		public WORD MajorSubsystemVersion = 4;
 		public WORD MinorSubsystemVersion = 0;
 		public DWORD Win32VersionValue = 0;
 		public DWORD SizeOfImage;
 		public DWORD SizeOfHeaders;
 		public DWORD CheckSum = 0;
 		public WORD Subsystem;
 		public WORD DllCharacteristics;
 		public ULONGLONG SizeOfStackReserve = 0x100000;
 		public ULONGLONG SizeOfStackCommit = 0x1000;
 		public ULONGLONG SizeOfHeapReserve = 0x100000;
 		public ULONGLONG SizeOfHeapCommit = 0x1000;
 		public DWORD LoaderFlags = 0;
 		public DWORD NumberOfRvaAndSizes = 16;
 		public IMAGE_DATA_DIRECTORY[] DataDirectory = new IMAGE_DATA_DIRECTORY[16];
 
 		internal void Write(BinaryWriter bw)
 		{
 			bw.Write(Magic);
 			bw.Write(MajorLinkerVersion);
 			bw.Write(MinorLinkerVersion);
 			bw.Write(SizeOfCode);
 			bw.Write(SizeOfInitializedData);
 			bw.Write(SizeOfUninitializedData);
 			bw.Write(AddressOfEntryPoint);
 			bw.Write(BaseOfCode);
 			if (Magic == IMAGE_NT_OPTIONAL_HDR32_MAGIC)
 			{
 				bw.Write(BaseOfData);
 				bw.Write((DWORD)ImageBase);
 			}
 			else
 			{
 				bw.Write(ImageBase);
 			}
 			bw.Write(SectionAlignment);
 			bw.Write(FileAlignment);
 			bw.Write(MajorOperatingSystemVersion);
 			bw.Write(MinorOperatingSystemVersion);
 			bw.Write(MajorImageVersion);
 			bw.Write(MinorImageVersion);
 			bw.Write(MajorSubsystemVersion);
 			bw.Write(MinorSubsystemVersion);
 			bw.Write(Win32VersionValue);
 			bw.Write(SizeOfImage);
 			bw.Write(SizeOfHeaders);
 			bw.Write(CheckSum);
 			bw.Write(Subsystem);
 			bw.Write(DllCharacteristics);
 			if (Magic == IMAGE_NT_OPTIONAL_HDR32_MAGIC)
 			{
 				bw.Write((DWORD)SizeOfStackReserve);
 			}
 			else
 			{
 				bw.Write(SizeOfStackReserve);
 			}
 			if (Magic == IMAGE_NT_OPTIONAL_HDR32_MAGIC)
 			{
 				bw.Write((DWORD)SizeOfStackCommit);
 			}
 			else
 			{
 				bw.Write(SizeOfStackCommit);
 			}
 			if (Magic == IMAGE_NT_OPTIONAL_HDR32_MAGIC)
 			{
 				bw.Write((DWORD)SizeOfHeapReserve);
 			}
 			else
 			{
 				bw.Write(SizeOfHeapReserve);
 			}
 			if (Magic == IMAGE_NT_OPTIONAL_HDR32_MAGIC)
 			{
 				bw.Write((DWORD)SizeOfHeapCommit);
 			}
 			else
 			{
 				bw.Write(SizeOfHeapCommit);
 			}
 			bw.Write(LoaderFlags);
 			bw.Write(NumberOfRvaAndSizes);
 			for (int i = 0; i < DataDirectory.Length; i++)
 			{
 				bw.Write(DataDirectory[i].VirtualAddress);
 				bw.Write(DataDirectory[i].Size);
 			}
 			for (int i = 0; i < DataDirectory.Length; i++)
 			{
 				bw.Write(DataDirectory[i].VirtualAddress);
 				bw.Write(DataDirectory[i].Size);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="168" endline="198"><![CDATA[
 		public WORD Magic = IMAGE_NT_OPTIONAL_HDR32_MAGIC;
 		public BYTE MajorLinkerVersion = 8;
 		public BYTE MinorLinkerVersion = 0;
 		public DWORD SizeOfCode;
 		public DWORD SizeOfInitializedData;
 		public DWORD SizeOfUninitializedData;
 		public DWORD AddressOfEntryPoint;
 		public DWORD BaseOfCode;
 		public DWORD BaseOfData;
 		public ULONGLONG ImageBase;
 		public DWORD SectionAlignment = 0x2000;
 		public DWORD FileAlignment = 0x200;
 		public WORD MajorOperatingSystemVersion = 4;
 		public WORD MinorOperatingSystemVersion = 0;
 		public WORD MajorImageVersion = 0;
 		public WORD MinorImageVersion = 0;
 		public WORD MajorSubsystemVersion = 4;
 		public WORD MinorSubsystemVersion = 0;
 		public DWORD Win32VersionValue = 0;
 		public DWORD SizeOfImage;
 		public DWORD SizeOfHeaders;
 		public DWORD CheckSum = 0;
 		public WORD Subsystem;
 		public WORD DllCharacteristics;
 		public ULONGLONG SizeOfStackReserve = 0x100000;
 		public ULONGLONG SizeOfStackCommit = 0x1000;
 		public ULONGLONG SizeOfHeapReserve = 0x100000;
 		public ULONGLONG SizeOfHeapCommit = 0x1000;
 		public DWORD LoaderFlags = 0;
 		public DWORD NumberOfRvaAndSizes = 16;
 		public IMAGE_DATA_DIRECTORY[] DataDirectory = new IMAGE_DATA_DIRECTORY[16];
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\PEWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EnumBuilder.cs" startline="35" endline="39"><![CDATA[
 		internal EnumBuilder(TypeBuilder typeBuilder, FieldBuilder fieldBuilder)
 		{
 			this.typeBuilder = typeBuilder;
 			this.fieldBuilder = fieldBuilder;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EnumBuilder.cs" startline="40" endline="43"><![CDATA[
 
 		public override Type UnderlyingSystemType
 		{
 			get { return typeBuilder.UnderlyingSystemType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EnumBuilder.cs" startline="44" endline="48"><![CDATA[
 		}
 
 		public override Type BaseType
 		{
 			get { return typeBuilder.BaseType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EnumBuilder.cs" startline="49" endline="53"><![CDATA[
 		}
 
 		public override TypeAttributes Attributes
 		{
 			get { return typeBuilder.Attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EnumBuilder.cs" startline="54" endline="58"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return typeBuilder.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EnumBuilder.cs" startline="59" endline="66"><![CDATA[
 		}
 
 		public FieldBuilder DefineLiteral(string literalName, object literalValue)
 		{
 			FieldBuilder fb = typeBuilder.DefineField(literalName, typeBuilder, FieldAttributes.Public | FieldAttributes.Static | FieldAttributes.Literal);
 			fb.SetConstant(literalValue);
 			return fb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EnumBuilder.cs" startline="67" endline="71"><![CDATA[
 
 		public Type CreateType()
 		{
 			return typeBuilder.CreateType();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EnumBuilder.cs" startline="72" endline="75"><![CDATA[
 
 		public TypeToken TypeToken
 		{
 			get { return typeBuilder.TypeToken; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EnumBuilder.cs" startline="76" endline="80"><![CDATA[
 		}
 
 		public FieldBuilder UnderlyingField
 		{
 			get { return fieldBuilder; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EnumBuilder.cs" startline="81" endline="86"><![CDATA[
 		}
 
 		public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
 		{
 			typeBuilder.SetCustomAttribute(con, binaryAttribute);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EnumBuilder.cs" startline="87" endline="91"><![CDATA[
 
 		public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
 		{
 			typeBuilder.SetCustomAttribute(customBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\EnumBuilder.cs" startline="92" endline="96"><![CDATA[
 
 		public override Type GetEnumUnderlyingType()
 		{
 			return fieldBuilder.FieldType;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="39" endline="47"><![CDATA[
 		internal __StandAloneMethodSig(bool unmanaged, CallingConvention unmanagedCallingConvention, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
 		{
 			this.unmanaged = unmanaged;
 			this.unmanagedCallingConvention = unmanagedCallingConvention;
 			this.callingConvention = callingConvention;
 			this.returnType = returnType;
 			this.parameterTypes = parameterTypes;
 			this.optionalParameterTypes = optionalParameterTypes;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="48" endline="51"><![CDATA[
 
 		public bool IsUnmanaged
 		{
 			get { return unmanaged; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="52" endline="56"><![CDATA[
 		}
 
 		public CallingConventions CallingConvention
 		{
 			get { return callingConvention; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="57" endline="61"><![CDATA[
 		}
 
 		public CallingConvention UnmanagedCallingConvention
 		{
 			get { return unmanagedCallingConvention; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="62" endline="66"><![CDATA[
 		}
 
 		public Type ReturnType
 		{
 			get { return returnType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="67" endline="71"><![CDATA[
 		}
 
 		public Type[] ParameterTypes
 		{
 			get { return Util.Copy(parameterTypes); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StandAloneMethodSig.cs" startline="72" endline="76"><![CDATA[
 		}
 
 		public Type[] OptionalParameterTypes
 		{
 			get { return Util.Copy(optionalParameterTypes); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\BadImageFormatException.cs" startline="32" endline="34"><![CDATA[
 		public BadImageFormatException()
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\BadImageFormatException.cs" startline="35" endline="39"><![CDATA[
 
 		public BadImageFormatException(string message)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\BadImageFormatException.cs" startline="40" endline="44"><![CDATA[
 
 		public BadImageFormatException(string message, Exception inner)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\BadImageFormatException.cs" startline="45" endline="49"><![CDATA[
 
 		private BadImageFormatException(SerializationInfo info, StreamingContext context)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\driver.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="55" endline="71"><![CDATA[
 		private bool initLocals = true;
 
 		internal MethodBuilder(TypeBuilder typeBuilder, string name, MethodAttributes attributes, CallingConventions callingConvention)
 		{
 			this.typeBuilder = typeBuilder;
 			this.name = name;
 			this.pseudoToken = typeBuilder.ModuleBuilder.AllocPseudoToken();
 			// because all the MethodBuilders constitute a virtual MethodDef table, we cannot allocate the string during WriteMethodDefRecord,
 			// since by then the metadata has already been frozen
 			this.nameIndex = typeBuilder.ModuleBuilder.Strings.Add(name);
 			this.attributes = attributes;
 			if ((attributes & MethodAttributes.Static) == 0)
 			{
 				callingConvention |= CallingConventions.HasThis;
 			}
 			this.callingConvention = callingConvention;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="72" endline="76"><![CDATA[
 
 		public ILGenerator GetILGenerator()
 		{
 			return GetILGenerator(16);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="77" endline="85"><![CDATA[
 
 		public ILGenerator GetILGenerator(int streamSize)
 		{
 			if (ilgen == null)
 			{
 				ilgen = new ILGenerator(typeBuilder.ModuleBuilder, streamSize);
 			}
 			return ilgen;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="86" endline="90"><![CDATA[
 
 		public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
 		{
 			SetCustomAttribute(new CustomAttributeBuilder(con, binaryAttribute));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="91" endline="105"><![CDATA[
 
 		private void SetDllImportPseudoCustomAttribute(CustomAttributeBuilder customBuilder)
 		{
 			CallingConvention? callingConvention = customBuilder.GetFieldValue<CallingConvention>("CallingConvention");
 			CharSet? charSet = customBuilder.GetFieldValue<CharSet>("CharSet");
 			SetDllImportPseudoCustomAttribute((string)customBuilder.GetConstructorArgument(0),
 				(string)customBuilder.GetFieldValue("EntryPoint"),
 				callingConvention,
 				charSet,
 				(bool?)customBuilder.GetFieldValue("BestFitMapping"),
 				(bool?)customBuilder.GetFieldValue("ThrowOnUnmappableChar"),
 				(bool?)customBuilder.GetFieldValue("SetLastError"),
 				(bool?)customBuilder.GetFieldValue("PreserveSig"),
 				(bool?)customBuilder.GetFieldValue("ExactSpelling"));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="106" endline="199"><![CDATA[
 
 		internal void SetDllImportPseudoCustomAttribute(string dllName, string entryName, CallingConvention? nativeCallConv, CharSet? nativeCharSet,
 			bool? bestFitMapping, bool? throwOnUnmappableChar, bool? setLastError, bool? preserveSig, bool? exactSpelling)
 		{
 			const short NoMangle = 0x0001;
 			const short CharSetMask = 0x0006;
 			const short CharSetNotSpec = 0x0000;
 			const short CharSetAnsi = 0x0002;
 			const short CharSetUnicode = 0x0004;
 			const short CharSetAuto = 0x0006;
 			const short SupportsLastError = 0x0040;
 			const short CallConvMask = 0x0700;
 			const short CallConvWinapi = 0x0100;
 			const short CallConvCdecl = 0x0200;
 			const short CallConvStdcall = 0x0300;
 			const short CallConvThiscall = 0x0400;
 			const short CallConvFastcall = 0x0500;
 			// non-standard flags
 			const short BestFitOn = 0x0010;
 			const short BestFitOff = 0x0020;
 			const short CharMapErrorOn = 0x1000;
 			const short CharMapErrorOff = 0x2000;
 			int name = this.nameIndex;
 			short flags = CharSetNotSpec | CallConvWinapi;
 			if (bestFitMapping.HasValue)
 			{
 				flags |= bestFitMapping.Value ? BestFitOn 
 			}
 			if (throwOnUnmappableChar.HasValue)
 			{
 				flags |= throwOnUnmappableChar.Value ? CharMapErrorOn 
 			}
 			if (nativeCallConv.HasValue)
 			{
 				flags &= ~CallConvMask;
 				switch (nativeCallConv.Value)
 				{
 					case System.Runtime.InteropServices.CallingConvention.Cdecl
 						flags |= CallConvCdecl;
 						break;
 					case System.Runtime.InteropServices.CallingConvention.FastCall
 						flags |= CallConvFastcall;
 						break;
 					case System.Runtime.InteropServices.CallingConvention.StdCall
 						flags |= CallConvStdcall;
 						break;
 					case System.Runtime.InteropServices.CallingConvention.ThisCall
 						flags |= CallConvThiscall;
 						break;
 					case System.Runtime.InteropServices.CallingConvention.Winapi
 						flags |= CallConvWinapi;
 						break;
 				}
 			}
 			if (nativeCharSet.HasValue)
 			{
 				flags &= ~CharSetMask;
 				switch (nativeCharSet.Value)
 				{
 					case CharSet.Ansi
 					case CharSet.None
 						flags |= CharSetAnsi;
 						break;
 					case CharSet.Auto
 						flags |= CharSetAuto;
 						break;
 					case CharSet.Unicode
 						flags |= CharSetUnicode;
 						break;
 				}
 			}
 			if (entryName != null)
 			{
 				name = this.ModuleBuilder.Strings.Add(entryName);
 			}
 			if (exactSpelling.HasValue && exactSpelling.Value)
 			{
 				flags |= NoMangle;
 			}
 			if (!preserveSig.HasValue || preserveSig.Value)
 			{
 				implFlags |= MethodImplAttributes.PreserveSig;
 			}
 			if (setLastError.HasValue && setLastError.Value)
 			{
 				flags |= SupportsLastError;
 			}
 			ImplMapTable.Record rec = new ImplMapTable.Record();
 			rec.MappingFlags = flags;
 			rec.MemberForwarded = pseudoToken;
 			rec.ImportName = name;
 			rec.ImportScope = this.ModuleBuilder.ModuleRef.FindOrAddRecord(dllName == null ? 0 
 			this.ModuleBuilder.ImplMap.AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="200" endline="235"><![CDATA[
 
 		private void SetMethodImplAttribute(CustomAttributeBuilder customBuilder)
 		{
 			MethodImplOptions opt;
 			switch (customBuilder.Constructor.ParameterCount)
 			{
 				case 0
 					opt = 0;
 					break;
 				case 1
 					{
 						object val = customBuilder.GetConstructorArgument(0);
 						if (val is short)
 						{
 							opt = (MethodImplOptions)(short)val;
 						}
 						else if (val is int)
 						{
 							opt = (MethodImplOptions)(int)val;
 						}
 						else
 						{
 							opt = (MethodImplOptions)val;
 						}
 						break;
 					}
 				default
 					throw new NotSupportedException();
 			}
 			MethodCodeType? type = customBuilder.GetFieldValue<MethodCodeType>("MethodCodeType");
 			implFlags = (MethodImplAttributes)opt;
 			if (type.HasValue)
 			{
 				implFlags |= (MethodImplAttributes)type;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="236" endline="266"><![CDATA[
 
 		public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
 		{
 			Universe u = this.ModuleBuilder.universe;
 			Type type = customBuilder.Constructor.DeclaringType;
 			if (type == u.System_Runtime_InteropServices_DllImportAttribute)
 			{
 				attributes |= MethodAttributes.PinvokeImpl;
 				SetDllImportPseudoCustomAttribute(customBuilder.DecodeBlob(this.Module.Assembly));
 			}
 			else if (type == u.System_Runtime_CompilerServices_MethodImplAttribute)
 			{
 				SetMethodImplAttribute(customBuilder.DecodeBlob(this.Module.Assembly));
 			}
 			else if (type == u.System_Runtime_InteropServices_PreserveSigAttribute)
 			{
 				implFlags |= MethodImplAttributes.PreserveSig;
 			}
 			else if (type == u.System_Runtime_CompilerServices_SpecialNameAttribute)
 			{
 				attributes |= MethodAttributes.SpecialName;
 			}
 			else
 			{
 				if (type == u.System_Security_SuppressUnmanagedCodeSecurityAttribute)
 				{
 					attributes |= MethodAttributes.HasSecurity;
 				}
 				this.ModuleBuilder.SetCustomAttribute(pseudoToken, customBuilder);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="267" endline="276"><![CDATA[
 
 		public void __AddDeclarativeSecurity(CustomAttributeBuilder customBuilder)
 		{
 			attributes |= MethodAttributes.HasSecurity;
 			if (declarativeSecurity == null)
 			{
 				declarativeSecurity = new List<CustomAttributeBuilder>();
 			}
 			declarativeSecurity.Add(customBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="277" endline="282"><![CDATA[
 
 		public void AddDeclarativeSecurity(System.Security.Permissions.SecurityAction securityAction, System.Security.PermissionSet permissionSet)
 		{
 			this.ModuleBuilder.AddDeclarativeSecurity(pseudoToken, securityAction, permissionSet);
 			this.attributes |= MethodAttributes.HasSecurity;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="283" endline="287"><![CDATA[
 
 		public void SetImplementationFlags(MethodImplAttributes attributes)
 		{
 			implFlags = attributes;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="288" endline="315"><![CDATA[
 
 		public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string strParamName)
 		{
 			// the parameter is named "position", but it is actually a sequence number (i.e. 0 = return parameter, 1 = first parameter)
 			int sequence = position--;
 			if (parameters == null)
 			{
 				parameters = new List<ParameterBuilder>();
 			}
 			this.ModuleBuilder.Param.AddVirtualRecord();
 			ParameterBuilder pb = new ParameterBuilder(this.ModuleBuilder, sequence, attributes, strParamName);
 			if (parameters.Count == 0 || position > parameters[parameters.Count - 1].Position)
 			{
 				parameters.Add(pb);
 			}
 			else
 			{
 				for (int i = 0; i < parameters.Count; i++)
 				{
 					if (parameters[i].Position > position)
 					{
 						parameters.Insert(i, pb);
 						break;
 					}
 				}
 				for (int i = 0; i < parameters.Count; i++)
 				{
 					if (parameters[i].Position > position)
 					{
 						parameters.Insert(i, pb);
 						break;
 					}
 				}
 			}
 			return pb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="316" endline="320"><![CDATA[
 
 		public void SetParameters(params Type[] parameterTypes)
 		{
 			this.parameterTypes = Util.Copy(parameterTypes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="321" endline="325"><![CDATA[
 
 		public void SetReturnType(Type returnType)
 		{
 			this.returnType = returnType ?? this.Module.universe.System_Void;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="326" endline="333"><![CDATA[
 
 		public void SetSignature(Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
 		{
 			this.returnType = returnType ?? this.Module.universe.System_Void;
 			this.parameterTypes = Util.Copy(parameterTypes);
 			this.modifiers = PackedCustomModifiers.CreateFromExternal(returnTypeOptionalCustomModifiers, returnTypeRequiredCustomModifiers,
 				parameterTypeOptionalCustomModifiers, parameterTypeRequiredCustomModifiers, this.parameterTypes.Length);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="334" endline="343"><![CDATA[
 
 		public GenericTypeParameterBuilder[] DefineGenericParameters(params string[] names)
 		{
 			gtpb = new GenericTypeParameterBuilder[names.Length];
 			for (int i = 0; i < names.Length; i++)
 			{
 				gtpb[i] = new GenericTypeParameterBuilder(names[i], null, this, i);
 			}
 			for (int i = 0; i < names.Length; i++)
 			{
 				gtpb[i] = new GenericTypeParameterBuilder(names[i], null, this, i);
 			}
 			return (GenericTypeParameterBuilder[])gtpb.Clone();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="344" endline="348"><![CDATA[
 
 		public override MethodInfo MakeGenericMethod(params Type[] typeArguments)
 		{
 			return new GenericMethodInstance(typeBuilder, this, typeArguments);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="349" endline="357"><![CDATA[
 
 		public override MethodInfo GetGenericMethodDefinition()
 		{
 			if (gtpb == null)
 			{
 				throw new InvalidOperationException();
 			}
 			return this;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="358" endline="362"><![CDATA[
 
 		public override Type[] GetGenericArguments()
 		{
 			return Util.Copy(gtpb);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="363" endline="367"><![CDATA[
 
 		internal override Type GetGenericMethodArgument(int index)
 		{
 			return gtpb[index];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="368" endline="372"><![CDATA[
 
 		internal override int GetGenericMethodArgumentCount()
 		{
 			return gtpb == null ? 0 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="373" endline="376"><![CDATA[
 
 		public override Type ReturnType
 		{
 			get { return returnType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="377" endline="381"><![CDATA[
 		}
 
 		public override ParameterInfo ReturnParameter
 		{
 			get { return new ParameterInfoImpl(this, -1); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="382" endline="386"><![CDATA[
 		}
 
 		public override MethodAttributes Attributes
 		{
 			get { return attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="387" endline="392"><![CDATA[
 		}
 
 		public void __SetAttributes(MethodAttributes attributes)
 		{
 			this.attributes = attributes;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="393" endline="397"><![CDATA[
 
 		public override MethodImplAttributes GetMethodImplementationFlags()
 		{
 			return implFlags;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="398" endline="520"><![CDATA[
 
 		private sealed class ParameterInfoImpl 
 		{
 			private readonly MethodBuilder method;
 			private readonly int parameter;
 
 			internal ParameterInfoImpl(MethodBuilder method, int parameter)
 			{
 				this.method = method;
 				this.parameter = parameter;
 			}
 
 			private ParameterBuilder ParameterBuilder
 			{
 				get
 				{
 					if (method.parameters != null)
 					{
 						foreach (ParameterBuilder pb in method.parameters)
 						{
 							if (pb.Position == parameter)
 							{
 								return pb;
 							}
 						}
 					}
 					return null;
 				}
 			}
 
 			public override string Name
 			{
 				get
 				{
 					ParameterBuilder pb = this.ParameterBuilder;
 					return pb != null ? pb.Name 
 				}
 			}
 
 			public override Type ParameterType
 			{
 				get { return parameter == -1 ? method.returnType 
 			}
 
 			public override ParameterAttributes Attributes
 			{
 				get
 				{
 					ParameterBuilder pb = this.ParameterBuilder;
 					return pb != null ? (ParameterAttributes)pb.Attributes 
 				}
 			}
 
 			public override int Position
 			{
 				get { return parameter; }
 			}
 
 			public override object RawDefaultValue
 			{
 				get
 				{
 					ParameterBuilder pb = this.ParameterBuilder;
 					if (pb != null && (pb.Attributes & (int)ParameterAttributes.HasDefault) != 0)
 					{
 						return method.ModuleBuilder.Constant.GetRawConstantValue(method.ModuleBuilder, pb.PseudoToken);
 					}
 					if (pb != null && (pb.Attributes & (int)ParameterAttributes.Optional) != 0)
 					{
 						return Missing.Value;
 					}
 					return null;
 				}
 			}
 
 			private Type[] GetCustomModifiers(int optOrReq)
 			{
 				if (method.modifiers == null || method.modifiers[parameter + 1] == null)
 				{
 					return Type.EmptyTypes;
 				}
 				return Util.Copy(method.modifiers[parameter + 1][optOrReq]);
 			}
 
 			public override Type[] GetOptionalCustomModifiers()
 			{
 				return GetCustomModifiers(0);
 			}
 
 			public override Type[] GetRequiredCustomModifiers()
 			{
 				return GetCustomModifiers(1);
 			}
 
 			public override MemberInfo Member
 			{
 				get { return method; }
 			}
 
 			public override int MetadataToken
 			{
 				get
 				{
 					ParameterBuilder pb = this.ParameterBuilder;
 					return pb != null ? pb.PseudoToken 
 				}
 			}
 
 			internal override Module Module
 			{
 				get { return method.Module; }
 			}
 		}
 
 		public override ParameterInfo[] GetParameters()
 		{
 			ParameterInfo[] parameters = new ParameterInfo[parameterTypes.Length];
 			for (int i = 0; i < parameters.Length; i++)
 			{
 				parameters[i] = new ParameterInfoImpl(this, i);
 			}
 			for (int i = 0; i < parameters.Length; i++)
 			{
 				parameters[i] = new ParameterInfoImpl(this, i);
 			}
 			return parameters;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="521" endline="524"><![CDATA[
 
 		internal override int ParameterCount
 		{
 			get { return parameterTypes.Length; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="525" endline="529"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return typeBuilder.IsModulePseudoType ? null 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="530" endline="534"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="535" endline="539"><![CDATA[
 		}
 
 		public override CallingConventions CallingConvention
 		{
 			get { return callingConvention; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="540" endline="544"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return pseudoToken; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="545" endline="549"><![CDATA[
 		}
 
 		public override bool IsGenericMethod
 		{
 			get { return gtpb != null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="550" endline="554"><![CDATA[
 		}
 
 		public override bool IsGenericMethodDefinition
 		{
 			get { return gtpb != null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="555" endline="559"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return typeBuilder.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="560" endline="565"><![CDATA[
 		}
 
 		public Module GetModule()
 		{
 			return typeBuilder.Module;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="566" endline="570"><![CDATA[
 
 		public MethodToken GetToken()
 		{
 			return new MethodToken(pseudoToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="571" endline="574"><![CDATA[
 
 		public override MethodBody GetMethodBody()
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="575" endline="579"><![CDATA[
 		}
 
 		public bool InitLocals
 		{
 			get { return initLocals; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="580" endline="580"><![CDATA[
 			set { initLocals = value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="581" endline="609"><![CDATA[
 		}
 
 		internal void Bake()
 		{
 			this.signature = this.ModuleBuilder.GetSignatureBlobIndex(this.MethodSignature);
 
 			if (ilgen != null)
 			{
 				if (this.ModuleBuilder.symbolWriter != null)
 				{
 					this.ModuleBuilder.symbolWriter.OpenMethod(new SymbolToken(-pseudoToken | 0x06000000));
 				}
 				rva = ilgen.WriteBody(initLocals);
 				if (this.ModuleBuilder.symbolWriter != null)
 				{
 					this.ModuleBuilder.symbolWriter.CloseMethod();
 				}
 				ilgen = null;
 			}
 			else
 			{
 				rva = -1;
 			}
 
 			if (declarativeSecurity != null)
 			{
 				this.ModuleBuilder.AddDeclarativeSecurity(pseudoToken, declarativeSecurity);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="610" endline="613"><![CDATA[
 
 		internal ModuleBuilder ModuleBuilder
 		{
 			get { return typeBuilder.ModuleBuilder; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="614" endline="635"><![CDATA[
 		}
 
 		internal void WriteMethodDefRecord(int baseRVA, MetadataWriter mw, ref int paramList)
 		{
 			if (rva != -1)
 			{
 				mw.Write(rva + baseRVA);
 			}
 			else
 			{
 				mw.Write(0);
 			}
 			mw.Write((short)implFlags);
 			mw.Write((short)attributes);
 			mw.WriteStringIndex(nameIndex);
 			mw.WriteBlobIndex(signature);
 			mw.WriteParam(paramList);
 			if (parameters != null)
 			{
 				paramList += parameters.Count;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="636" endline="646"><![CDATA[
 
 		internal void WriteParamRecords(MetadataWriter mw)
 		{
 			if (parameters != null)
 			{
 				foreach (ParameterBuilder pb in parameters)
 				{
 					pb.WriteParamRecord(mw);
 				}
 				foreach (ParameterBuilder pb in parameters)
 				{
 					pb.WriteParamRecord(mw);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="647" endline="658"><![CDATA[
 
 		internal void FixupToken(int token, ref int parameterToken)
 		{
 			typeBuilder.ModuleBuilder.RegisterTokenFixup(this.pseudoToken, token);
 			if (parameters != null)
 			{
 				foreach (ParameterBuilder pb in parameters)
 				{
 					pb.FixupToken(parameterToken++);
 				}
 				foreach (ParameterBuilder pb in parameters)
 				{
 					pb.FixupToken(parameterToken++);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="659" endline="669"><![CDATA[
 
 		internal override MethodSignature MethodSignature
 		{
 			get
 			{
 				if (methodSignature == null)
 				{
 					methodSignature = MethodSignature.MakeFromBuilder(returnType, parameterTypes, modifiers, callingConvention, gtpb == null ? 0 
 				}
 				return methodSignature;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="670" endline="686"><![CDATA[
 		}
 
 		internal override int ImportTo(ModuleBuilder other)
 		{
 			if (typeBuilder.IsGenericTypeDefinition)
 			{
 				return other.ImportMember(TypeBuilder.GetMethod(typeBuilder, this));
 			}
 			else if (other == typeBuilder.ModuleBuilder)
 			{
 				return pseudoToken;
 			}
 			else
 			{
 				return other.ImportMethodOrField(typeBuilder, name, this.MethodSignature);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\MethodBuilder.cs" startline="687" endline="691"><![CDATA[
 
 		internal void CheckBaked()
 		{
 			typeBuilder.CheckBaked();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\TypeNameParser.cs" startline="43" endline="66"><![CDATA[
 		{
 			if (name == null)
 			{
 				return null;
 			}
 			StringBuilder sb = null;
 			for (int pos = 0; pos < name.Length; pos++)
 			{
 				char c = name[pos];
 				if (SpecialChars.IndexOf(c) != -1)
 				{
 					if (sb == null)
 					{
 						sb = new StringBuilder(name, 0, pos, name.Length + 3);
 					}
 					sb.Append('\\').Append(c);
 				}
 				else if (sb != null)
 				{
 					sb.Append(c);
 				}
 			}
 			for (int pos = 0; pos < name.Length; pos++)
 			{
 				char c = name[pos];
 				if (SpecialChars.IndexOf(c) != -1)
 				{
 					if (sb == null)
 					{
 						sb = new StringBuilder(name, 0, pos, name.Length + 3);
 					}
 					sb.Append('\\').Append(c);
 				}
 				else if (sb != null)
 				{
 					sb.Append(c);
 				}
 			}
 			return sb != null ? sb.ToString() 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\TypeNameParser.cs" startline="67" endline="86"><![CDATA[
 
 		internal static string Unescape(string name)
 		{
 			int pos = name.IndexOf('\\');
 			if (pos == -1)
 			{
 				return name;
 			}
 			StringBuilder sb = new StringBuilder(name, 0, pos, name.Length - 1);
 			for (; pos < name.Length; pos++)
 			{
 				char c = name[pos];
 				if (c == '\\')
 				{
 					c = name[++pos];
 				}
 				sb.Append(c);
 			}
 			for (; pos < name.Length; pos++)
 			{
 				char c = name[pos];
 				if (c == '\\')
 				{
 					c = name[++pos];
 				}
 				sb.Append(c);
 			}
 			return sb.ToString();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\TypeNameParser.cs" startline="87" endline="107"><![CDATA[
 
 		internal static TypeNameParser Parse(string typeName, bool throwOnError)
 		{
 			if (throwOnError)
 			{
 				Parser parser = new Parser(typeName);
 				return new TypeNameParser(ref parser, true);
 			}
 			else
 			{
 				try
 				{
 					Parser parser = new Parser(typeName);
 					return new TypeNameParser(ref parser, true);
 				}
 				catch (ArgumentException)
 				{
 					return new TypeNameParser();
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\TypeNameParser.cs" startline="108" endline="124"><![CDATA[
 
 		private TypeNameParser(ref Parser parser, bool withAssemblyName)
 		{
 			bool genericParameter = parser.pos != 0;
 			name = parser.NextNamePart();
 			nested = null;
 			parser.ParseNested(ref nested);
 			genericParameters = null;
 			parser.ParseGenericParameters(ref genericParameters);
 			modifiers = null;
 			parser.ParseModifiers(ref modifiers);
 			assemblyName = null;
 			if (withAssemblyName)
 			{
 				parser.ParseAssemblyName(genericParameter, ref assemblyName);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\TypeNameParser.cs" startline="125" endline="128"><![CDATA[
 
 		internal bool Error
 		{
 			get { return name == null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\TypeNameParser.cs" startline="129" endline="133"><![CDATA[
 		}
 
 		internal string FirstNamePart
 		{
 			get { return name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\TypeNameParser.cs" startline="134" endline="138"><![CDATA[
 		}
 
 		internal string AssemblyName
 		{
 			get { return assemblyName; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\TypeNameParser.cs" startline="139" endline="394"><![CDATA[
 		}
 
 		private struct Parser
 		{
 			private readonly string typeName;
 			internal int pos;
 
 			internal Parser(string typeName)
 			{
 				this.typeName = typeName;
 				this.pos = 0;
 			}
 
 			private void Check(bool condition)
 			{
 				if (!condition)
 				{
 					throw new ArgumentException("Invalid type name '" + typeName + "'");
 				}
 			}
 
 			private void Consume(char c)
 			{
 				Check(pos < typeName.Length && typeName[pos++] == c);
 			}
 
 			private bool TryConsume(char c)
 			{
 				if (pos < typeName.Length && typeName[pos] == c)
 				{
 					pos++;
 					return true;
 				}
 				else
 				{
 					return false;
 				}
 			}
 
 			internal string NextNamePart()
 			{
 				SkipWhiteSpace();
 				int start = pos;
 				for (; pos < typeName.Length; pos++)
 				{
 					char c = typeName[pos];
 					if (c == '\\')
 					{
 						pos++;
 						Check(pos < typeName.Length && SpecialChars.IndexOf(typeName[pos]) != -1);
 					}
 					else if (SpecialChars.IndexOf(c) != -1)
 					{
 						break;
 					}
 				}
 				Check(pos - start != 0);
 				if (start == 0 && pos == typeName.Length)
 				{
 					return typeName;
 				}
 				else
 				{
 					return typeName.Substring(start, pos - start);
 				}
 			}
 
 			internal void ParseNested(ref string[] nested)
 			{
 				while (TryConsume('+'))
 				{
 					Add(ref nested, NextNamePart());
 				}
 			}
 
 			internal void ParseGenericParameters(ref TypeNameParser[] genericParameters)
 			{
 				int saved = pos;
 				if (TryConsume('['))
 				{
 					SkipWhiteSpace();
 					if (TryConsume(']') || TryConsume('*') || TryConsume(','))
 					{
 						// it's not a generic parameter list, but an array instead
 						pos = saved;
 						return;
 					}
 					do
 					{
 						SkipWhiteSpace();
 						if (TryConsume('['))
 						{
 							Add(ref genericParameters, new TypeNameParser(ref this, true));
 							Consume(']');
 						}
 						else
 						{
 							Add(ref genericParameters, new TypeNameParser(ref this, false));
 						}
 					}
 					while (TryConsume(','));
 					Consume(']');
 					SkipWhiteSpace();
 				}
 			}
 
 			internal void ParseModifiers(ref short[] modifiers)
 			{
 				while (pos < typeName.Length)
 				{
 					switch (typeName[pos])
 					{
 						case '*'
 							pos++;
 							Add(ref modifiers, POINTER);
 							break;
 						case '&'
 							pos++;
 							Add(ref modifiers, BYREF);
 							break;
 						case '['
 							pos++;
 							Add(ref modifiers, ParseArray());
 							Consume(']');
 							break;
 						default
 							return;
 					}
 					SkipWhiteSpace();
 				}
 			}
 
 			internal void ParseAssemblyName(bool genericParameter, ref string assemblyName)
 			{
 				if (pos < typeName.Length)
 				{
 					if (typeName[pos] == ']' && genericParameter)
 					{
 						// ok
 					}
 					else
 					{
 						Consume(',');
 						SkipWhiteSpace();
 						if (genericParameter)
 						{
 							int start = pos;
 							while (pos < typeName.Length)
 							{
 								char c = typeName[pos];
 								if (c == '\\')
 								{
 									pos++;
 									// a backslash itself is not legal in an assembly name, so we don't need to check for an escaped backslash
 									Check(pos < typeName.Length && typeName[pos++] == ']');
 								}
 								else if (c == ']')
 								{
 									break;
 								}
 								else
 								{
 									pos++;
 								}
 							}
 							Check(pos < typeName.Length && typeName[pos] == ']');
 							assemblyName = typeName.Substring(start, pos - start).Replace("\\]", "]");
 						}
 						else
 						{
 							// only when an assembly name is used in a generic type parameter, will it be escaped
 							assemblyName = typeName.Substring(pos);
 						}
 						Check(assemblyName.Length != 0);
 					}
 				}
 				else
 				{
 					Check(!genericParameter);
 				}
 			}
 
 			private short ParseArray()
 			{
 				SkipWhiteSpace();
 				Check(pos < typeName.Length);
 				char c = typeName[pos];
 				if (c == ']')
 				{
 					return SZARRAY;
 				}
 				else if (c == '*')
 				{
 					pos++;
 					SkipWhiteSpace();
 					return 1;
 				}
 				else
 				{
 					short rank = 1;
 					while (TryConsume(','))
 					{
 						Check(rank < short.MaxValue);
 						rank++;
 						SkipWhiteSpace();
 					}
 					return rank;
 				}
 			}
 
 			private void SkipWhiteSpace()
 			{
 				while (pos < typeName.Length && Char.IsWhiteSpace(typeName[pos]))
 				{
 					pos++;
 				}
 			}
 
 			private static void Add<T>(ref T[] array, T elem)
 			{
 				if (array == null)
 				{
 					array = new T[] { elem };
 					return;
 				}
 				Array.Resize(ref array, array.Length + 1);
 				array[array.Length - 1] = elem;
 			}
 		}
 
 		internal Type GetType(Universe universe, Assembly context, bool throwOnError, string originalName)
 		{
 			Type type;
 			if (assemblyName != null)
 			{
 				Assembly asm = universe.Load(assemblyName, context, throwOnError);
 				if (asm == null)
 				{
 					return null;
 				}
 				type = asm.GetTypeImpl(name);
 			}
 			else if (context == null)
 			{
 				type = universe.Mscorlib.GetTypeImpl(name);
 			}
 			else
 			{
 				type = context.GetTypeImpl(name);
 				if (type == null && context != universe.Mscorlib)
 				{
 					type = universe.Mscorlib.GetTypeImpl(name);
 				}
 			}
 			return Expand(type, context, throwOnError, originalName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\TypeNameParser.cs" startline="395" endline="456"><![CDATA[
 
 		internal Type Expand(Type type, Assembly context, bool throwOnError, string originalName)
 		{
 			if (type == null)
 			{
 				if (throwOnError)
 				{
 					throw new TypeLoadException(originalName);
 				}
 				return null;
 			}
 			if (nested != null)
 			{
 				foreach (string nest in nested)
 				{
 					type = type.GetNestedType(nest, BindingFlags.Public | BindingFlags.NonPublic);
 					if (type == null)
 					{
 						if (throwOnError)
 						{
 							throw new TypeLoadException(originalName);
 						}
 						return null;
 					}
 				}
 				foreach (string nest in nested)
 				{
 					type = type.GetNestedType(nest, BindingFlags.Public | BindingFlags.NonPublic);
 					if (type == null)
 					{
 						if (throwOnError)
 						{
 							throw new TypeLoadException(originalName);
 						}
 						return null;
 					}
 				}
 			}
 			if (genericParameters != null)
 			{
 				Type[] typeArgs = new Type[genericParameters.Length];
 				for (int i = 0; i < typeArgs.Length; i++)
 				{
 					typeArgs[i] = genericParameters[i].GetType(type.Assembly.universe, context, throwOnError, originalName);
 					if (typeArgs[i] == null)
 					{
 						return null;
 					}
 				}
 				for (int i = 0; i < typeArgs.Length; i++)
 				{
 					typeArgs[i] = genericParameters[i].GetType(type.Assembly.universe, context, throwOnError, originalName);
 					if (typeArgs[i] == null)
 					{
 						return null;
 					}
 				}
 				type = type.MakeGenericType(typeArgs);
 			}
 			if (modifiers != null)
 			{
 				foreach (short modifier in modifiers)
 				{
 					switch (modifier)
 					{
 						case SZARRAY
 							type = type.MakeArrayType();
 							break;
 						case BYREF
 							type = type.MakeByRefType();
 							break;
 						case POINTER
 							type = type.MakePointerType();
 							break;
 						default
 							type = type.MakeArrayType(modifier);
 							break;
 					}
 				}
 				foreach (short modifier in modifiers)
 				{
 					switch (modifier)
 					{
 						case SZARRAY
 							type = type.MakeArrayType();
 							break;
 						case BYREF
 							type = type.MakeByRefType();
 							break;
 						case POINTER
 							type = type.MakePointerType();
 							break;
 						default
 							type = type.MakeArrayType(modifier);
 							break;
 					}
 				}
 			}
 			return type;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\generic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\codegen.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\attribute.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\argument.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="39" endline="52"><![CDATA[
 		{
 			Offset = br.ReadUInt32();
 			Size = br.ReadUInt32();
 			byte[] buf = new byte[32];
 			byte b;
 			int len = 0;
 			while ((b = br.ReadByte()) != 0)
 			{
 				buf[len++] = b;
 			}
 			while ((b = br.ReadByte()) != 0)
 			{
 				buf[len++] = b;
 			}
 			Name = Encoding.UTF8.GetString(buf, 0, len); ;
 			int padding = -1 + ((len + 4) & ~3) - len;
 			br.BaseStream.Seek(padding, SeekOrigin.Current);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="105" endline="143"><![CDATA[
 		internal readonly ModuleTable ModuleTable = new ModuleTable();
 		internal readonly TypeRefTable TypeRef = new TypeRefTable();
 		internal readonly TypeDefTable TypeDef = new TypeDefTable();
 		internal readonly FieldTable Field = new FieldTable();
 		internal readonly MemberRefTable MemberRef = new MemberRefTable();
 		internal readonly ConstantTable Constant = new ConstantTable();
 		internal readonly CustomAttributeTable CustomAttribute = new CustomAttributeTable();
 		internal readonly FieldMarshalTable FieldMarshal = new FieldMarshalTable();
 		internal readonly DeclSecurityTable DeclSecurity = new DeclSecurityTable();
 		internal readonly ClassLayoutTable ClassLayout = new ClassLayoutTable();
 		internal readonly FieldLayoutTable FieldLayout = new FieldLayoutTable();
 		internal readonly ParamTable Param = new ParamTable();
 		internal readonly InterfaceImplTable InterfaceImpl = new InterfaceImplTable();
 		internal readonly StandAloneSigTable StandAloneSig = new StandAloneSigTable();
 		internal readonly EventMapTable EventMap = new EventMapTable();
 		internal readonly EventTable Event = new EventTable();
 		internal readonly PropertyMapTable PropertyMap = new PropertyMapTable();
 		internal readonly PropertyTable Property = new PropertyTable();
 		internal readonly MethodSemanticsTable MethodSemantics = new MethodSemanticsTable();
 		internal readonly MethodImplTable MethodImpl = new MethodImplTable();
 		internal readonly ModuleRefTable ModuleRef = new ModuleRefTable();
 		internal readonly TypeSpecTable TypeSpec = new TypeSpecTable();
 		internal readonly ImplMapTable ImplMap = new ImplMapTable();
 		internal readonly FieldRVATable FieldRVA = new FieldRVATable();
 		internal readonly AssemblyTable AssemblyTable = new AssemblyTable();
 		internal readonly AssemblyRefTable AssemblyRef = new AssemblyRefTable();
 		internal readonly MethodDefTable MethodDef = new MethodDefTable();
 		internal readonly NestedClassTable NestedClass = new NestedClassTable();
 		internal readonly FileTable File = new FileTable();
 		internal readonly ExportedTypeTable ExportedType = new ExportedTypeTable();
 		internal readonly ManifestResourceTable ManifestResource = new ManifestResourceTable();
 		internal readonly GenericParamTable GenericParam = new GenericParamTable();
 		internal readonly MethodSpecTable MethodSpec = new MethodSpecTable();
 		internal readonly GenericParamConstraintTable GenericParamConstraint = new GenericParamConstraintTable();
 
 		internal Module(Universe universe)
 		{
 			this.universe = universe;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="144" endline="183"><![CDATA[
 
 		internal Table[] GetTables()
 		{
 			Table[] tables = new Table[64];
 			tables[ModuleTable.Index] = ModuleTable;
 			tables[TypeRefTable.Index] = TypeRef;
 			tables[TypeDefTable.Index] = TypeDef;
 			tables[FieldTable.Index] = Field;
 			tables[MemberRefTable.Index] = MemberRef;
 			tables[ConstantTable.Index] = Constant;
 			tables[CustomAttributeTable.Index] = CustomAttribute;
 			tables[FieldMarshalTable.Index] = FieldMarshal;
 			tables[DeclSecurityTable.Index] = DeclSecurity;
 			tables[ClassLayoutTable.Index] = ClassLayout;
 			tables[FieldLayoutTable.Index] = FieldLayout;
 			tables[ParamTable.Index] = Param;
 			tables[InterfaceImplTable.Index] = InterfaceImpl;
 			tables[StandAloneSigTable.Index] = StandAloneSig;
 			tables[EventMapTable.Index] = EventMap;
 			tables[EventTable.Index] = Event;
 			tables[PropertyMapTable.Index] = PropertyMap;
 			tables[PropertyTable.Index] = Property;
 			tables[MethodSemanticsTable.Index] = MethodSemantics;
 			tables[MethodImplTable.Index] = MethodImpl;
 			tables[ModuleRefTable.Index] = ModuleRef;
 			tables[TypeSpecTable.Index] = TypeSpec;
 			tables[ImplMapTable.Index] = ImplMap;
 			tables[FieldRVATable.Index] = FieldRVA;
 			tables[AssemblyTable.Index] = AssemblyTable;
 			tables[AssemblyRefTable.Index] = AssemblyRef;
 			tables[MethodDefTable.Index] = MethodDef;
 			tables[NestedClassTable.Index] = NestedClass;
 			tables[FileTable.Index] = File;
 			tables[ExportedTypeTable.Index] = ExportedType;
 			tables[ManifestResourceTable.Index] = ManifestResource;
 			tables[GenericParamTable.Index] = GenericParam;
 			tables[MethodSpecTable.Index] = MethodSpec;
 			tables[GenericParamConstraintTable.Index] = GenericParamConstraint;
 			return tables;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="184" endline="187"><![CDATA[
 
 		public virtual void __GetDataDirectoryEntry(int index, out int rva, out int length)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="188" endline="192"><![CDATA[
 		}
 
 		public virtual long __RelativeVirtualAddressToFileOffset(int rva)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="193" endline="197"><![CDATA[
 		}
 
 		public virtual void GetPEKind(out PortableExecutableKinds peKind, out ImageFileMachine machine)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="198" endline="202"><![CDATA[
 		}
 
 		public virtual int __Subsystem
 		{
 			get { throw new NotSupportedException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="203" endline="208"><![CDATA[
 		}
 
 		public FieldInfo GetField(string name)
 		{
 			return IsResource() ? null 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="209" endline="213"><![CDATA[
 
 		public FieldInfo GetField(string name, BindingFlags bindingFlags)
 		{
 			return IsResource() ? null 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="214" endline="218"><![CDATA[
 
 		public FieldInfo[] GetFields()
 		{
 			return IsResource() ? Empty<FieldInfo>.Array 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="219" endline="223"><![CDATA[
 
 		public FieldInfo[] GetFields(BindingFlags bindingFlags)
 		{
 			return IsResource() ? Empty<FieldInfo>.Array 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="224" endline="228"><![CDATA[
 
 		public MethodInfo GetMethod(string name)
 		{
 			return IsResource() ? null 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="229" endline="233"><![CDATA[
 
 		public MethodInfo GetMethod(string name, Type[] types)
 		{
 			return IsResource() ? null 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="234" endline="238"><![CDATA[
 
 		public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConv, Type[] types, ParameterModifier[] modifiers)
 		{
 			return IsResource() ? null 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="239" endline="243"><![CDATA[
 
 		public MethodInfo[] GetMethods()
 		{
 			return IsResource() ? Empty<MethodInfo>.Array 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="244" endline="248"><![CDATA[
 
 		public MethodInfo[] GetMethods(BindingFlags bindingFlags)
 		{
 			return IsResource() ? Empty<MethodInfo>.Array 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="249" endline="252"><![CDATA[
 
 		public ConstructorInfo __ModuleInitializer
 		{
 			get { return IsResource() ? null 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="253" endline="264"><![CDATA[
 		}
 
 		public byte[] ResolveSignature(int metadataToken)
 		{
 			ModuleReader rdr = this as ModuleReader;
 			if (rdr != null)
 			{
 				ByteReader br = rdr.ResolveSignature(metadataToken);
 				return br.ReadBytes(br.Length);
 			}
 			throw new NotSupportedException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="265" endline="268"><![CDATA[
 
 		public virtual __StandAloneMethodSig __ResolveStandAloneMethodSig(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="269" endline="273"><![CDATA[
 		}
 
 		public int MetadataToken
 		{
 			get { return IsResource() ? 0 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="274" endline="296"><![CDATA[
 		}
 
 		public abstract int MDStreamVersion { get ;}
 		public abstract Assembly Assembly { get; }
 		public abstract string FullyQualifiedName { get; }
 		public abstract string Name { get; }
 		public abstract Guid ModuleVersionId { get; }
 		public abstract Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
 		public abstract MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
 		public abstract FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
 		public abstract MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
 
 		public abstract string ResolveString(int metadataToken);
 		public abstract Type[] __ResolveOptionalParameterTypes(int metadataToken);
 		public abstract string ScopeName { get; }
 
 		internal abstract Type GetTypeImpl(string typeName);
 		internal abstract void GetTypesImpl(List<Type> list);
 
 		public Type GetType(string className)
 		{
 			return GetType(className, false, false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="297" endline="301"><![CDATA[
 
 		public Type GetType(string className, bool ignoreCase)
 		{
 			return GetType(className, false, ignoreCase);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="302" endline="326"><![CDATA[
 
 		public Type GetType(string className, bool throwOnError, bool ignoreCase)
 		{
 			if (ignoreCase)
 			{
 				throw new NotImplementedException();
 			}
 			TypeNameParser parser = TypeNameParser.Parse(className, throwOnError);
 			if (parser.Error)
 			{
 				return null;
 			}
 			if (parser.AssemblyName != null)
 			{
 				if (throwOnError)
 				{
 					throw new ArgumentException("Type names passed to Module.GetType() must not specify an assembly.");
 				}
 				else
 				{
 					return null;
 				}
 			}
 			return parser.Expand(GetTypeImpl(parser.FirstNamePart), this.Assembly, throwOnError, className);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="327" endline="333"><![CDATA[
 
 		public Type[] GetTypes()
 		{
 			List<Type> list = new List<Type>();
 			GetTypesImpl(list);
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="334" endline="346"><![CDATA[
 
 		public Type[] FindTypes(TypeFilter filter, object filterCriteria)
 		{
 			List<Type> list = new List<Type>();
 			foreach (Type type in GetTypes())
 			{
 				if (filter(type, filterCriteria))
 				{
 					list.Add(type);
 				}
 			}
 			foreach (Type type in GetTypes())
 			{
 				if (filter(type, filterCriteria))
 				{
 					list.Add(type);
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="347" endline="351"><![CDATA[
 
 		public virtual bool IsResource()
 		{
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="352" endline="356"><![CDATA[
 
 		public Type ResolveType(int metadataToken)
 		{
 			return ResolveType(metadataToken, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="357" endline="361"><![CDATA[
 
 		public MethodBase ResolveMethod(int metadataToken)
 		{
 			return ResolveMethod(metadataToken, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="362" endline="366"><![CDATA[
 
 		public FieldInfo ResolveField(int metadataToken)
 		{
 			return ResolveField(metadataToken, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="367" endline="371"><![CDATA[
 
 		public MemberInfo ResolveMember(int metadataToken)
 		{
 			return ResolveMember(metadataToken, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="372" endline="376"><![CDATA[
 
 		public bool IsDefined(Type attributeType, bool inherit)
 		{
 			return CustomAttributeData.__GetCustomAttributes(this, attributeType, inherit).Count != 0;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="377" endline="381"><![CDATA[
 
 		public IList<CustomAttributeData> __GetCustomAttributes(Type attributeType, bool inherit)
 		{
 			return CustomAttributeData.__GetCustomAttributes(this, attributeType, inherit);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="382" endline="386"><![CDATA[
 
 		public virtual IList<CustomAttributeData> __GetPlaceholderAssemblyCustomAttributes(bool multiple, bool security)
 		{
 			return Empty<CustomAttributeData>.Array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="387" endline="399"><![CDATA[
 
 		public abstract AssemblyName[] __GetReferencedAssemblies();
 
 		internal Type CanonicalizeType(Type type)
 		{
 			Type canon;
 			if (!universe.canonicalizedTypes.TryGetValue(type, out canon))
 			{
 				canon = type;
 				universe.canonicalizedTypes.Add(canon, canon);
 			}
 			return canon;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="400" endline="408"><![CDATA[
 
 		internal abstract Type GetModuleType();
 
 		internal abstract ByteReader GetBlob(int blobIndex);
 
 		internal IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			return GetCustomAttributes(0x00000001, attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="409" endline="433"><![CDATA[
 
 		internal List<CustomAttributeData> GetCustomAttributes(int metadataToken, Type attributeType)
 		{
 			List<CustomAttributeData> list = new List<CustomAttributeData>();
 			// TODO use binary search?
 			for (int i = 0; i < CustomAttribute.records.Length; i++)
 			{
 				if (CustomAttribute.records[i].Parent == metadataToken)
 				{
 					if (attributeType == null)
 					{
 						list.Add(new CustomAttributeData(this, i));
 					}
 					else
 					{
 						ConstructorInfo constructor = (ConstructorInfo)ResolveMethod(CustomAttribute.records[i].Type);
 						if (attributeType.IsAssignableFrom(constructor.DeclaringType))
 						{
 							list.Add(new CustomAttributeData(this.Assembly, constructor, GetBlob(CustomAttribute.records[i].Value)));
 						}
 					}
 				}
 			}
 			for (int i = 0; i < CustomAttribute.records.Length; i++)
 			{
 				if (CustomAttribute.records[i].Parent == metadataToken)
 				{
 					if (attributeType == null)
 					{
 						list.Add(new CustomAttributeData(this, i));
 					}
 					else
 					{
 						ConstructorInfo constructor = (ConstructorInfo)ResolveMethod(CustomAttribute.records[i].Type);
 						if (attributeType.IsAssignableFrom(constructor.DeclaringType))
 						{
 							list.Add(new CustomAttributeData(this.Assembly, constructor, GetBlob(CustomAttribute.records[i].Value)));
 						}
 					}
 				}
 			}
 			return list;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="434" endline="449"><![CDATA[
 
 		internal IList<CustomAttributeData> GetDeclarativeSecurity(int metadataToken)
 		{
 			List<CustomAttributeData> list = new List<CustomAttributeData>();
 			// TODO use binary search?
 			for (int i = 0; i < DeclSecurity.records.Length; i++)
 			{
 				if (DeclSecurity.records[i].Parent == metadataToken)
 				{
 					int action = DeclSecurity.records[i].Action;
 					int permissionSet = DeclSecurity.records[i].PermissionSet;
 					CustomAttributeData.ReadDeclarativeSecurity(this.Assembly, list, action, GetBlob(permissionSet));
 				}
 			}
 			for (int i = 0; i < DeclSecurity.records.Length; i++)
 			{
 				if (DeclSecurity.records[i].Parent == metadataToken)
 				{
 					int action = DeclSecurity.records[i].Action;
 					int permissionSet = DeclSecurity.records[i].PermissionSet;
 					CustomAttributeData.ReadDeclarativeSecurity(this.Assembly, list, action, GetBlob(permissionSet));
 				}
 			}
 			return list;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="450" endline="453"><![CDATA[
 
 		internal virtual void Dispose()
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="454" endline="457"><![CDATA[
 
 		internal virtual void ExportTypes(int fileToken, IKVM.Reflection.Emit.ModuleBuilder manifestModule)
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="60" endline="112"><![CDATA[
 		private readonly PEReader peFile = new PEReader();
 		private readonly CliHeader cliHeader = new CliHeader();
 		private string imageRuntimeVersion;
 		private int metadataStreamVersion;
 		private byte[] stringHeap;
 		private byte[] blobHeap;
 		private byte[] userStringHeap;
 		private byte[] guidHeap;
 		private TypeDefImpl[] typeDefs;
 		private TypeDefImpl moduleType;
 		private Assembly[] assemblyRefs;
 		private Type[] typeRefs;
 		private Type[] typeSpecs;
 		private FieldInfo[] fields;
 		private MethodBase[] methods;
 		private MemberInfo[] memberRefs;
 		private Dictionary<int, string> strings = new Dictionary<int, string>();
 		private Dictionary<string, Type> types = new Dictionary<string, Type>();
 		private Dictionary<string, LazyForwardedType> forwardedTypes = new Dictionary<string, LazyForwardedType>();
 
 		private sealed class LazyForwardedType
 		{
 			private readonly int assemblyRef;
 			private Type type;
 
 			internal LazyForwardedType(int assemblyRef)
 			{
 				this.assemblyRef = assemblyRef;
 			}
 
 			internal Type GetType(ModuleReader module, string typeName)
 			{
 				if (type == null)
 				{
 					Assembly asm = module.ResolveAssemblyRef(assemblyRef);
 					type = asm.GetType(typeName, true);
 				}
 				return type;
 			}
 		}
 
 		internal ModuleReader(AssemblyReader assembly, Universe universe, Stream stream, string location)
 			
 		{
 			this.stream = stream;
 			this.location = location;
 			Read();
 			if (assembly == null && AssemblyTable.records.Length != 0)
 			{
 				assembly = new AssemblyReader(location, this);
 			}
 			this.assembly = assembly;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="113" endline="145"><![CDATA[
 
 		private void Read()
 		{
 			BinaryReader br = new BinaryReader(stream);
 			peFile.Read(br);
 			stream.Seek(peFile.RvaToFileOffset(peFile.GetComDescriptorVirtualAddress()), SeekOrigin.Begin);
 			cliHeader.Read(br);
 			stream.Seek(peFile.RvaToFileOffset(cliHeader.MetaDataRVA), SeekOrigin.Begin);
 			foreach (StreamHeader sh in ReadStreamHeaders(br, out imageRuntimeVersion))
 			{
 				switch (sh.Name)
 				{
 					case "#Strings"
 						stringHeap = ReadHeap(stream, sh);
 						break;
 					case "#Blob"
 						blobHeap = ReadHeap(stream, sh);
 						break;
 					case "#US"
 						userStringHeap = ReadHeap(stream, sh);
 						break;
 					case "#GUID"
 						guidHeap = ReadHeap(stream, sh);
 						break;
 					case "#~"
 						stream.Seek(peFile.RvaToFileOffset(cliHeader.MetaDataRVA + sh.Offset), SeekOrigin.Begin);
 						ReadTables(br);
 						break;
 					default
 						throw new BadImageFormatException("Unsupported stream
 				}
 			}
 			foreach (StreamHeader sh in ReadStreamHeaders(br, out imageRuntimeVersion))
 			{
 				switch (sh.Name)
 				{
 					case "#Strings"
 						stringHeap = ReadHeap(stream, sh);
 						break;
 					case "#Blob"
 						blobHeap = ReadHeap(stream, sh);
 						break;
 					case "#US"
 						userStringHeap = ReadHeap(stream, sh);
 						break;
 					case "#GUID"
 						guidHeap = ReadHeap(stream, sh);
 						break;
 					case "#~"
 						stream.Seek(peFile.RvaToFileOffset(cliHeader.MetaDataRVA + sh.Offset), SeekOrigin.Begin);
 						ReadTables(br);
 						break;
 					default
 						throw new BadImageFormatException("Unsupported stream
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="146" endline="150"><![CDATA[
 
 		internal void SetAssembly(Assembly assembly)
 		{
 			this.assembly = assembly;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="151" endline="174"><![CDATA[
 
 		private static StreamHeader[] ReadStreamHeaders(BinaryReader br, out string Version)
 		{
 			uint Signature = br.ReadUInt32();
 			if (Signature != 0x424A5342)
 			{
 				throw new BadImageFormatException("Invalid metadata signature");
 			}
 			ushort MajorVersion = br.ReadUInt16();
 			ushort MinorVersion = br.ReadUInt16();
 			uint Reserved = br.ReadUInt32();
 			uint Length = br.ReadUInt32();
 			byte[] buf = br.ReadBytes((int)Length);
 			Version = Encoding.UTF8.GetString(buf).TrimEnd('\u0000');
 			ushort Flags = br.ReadUInt16();
 			ushort Streams = br.ReadUInt16();
 			StreamHeader[] streamHeaders = new StreamHeader[Streams];
 			for (int i = 0; i < streamHeaders.Length; i++)
 			{
 				streamHeaders[i] = new StreamHeader();
 				streamHeaders[i].Read(br);
 			}
 			for (int i = 0; i < streamHeaders.Length; i++)
 			{
 				streamHeaders[i] = new StreamHeader();
 				streamHeaders[i].Read(br);
 			}
 			return streamHeaders;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="175" endline="206"><![CDATA[
 
 		private void ReadTables(BinaryReader br)
 		{
 			Table[] tables = GetTables();
 			uint Reserved0 = br.ReadUInt32();
 			byte MajorVersion = br.ReadByte();
 			byte MinorVersion = br.ReadByte();
 			metadataStreamVersion = MajorVersion << 16 | MinorVersion;
 			byte HeapSizes = br.ReadByte();
 			byte Reserved7 = br.ReadByte();
 			ulong Valid = br.ReadUInt64();
 			ulong Sorted = br.ReadUInt64();
 			for (int i = 0; i < 64; i++)
 			{
 				if ((Valid & (1UL << i)) != 0)
 				{
 					tables[i].RowCount = br.ReadInt32();
 				}
 				else if (tables[i] != null)
 				{
 					tables[i].RowCount = 0;
 				}
 			}
 			for (int i = 0; i < 64; i++)
 			{
 				if ((Valid & (1UL << i)) != 0)
 				{
 					tables[i].RowCount = br.ReadInt32();
 				}
 				else if (tables[i] != null)
 				{
 					tables[i].RowCount = 0;
 				}
 			}
 			MetadataReader mr = new MetadataReader(this, br, HeapSizes);
 			for (int i = 0; i < 64; i++)
 			{
 				if ((Valid & (1UL << i)) != 0)
 				{
 					tables[i].Read(mr);
 				}
 			}
 			for (int i = 0; i < 64; i++)
 			{
 				if ((Valid & (1UL << i)) != 0)
 				{
 					tables[i].Read(mr);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="207" endline="222"><![CDATA[
 
 		private byte[] ReadHeap(Stream stream, StreamHeader sh)
 		{
 			byte[] buf = new byte[sh.Size];
 			stream.Seek(peFile.RvaToFileOffset(cliHeader.MetaDataRVA + sh.Offset), SeekOrigin.Begin);
 			for (int pos = 0; pos < buf.Length; )
 			{
 				int read = stream.Read(buf, pos, buf.Length - pos);
 				if (read == 0)
 				{
 					throw new BadImageFormatException();
 				}
 				pos += read;
 			}
 			for (int pos = 0; pos < buf.Length; )
 			{
 				int read = stream.Read(buf, pos, buf.Length - pos);
 				if (read == 0)
 				{
 					throw new BadImageFormatException();
 				}
 				pos += read;
 			}
 			return buf;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="223" endline="227"><![CDATA[
 
 		internal void SeekRVA(int rva)
 		{
 			stream.Seek(peFile.RvaToFileOffset((uint)rva), SeekOrigin.Begin);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="228" endline="239"><![CDATA[
 
 		internal override void GetTypesImpl(List<Type> list)
 		{
 			PopulateTypeDef();
 			foreach (TypeDefImpl type in typeDefs)
 			{
 				if (type != moduleType)
 				{
 					list.Add(type);
 				}
 			}
 			foreach (TypeDefImpl type in typeDefs)
 			{
 				if (type != moduleType)
 				{
 					list.Add(type);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="240" endline="270"><![CDATA[
 
 		private void PopulateTypeDef()
 		{
 			if (typeDefs == null)
 			{
 				typeDefs = new TypeDefImpl[TypeDef.records.Length];
 				for (int i = 0; i < typeDefs.Length; i++)
 				{
 					TypeDefImpl type = new TypeDefImpl(this, i);
 					typeDefs[i] = type;
 					if (type.IsModulePseudoType)
 					{
 						moduleType = type;
 					}
 					else
 					{
 						types.Add(type.FullName, type);
 					}
 				}
 				for (int i = 0; i < typeDefs.Length; i++)
 				{
 					TypeDefImpl type = new TypeDefImpl(this, i);
 					typeDefs[i] = type;
 					if (type.IsModulePseudoType)
 					{
 						moduleType = type;
 					}
 					else
 					{
 						types.Add(type.FullName, type);
 					}
 				}
 				// add forwarded types to forwardedTypes dictionary (because Module.GetType(string) should return them)
 				for (int i = 0; i < ExportedType.records.Length; i++)
 				{
 					int implementation = ExportedType.records[i].Implementation;
 					if (implementation >> 24 == AssemblyRefTable.Index)
 					{
 						string typeName = GetTypeName(ExportedType.records[i].TypeNamespace, ExportedType.records[i].TypeName);
 						forwardedTypes.Add(typeName, new LazyForwardedType((implementation & 0xFFFFFF) - 1));
 					}
 				}
 				for (int i = 0; i < ExportedType.records.Length; i++)
 				{
 					int implementation = ExportedType.records[i].Implementation;
 					if (implementation >> 24 == AssemblyRefTable.Index)
 					{
 						string typeName = GetTypeName(ExportedType.records[i].TypeNamespace, ExportedType.records[i].TypeName);
 						forwardedTypes.Add(typeName, new LazyForwardedType((implementation & 0xFFFFFF) - 1));
 					}
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="271" endline="290"><![CDATA[
 
 		internal string GetString(int index)
 		{
 			if (index == 0)
 			{
 				return null;
 			}
 			string str;
 			if (!strings.TryGetValue(index, out str))
 			{
 				int len = 0;
 				while (stringHeap[index + len] != 0)
 				{
 					len++;
 				}
 				while (stringHeap[index + len] != 0)
 				{
 					len++;
 				}
 				str = Encoding.UTF8.GetString(stringHeap, index, len);
 				strings.Add(index, str);
 			}
 			return str;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="291" endline="311"><![CDATA[
 
 		private static int ReadCompressedInt(byte[] buffer, ref int offset)
 		{
 			byte b1 = buffer[offset++];
 			if (b1 <= 0x7F)
 			{
 				return b1;
 			}
 			else if ((b1 & 0xC0) == 0x80)
 			{
 				byte b2 = buffer[offset++];
 				return ((b1 & 0x3F) << 8) | b2;
 			}
 			else
 			{
 				byte b2 = buffer[offset++];
 				byte b3 = buffer[offset++];
 				byte b4 = buffer[offset++];
 				return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="312" endline="319"><![CDATA[
 
 		internal byte[] GetBlobCopy(int blobIndex)
 		{
 			int len = ReadCompressedInt(blobHeap, ref blobIndex);
 			byte[] buf = new byte[len];
 			Buffer.BlockCopy(blobHeap, blobIndex, buf, 0, len);
 			return buf;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="320" endline="324"><![CDATA[
 
 		internal override ByteReader GetBlob(int blobIndex)
 		{
 			return ByteReader.FromBlob(blobHeap, blobIndex);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="325" endline="341"><![CDATA[
 
 		public override string ResolveString(int metadataToken)
 		{
 			string str;
 			if (!strings.TryGetValue(metadataToken, out str))
 			{
 				if ((metadataToken >> 24) != 0x70)
 				{
 					throw new ArgumentOutOfRangeException();
 				}
 				int index = metadataToken & 0xFFFFFF;
 				int len = ReadCompressedInt(userStringHeap, ref index) & ~1;
 				str = Encoding.Unicode.GetString(userStringHeap, index, len);
 				strings.Add(metadataToken, str);
 			}
 			return str;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="342" endline="427"><![CDATA[
 
 		internal Type ResolveType(int metadataToken, IGenericContext context)
 		{
 			switch (metadataToken >> 24)
 			{
 				case TypeDefTable.Index
 					PopulateTypeDef();
 					return typeDefs[(metadataToken & 0xFFFFFF) - 1];
 				case TypeRefTable.Index
 					{
 						if (typeRefs == null)
 						{
 							typeRefs = new Type[TypeRef.records.Length];
 						}
 						int index = (metadataToken & 0xFFFFFF) - 1;
 						if (typeRefs[index] == null)
 						{
 							int scope = TypeRef.records[index].ResolutionScope;
 							switch (scope >> 24)
 							{
 								case AssemblyRefTable.Index
 									{
 										Assembly assembly = ResolveAssemblyRef((scope & 0xFFFFFF) - 1);
 										string typeName = GetTypeName(TypeRef.records[index].TypeNameSpace, TypeRef.records[index].TypeName);
 										Type type = assembly.GetType(typeName);
 										if (type == null)
 										{
 											throw new TypeLoadException(String.Format("Type '{0}' not found in assembly '{1}'", typeName, assembly.FullName));
 										}
 										typeRefs[index] = type;
 										break;
 									}
 								case TypeRefTable.Index
 									{
 										Type outer = ResolveType(scope, null);
 										typeRefs[index] = outer.GetNestedType(GetString(TypeRef.records[index].TypeName), BindingFlags.Public | BindingFlags.NonPublic);
 										break;
 									}
 								case ModuleTable.Index
 									if (scope != 0 && scope != 1)
 									{
 										throw new NotImplementedException("self reference scope?");
 									}
 									typeRefs[index] = GetType(GetTypeName(TypeRef.records[index].TypeNameSpace, TypeRef.records[index].TypeName));
 									break;
 								case ModuleRefTable.Index
 									{
 										Module module = ResolveModuleRef(ModuleRef.records[(scope & 0xFFFFFF) - 1]);
 										string typeName = GetTypeName(TypeRef.records[index].TypeNameSpace, TypeRef.records[index].TypeName);
 										Type type = assembly.GetType(typeName);
 										if (type == null)
 										{
 											throw new TypeLoadException(String.Format("Type '{0}' not found in module '{1}'", typeName, module.Name));
 										}
 										typeRefs[index] = type;
 										break;
 									}
 								default
 									throw new NotImplementedException("ResolutionScope = " + scope.ToString("X"));
 							}
 						}
 						return typeRefs[index];
 					}
 				case TypeSpecTable.Index
 					{
 						if (typeSpecs == null)
 						{
 							typeSpecs = new Type[TypeSpec.records.Length];
 						}
 						int index = (metadataToken & 0xFFFFFF) - 1;
 						Type type = typeSpecs[index];
 						if (type == null)
 						{
 							TrackingGenericContext tc = context == null ? null 
 							type = Signature.ReadTypeSpec(this, ByteReader.FromBlob(blobHeap, TypeSpec.records[index]), tc);
 							if (tc == null || !tc.IsUsed)
 							{
 								typeSpecs[index] = type;
 							}
 						}
 						return type;
 					}
 				default
 					throw new NotImplementedException(String.Format("0x{0
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="428" endline="438"><![CDATA[
 
 		private Module ResolveModuleRef(int moduleNameIndex)
 		{
 			string moduleName = GetString(moduleNameIndex);
 			Module module = assembly.GetModule(moduleName);
 			if (module == null)
 			{
 				throw new FileNotFoundException(moduleName);
 			}
 			return module;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="439" endline="478"><![CDATA[
 
 		private sealed class TrackingGenericContext 
 		{
 			private readonly IGenericContext context;
 			private bool used;
 
 			internal TrackingGenericContext(IGenericContext context)
 			{
 				this.context = context;
 			}
 
 			internal bool IsUsed
 			{
 				get { return used; }
 			}
 
 			public Type GetGenericTypeArgument(int index)
 			{
 				used = true;
 				return context.GetGenericTypeArgument(index);
 			}
 
 			public Type GetGenericMethodArgument(int index)
 			{
 				used = true;
 				return context.GetGenericMethodArgument(index);
 			}
 		}
 
 		public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			if ((metadataToken >> 24) == TypeSpecTable.Index)
 			{
 				return ResolveType(metadataToken, new GenericContext(genericTypeArguments, genericMethodArguments));
 			}
 			else
 			{
 				return ResolveType(metadataToken, null);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="479" endline="490"><![CDATA[
 
 		private string GetTypeName(int typeNamespace, int typeName)
 		{
 			if (typeNamespace == 0)
 			{
 				return GetString(typeName);
 			}
 			else
 			{
 				return GetString(typeNamespace) + "." + GetString(typeName);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="491" endline="503"><![CDATA[
 
 		private Assembly ResolveAssemblyRef(int index)
 		{
 			if (assemblyRefs == null)
 			{
 				assemblyRefs = new Assembly[AssemblyRef.RowCount];
 			}
 			if (assemblyRefs[index] == null)
 			{
 				assemblyRefs[index] = ResolveAssemblyRefImpl(ref AssemblyRef.records[index]);
 			}
 			return assemblyRefs[index];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="504" endline="518"><![CDATA[
 
 		private Assembly ResolveAssemblyRefImpl(ref AssemblyRefTable.Record rec)
 		{
 			const int PublicKey = 0x0001;
 			string name = String.Format("{0}, Version={1}.{2}.{3}.{4}, Culture={5}, {6}={7}",
 				GetString(rec.Name),
 				rec.MajorVersion,
 				rec.MinorVersion,
 				rec.BuildNumber,
 				rec.RevisionNumber,
 				rec.Culture == 0 ? "neutral" 
 				(rec.Flags & PublicKey) == 0 ? "PublicKeyToken" 
 				PublicKeyOrTokenToString(rec.PublicKeyOrToken));
 			return universe.Load(name, this.Assembly, true);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="519" endline="537"><![CDATA[
 
 		private string PublicKeyOrTokenToString(int publicKeyOrToken)
 		{
 			if (publicKeyOrToken == 0)
 			{
 				return "null";
 			}
 			ByteReader br = GetBlob(publicKeyOrToken);
 			if (br.Length == 0)
 			{
 				return "null";
 			}
 			StringBuilder sb = new StringBuilder(br.Length * 2);
 			while (br.Length > 0)
 			{
 				sb.AppendFormat("{0
 			}
 			while (br.Length > 0)
 			{
 				sb.AppendFormat("{0
 			}
 			return sb.ToString();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="538" endline="546"><![CDATA[
 
 		public override Guid ModuleVersionId
 		{
 			get
 			{
 				byte[] buf = new byte[16];
 				Buffer.BlockCopy(guidHeap, 16 * (ModuleTable.records[0].Mvid - 1), buf, 0, 16);
 				return new Guid(buf);
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="547" endline="551"><![CDATA[
 		}
 
 		public override string FullyQualifiedName
 		{
 			get { return location ?? "<Unknown>"; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="552" endline="556"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return location == null ? "<Unknown>" 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="557" endline="561"><![CDATA[
 		}
 
 		public override Assembly Assembly
 		{
 			get { return assembly; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="562" endline="577"><![CDATA[
 		}
 
 		internal override Type GetTypeImpl(string typeName)
 		{
 			PopulateTypeDef();
 			Type type;
 			if (!types.TryGetValue(typeName, out type))
 			{
 				LazyForwardedType fw;
 				if (forwardedTypes.TryGetValue(typeName, out fw))
 				{
 					return fw.GetType(this, typeName);
 				}
 			}
 			return type;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="578" endline="592"><![CDATA[
 
 		public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			switch (metadataToken >> 24)
 			{
 				case FieldTable.Index
 					return ResolveField(metadataToken, genericTypeArguments, genericMethodArguments);
 				case MemberRefTable.Index
 					return GetMemberRef((metadataToken & 0xFFFFFF) - 1, genericTypeArguments, genericMethodArguments);
 				case MethodDefTable.Index
 				case MethodSpecTable.Index
 					return ResolveMethod(metadataToken, genericTypeArguments, genericMethodArguments);
 			}
 			throw new ArgumentOutOfRangeException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="593" endline="605"><![CDATA[
 
 		internal FieldInfo GetFieldAt(TypeDefImpl owner, int index)
 		{
 			if (fields == null)
 			{
 				fields = new FieldInfo[Field.records.Length];
 			}
 			if (fields[index] == null)
 			{
 				fields[index] = new FieldDefImpl(this, owner ?? FindFieldOwner(index), index);
 			}
 			return fields[index];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="606" endline="623"><![CDATA[
 
 		public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			if ((metadataToken >> 24) == FieldTable.Index)
 			{
 				int index = (metadataToken & 0xFFFFFF) - 1;
 				return GetFieldAt(null, index);
 			}
 			else if ((metadataToken >> 24) == MemberRefTable.Index)
 			{
 				FieldInfo field = GetMemberRef((metadataToken & 0xFFFFFF) - 1, genericTypeArguments, genericMethodArguments) as FieldInfo;
 				if (field != null)
 				{
 					return field;
 				}
 			}
 			throw new ArgumentOutOfRangeException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="624" endline="639"><![CDATA[
 
 		private TypeDefImpl FindFieldOwner(int fieldIndex)
 		{
 			// TODO use binary search?
 			for (int i = 0; i < TypeDef.records.Length; i++)
 			{
 				int field = TypeDef.records[i].FieldList - 1;
 				int end = TypeDef.records.Length > i + 1 ? TypeDef.records[i + 1].FieldList - 1 
 				if (field <= fieldIndex && fieldIndex < end)
 				{
 					PopulateTypeDef();
 					return typeDefs[i];
 				}
 			}
 			for (int i = 0; i < TypeDef.records.Length; i++)
 			{
 				int field = TypeDef.records[i].FieldList - 1;
 				int end = TypeDef.records.Length > i + 1 ? TypeDef.records[i + 1].FieldList - 1 
 				if (field <= fieldIndex && fieldIndex < end)
 				{
 					PopulateTypeDef();
 					return typeDefs[i];
 				}
 			}
 			throw new InvalidOperationException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="640" endline="653"><![CDATA[
 
 		internal MethodBase GetMethodAt(TypeDefImpl owner, int index)
 		{
 			if (methods == null)
 			{
 				methods = new MethodBase[MethodDef.records.Length];
 			}
 			if (methods[index] == null)
 			{
 				MethodDefImpl method = new MethodDefImpl(this, owner ?? FindMethodOwner(index), index);
 				methods[index] = method.IsConstructor ? new ConstructorInfoImpl(method) 
 			}
 			return methods[index];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="654" endline="701"><![CDATA[
 
 		private sealed class GenericContext 
 		{
 			private readonly Type[] genericTypeArguments;
 			private readonly Type[] genericMethodArguments;
 
 			internal GenericContext(Type[] genericTypeArguments, Type[] genericMethodArguments)
 			{
 				this.genericTypeArguments = genericTypeArguments;
 				this.genericMethodArguments = genericMethodArguments;
 			}
 
 			public Type GetGenericTypeArgument(int index)
 			{
 				return genericTypeArguments[index];
 			}
 
 			public Type GetGenericMethodArgument(int index)
 			{
 				return genericMethodArguments[index];
 			}
 		}
 
 		public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			if ((metadataToken >> 24) == MethodDefTable.Index)
 			{
 				int index = (metadataToken & 0xFFFFFF) - 1;
 				return GetMethodAt(null, index);
 			}
 			else if ((metadataToken >> 24) == MemberRefTable.Index)
 			{
 				int index = (metadataToken & 0xFFFFFF) - 1;
 				MethodBase method = GetMemberRef(index, genericTypeArguments, genericMethodArguments) as MethodBase;
 				if (method != null)
 				{
 					return method;
 				}
 			}
 			else if ((metadataToken >> 24) == MethodSpecTable.Index)
 			{
 				int index = (metadataToken & 0xFFFFFF) - 1;
 				MethodInfo method = (MethodInfo)ResolveMethod(MethodSpec.records[index].Method, genericTypeArguments, genericMethodArguments);
 				ByteReader instantiation = ByteReader.FromBlob(blobHeap, MethodSpec.records[index].Instantiation);
 				return method.MakeGenericMethod(Signature.ReadMethodSpec(this, instantiation, new GenericContext(genericTypeArguments, genericMethodArguments)));
 			}
 			throw new ArgumentOutOfRangeException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="702" endline="719"><![CDATA[
 
 		public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
 		{
 			if ((metadataToken >> 24) == MemberRefTable.Index)
 			{
 				int index = (metadataToken & 0xFFFFFF) - 1;
 				int sig = MemberRef.records[index].Signature;
 				return Signature.ReadOptionalParameterTypes(this, GetBlob(sig));
 			}
 			else if ((metadataToken >> 24) == MethodDefTable.Index)
 			{
 				// for convenience, we support passing a MethodDef token as well, because in some places
 				// it makes sense to have a vararg method that is referred to by its methoddef (e.g. ldftn).
 				// Note that MethodSpec doesn't make sense, because generic methods cannot be vararg.
 				return Type.EmptyTypes;
 			}
 			throw new ArgumentOutOfRangeException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="720" endline="723"><![CDATA[
 
 		public override string ScopeName
 		{
 			get { return GetString(ModuleTable.records[0].Name); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="724" endline="740"><![CDATA[
 		}
 
 		private TypeDefImpl FindMethodOwner(int methodIndex)
 		{
 			// TODO use binary search?
 			for (int i = 0; i < TypeDef.records.Length; i++)
 			{
 				int method = TypeDef.records[i].MethodList - 1;
 				int end = TypeDef.records.Length > i + 1 ? TypeDef.records[i + 1].MethodList - 1 
 				if (method <= methodIndex && methodIndex < end)
 				{
 					PopulateTypeDef();
 					return typeDefs[i];
 				}
 			}
 			for (int i = 0; i < TypeDef.records.Length; i++)
 			{
 				int method = TypeDef.records[i].MethodList - 1;
 				int end = TypeDef.records.Length > i + 1 ? TypeDef.records[i + 1].MethodList - 1 
 				if (method <= methodIndex && methodIndex < end)
 				{
 					PopulateTypeDef();
 					return typeDefs[i];
 				}
 			}
 			throw new InvalidOperationException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="741" endline="771"><![CDATA[
 
 		private MemberInfo GetMemberRef(int index, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			if (memberRefs == null)
 			{
 				memberRefs = new MemberInfo[MemberRef.records.Length];
 			}
 			if (memberRefs[index] == null)
 			{
 				int owner = MemberRef.records[index].Class;
 				int sig = MemberRef.records[index].Signature;
 				string name = GetString(MemberRef.records[index].Name);
 				switch (owner >> 24)
 				{
 					case MethodDefTable.Index
 						return GetMethodAt(null, (owner & 0xFFFFFF) - 1);
 					case ModuleRefTable.Index
 						memberRefs[index] = ResolveTypeMemberRef(ResolveModuleType(owner), name, ByteReader.FromBlob(blobHeap, sig), genericTypeArguments, genericMethodArguments);
 						break;
 					case TypeDefTable.Index
 					case TypeRefTable.Index
 						memberRefs[index] = ResolveTypeMemberRef(ResolveType(owner), name, ByteReader.FromBlob(blobHeap, sig), genericTypeArguments, genericMethodArguments);
 						break;
 					case TypeSpecTable.Index
 						return ResolveTypeMemberRef(ResolveType(owner, genericTypeArguments, genericMethodArguments), name, ByteReader.FromBlob(blobHeap, sig), genericTypeArguments, genericMethodArguments);
 					default
 						throw new BadImageFormatException();
 				}
 			}
 			return memberRefs[index];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="772" endline="783"><![CDATA[
 
 		private Type ResolveModuleType(int token)
 		{
 			int index = (token & 0xFFFFFF) - 1;
 			string name = GetString(ModuleRef.records[index]);
 			Module module = assembly.GetModule(name);
 			if (module == null || module.IsResource())
 			{
 				throw new BadImageFormatException();
 			}
 			return module.GetModuleType();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="784" endline="826"><![CDATA[
 
 		private MemberInfo ResolveTypeMemberRef(Type type, string name, ByteReader sig, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			IGenericContext context;
 			if ((genericTypeArguments == null && genericMethodArguments == null) || type.IsGenericType)
 			{
 				context = type;
 			}
 			else
 			{
 				context = new GenericContext(genericTypeArguments, genericMethodArguments);
 			}
 			if (sig.PeekByte() == Signature.FIELD)
 			{
 				Type org = type;
 				FieldSignature fieldSig = FieldSignature.ReadSig(this, sig, context);
 				do
 				{
 					FieldInfo field = type.FindField(name, fieldSig);
 					if (field != null)
 					{
 						return field;
 					}
 					type = type.BaseType;
 				} while (type != null);
 				throw new MissingFieldException(org.ToString(), name);
 			}
 			else
 			{
 				Type org = type;
 				MethodSignature methodSig = MethodSignature.ReadSig(this, sig, context);
 				do
 				{
 					MethodBase method = type.FindMethod(name, methodSig);
 					if (method != null)
 					{
 						return method;
 					}
 					type = type.BaseType;
 				} while (type != null);
 				throw new MissingMethodException(org.ToString(), name);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="827" endline="836"><![CDATA[
 
 		internal new ByteReader ResolveSignature(int metadataToken)
 		{
 			if ((metadataToken >> 24) == StandAloneSigTable.Index)
 			{
 				int index = (metadataToken & 0xFFFFFF) - 1;
 				return ByteReader.FromBlob(blobHeap, StandAloneSig.records[index]);
 			}
 			throw new ArgumentOutOfRangeException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="837" endline="841"><![CDATA[
 
 		public override __StandAloneMethodSig __ResolveStandAloneMethodSig(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			return MethodSignature.ReadStandAloneMethodSig(this, ResolveSignature(metadataToken), new GenericContext(genericTypeArguments, genericMethodArguments));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="842" endline="850"><![CDATA[
 
 		internal MethodInfo GetEntryPoint()
 		{
 			if (cliHeader.EntryPointToken != 0 && (cliHeader.Flags & CliHeader.COMIMAGE_FLAGS_NATIVE_ENTRYPOINT) == 0)
 			{
 				return (MethodInfo)ResolveMethod((int)cliHeader.EntryPointToken);
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="851" endline="860"><![CDATA[
 
 		internal string[] GetManifestResourceNames()
 		{
 			string[] names = new string[ManifestResource.records.Length];
 			for (int i = 0; i < ManifestResource.records.Length; i++)
 			{
 				names[i] = GetString(ManifestResource.records[i].Name);
 			}
 			for (int i = 0; i < ManifestResource.records.Length; i++)
 			{
 				names[i] = GetString(ManifestResource.records[i].Name);
 			}
 			return names;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="861" endline="872"><![CDATA[
 
 		internal ManifestResourceInfo GetManifestResourceInfo(string resourceName)
 		{
 			for (int i = 0; i < ManifestResource.records.Length; i++)
 			{
 				if (resourceName == GetString(ManifestResource.records[i].Name))
 				{
 					return new ManifestResourceInfo(this, i);
 				}
 			}
 			for (int i = 0; i < ManifestResource.records.Length; i++)
 			{
 				if (resourceName == GetString(ManifestResource.records[i].Name))
 				{
 					return new ManifestResourceInfo(this, i);
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="873" endline="891"><![CDATA[
 
 		internal Stream GetManifestResourceStream(string resourceName)
 		{
 			for (int i = 0; i < ManifestResource.records.Length; i++)
 			{
 				if (resourceName == GetString(ManifestResource.records[i].Name))
 				{
 					if (ManifestResource.records[i].Implementation != 0x26000000)
 					{
 						throw new NotImplementedException();
 					}
 					SeekRVA((int)cliHeader.ResourcesRVA + ManifestResource.records[i].Offset);
 					BinaryReader br = new BinaryReader(stream);
 					int length = br.ReadInt32();
 					return new MemoryStream(br.ReadBytes(length));
 				}
 			}
 			for (int i = 0; i < ManifestResource.records.Length; i++)
 			{
 				if (resourceName == GetString(ManifestResource.records[i].Name))
 				{
 					if (ManifestResource.records[i].Implementation != 0x26000000)
 					{
 						throw new NotImplementedException();
 					}
 					SeekRVA((int)cliHeader.ResourcesRVA + ManifestResource.records[i].Offset);
 					BinaryReader br = new BinaryReader(stream);
 					int length = br.ReadInt32();
 					return new MemoryStream(br.ReadBytes(length));
 				}
 			}
 			throw new FileNotFoundException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="892" endline="930"><![CDATA[
 
 		public override AssemblyName[] __GetReferencedAssemblies()
 		{
 			List<AssemblyName> list = new List<AssemblyName>();
 			for (int i = 0; i < AssemblyRef.records.Length; i++)
 			{
 				AssemblyName name = new AssemblyName();
 				name.Name = GetString(AssemblyRef.records[i].Name);
 				name.Version = new Version(
 					AssemblyRef.records[i].MajorVersion,
 					AssemblyRef.records[i].MinorVersion,
 					AssemblyRef.records[i].BuildNumber,
 					AssemblyRef.records[i].RevisionNumber);
 				if (AssemblyRef.records[i].PublicKeyOrToken != 0)
 				{
 					byte[] keyOrToken = GetBlobCopy(AssemblyRef.records[i].PublicKeyOrToken);
 					const int PublicKey = 0x0001;
 					if ((AssemblyRef.records[i].Flags & PublicKey) != 0)
 					{
 						name.SetPublicKey(keyOrToken);
 					}
 					else
 					{
 						name.SetPublicKeyToken(keyOrToken);
 					}
 				}
 				if (AssemblyRef.records[i].Culture != 0)
 				{
 					name.CultureInfo = new System.Globalization.CultureInfo(GetString(AssemblyRef.records[i].Culture));
 				}
 				else
 				{
 					name.CultureInfo = System.Globalization.CultureInfo.InvariantCulture;
 				}
 				name.Flags = (AssemblyNameFlags)AssemblyRef.records[i].Flags;
 				list.Add(name);
 			}
 			for (int i = 0; i < AssemblyRef.records.Length; i++)
 			{
 				AssemblyName name = new AssemblyName();
 				name.Name = GetString(AssemblyRef.records[i].Name);
 				name.Version = new Version(
 					AssemblyRef.records[i].MajorVersion,
 					AssemblyRef.records[i].MinorVersion,
 					AssemblyRef.records[i].BuildNumber,
 					AssemblyRef.records[i].RevisionNumber);
 				if (AssemblyRef.records[i].PublicKeyOrToken != 0)
 				{
 					byte[] keyOrToken = GetBlobCopy(AssemblyRef.records[i].PublicKeyOrToken);
 					const int PublicKey = 0x0001;
 					if ((AssemblyRef.records[i].Flags & PublicKey) != 0)
 					{
 						name.SetPublicKey(keyOrToken);
 					}
 					else
 					{
 						name.SetPublicKeyToken(keyOrToken);
 					}
 				}
 				if (AssemblyRef.records[i].Culture != 0)
 				{
 					name.CultureInfo = new System.Globalization.CultureInfo(GetString(AssemblyRef.records[i].Culture));
 				}
 				else
 				{
 					name.CultureInfo = System.Globalization.CultureInfo.InvariantCulture;
 				}
 				name.Flags = (AssemblyNameFlags)AssemblyRef.records[i].Flags;
 				list.Add(name);
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="931" endline="936"><![CDATA[
 
 		internal override Type GetModuleType()
 		{
 			PopulateTypeDef();
 			return moduleType;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="937" endline="940"><![CDATA[
 
 		internal string ImageRuntimeVersion
 		{
 			get { return imageRuntimeVersion; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="941" endline="945"><![CDATA[
 		}
 
 		public override int MDStreamVersion
 		{
 			get { return metadataStreamVersion; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="946" endline="951"><![CDATA[
 		}
 
 		public override void __GetDataDirectoryEntry(int index, out int rva, out int length)
 		{
 			peFile.GetDataDirectoryEntry(index, out rva, out length);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="952" endline="956"><![CDATA[
 
 		public override long __RelativeVirtualAddressToFileOffset(int rva)
 		{
 			return peFile.RvaToFileOffset((uint)rva);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="957" endline="975"><![CDATA[
 
 		public override void GetPEKind(out PortableExecutableKinds peKind, out ImageFileMachine machine)
 		{
 			peKind = 0;
 			if ((cliHeader.Flags & CliHeader.COMIMAGE_FLAGS_ILONLY) != 0)
 			{
 				peKind |= PortableExecutableKinds.ILOnly;
 			}
 			if ((cliHeader.Flags & CliHeader.COMIMAGE_FLAGS_32BITREQUIRED) != 0)
 			{
 				peKind |= PortableExecutableKinds.Required32Bit;
 			}
 			if (peFile.OptionalHeader.Magic == IMAGE_OPTIONAL_HEADER.IMAGE_NT_OPTIONAL_HDR64_MAGIC)
 			{
 				peKind |= PortableExecutableKinds.PE32Plus;
 			}
 
 			machine = (ImageFileMachine)peFile.FileHeader.Machine;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="976" endline="979"><![CDATA[
 
 		public override int __Subsystem
 		{
 			get { return peFile.OptionalHeader.Subsystem; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="980" endline="1015"><![CDATA[
 		}
 
 		public override IList<CustomAttributeData> __GetPlaceholderAssemblyCustomAttributes(bool multiple, bool security)
 		{
 			string typeName;
 			switch ((multiple ? 1 
 			{
 				case 0
 					typeName = "System.Runtime.CompilerServices.AssemblyAttributesGoHere";
 					break;
 				case 1
 					typeName = "System.Runtime.CompilerServices.AssemblyAttributesGoHereM";
 					break;
 				case 2
 					typeName = "System.Runtime.CompilerServices.AssemblyAttributesGoHereS";
 					break;
 				case 3
 				default
 					typeName = "System.Runtime.CompilerServices.AssemblyAttributesGoHereSM";
 					break;
 			}
 			List<CustomAttributeData> list = new List<CustomAttributeData>();
 			for (int i = 0; i < CustomAttribute.records.Length; i++)
 			{
 				if ((CustomAttribute.records[i].Parent >> 24) == TypeRefTable.Index)
 				{
 					int index = (CustomAttribute.records[i].Parent & 0xFFFFFF) - 1;
 					if (typeName == GetTypeName(TypeRef.records[index].TypeNameSpace, TypeRef.records[index].TypeName))
 					{
 						ConstructorInfo constructor = (ConstructorInfo)ResolveMethod(CustomAttribute.records[i].Type);
 						list.Add(new CustomAttributeData(this.Assembly, constructor, GetBlob(CustomAttribute.records[i].Value)));
 					}
 				}
 			}
 			for (int i = 0; i < CustomAttribute.records.Length; i++)
 			{
 				if ((CustomAttribute.records[i].Parent >> 24) == TypeRefTable.Index)
 				{
 					int index = (CustomAttribute.records[i].Parent & 0xFFFFFF) - 1;
 					if (typeName == GetTypeName(TypeRef.records[index].TypeNameSpace, TypeRef.records[index].TypeName))
 					{
 						ConstructorInfo constructor = (ConstructorInfo)ResolveMethod(CustomAttribute.records[i].Type);
 						list.Add(new CustomAttributeData(this.Assembly, constructor, GetBlob(CustomAttribute.records[i].Value)));
 					}
 				}
 			}
 			return list;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="1016" endline="1020"><![CDATA[
 
 		internal override void Dispose()
 		{
 			stream.Close();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ModuleReader.cs" startline="1021" endline="1026"><![CDATA[
 
 		internal override void ExportTypes(int fileToken, IKVM.Reflection.Emit.ModuleBuilder manifestModule)
 		{
 			PopulateTypeDef();
 			manifestModule.ExportTypes(typeDefs, fileToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="33" endline="35"><![CDATA[
 		{
 			this.token = token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="36" endline="39"><![CDATA[
 
 		public int Token
 		{
 			get { return token; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="40" endline="45"><![CDATA[
 		}
 
 		public override bool Equals(object obj)
 		{
 			return obj as EventToken? == this;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="46" endline="50"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="51" endline="55"><![CDATA[
 
 		public bool Equals(EventToken other)
 		{
 			return this == other;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="56" endline="60"><![CDATA[
 
 		public static bool operator ==(EventToken et1, EventToken et2)
 		{
 			return et1.token == et2.token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="61" endline="65"><![CDATA[
 
 		public static bool operator !=(EventToken et1, EventToken et2)
 		{
 			return et1.token != et2.token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="66" endline="76"><![CDATA[
 	}
 
 	public struct FieldToken
 	{
 		public static readonly FieldToken Empty;
 		private readonly int token;
 
 		internal FieldToken(int token)
 		{
 			this.token = token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="77" endline="80"><![CDATA[
 
 		internal bool IsPseudoToken
 		{
 			get { return token < 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="81" endline="85"><![CDATA[
 		}
 
 		public int Token
 		{
 			get { return token; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="86" endline="91"><![CDATA[
 		}
 
 		public override bool Equals(object obj)
 		{
 			return obj as FieldToken? == this;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="92" endline="96"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="97" endline="101"><![CDATA[
 
 		public bool Equals(FieldToken other)
 		{
 			return this == other;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="102" endline="106"><![CDATA[
 
 		public static bool operator ==(FieldToken ft1, FieldToken ft2)
 		{
 			return ft1.token == ft2.token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="107" endline="111"><![CDATA[
 
 		public static bool operator !=(FieldToken ft1, FieldToken ft2)
 		{
 			return ft1.token != ft2.token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="112" endline="122"><![CDATA[
 	}
 
 	public struct MethodToken
 	{
 		public static readonly MethodToken Empty;
 		private readonly int token;
 
 		internal MethodToken(int token)
 		{
 			this.token = token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="123" endline="126"><![CDATA[
 
 		internal bool IsPseudoToken
 		{
 			get { return token < 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="127" endline="131"><![CDATA[
 		}
 
 		public int Token
 		{
 			get { return token; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="132" endline="137"><![CDATA[
 		}
 
 		public override bool Equals(object obj)
 		{
 			return obj as MethodToken? == this;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="138" endline="142"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="143" endline="147"><![CDATA[
 
 		public bool Equals(MethodToken other)
 		{
 			return this == other;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="148" endline="152"><![CDATA[
 
 		public static bool operator ==(MethodToken mt1, MethodToken mt2)
 		{
 			return mt1.token == mt2.token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="153" endline="157"><![CDATA[
 
 		public static bool operator !=(MethodToken mt1, MethodToken mt2)
 		{
 			return mt1.token != mt2.token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="158" endline="168"><![CDATA[
 	}
 
 	public struct SignatureToken
 	{
 		public static readonly SignatureToken Empty;
 		private readonly int token;
 
 		internal SignatureToken(int token)
 		{
 			this.token = token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="169" endline="172"><![CDATA[
 
 		public int Token
 		{
 			get { return token; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="173" endline="178"><![CDATA[
 		}
 
 		public override bool Equals(object obj)
 		{
 			return obj as SignatureToken? == this;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="179" endline="183"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="184" endline="188"><![CDATA[
 
 		public bool Equals(SignatureToken other)
 		{
 			return this == other;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="189" endline="193"><![CDATA[
 
 		public static bool operator ==(SignatureToken st1, SignatureToken st2)
 		{
 			return st1.token == st2.token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="194" endline="198"><![CDATA[
 
 		public static bool operator !=(SignatureToken st1, SignatureToken st2)
 		{
 			return st1.token != st2.token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="199" endline="208"><![CDATA[
 	}
 
 	public struct StringToken
 	{
 		private readonly int token;
 
 		internal StringToken(int token)
 		{
 			this.token = token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="209" endline="212"><![CDATA[
 
 		public int Token
 		{
 			get { return token; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="213" endline="218"><![CDATA[
 		}
 
 		public override bool Equals(object obj)
 		{
 			return obj as StringToken? == this;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="219" endline="223"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="224" endline="228"><![CDATA[
 
 		public bool Equals(StringToken other)
 		{
 			return this == other;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="229" endline="233"><![CDATA[
 
 		public static bool operator ==(StringToken st1, StringToken st2)
 		{
 			return st1.token == st2.token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="234" endline="238"><![CDATA[
 
 		public static bool operator !=(StringToken st1, StringToken st2)
 		{
 			return st1.token != st2.token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="239" endline="249"><![CDATA[
 	}
 
 	public struct TypeToken
 	{
 		public static readonly TypeToken Empty;
 		private readonly int token;
 
 		internal TypeToken(int token)
 		{
 			this.token = token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="250" endline="253"><![CDATA[
 
 		public int Token
 		{
 			get { return token; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="254" endline="259"><![CDATA[
 		}
 
 		public override bool Equals(object obj)
 		{
 			return obj as TypeToken? == this;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="260" endline="264"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="265" endline="269"><![CDATA[
 
 		public bool Equals(TypeToken other)
 		{
 			return this == other;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="270" endline="274"><![CDATA[
 
 		public static bool operator ==(TypeToken tt1, TypeToken tt2)
 		{
 			return tt1.token == tt2.token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\Tokens.cs" startline="275" endline="279"><![CDATA[
 
 		public static bool operator !=(TypeToken tt1, TypeToken tt2)
 		{
 			return tt1.token != tt2.token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="44" endline="51"><![CDATA[
 		internal PropertyBuilder(TypeBuilder typeBuilder, string name, PropertyAttributes attributes, PropertySignature sig, bool patchCallingConvention)
 		{
 			this.typeBuilder = typeBuilder;
 			this.name = name;
 			this.attributes = attributes;
 			this.sig = sig;
 			this.patchCallingConvention = patchCallingConvention;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="52" endline="55"><![CDATA[
 
 		internal override PropertySignature PropertySignature
 		{
 			get { return sig; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="56" endline="64"><![CDATA[
 		}
 
 		private void PatchCallingConvention(MethodBuilder mdBuilder)
 		{
 			if (patchCallingConvention && !mdBuilder.IsStatic)
 			{
 				sig.HasThis = true;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="65" endline="70"><![CDATA[
 
 		public void SetGetMethod(MethodBuilder mdBuilder)
 		{
 			PatchCallingConvention(mdBuilder);
 			getter = mdBuilder;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="71" endline="76"><![CDATA[
 
 		public void SetSetMethod(MethodBuilder mdBuilder)
 		{
 			PatchCallingConvention(mdBuilder);
 			setter = mdBuilder;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="77" endline="86"><![CDATA[
 
 		public void AddOtherMethod(MethodBuilder mdBuilder)
 		{
 			PatchCallingConvention(mdBuilder);
 			if (otherMethods == null)
 			{
 				otherMethods = new List<MethodBuilder>();
 			}
 			otherMethods.Add(mdBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="87" endline="91"><![CDATA[
 
 		public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
 		{
 			SetCustomAttribute(new CustomAttributeBuilder(con, binaryAttribute));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="92" endline="108"><![CDATA[
 
 		public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
 		{
 			Universe u = typeBuilder.ModuleBuilder.universe;
 			if (customBuilder.Constructor.DeclaringType == u.System_Runtime_CompilerServices_SpecialNameAttribute)
 			{
 				attributes |= PropertyAttributes.SpecialName;
 			}
 			else
 			{
 				if (lazyPseudoToken == 0)
 				{
 					lazyPseudoToken = typeBuilder.ModuleBuilder.AllocPseudoToken();
 				}
 				typeBuilder.ModuleBuilder.SetCustomAttribute(lazyPseudoToken, customBuilder);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="109" endline="117"><![CDATA[
 
 		public override object GetRawConstantValue()
 		{
 			if (lazyPseudoToken != 0)
 			{
 				return typeBuilder.ModuleBuilder.Constant.GetRawConstantValue(typeBuilder.ModuleBuilder, lazyPseudoToken);
 			}
 			throw new InvalidOperationException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="118" endline="121"><![CDATA[
 
 		public override PropertyAttributes Attributes
 		{
 			get { return attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="122" endline="126"><![CDATA[
 		}
 
 		public override bool CanRead
 		{
 			get { return getter != null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="127" endline="131"><![CDATA[
 		}
 
 		public override bool CanWrite
 		{
 			get { return setter != null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="132" endline="137"><![CDATA[
 		}
 
 		public override MethodInfo GetGetMethod(bool nonPublic)
 		{
 			return nonPublic || (getter != null && getter.IsPublic) ? getter 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="138" endline="142"><![CDATA[
 
 		public override MethodInfo GetSetMethod(bool nonPublic)
 		{
 			return nonPublic || (setter != null && setter.IsPublic) ? setter 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="143" endline="157"><![CDATA[
 
 		public override MethodInfo[] GetAccessors(bool nonPublic)
 		{
 			List<MethodInfo> list = new List<MethodInfo>();
 			AddAccessor(list, nonPublic, getter);
 			AddAccessor(list, nonPublic, setter);
 			if (otherMethods != null)
 			{
 				foreach (MethodInfo method in otherMethods)
 				{
 					AddAccessor(list, nonPublic, method);
 				}
 				foreach (MethodInfo method in otherMethods)
 				{
 					AddAccessor(list, nonPublic, method);
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="158" endline="165"><![CDATA[
 
 		private static void AddAccessor(List<MethodInfo> list, bool nonPublic, MethodInfo method)
 		{
 			if (method != null && (nonPublic || method.IsPublic))
 			{
 				list.Add(method);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="166" endline="169"><![CDATA[
 
 		public override Type DeclaringType
 		{
 			get { return typeBuilder; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="170" endline="174"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="175" endline="179"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return typeBuilder.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="180" endline="190"><![CDATA[
 		}
 
 		public void SetConstant(object defaultValue)
 		{
 			if (lazyPseudoToken == 0)
 			{
 				lazyPseudoToken = typeBuilder.ModuleBuilder.AllocPseudoToken();
 			}
 			attributes |= PropertyAttributes.HasDefault;
 			typeBuilder.ModuleBuilder.AddConstant(lazyPseudoToken, defaultValue);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="191" endline="220"><![CDATA[
 
 		internal void Bake()
 		{
 			PropertyTable.Record rec = new PropertyTable.Record();
 			rec.Flags = (short)attributes;
 			rec.Name = typeBuilder.ModuleBuilder.Strings.Add(name);
 			rec.Type = typeBuilder.ModuleBuilder.GetSignatureBlobIndex(sig);
 			int token = 0x17000000 | typeBuilder.ModuleBuilder.Property.AddRecord(rec);
 
 			if (lazyPseudoToken != 0)
 			{
 				typeBuilder.ModuleBuilder.RegisterTokenFixup(lazyPseudoToken, token);
 			}
 
 			if (getter != null)
 			{
 				AddMethodSemantics(MethodSemanticsTable.Getter, getter.MetadataToken, token);
 			}
 			if (setter != null)
 			{
 				AddMethodSemantics(MethodSemanticsTable.Setter, setter.MetadataToken, token);
 			}
 			if (otherMethods != null)
 			{
 				foreach (MethodBuilder method in otherMethods)
 				{
 					AddMethodSemantics(MethodSemanticsTable.Other, method.MetadataToken, token);
 				}
 				foreach (MethodBuilder method in otherMethods)
 				{
 					AddMethodSemantics(MethodSemanticsTable.Other, method.MetadataToken, token);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="221" endline="229"><![CDATA[
 
 		private void AddMethodSemantics(short semantics, int methodToken, int propertyToken)
 		{
 			MethodSemanticsTable.Record rec = new MethodSemanticsTable.Record();
 			rec.Semantics = semantics;
 			rec.Method = methodToken;
 			rec.Association = propertyToken;
 			typeBuilder.ModuleBuilder.MethodSemantics.AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="230" endline="250"><![CDATA[
 
 		internal override bool IsPublic
 		{
 			get
 			{
 				if ((getter != null && getter.IsPublic) || (setter != null && setter.IsPublic))
 				{
 					return true;
 				}
 				if (otherMethods != null)
 				{
 					foreach (MethodBuilder method in otherMethods)
 					{
 						if (method.IsPublic)
 						{
 							return true;
 						}
 					}
 					foreach (MethodBuilder method in otherMethods)
 					{
 						if (method.IsPublic)
 						{
 							return true;
 						}
 					}
 				}
 				return false;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\PropertyBuilder.cs" startline="251" endline="272"><![CDATA[
 		}
 
 		internal override bool IsStatic
 		{
 			get
 			{
 				if ((getter != null && getter.IsStatic) || (setter != null && setter.IsStatic))
 				{
 					return true;
 				}
 				if (otherMethods != null)
 				{
 					foreach (MethodBuilder method in otherMethods)
 					{
 						if (method.IsStatic)
 						{
 							return true;
 						}
 					}
 					foreach (MethodBuilder method in otherMethods)
 					{
 						if (method.IsStatic)
 						{
 							return true;
 						}
 					}
 				}
 				return false;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ManifestResourceInfo.cs" startline="35" endline="39"><![CDATA[
 		internal ManifestResourceInfo(ModuleReader module, int index)
 		{
 			this.module = module;
 			this.index = index;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ManifestResourceInfo.cs" startline="40" endline="63"><![CDATA[
 
 		public ResourceLocation ResourceLocation
 		{
 			get
 			{
 				int implementation = module.ManifestResource.records[index].Implementation;
 				if ((implementation >> 24) == AssemblyRefTable.Index)
 				{
 					//return ResourceLocation.ContainedInAnotherAssembly;
 					throw new NotImplementedException();
 				}
 				else if ((implementation >> 24) == FileTable.Index)
 				{
 					if ((implementation & 0xFFFFFF) == 0)
 					{
 						return ResourceLocation.ContainedInManifestFile | ResourceLocation.Embedded;
 					}
 					return 0;
 				}
 				else
 				{
 					throw new BadImageFormatException();
 				}
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ManifestResourceInfo.cs" startline="64" endline="68"><![CDATA[
 		}
 
 		public Assembly ReferencedAssembly
 		{
 			get { throw new NotImplementedException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ManifestResourceInfo.cs" startline="69" endline="88"><![CDATA[
 		}
 
 		public string FileName
 		{
 			get
 			{
 				int implementation = module.ManifestResource.records[index].Implementation;
 				if ((implementation >> 24) == FileTable.Index)
 				{
 					if ((implementation & 0xFFFFFF) == 0)
 					{
 						return null;
 					}
 					else
 					{
 						return module.GetString(module.File.records[(implementation & 0xFFFFFF) - 1].Name);
 					}
 				}
 				throw new NotImplementedException();
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\roottypes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\expression.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\ikvm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\eval.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\context.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\anonymous.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\VersionInfo.cs" startline="45" endline="47"><![CDATA[
 		{
 			this.name = name;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\VersionInfo.cs" startline="48" endline="52"><![CDATA[
 
 		internal void SetFileName(string assemblyFileName)
 		{
 			this.fileName = assemblyFileName;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\VersionInfo.cs" startline="53" endline="94"><![CDATA[
 
 		internal void SetAttribute(CustomAttributeBuilder cab)
 		{
 			Universe u = cab.Constructor.Module.universe;
 			Type type = cab.Constructor.DeclaringType;
 			if (copyright == null && type == u.System_Reflection_AssemblyCopyrightAttribute)
 			{
 				copyright = (string)cab.GetConstructorArgument(0);
 			}
 			else if (trademark == null && type == u.System_Reflection_AssemblyTrademarkAttribute)
 			{
 				trademark = (string)cab.GetConstructorArgument(0);
 			}
 			else if (product == null && type == u.System_Reflection_AssemblyProductAttribute)
 			{
 				product = (string)cab.GetConstructorArgument(0);
 			}
 			else if (company == null && type == u.System_Reflection_AssemblyCompanyAttribute)
 			{
 				company = (string)cab.GetConstructorArgument(0);
 			}
 			else if (description == null && type == u.System_Reflection_AssemblyDescriptionAttribute)
 			{
 				description = (string)cab.GetConstructorArgument(0);
 			}
 			else if (title == null && type == u.System_Reflection_AssemblyTitleAttribute)
 			{
 				title = (string)cab.GetConstructorArgument(0);
 			}
 			else if (informationalVersion == null && type == u.System_Reflection_AssemblyInformationalVersionAttribute)
 			{
 				informationalVersion = (string)cab.GetConstructorArgument(0);
 			}
 			else if (culture == null && type == u.System_Reflection_AssemblyCultureAttribute)
 			{
 				culture  = (string)cab.GetConstructorArgument(0);
 			}
 			else if (fileVersion == null && type == u.System_Reflection_AssemblyFileVersionAttribute)
 			{
 				fileVersion = (string)cab.GetConstructorArgument(0);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\VersionInfo.cs" startline="95" endline="217"><![CDATA[
 
 		internal void Write(ByteBuffer bb)
 		{
 			if (fileVersion == null)
 			{
 				if (name.Version != null)
 				{
 					fileVersion = name.Version.ToString();
 				}
 				else
 				{
 					fileVersion = "0.0.0.0";
 				}
 			}
 
 			int codepage = 1200;	// Unicode codepage
 			int lcid = 0x7f;
 			if (name.CultureInfo != null)
 			{
 				lcid = name.CultureInfo.LCID;
 			}
 			if (culture != null)
 			{
 				lcid = new CultureInfo(culture).LCID;
 			}
 
 			Version filever = ParseVersionRobust(fileVersion);
 			int fileVersionMajor = filever.Major;
 			int fileVersionMinor = filever.Minor;
 			int fileVersionBuild = filever.Build;
 			int fileVersionRevision = filever.Revision;
 
 			int productVersionMajor = fileVersionMajor;
 			int productVersionMinor = fileVersionMinor;
 			int productVersionBuild = fileVersionBuild;
 			int productVersionRevision = fileVersionRevision;
 			if (informationalVersion != null)
 			{
 				Version productver = ParseVersionRobust(informationalVersion);
 				productVersionMajor = productver.Major;
 				productVersionMinor = productver.Minor;
 				productVersionBuild = productver.Build;
 				productVersionRevision = productver.Revision;
 			}
 
 			ByteBuffer stringTable = new ByteBuffer(512);
 			stringTable.Write((short)0);	// wLength (placeholder)
 			stringTable.Write((short)0);	// wValueLength
 			stringTable.Write((short)1);	// wType
 			WriteUTF16Z(stringTable, string.Format("{0
 			stringTable.Align(4);
 
 			WriteString(stringTable, "Comments", description);
 			WriteString(stringTable, "CompanyName", company);
 			WriteString(stringTable, "FileDescription", title);
 			WriteString(stringTable, "FileVersion", fileVersion);
 			WriteString(stringTable, "InternalName", name.Name);
 			WriteString(stringTable, "LegalCopyright", copyright);
 			WriteString(stringTable, "LegalTrademarks", trademark);
 			WriteString(stringTable, "OriginalFilename", fileName);
 			WriteString(stringTable, "ProductName", product);
 			WriteString(stringTable, "ProductVersion", informationalVersion);
 
 			stringTable.Position = 0;
 			stringTable.Write((short)stringTable.Length);
 
 			ByteBuffer stringFileInfo = new ByteBuffer(512);
 			stringFileInfo.Write((short)0);	// wLength (placeholder)
 			stringFileInfo.Write((short)0);	// wValueLength
 			stringFileInfo.Write((short)1);	// wType
 			WriteUTF16Z(stringFileInfo, "StringFileInfo");
 			stringFileInfo.Align(4);
 			stringFileInfo.Write(stringTable);
 			stringFileInfo.Position = 0;
 			stringFileInfo.Write((short)stringFileInfo.Length);
 
 			byte[] preamble1 = new byte[] {
 			  // VS_VERSIONINFO (platform SDK)
 			  0x34, 0x00,				// wValueLength
 			  0x00, 0x00,				// wType
 			  0x56, 0x00, 0x53, 0x00, 0x5F, 0x00, 0x56, 0x00, 0x45, 0x00, 0x52, 0x00, 0x53, 0x00, 0x49, 0x00, 0x4F, 0x00, 0x4E, 0x00, 0x5F, 0x00, 0x49, 0x00, 0x4E, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x00, 0x00,  // "VS_VERSION_INFO\0"
 			  0x00, 0x00,				// Padding1 (32 bit alignment)
 			  // VS_FIXEDFILEINFO starts
 			  0xBD, 0x04, 0xEF, 0xFE,	// dwSignature (0xFEEF04BD)
 			  0x00, 0x00, 0x01, 0x00,	// dwStrucVersion
 			};
 			byte[] preamble2 = new byte[] {
 			  0x3F, 0x00, 0x00, 0x00,	// dwFileFlagsMask (??)
 			  0x00, 0x00, 0x00, 0x00,	// dwFileFlags (??)
 			  0x04, 0x00, 0x00, 0x00,	// dwFileOS
 			  0x02, 0x00, 0x00, 0x00,	// dwFileType
 			  0x00, 0x00, 0x00, 0x00,	// dwFileSubtype
 			  0x00, 0x00, 0x00, 0x00,	// dwFileDateMS
 			  0x00, 0x00, 0x00, 0x00,	// dwFileDateLS
 										// Padding2 (32 bit alignment)
 			  // VarFileInfo
 			  0x44, 0x00,				// wLength
 			  0x00, 0x00,				// wValueLength
 			  0x01, 0x00,				// wType
 			  0x56, 0x00, 0x61, 0x00, 0x72, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x00, 0x00,	// "VarFileInfo\0"
 			  0x00, 0x00,				// Padding
 			  // Var
 			  0x24, 0x00,				// wLength
 			  0x04, 0x00,				// wValueLength
 			  0x00, 0x00,				// wType
 			  0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00,	// "Translation\0"
 			  0x00, 0x00,				// Padding (32 bit alignment)
 			};
 			bb.Write((short)(2 + preamble1.Length + 8 + 8 + preamble2.Length + 4 + stringFileInfo.Length));
 			bb.Write(preamble1);
 			bb.Write((short)fileVersionMinor);
 			bb.Write((short)fileVersionMajor);
 			bb.Write((short)fileVersionRevision);
 			bb.Write((short)fileVersionBuild);
 			bb.Write((short)productVersionMinor);
 			bb.Write((short)productVersionMajor);
 			bb.Write((short)productVersionRevision);
 			bb.Write((short)productVersionBuild);
 			bb.Write(preamble2);
 			bb.Write((short)lcid);
 			bb.Write((short)codepage);
 			bb.Write(stringFileInfo);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\VersionInfo.cs" startline="218" endline="226"><![CDATA[
 
 		private static void WriteUTF16Z(ByteBuffer bb, string str)
 		{
 			foreach (char c in str)
 			{
 				bb.Write((short)c);
 			}
 			foreach (char c in str)
 			{
 				bb.Write((short)c);
 			}
 			bb.Write((short)0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\VersionInfo.cs" startline="227" endline="243"><![CDATA[
 
 		private static void WriteString(ByteBuffer bb, string name, string value)
 		{
 			value = value ?? " ";
 			int pos = bb.Position;
 			bb.Write((short)0);					// wLength (placeholder)
 			bb.Write((short)(value.Length + 1));// wValueLength
 			bb.Write((short)1);					// wType
 			WriteUTF16Z(bb, name);
 			bb.Align(4);
 			WriteUTF16Z(bb, value);
 			bb.Align(4);
 			int savedPos = bb.Position;
 			bb.Position = pos;
 			bb.Write((short)(savedPos - pos));
 			bb.Position = savedPos;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\VersionInfo.cs" startline="244" endline="253"><![CDATA[
 
 		private static Version ParseVersionRobust(string ver)
 		{
 			int index = 0;
 			ushort major = ParseVersionPart(ver, ref index);
 			ushort minor = ParseVersionPart(ver, ref index);
 			ushort build = ParseVersionPart(ver, ref index);
 			ushort revision = ParseVersionPart(ver, ref index);
 			return new Version(major, minor, build, revision);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\VersionInfo.cs" startline="254" endline="278"><![CDATA[
 
 		private static ushort ParseVersionPart(string str, ref int pos)
 		{
 			ushort value = 0;
 			while (pos < str.Length)
 			{
 				char c = str[pos];
 				if (c == '.')
 				{
 					pos++;
 					break;
 				}
 				else if (c >= '0' && c <= '9')
 				{
 					value *= 10;
 					value += (ushort)(c - '0');
 					pos++;
 				}
 				else
 				{
 					break;
 				}
 			}
 			while (pos < str.Length)
 			{
 				char c = str[pos];
 				if (c == '.')
 				{
 					pos++;
 					break;
 				}
 				else if (c >= '0' && c <= '9')
 				{
 					value *= 10;
 					value += (ushort)(c - '0');
 					pos++;
 				}
 				else
 				{
 					break;
 				}
 			}
 			return value;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Writer\VersionInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="35" endline="41"><![CDATA[
 		internal ResourceModule(Assembly assembly, string scopeName, string location)
 			
 		{
 			this.assembly = assembly;
 			this.scopeName = scopeName;
 			this.location = location;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="42" endline="45"><![CDATA[
 
 		public override int MDStreamVersion
 		{
 			get { throw new NotSupportedException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="46" endline="51"><![CDATA[
 		}
 
 		public override bool IsResource()
 		{
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="52" endline="55"><![CDATA[
 
 		public override Assembly Assembly
 		{
 			get { return assembly; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="56" endline="60"><![CDATA[
 		}
 
 		public override string FullyQualifiedName
 		{
 			get { return location ?? "<Unknown>"; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="61" endline="65"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return location == null ? "<Unknown>" 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="66" endline="70"><![CDATA[
 		}
 
 		public override string ScopeName
 		{
 			get { return scopeName; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="71" endline="75"><![CDATA[
 		}
 
 		public override Guid ModuleVersionId
 		{
 			get { throw new NotSupportedException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="76" endline="80"><![CDATA[
 		}
 
 		public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="81" endline="85"><![CDATA[
 		}
 
 		public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="86" endline="90"><![CDATA[
 		}
 
 		public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="91" endline="95"><![CDATA[
 		}
 
 		public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="96" endline="100"><![CDATA[
 		}
 
 		public override string ResolveString(int metadataToken)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="101" endline="105"><![CDATA[
 		}
 
 		public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="106" endline="110"><![CDATA[
 		}
 
 		public override AssemblyName[] __GetReferencedAssemblies()
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="111" endline="116"><![CDATA[
 		}
 
 		internal override Type GetTypeImpl(string typeName)
 		{
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="117" endline="120"><![CDATA[
 
 		internal override void GetTypesImpl(List<Type> list)
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="121" endline="124"><![CDATA[
 
 		internal override Type GetModuleType()
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\ResourceModule.cs" startline="125" endline="129"><![CDATA[
 		}
 
 		internal override ByteReader GetBlob(int blobIndex)
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="36" endline="53"><![CDATA[
 		private readonly List<Type> args = new List<Type>();
 		private readonly List<LocalBuilder> locals = new List<LocalBuilder>();
 		private readonly List<Type[]> requiredCustomModifiers = new List<Type[]>();
 		private readonly List<Type[]> optionalCustomModifiers = new List<Type[]>();
 		private readonly List<Type> optionalArgs = new List<Type>();
 		private Type returnType;
 		private Type[] returnTypeRequiredCustomModifiers;
 		private Type[] returnTypeOptionalCustomModifiers;
 		private CallingConventions callingConvention;
 		private CallingConvention unmanagedCallConv;
 		private bool unmanaged;
 		private bool optional;
 
 		private SignatureHelper(ModuleBuilder module, byte type)
 		{
 			this.module = module;
 			this.type = type;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="54" endline="57"><![CDATA[
 
 		internal bool HasThis
 		{
 			get { return (callingConvention & CallingConventions.HasThis) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="58" endline="62"><![CDATA[
 		}
 
 		internal Type ReturnType
 		{
 			get { return returnType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="63" endline="67"><![CDATA[
 		}
 
 		internal int ParameterCount
 		{
 			get { return args.Count + optionalArgs.Count; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="68" endline="73"><![CDATA[
 		}
 
 		public static SignatureHelper GetFieldSigHelper(Module mod)
 		{
 			return new SignatureHelper(mod as ModuleBuilder, Signature.FIELD);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="74" endline="78"><![CDATA[
 
 		public static SignatureHelper GetLocalVarSigHelper()
 		{
 			return new SignatureHelper(null, Signature.LOCAL_SIG);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="79" endline="83"><![CDATA[
 
 		public static SignatureHelper GetLocalVarSigHelper(Module mod)
 		{
 			return new SignatureHelper(mod as ModuleBuilder, Signature.LOCAL_SIG);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="84" endline="96"><![CDATA[
 
 		public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes)
 		{
 			SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, Signature.PROPERTY);
 			sig.returnType = returnType;
 			sig.returnTypeOptionalCustomModifiers = Type.EmptyTypes;
 			sig.returnTypeRequiredCustomModifiers = Type.EmptyTypes;
 			foreach (Type type in parameterTypes)
 			{
 				sig.AddArgument(type);
 			}
 			foreach (Type type in parameterTypes)
 			{
 				sig.AddArgument(type);
 			}
 			return sig;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="97" endline="101"><![CDATA[
 
 		public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)
 		{
 			return GetPropertySigHelper(mod, CallingConventions.Standard, returnType, requiredReturnTypeCustomModifiers, optionalReturnTypeCustomModifiers, parameterTypes, requiredParameterTypeCustomModifiers, optionalParameterTypeCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="102" endline="112"><![CDATA[
 
 		public static SignatureHelper GetPropertySigHelper(Module mod, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)
 		{
 			SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, Signature.PROPERTY);
 			sig.callingConvention = callingConvention;
 			sig.returnType = returnType;
 			sig.returnTypeOptionalCustomModifiers = requiredReturnTypeCustomModifiers;
 			sig.returnTypeRequiredCustomModifiers = optionalReturnTypeCustomModifiers;
 			sig.AddArguments(parameterTypes, requiredParameterTypeCustomModifiers, optionalParameterTypeCustomModifiers);
 			return sig;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="113" endline="117"><![CDATA[
 
 		public static SignatureHelper GetMethodSigHelper(CallingConvention unmanagedCallingConvention, Type returnType)
 		{
 			return GetMethodSigHelper(null, unmanagedCallingConvention, returnType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="118" endline="122"><![CDATA[
 
 		public static SignatureHelper GetMethodSigHelper(CallingConventions callingConvention, Type returnType)
 		{
 			return GetMethodSigHelper(null, callingConvention, returnType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="123" endline="131"><![CDATA[
 
 		public static SignatureHelper GetMethodSigHelper(Module mod, CallingConvention unmanagedCallConv, Type returnType)
 		{
 			SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, 0);
 			sig.returnType = returnType;
 			sig.unmanaged = true;
 			sig.unmanagedCallConv = unmanagedCallConv;
 			return sig;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="132" endline="139"><![CDATA[
 
 		public static SignatureHelper GetMethodSigHelper(Module mod, CallingConventions callingConvention, Type returnType)
 		{
 			SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, 0);
 			sig.returnType = returnType;
 			sig.callingConvention = callingConvention;
 			return sig;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="140" endline="151"><![CDATA[
 
 		public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes)
 		{
 			SignatureHelper sig = new SignatureHelper(mod as ModuleBuilder, 0);
 			sig.returnType = returnType;
 			sig.callingConvention = CallingConventions.Standard;
 			foreach (Type type in parameterTypes)
 			{
 				sig.AddArgument(type);
 			}
 			foreach (Type type in parameterTypes)
 			{
 				sig.AddArgument(type);
 			}
 			return sig;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="152" endline="160"><![CDATA[
 
 		public byte[] GetSignature()
 		{
 			if (module == null)
 			{
 				throw new NotSupportedException();
 			}
 			return GetSignature(module).ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="161" endline="190"><![CDATA[
 
 		internal ByteBuffer GetSignature(ModuleBuilder module)
 		{
 			ByteBuffer bb = new ByteBuffer(16);
 			switch (type)
 			{
 				case 0
 					if (unmanaged)
 					{
 						Signature.WriteStandAloneMethodSig(module, bb, unmanagedCallConv, returnType, args.ToArray());
 					}
 					else
 					{
 						Signature.WriteStandAloneMethodSig(module, bb, callingConvention, returnType, args.ToArray(), optionalArgs.ToArray());
 					}
 					break;
 				case Signature.FIELD
 					FieldSignature.Create(args[0], optionalCustomModifiers[0], requiredCustomModifiers[0]).WriteSig(module, bb);
 					break;
 				case Signature.PROPERTY
 					Signature.WritePropertySig(module, bb, callingConvention, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, args.ToArray(), requiredCustomModifiers.ToArray(), optionalCustomModifiers.ToArray());
 					break;
 				case Signature.LOCAL_SIG
 					Signature.WriteLocalVarSig(module, bb, locals);
 					break;
 				default
 					throw new InvalidOperationException();
 			}
 			return bb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="191" endline="196"><![CDATA[
 
 		public void AddSentinel()
 		{
 			optional = true;
 			callingConvention |= CallingConventions.VarArgs;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="197" endline="201"><![CDATA[
 
 		public void AddArgument(Type clsArgument)
 		{
 			AddArgument(clsArgument, false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="202" endline="206"><![CDATA[
 
 		public void AddArgument(Type argument, bool pinned)
 		{
 			AddArgument(argument, pinned, Type.EmptyTypes, Type.EmptyTypes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="207" endline="211"><![CDATA[
 
 		public void AddArgument(Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			AddArgument(argument, false, requiredCustomModifiers, optionalCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="212" endline="229"><![CDATA[
 
 		private void AddArgument(Type argument, bool pinned, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			if (type == Signature.LOCAL_SIG)
 			{
 				locals.Add(new LocalBuilder(argument, 0, pinned));
 			}
 			else if (optional)
 			{
 				this.optionalArgs.Add(argument);
 			}
 			else
 			{
 				this.args.Add(argument);
 				this.requiredCustomModifiers.Add(requiredCustomModifiers);
 				this.optionalCustomModifiers.Add(optionalCustomModifiers);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\SignatureHelper.cs" startline="230" endline="237"><![CDATA[
 
 		public void AddArguments(Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
 		{
 			for (int i = 0; i < arguments.Length; i++)
 			{
 				AddArgument(arguments[i], false, requiredCustomModifiers[i], optionalCustomModifiers[i]);
 			}
 			for (int i = 0; i < arguments.Length; i++)
 			{
 				AddArgument(arguments[i], false, requiredCustomModifiers[i], optionalCustomModifiers[i]);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1547" endline="1552"><![CDATA[
 		protected ElementHolderType(Type elementType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			this.elementType = elementType;
 			this.requiredCustomModifiers = requiredCustomModifiers;
 			this.optionalCustomModifiers = optionalCustomModifiers;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1553" endline="1560"><![CDATA[
 
 		protected bool EqualsHelper(ElementHolderType other)
 		{
 			return other != null
 				&& other.elementType.Equals(elementType)
 				&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers)
 				&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1561" endline="1565"><![CDATA[
 
 		public override Type[] __GetRequiredCustomModifiers()
 		{
 			return Util.Copy(requiredCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1566" endline="1570"><![CDATA[
 
 		public override Type[] __GetOptionalCustomModifiers()
 		{
 			return Util.Copy(optionalCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1571" endline="1574"><![CDATA[
 
 		public sealed override string Name
 		{
 			get { return elementType.Name + GetSuffix(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1575" endline="1579"><![CDATA[
 		}
 
 		public sealed override string FullName
 		{
 			get { return elementType.FullName + GetSuffix(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1580" endline="1585"><![CDATA[
 		}
 
 		public sealed override string ToString()
 		{
 			return elementType.ToString() + GetSuffix();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1586" endline="1590"><![CDATA[
 
 		public sealed override Type GetElementType()
 		{
 			return elementType;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1591" endline="1594"><![CDATA[
 
 		public sealed override bool HasElementType
 		{
 			get { return true; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1595" endline="1599"><![CDATA[
 		}
 
 		public sealed override Module Module
 		{
 			get { return elementType.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1600" endline="1609"><![CDATA[
 		}
 
 		internal sealed override int GetModuleBuilderToken()
 		{
 			if (token == 0)
 			{
 				token = ((ModuleBuilder)elementType.Module).ImportType(this);
 			}
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1610" endline="1621"><![CDATA[
 
 		public sealed override bool ContainsGenericParameters
 		{
 			get
 			{
 				Type type = elementType;
 				while (type.HasElementType)
 				{
 					type = type.GetElementType();
 				}
 				while (type.HasElementType)
 				{
 					type = type.GetElementType();
 				}
 				return type.ContainsGenericParameters;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1622" endline="1636"><![CDATA[
 		}
 
 		internal sealed override Type BindTypeParameters(IGenericBinder binder)
 		{
 			Type type = elementType.BindTypeParameters(binder);
 			Type[] req = BindArray(requiredCustomModifiers, binder);
 			Type[] opt = BindArray(optionalCustomModifiers, binder);
 			if (ReferenceEquals(type, elementType)
 				&& ReferenceEquals(req, requiredCustomModifiers)
 				&& ReferenceEquals(opt, optionalCustomModifiers))
 			{
 				return this;
 			}
 			return Wrap(type, req, opt);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1637" endline="1641"><![CDATA[
 
 		internal override void CheckBaked()
 		{
 			elementType.CheckBaked();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1642" endline="1663"><![CDATA[
 
 		private static Type[] BindArray(Type[] array, IGenericBinder binder)
 		{
 			if (array ==null || array.Length == 0)
 			{
 				return array;
 			}
 			Type[] result = array;
 			for (int i = 0; i < array.Length; i++)
 			{
 				Type type = array[i].BindTypeParameters(binder);
 				if (!ReferenceEquals(type, array[i]))
 				{
 					if (result == array)
 					{
 						result = (Type[])array.Clone();
 					}
 					result[i] = type;
 				}
 			}
 			for (int i = 0; i < array.Length; i++)
 			{
 				Type type = array[i].BindTypeParameters(binder);
 				if (!ReferenceEquals(type, array[i]))
 				{
 					if (result == array)
 					{
 						result = (Type[])array.Clone();
 					}
 					result[i] = type;
 				}
 			}
 			return result;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1664" endline="1668"><![CDATA[
 
 		internal sealed override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			return CustomAttributeData.EmptyList;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1669" endline="1680"><![CDATA[
 
 		protected abstract string GetSuffix();
 
 		protected abstract Type Wrap(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers);
 	}
 
 	sealed class ArrayType 
 	{
 		internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			return type.Module.CanonicalizeType(new ArrayType(type, requiredCustomModifiers, optionalCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1681" endline="1685"><![CDATA[
 
 		private ArrayType(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1686" endline="1689"><![CDATA[
 
 		public override Type BaseType
 		{
 			get { return elementType.Module.universe.System_Array; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1690" endline="1699"><![CDATA[
 		}
 
 		public override Type[] __GetDeclaredInterfaces()
 		{
 			return new Type[] {
 				this.Module.universe.Import(typeof(IList<>)).MakeGenericType(elementType),
 				this.Module.universe.Import(typeof(ICollection<>)).MakeGenericType(elementType),
 				this.Module.universe.Import(typeof(IEnumerable<>)).MakeGenericType(elementType)
 			};
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1700" endline="1716"><![CDATA[
 
 		public override MethodBase[] __GetDeclaredMethods()
 		{
 			Type[] int32 = new Type[] { this.Module.universe.System_Int32 };
 			List<MethodBase> list = new List<MethodBase>();
 			list.Add(new BuiltinArrayMethod(this.Module, this, "Set", CallingConventions.Standard | CallingConventions.HasThis, this.Module.universe.System_Void, new Type[] { this.Module.universe.System_Int32, elementType }));
 			list.Add(new BuiltinArrayMethod(this.Module, this, "Address", CallingConventions.Standard | CallingConventions.HasThis, elementType.MakeByRefType(), int32));
 			list.Add(new BuiltinArrayMethod(this.Module, this, "Get", CallingConventions.Standard | CallingConventions.HasThis, elementType, int32));
 			list.Add(new ConstructorInfoImpl(new BuiltinArrayMethod(this.Module, this, ".ctor", CallingConventions.Standard | CallingConventions.HasThis, this.Module.universe.System_Void, int32)));
 			for (Type type = elementType; type.__IsVector; type = type.GetElementType())
 			{
 				Array.Resize(ref int32, int32.Length + 1);
 				int32[int32.Length - 1] = int32[0];
 				list.Add(new ConstructorInfoImpl(new BuiltinArrayMethod(this.Module, this, ".ctor", CallingConventions.Standard | CallingConventions.HasThis, this.Module.universe.System_Void, int32)));
 			}
 			for (Type type = elementType; type.__IsVector; type = type.GetElementType())
 			{
 				Array.Resize(ref int32, int32.Length + 1);
 				int32[int32.Length - 1] = int32[0];
 				list.Add(new ConstructorInfoImpl(new BuiltinArrayMethod(this.Module, this, ".ctor", CallingConventions.Standard | CallingConventions.HasThis, this.Module.universe.System_Void, int32)));
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1717" endline="1720"><![CDATA[
 
 		public override TypeAttributes Attributes
 		{
 			get { return TypeAttributes.Public | TypeAttributes.Sealed | TypeAttributes.Serializable; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1721" endline="1725"><![CDATA[
 		}
 
 		public override bool IsArray
 		{
 			get { return true; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1726" endline="1730"><![CDATA[
 		}
 
 		public override bool __IsVector
 		{
 			get { return true; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1731" endline="1736"><![CDATA[
 		}
 
 		public override int GetArrayRank()
 		{
 			return 1;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1737" endline="1741"><![CDATA[
 
 		public override bool Equals(object o)
 		{
 			return EqualsHelper(o as ArrayType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1742" endline="1746"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return elementType.GetHashCode() * 5;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1747" endline="1751"><![CDATA[
 
 		protected override string GetSuffix()
 		{
 			return "[]";
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1752" endline="1756"><![CDATA[
 
 		protected override Type Wrap(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			return Make(type, requiredCustomModifiers, optionalCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1757" endline="1766"><![CDATA[
 	}
 
 	sealed class MultiArrayType 
 	{
 		private readonly int rank;
 
 		internal static Type Make(Type type, int rank, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			return type.Module.CanonicalizeType(new MultiArrayType(type, rank, requiredCustomModifiers, optionalCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1767" endline="1772"><![CDATA[
 
 		private MultiArrayType(Type type, int rank, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 			
 		{
 			this.rank = rank;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1773" endline="1776"><![CDATA[
 
 		public override Type BaseType
 		{
 			get { return elementType.Module.universe.System_Array; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1777" endline="1800"><![CDATA[
 		}
 
 		public override MethodBase[] __GetDeclaredMethods()
 		{
 			Type int32 = this.Module.universe.System_Int32;
 			Type[] setArgs = new Type[rank + 1];
 			Type[] getArgs = new Type[rank];
 			Type[] ctorArgs = new Type[rank * 2];
 			for (int i = 0; i < rank; i++)
 			{
 				setArgs[i] = int32;
 				getArgs[i] = int32;
 				ctorArgs[i * 2 + 0] = int32;
 				ctorArgs[i * 2 + 1] = int32;
 			}
 			for (int i = 0; i < rank; i++)
 			{
 				setArgs[i] = int32;
 				getArgs[i] = int32;
 				ctorArgs[i * 2 + 0] = int32;
 				ctorArgs[i * 2 + 1] = int32;
 			}
 			setArgs[rank] = elementType;
 			return new MethodBase[] {
 				new ConstructorInfoImpl(new BuiltinArrayMethod(this.Module, this, ".ctor", CallingConventions.Standard | CallingConventions.HasThis, this.Module.universe.System_Void, getArgs)),
 				new ConstructorInfoImpl(new BuiltinArrayMethod(this.Module, this, ".ctor", CallingConventions.Standard | CallingConventions.HasThis, this.Module.universe.System_Void, ctorArgs)),
 				new BuiltinArrayMethod(this.Module, this, "Set", CallingConventions.Standard | CallingConventions.HasThis, this.Module.universe.System_Void, setArgs),
 				new BuiltinArrayMethod(this.Module, this, "Address", CallingConventions.Standard | CallingConventions.HasThis, elementType.MakeByRefType(), getArgs),
 				new BuiltinArrayMethod(this.Module, this, "Get", CallingConventions.Standard | CallingConventions.HasThis, elementType, getArgs),
 			};
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1801" endline="1804"><![CDATA[
 
 		public override TypeAttributes Attributes
 		{
 			get { return TypeAttributes.Public | TypeAttributes.Sealed | TypeAttributes.Serializable; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1805" endline="1809"><![CDATA[
 		}
 
 		public override bool IsArray
 		{
 			get { return true; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1810" endline="1815"><![CDATA[
 		}
 
 		public override int GetArrayRank()
 		{
 			return rank;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1816" endline="1821"><![CDATA[
 
 		public override bool Equals(object o)
 		{
 			MultiArrayType at = o as MultiArrayType;
 			return EqualsHelper(at) && at.rank == rank;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1822" endline="1826"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return elementType.GetHashCode() * 9 + rank;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1827" endline="1838"><![CDATA[
 
 		protected override string GetSuffix()
 		{
 			if (rank == 1)
 			{
 				return "[*]";
 			}
 			else
 			{
 				return "[" + new String(',', rank - 1) + "]";
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1839" endline="1843"><![CDATA[
 
 		protected override Type Wrap(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			return Make(type, rank, requiredCustomModifiers, optionalCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1276" endline="1284"><![CDATA[
 		internal ArrayMethod(Module module, Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
 		{
 			this.module = module;
 			this.arrayClass = arrayClass;
 			this.methodName = methodName;
 			this.callingConvention = callingConvention;
 			this.returnType = returnType ?? module.universe.System_Void;
 			this.parameterTypes = Util.Copy(parameterTypes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1285" endline="1288"><![CDATA[
 
 		public override MethodBody GetMethodBody()
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1289" endline="1293"><![CDATA[
 		}
 
 		public override MethodImplAttributes GetMethodImplementationFlags()
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1294" endline="1298"><![CDATA[
 		}
 
 		public override ParameterInfo[] GetParameters()
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1299" endline="1304"><![CDATA[
 		}
 
 		internal override int ImportTo(ModuleBuilder module)
 		{
 			return module.ImportMethodOrField(arrayClass, methodName, MethodSignature);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1305" endline="1308"><![CDATA[
 
 		public override MethodAttributes Attributes
 		{
 			get { throw new NotSupportedException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1309" endline="1313"><![CDATA[
 		}
 
 		public override CallingConventions CallingConvention
 		{
 			get { return callingConvention; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1314" endline="1318"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return arrayClass; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1319" endline="1330"><![CDATA[
 		}
 
 		internal override MethodSignature MethodSignature
 		{
 			get
 			{
 				if (methodSignature == null)
 				{
 					methodSignature = MethodSignature.MakeFromBuilder(returnType, parameterTypes, null, callingConvention, 0);
 				}
 				return methodSignature;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1331" endline="1336"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			// like .NET, we return the module that GetArrayMethod was called on, not the module associated with the array type
 			get { return module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1337" endline="1341"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return methodName; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1342" endline="1346"><![CDATA[
 		}
 
 		internal override int ParameterCount
 		{
 			get { return parameterTypes.Length; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1347" endline="1351"><![CDATA[
 		}
 
 		public override ParameterInfo ReturnParameter
 		{
 			get { throw new NotImplementedException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1352" endline="1356"><![CDATA[
 		}
 
 		public override Type ReturnType
 		{
 			get { return returnType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1357" endline="1361"><![CDATA[
 		}
 
 		internal override bool HasThis
 		{
 			get { return (callingConvention & (CallingConventions.HasThis | CallingConventions.ExplicitThis)) == CallingConventions.HasThis; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1848" endline="1851"><![CDATA[
 		internal BuiltinArrayMethod(Module module, Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1852" endline="1855"><![CDATA[
 
 		public override MethodAttributes Attributes
 		{
 			get { return this.Name == ".ctor" ? MethodAttributes.RTSpecialName | MethodAttributes.Public 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1856" endline="1861"><![CDATA[
 		}
 
 		public override MethodImplAttributes GetMethodImplementationFlags()
 		{
 			return MethodImplAttributes.IL;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1862" endline="1865"><![CDATA[
 
 		public override int MetadataToken
 		{
 			get { return 0x06000000; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1866" endline="1871"><![CDATA[
 		}
 
 		public override MethodBody GetMethodBody()
 		{
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1872" endline="1881"><![CDATA[
 
 		public override ParameterInfo[] GetParameters()
 		{
 			ParameterInfo[] parameterInfos = new ParameterInfo[parameterTypes.Length];
 			for (int i = 0; i < parameterInfos.Length; i++)
 			{
 				parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
 			}
 			for (int i = 0; i < parameterInfos.Length; i++)
 			{
 				parameterInfos[i] = new ParameterInfoImpl(this, parameterTypes[i], i);
 			}
 			return parameterInfos;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1882" endline="1885"><![CDATA[
 
 		public override ParameterInfo ReturnParameter
 		{
 			get { return new ParameterInfoImpl(this, this.ReturnType, -1); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1886" endline="1958"><![CDATA[
 		}
 
 		private sealed class ParameterInfoImpl 
 		{
 			private readonly MethodInfo method;
 			private readonly Type type;
 			private readonly int pos;
 
 			internal ParameterInfoImpl(MethodInfo method, Type type, int pos)
 			{
 				this.method = method;
 				this.type = type;
 				this.pos = pos;
 			}
 
 			public override Type ParameterType
 			{
 				get { return type; }
 			}
 
 			public override string Name
 			{
 				get { return null; }
 			}
 
 			public override ParameterAttributes Attributes
 			{
 				get { return ParameterAttributes.None; }
 			}
 
 			public override int Position
 			{
 				get { return pos; }
 			}
 
 			public override object RawDefaultValue
 			{
 				get { return null; }
 			}
 
 			public override Type[] GetOptionalCustomModifiers()
 			{
 				return Empty<Type>.Array;
 			}
 
 			public override Type[] GetRequiredCustomModifiers()
 			{
 				return Empty<Type>.Array;
 			}
 
 			public override MemberInfo Member
 			{
 				get { return method.IsConstructor ? (MethodBase)new ConstructorInfoImpl(method) 
 			}
 
 			public override int MetadataToken
 			{
 				get { return 0x8000000; }
 			}
 
 			internal override Module Module
 			{
 				get { return method.Module; }
 			}
 		}
 	}
 
 	sealed class ByRefType 
 	{
 		internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			return type.Module.CanonicalizeType(new ByRefType(type, requiredCustomModifiers, optionalCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1959" endline="1963"><![CDATA[
 
 		private ByRefType(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1964" endline="1968"><![CDATA[
 
 		public override bool Equals(object o)
 		{
 			return EqualsHelper(o as ByRefType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1969" endline="1973"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return elementType.GetHashCode() * 3;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1974" endline="1977"><![CDATA[
 
 		public override Type BaseType
 		{
 			get { return null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1978" endline="1982"><![CDATA[
 		}
 
 		public override TypeAttributes Attributes
 		{
 			get { return 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1983" endline="1987"><![CDATA[
 		}
 
 		public override bool IsByRef
 		{
 			get { return true; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1988" endline="1993"><![CDATA[
 		}
 
 		protected override string GetSuffix()
 		{
 			return "&";
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1994" endline="1998"><![CDATA[
 
 		protected override Type Wrap(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			return Make(type, requiredCustomModifiers, optionalCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="1999" endline="2006"><![CDATA[
 	}
 
 	sealed class PointerType 
 	{
 		internal static Type Make(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			return type.Module.CanonicalizeType(new PointerType(type, requiredCustomModifiers, optionalCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2007" endline="2011"><![CDATA[
 
 		private PointerType(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2012" endline="2016"><![CDATA[
 
 		public override bool Equals(object o)
 		{
 			return EqualsHelper(o as PointerType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2017" endline="2021"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return elementType.GetHashCode() * 7;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2022" endline="2025"><![CDATA[
 
 		public override Type BaseType
 		{
 			get { return null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2026" endline="2030"><![CDATA[
 		}
 
 		public override TypeAttributes Attributes
 		{
 			get { return 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2031" endline="2035"><![CDATA[
 		}
 
 		public override bool IsPointer
 		{
 			get { return true; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2036" endline="2041"><![CDATA[
 		}
 
 		protected override string GetSuffix()
 		{
 			return "*";
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2042" endline="2046"><![CDATA[
 
 		protected override Type Wrap(Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
 		{
 			return Make(type, requiredCustomModifiers, optionalCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2047" endline="2088"><![CDATA[
 	}
 
 	sealed class GenericTypeInstance 
 	{
 		private readonly Type type;
 		private readonly Type[] args;
 		private readonly Type[][] requiredCustomModifiers;
 		private readonly Type[][] optionalCustomModifiers;
 		private Type baseType;
 		private int token;
 
 		internal static Type Make(Type type, Type[] typeArguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
 		{
 			bool identity = true;
 			if (type is TypeBuilder || type is BakedType)
 			{
 				// a TypeBuiler identity must be instantiated
 				identity = false;
 			}
 			else
 			{
 				// we must not instantiate the identity instance, because typeof(Foo<>).MakeGenericType(typeof(Foo<>).GetGenericArguments()) == typeof(Foo<>)
 				for (int i = 0; i < typeArguments.Length; i++)
 				{
 					if (typeArguments[i] != type.GetGenericTypeArgument(i)
 						|| !IsEmpty(requiredCustomModifiers, i)
 						|| !IsEmpty(optionalCustomModifiers, i))
 					{
 						identity = false;
 						break;
 					}
 				}
 				for (int i = 0; i < typeArguments.Length; i++)
 				{
 					if (typeArguments[i] != type.GetGenericTypeArgument(i)
 						|| !IsEmpty(requiredCustomModifiers, i)
 						|| !IsEmpty(optionalCustomModifiers, i))
 					{
 						identity = false;
 						break;
 					}
 				}
 			}
 			if (identity)
 			{
 				return type;
 			}
 			else
 			{
 				return type.Module.CanonicalizeType(new GenericTypeInstance(type, typeArguments, requiredCustomModifiers, optionalCustomModifiers));
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2089" endline="2095"><![CDATA[
 
 		private static bool IsEmpty(Type[][] mods, int i)
 		{
 			// we need to be extra careful, because mods doesn't not need to be in canonical format
 			// (Signature.ReadGenericInst() calls Make() directly, without copying the modifier arrays)
 			return mods == null || mods[i] == null || mods[i].Length == 0;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2096" endline="2103"><![CDATA[
 
 		private GenericTypeInstance(Type type, Type[] args, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
 		{
 			this.type = type;
 			this.args = args;
 			this.requiredCustomModifiers = requiredCustomModifiers;
 			this.optionalCustomModifiers = optionalCustomModifiers;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2104" endline="2111"><![CDATA[
 
 		public override bool Equals(object o)
 		{
 			GenericTypeInstance gt = o as GenericTypeInstance;
 			return gt != null && gt.type.Equals(type) && Util.ArrayEquals(gt.args, args)
 				&& Util.ArrayEquals(gt.requiredCustomModifiers, requiredCustomModifiers)
 				&& Util.ArrayEquals(gt.optionalCustomModifiers, optionalCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2112" endline="2116"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return type.GetHashCode() * 3 ^ Util.GetHashCode(args);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2117" endline="2124"><![CDATA[
 
 		public override string AssemblyQualifiedName
 		{
 			get
 			{
 				string fn = FullName;
 				return fn == null ? null 
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2125" endline="2144"><![CDATA[
 		}
 
 		public override Type BaseType
 		{
 			get
 			{
 				if (baseType == null)
 				{
 					Type rawBaseType = type.BaseType;
 					if (rawBaseType == null)
 					{
 						baseType = rawBaseType;
 					}
 					else
 					{
 						baseType = rawBaseType.BindTypeParameters(this);
 					}
 				}
 				return baseType;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2145" endline="2149"><![CDATA[
 		}
 
 		public override bool IsValueType
 		{
 			get { return type.IsValueType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2150" endline="2168"><![CDATA[
 		}
 
 		public override bool IsVisible
 		{
 			get
 			{
 				if (base.IsVisible)
 				{
 					foreach (Type arg in args)
 					{
 						if (!arg.IsVisible)
 						{
 							return false;
 						}
 					}
 					foreach (Type arg in args)
 					{
 						if (!arg.IsVisible)
 						{
 							return false;
 						}
 					}
 					return true;
 				}
 				return false;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2169" endline="2173"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return type.DeclaringType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2174" endline="2178"><![CDATA[
 		}
 
 		public override TypeAttributes Attributes
 		{
 			get { return type.Attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2179" endline="2184"><![CDATA[
 		}
 
 		internal override void CheckBaked()
 		{
 			type.CheckBaked();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2185" endline="2194"><![CDATA[
 
 		public override FieldInfo[] __GetDeclaredFields()
 		{
 			FieldInfo[] fields = type.__GetDeclaredFields();
 			for (int i = 0; i < fields.Length; i++)
 			{
 				fields[i] = fields[i].BindTypeParameters(this);
 			}
 			for (int i = 0; i < fields.Length; i++)
 			{
 				fields[i] = fields[i].BindTypeParameters(this);
 			}
 			return fields;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2195" endline="2204"><![CDATA[
 
 		public override Type[] __GetDeclaredInterfaces()
 		{
 			Type[] interfaces = type.__GetDeclaredInterfaces();
 			for (int i = 0; i < interfaces.Length; i++)
 			{
 				interfaces[i] = interfaces[i].BindTypeParameters(this);
 			}
 			for (int i = 0; i < interfaces.Length; i++)
 			{
 				interfaces[i] = interfaces[i].BindTypeParameters(this);
 			}
 			return interfaces;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2205" endline="2214"><![CDATA[
 
 		public override MethodBase[] __GetDeclaredMethods()
 		{
 			MethodBase[] methods = type.__GetDeclaredMethods();
 			for (int i = 0; i < methods.Length; i++)
 			{
 				methods[i] = methods[i].BindTypeParameters(this);
 			}
 			for (int i = 0; i < methods.Length; i++)
 			{
 				methods[i] = methods[i].BindTypeParameters(this);
 			}
 			return methods;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2215" endline="2219"><![CDATA[
 
 		public override Type[] __GetDeclaredTypes()
 		{
 			return type.__GetDeclaredTypes();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2220" endline="2229"><![CDATA[
 
 		public override EventInfo[] __GetDeclaredEvents()
 		{
 			EventInfo[] events = type.__GetDeclaredEvents();
 			for (int i = 0; i < events.Length; i++)
 			{
 				events[i] = events[i].BindTypeParameters(this);
 			}
 			for (int i = 0; i < events.Length; i++)
 			{
 				events[i] = events[i].BindTypeParameters(this);
 			}
 			return events;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2230" endline="2239"><![CDATA[
 
 		public override PropertyInfo[] __GetDeclaredProperties()
 		{
 			PropertyInfo[] properties = type.__GetDeclaredProperties();
 			for (int i = 0; i < properties.Length; i++)
 			{
 				properties[i] = properties[i].BindTypeParameters(this);
 			}
 			for (int i = 0; i < properties.Length; i++)
 			{
 				properties[i] = properties[i].BindTypeParameters(this);
 			}
 			return properties;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2240" endline="2258"><![CDATA[
 
 		public override __MethodImplMap __GetMethodImplMap()
 		{
 			__MethodImplMap map = type.__GetMethodImplMap();
 			map.TargetType = this;
 			for (int i = 0; i < map.MethodBodies.Length; i++)
 			{
 				map.MethodBodies[i] = (MethodInfo)map.MethodBodies[i].BindTypeParameters(this);
 				for (int j = 0; j < map.MethodDeclarations[i].Length; j++)
 				{
 					Type interfaceType = map.MethodDeclarations[i][j].DeclaringType;
 					if (interfaceType.IsGenericType)
 					{
 						map.MethodDeclarations[i][j] = (MethodInfo)map.MethodDeclarations[i][j].BindTypeParameters(this);
 					}
 				}
 				for (int j = 0; j < map.MethodDeclarations[i].Length; j++)
 				{
 					Type interfaceType = map.MethodDeclarations[i][j].DeclaringType;
 					if (interfaceType.IsGenericType)
 					{
 						map.MethodDeclarations[i][j] = (MethodInfo)map.MethodDeclarations[i][j].BindTypeParameters(this);
 					}
 				}
 			}
 			for (int i = 0; i < map.MethodBodies.Length; i++)
 			{
 				map.MethodBodies[i] = (MethodInfo)map.MethodBodies[i].BindTypeParameters(this);
 				for (int j = 0; j < map.MethodDeclarations[i].Length; j++)
 				{
 					Type interfaceType = map.MethodDeclarations[i][j].DeclaringType;
 					if (interfaceType.IsGenericType)
 					{
 						map.MethodDeclarations[i][j] = (MethodInfo)map.MethodDeclarations[i][j].BindTypeParameters(this);
 					}
 				}
 			}
 			return map;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2259" endline="2262"><![CDATA[
 
 		public override string Namespace
 		{
 			get { return type.Namespace; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2263" endline="2267"><![CDATA[
 		}
 
 		public override Type UnderlyingSystemType
 		{
 			get { return this; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2268" endline="2272"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return type.Name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2273" endline="2291"><![CDATA[
 		}
 
 		public override string FullName
 		{
 			get
 			{
 				if (this.ContainsGenericParameters)
 				{
 					return null;
 				}
 				StringBuilder sb = new StringBuilder(base.FullName);
 				sb.Append('[');
 				foreach (Type type in args)
 				{
 					sb.Append('[').Append(type.AssemblyQualifiedName.Replace("]", "\\]")).Append(']');
 				}
 				foreach (Type type in args)
 				{
 					sb.Append('[').Append(type.AssemblyQualifiedName.Replace("]", "\\]")).Append(']');
 				}
 				sb.Append(']');
 				return sb.ToString();
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2292" endline="2307"><![CDATA[
 		}
 
 		public override string ToString()
 		{
 			StringBuilder sb = new StringBuilder(type.FullName);
 			sb.Append('[');
 			string sep = "";
 			foreach (Type arg in args)
 			{
 				sb.Append(sep);
 				sb.Append(arg);
 				sep = ",";
 			}
 			foreach (Type arg in args)
 			{
 				sb.Append(sep);
 				sb.Append(arg);
 				sep = ",";
 			}
 			sb.Append(']');
 			return sb.ToString();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2308" endline="2311"><![CDATA[
 
 		public override Module Module
 		{
 			get { return type.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2312" endline="2316"><![CDATA[
 		}
 
 		public override bool IsGenericType
 		{
 			get { return true; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2317" endline="2322"><![CDATA[
 		}
 
 		public override Type GetGenericTypeDefinition()
 		{
 			return type;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2323" endline="2327"><![CDATA[
 
 		public override Type[] GetGenericArguments()
 		{
 			return Util.Copy(args);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2328" endline="2332"><![CDATA[
 
 		public override Type[][] __GetGenericArgumentsRequiredCustomModifiers()
 		{
 			return Util.Copy(requiredCustomModifiers ?? new Type[args.Length][]);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2333" endline="2337"><![CDATA[
 
 		public override Type[][] __GetGenericArgumentsOptionalCustomModifiers()
 		{
 			return Util.Copy(optionalCustomModifiers ?? new Type[args.Length][]);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2338" endline="2342"><![CDATA[
 
 		internal override Type GetGenericTypeArgument(int index)
 		{
 			return args[index];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2343" endline="2356"><![CDATA[
 
 		public override bool ContainsGenericParameters
 		{
 			get
 			{
 				foreach (Type type in args)
 				{
 					if (type.ContainsGenericParameters)
 					{
 						return true;
 					}
 				}
 				foreach (Type type in args)
 				{
 					if (type.ContainsGenericParameters)
 					{
 						return true;
 					}
 				}
 				return false;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2357" endline="2361"><![CDATA[
 		}
 
 		public override StructLayoutAttribute StructLayoutAttribute
 		{
 			get { return type.StructLayoutAttribute; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2362" endline="2371"><![CDATA[
 		}
 
 		internal override int GetModuleBuilderToken()
 		{
 			if (token == 0)
 			{
 				token = ((ModuleBuilder)type.Module).ImportType(this);
 			}
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2372" endline="2391"><![CDATA[
 
 		internal override Type BindTypeParameters(IGenericBinder binder)
 		{
 			for (int i = 0; i < args.Length; i++)
 			{
 				Type xarg = args[i].BindTypeParameters(binder);
 				if (!ReferenceEquals(xarg, args[i]))
 				{
 					Type[] xargs = new Type[args.Length];
 					Array.Copy(args, xargs, i);
 					xargs[i++] = xarg;
 					for (; i < args.Length; i++)
 					{
 						xargs[i] = args[i].BindTypeParameters(binder);
 					}
 					for (; i < args.Length; i++)
 					{
 						xargs[i] = args[i].BindTypeParameters(binder);
 					}
 					return Make(type, xargs, null, null);
 				}
 			}
 			for (int i = 0; i < args.Length; i++)
 			{
 				Type xarg = args[i].BindTypeParameters(binder);
 				if (!ReferenceEquals(xarg, args[i]))
 				{
 					Type[] xargs = new Type[args.Length];
 					Array.Copy(args, xargs, i);
 					xargs[i++] = xarg;
 					for (; i < args.Length; i++)
 					{
 						xargs[i] = args[i].BindTypeParameters(binder);
 					}
 					return Make(type, xargs, null, null);
 				}
 			}
 			return this;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Type.cs" startline="2392" endline="2396"><![CDATA[
 
 		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			return type.GetCustomAttributesData(attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="37" endline="41"><![CDATA[
 		internal RawModule(ModuleReader module)
 		{
 			this.module = module;
 			this.isManifestModule = module.Assembly != null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="42" endline="45"><![CDATA[
 
 		public string Location
 		{
 			get { return module.FullyQualifiedName; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="46" endline="50"><![CDATA[
 		}
 
 		public bool IsManifestModule
 		{
 			get { return isManifestModule; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="51" endline="59"><![CDATA[
 		}
 
 		private void CheckManifestModule()
 		{
 			if (!IsManifestModule)
 			{
 				throw new BadImageFormatException("Module does not contain a manifest");
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="60" endline="65"><![CDATA[
 
 		public AssemblyName GetAssemblyName()
 		{
 			CheckManifestModule();
 			return module.Assembly.GetName();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="66" endline="70"><![CDATA[
 
 		public AssemblyName[] GetReferencedAssemblies()
 		{
 			return module.__GetReferencedAssemblies();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="71" endline="78"><![CDATA[
 
 		public void Dispose()
 		{
 			if (!imported)
 			{
 				module.stream.Dispose();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="79" endline="88"><![CDATA[
 
 		internal Assembly ToAssembly()
 		{
 			if (imported)
 			{
 				throw new InvalidOperationException();
 			}
 			imported = true;
 			return module.Assembly;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="89" endline="99"><![CDATA[
 
 		internal Module ToModule(Assembly assembly)
 		{
 			if (module.Assembly != null)
 			{
 				throw new InvalidOperationException();
 			}
 			imported = true;
 			module.SetAssembly(assembly);
 			return module;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Module.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ExceptionHandlingClause.cs" startline="47" endline="56"><![CDATA[
 		internal ExceptionHandlingClause(ModuleReader module, int flags, int tryOffset, int tryLength, int handlerOffset, int handlerLength, int classTokenOrfilterOffset, IGenericContext context)
 		{
 			this.flags = flags;
 			this.tryOffset = tryOffset;
 			this.tryLength = tryLength;
 			this.handlerOffset = handlerOffset;
 			this.handlerLength = handlerLength;
 			this.catchType = flags == (int)ExceptionHandlingClauseOptions.Clause && classTokenOrfilterOffset != 0 ? module.ResolveType(classTokenOrfilterOffset, context) 
 			this.filterOffset = flags == (int)ExceptionHandlingClauseOptions.Filter ? classTokenOrfilterOffset 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ExceptionHandlingClause.cs" startline="57" endline="60"><![CDATA[
 
 		public Type CatchType
 		{
 			get { return catchType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ExceptionHandlingClause.cs" startline="61" endline="65"><![CDATA[
 		}
 
 		public int FilterOffset
 		{
 			get { return filterOffset; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ExceptionHandlingClause.cs" startline="66" endline="70"><![CDATA[
 		}
 
 		public ExceptionHandlingClauseOptions Flags
 		{
 			get { return (ExceptionHandlingClauseOptions)flags; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ExceptionHandlingClause.cs" startline="71" endline="75"><![CDATA[
 		}
 
 		public int HandlerLength
 		{
 			get { return handlerLength; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ExceptionHandlingClause.cs" startline="76" endline="80"><![CDATA[
 		}
 
 		public int HandlerOffset
 		{
 			get { return handlerOffset; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ExceptionHandlingClause.cs" startline="81" endline="85"><![CDATA[
 		}
 
 		public int TryLength
 		{
 			get { return tryLength; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\ExceptionHandlingClause.cs" startline="86" endline="90"><![CDATA[
 		}
 
 		public int TryOffset
 		{
 			get { return tryOffset; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\support.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\method.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\decl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="56" endline="58"><![CDATA[
 		{
 #if !NO_SYMBOL_WRITER
 			throw new NotSupportedException ("IKVM.Reflection with no symbol writer support");
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="59" endline="78"><![CDATA[
 #else
 			if (runningOnMono)
 			{
 #if MONO
 				return new MdbWriter(moduleBuilder);
 #else
 				throw new NotSupportedException("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols.");
 #endif
 			}
 			else
 			{
 				return new PdbWriter(moduleBuilder);
 			}
 #endif
 		}
 
 		internal static byte[] GetDebugInfo(ISymbolWriterImpl writer, ref IMAGE_DEBUG_DIRECTORY idd)
 		{
 			return writer.GetDebugInfo(ref idd);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="79" endline="83"><![CDATA[
 
 		internal static void RemapToken(ISymbolWriterImpl writer, int oldToken, int newToken)
 		{
 			writer.RemapToken(oldToken, newToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Impl\SymbolSupport.cs" startline="53" endline="53"><![CDATA[
 		private static readonly bool runningOnMono = System.Type.GetType("Mono.Runtime") != null;
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="41" endline="46"><![CDATA[
 		internal PropertyInfoImpl(ModuleReader module, Type declaringType, int index)
 		{
 			this.module = module;
 			this.declaringType = declaringType;
 			this.index = index;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="47" endline="52"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			PropertyInfoImpl other = obj as PropertyInfoImpl;
 			return other != null && other.DeclaringType == declaringType && other.index == index;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="53" endline="57"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return declaringType.GetHashCode() * 77 + index;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="58" endline="68"><![CDATA[
 
 		internal override PropertySignature PropertySignature
 		{
 			get
 			{
 				if (sig == null)
 				{
 					sig = PropertySignature.ReadSig(module, module.GetBlob(module.Property.records[index].Type), declaringType);
 				}
 				return sig;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="69" endline="73"><![CDATA[
 		}
 
 		public override PropertyAttributes Attributes
 		{
 			get { return (PropertyAttributes)module.Property.records[index].Flags; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="74" endline="79"><![CDATA[
 		}
 
 		public override object GetRawConstantValue()
 		{
 			return module.Constant.GetRawConstantValue(module, this.MetadataToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="80" endline="83"><![CDATA[
 
 		public override bool CanRead
 		{
 			get { return GetGetMethod(true) != null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="84" endline="88"><![CDATA[
 		}
 
 		public override bool CanWrite
 		{
 			get { return GetSetMethod(true) != null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="89" endline="94"><![CDATA[
 		}
 
 		public override MethodInfo GetGetMethod(bool nonPublic)
 		{
 			return module.MethodSemantics.GetMethod(module, this.MetadataToken, nonPublic, MethodSemanticsTable.Getter);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="95" endline="99"><![CDATA[
 
 		public override MethodInfo GetSetMethod(bool nonPublic)
 		{
 			return module.MethodSemantics.GetMethod(module, this.MetadataToken, nonPublic, MethodSemanticsTable.Setter);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="100" endline="104"><![CDATA[
 
 		public override MethodInfo[] GetAccessors(bool nonPublic)
 		{
 			return module.MethodSemantics.GetMethods(module, this.MetadataToken, nonPublic, MethodSemanticsTable.Getter | MethodSemanticsTable.Setter | MethodSemanticsTable.Other);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="105" endline="108"><![CDATA[
 
 		public override Type DeclaringType
 		{
 			get { return declaringType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="109" endline="113"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="114" endline="118"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return (PropertyTable.Index << 24) + index + 1; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="119" endline="123"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return module.GetString(module.Property.records[index].Name); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="124" endline="135"><![CDATA[
 		}
 
 		internal override bool IsPublic
 		{
 			get
 			{
 				if (!flagsCached)
 				{
 					ComputeFlags();
 				}
 				return isPublic;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="136" endline="147"><![CDATA[
 		}
 
 		internal override bool IsStatic
 		{
 			get
 			{
 				if (!flagsCached)
 				{
 					ComputeFlags();
 				}
 				return isStatic;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\PropertyInfoImpl.cs" startline="148" endline="154"><![CDATA[
 		}
 
 		private void ComputeFlags()
 		{
 			module.MethodSemantics.ComputeFlags(module, this.MetadataToken, out isPublic, out isStatic);
 			flagsCached = true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="40" endline="43"><![CDATA[
 		public ResolveEventArgs(string name)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="44" endline="49"><![CDATA[
 
 		public ResolveEventArgs(string name, Assembly requestingAssembly)
 		{
 			this.name = name;
 			this.requestingAssembly = requestingAssembly;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="50" endline="53"><![CDATA[
 
 		public string Name
 		{
 			get { return name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="54" endline="58"><![CDATA[
 		}
 
 		public Assembly RequestingAssembly
 		{
 			get { return requestingAssembly; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="59" endline="147"><![CDATA[
 		}
 	}
 
 	public enum AssemblyComparisonResult
 	{
 		Unknown = 0,
 		EquivalentFullMatch = 1,
 		EquivalentWeakNamed = 2,
 		EquivalentFXUnified = 3,
 		EquivalentUnified = 4,
 		NonEquivalentVersion = 5,
 		NonEquivalent = 6,
 		EquivalentPartialMatch = 7,
 		EquivalentPartialWeakNamed = 8,
 		EquivalentPartialUnified = 9,
 		EquivalentPartialFXUnified = 10,
 		NonEquivalentPartialVersion = 11,
 	}
 
 	public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args);
 
 	public sealed class Universe 
 	{
 		internal readonly Dictionary<Type, Type> canonicalizedTypes = new Dictionary<Type, Type>();
 		private readonly List<Assembly> assemblies = new List<Assembly>();
 		private readonly List<AssemblyBuilder> dynamicAssemblies = new List<AssemblyBuilder>();
 		private readonly Dictionary<string, Assembly> assembliesByName = new Dictionary<string, Assembly>();
 		private readonly Dictionary<System.Type, Type> importedTypes = new Dictionary<System.Type, Type>();
 		private Type typeof_System_Object;
 		private Type typeof_System_ValueType;
 		private Type typeof_System_Enum;
 		private Type typeof_System_Void;
 		private Type typeof_System_Boolean;
 		private Type typeof_System_Char;
 		private Type typeof_System_SByte;
 		private Type typeof_System_Byte;
 		private Type typeof_System_Int16;
 		private Type typeof_System_UInt16;
 		private Type typeof_System_Int32;
 		private Type typeof_System_UInt32;
 		private Type typeof_System_Int64;
 		private Type typeof_System_UInt64;
 		private Type typeof_System_Single;
 		private Type typeof_System_Double;
 		private Type typeof_System_String;
 		private Type typeof_System_IntPtr;
 		private Type typeof_System_UIntPtr;
 		private Type typeof_System_TypedReference;
 		private Type typeof_System_Type;
 		private Type typeof_System_Array;
 		private Type typeof_System_DateTime;
 		private Type typeof_System_DBNull;
 		private Type typeof_System_Decimal;
 		private Type typeof_System_NonSerializedAttribute;
 		private Type typeof_System_SerializableAttribute;
 		private Type typeof_System_AttributeUsageAttribute;
 		private Type typeof_System_Reflection_AssemblyCultureAttribute;
 		private Type typeof_System_Runtime_InteropServices_DllImportAttribute;
 		private Type typeof_System_Runtime_InteropServices_FieldOffsetAttribute;
 		private Type typeof_System_Runtime_InteropServices_InAttribute;
 		private Type typeof_System_Runtime_InteropServices_MarshalAsAttribute;
 		private Type typeof_System_Runtime_InteropServices_UnmanagedType;
 		private Type typeof_System_Runtime_InteropServices_VarEnum;
 		private Type typeof_System_Runtime_InteropServices_OutAttribute;
 		private Type typeof_System_Runtime_InteropServices_StructLayoutAttribute;
 		private Type typeof_System_Runtime_InteropServices_OptionalAttribute;
 		private Type typeof_System_Runtime_InteropServices_PreserveSigAttribute;
 		private Type typeof_System_Runtime_InteropServices_ComImportAttribute;
 		private Type typeof_System_Runtime_CompilerServices_DecimalConstantAttribute;
 		private Type typeof_System_Runtime_CompilerServices_SpecialNameAttribute;
 		private Type typeof_System_Runtime_CompilerServices_MethodImplAttribute;
 		private Type typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute;
 		private Type typeof_System_Reflection_AssemblyCopyrightAttribute;
 		private Type typeof_System_Reflection_AssemblyTrademarkAttribute;
 		private Type typeof_System_Reflection_AssemblyProductAttribute;
 		private Type typeof_System_Reflection_AssemblyCompanyAttribute;
 		private Type typeof_System_Reflection_AssemblyDescriptionAttribute;
 		private Type typeof_System_Reflection_AssemblyTitleAttribute;
 		private Type typeof_System_Reflection_AssemblyInformationalVersionAttribute;
 		private Type typeof_System_Reflection_AssemblyFileVersionAttribute;
 		private Type typeof_System_Security_Permissions_CodeAccessSecurityAttribute;
 		private Type typeof_System_Security_Permissions_HostProtectionAttribute;
 		private Type typeof_System_Security_Permissions_PermissionSetAttribute;
 		private Type typeof_System_Security_Permissions_SecurityAction;
 		private List<ResolveEventHandler> resolvers = new List<ResolveEventHandler>();
 
 		internal Assembly Mscorlib
 		{
 			get { return Load("mscorlib"); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="148" endline="153"><![CDATA[
 		}
 
 		private Type ImportMscorlibType(System.Type type)
 		{
 			return Mscorlib.GetTypeImpl(type.FullName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="154" endline="157"><![CDATA[
 
 		internal Type System_Object
 		{
 			get { return typeof_System_Object ?? (typeof_System_Object = ImportMscorlibType(typeof(System.Object))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="158" endline="162"><![CDATA[
 		}
 
 		internal Type System_ValueType
 		{
 			get { return typeof_System_ValueType ?? (typeof_System_ValueType = ImportMscorlibType(typeof(System.ValueType))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="163" endline="167"><![CDATA[
 		}
 
 		internal Type System_Enum
 		{
 			get { return typeof_System_Enum ?? (typeof_System_Enum = ImportMscorlibType(typeof(System.Enum))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="168" endline="172"><![CDATA[
 		}
 
 		internal Type System_Void
 		{
 			get { return typeof_System_Void ?? (typeof_System_Void = ImportMscorlibType(typeof(void))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="173" endline="177"><![CDATA[
 		}
 
 		internal Type System_Boolean
 		{
 			get { return typeof_System_Boolean ?? (typeof_System_Boolean = ImportMscorlibType(typeof(System.Boolean))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="178" endline="182"><![CDATA[
 		}
 
 		internal Type System_Char
 		{
 			get { return typeof_System_Char ?? (typeof_System_Char = ImportMscorlibType(typeof(System.Char))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="183" endline="187"><![CDATA[
 		}
 
 		internal Type System_SByte
 		{
 			get { return typeof_System_SByte ?? (typeof_System_SByte = ImportMscorlibType(typeof(System.SByte))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="188" endline="192"><![CDATA[
 		}
 
 		internal Type System_Byte
 		{
 			get { return typeof_System_Byte ?? (typeof_System_Byte = ImportMscorlibType(typeof(System.Byte))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="193" endline="197"><![CDATA[
 		}
 
 		internal Type System_Int16
 		{
 			get { return typeof_System_Int16 ?? (typeof_System_Int16 = ImportMscorlibType(typeof(System.Int16))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="198" endline="202"><![CDATA[
 		}
 
 		internal Type System_UInt16
 		{
 			get { return typeof_System_UInt16 ?? (typeof_System_UInt16 = ImportMscorlibType(typeof(System.UInt16))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="203" endline="207"><![CDATA[
 		}
 
 		internal Type System_Int32
 		{
 			get { return typeof_System_Int32 ?? (typeof_System_Int32 = ImportMscorlibType(typeof(System.Int32))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="208" endline="212"><![CDATA[
 		}
 
 		internal Type System_UInt32
 		{
 			get { return typeof_System_UInt32 ?? (typeof_System_UInt32 = ImportMscorlibType(typeof(System.UInt32))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="213" endline="217"><![CDATA[
 		}
 
 		internal Type System_Int64
 		{
 			get { return typeof_System_Int64 ?? (typeof_System_Int64 = ImportMscorlibType(typeof(System.Int64))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="218" endline="222"><![CDATA[
 		}
 
 		internal Type System_UInt64
 		{
 			get { return typeof_System_UInt64 ?? (typeof_System_UInt64 = ImportMscorlibType(typeof(System.UInt64))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="223" endline="227"><![CDATA[
 		}
 
 		internal Type System_Single
 		{
 			get { return typeof_System_Single ?? (typeof_System_Single = ImportMscorlibType(typeof(System.Single))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="228" endline="232"><![CDATA[
 		}
 
 		internal Type System_Double
 		{
 			get { return typeof_System_Double ?? (typeof_System_Double = ImportMscorlibType(typeof(System.Double))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="233" endline="237"><![CDATA[
 		}
 
 		internal Type System_String
 		{
 			get { return typeof_System_String ?? (typeof_System_String = ImportMscorlibType(typeof(System.String))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="238" endline="242"><![CDATA[
 		}
 
 		internal Type System_IntPtr
 		{
 			get { return typeof_System_IntPtr ?? (typeof_System_IntPtr = ImportMscorlibType(typeof(System.IntPtr))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="243" endline="247"><![CDATA[
 		}
 
 		internal Type System_UIntPtr
 		{
 			get { return typeof_System_UIntPtr ?? (typeof_System_UIntPtr = ImportMscorlibType(typeof(System.UIntPtr))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="248" endline="252"><![CDATA[
 		}
 
 		internal Type System_TypedReference
 		{
 			get { return typeof_System_TypedReference ?? (typeof_System_TypedReference = ImportMscorlibType(typeof(System.TypedReference))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="253" endline="257"><![CDATA[
 		}
 
 		internal Type System_Type
 		{
 			get { return typeof_System_Type ?? (typeof_System_Type = ImportMscorlibType(typeof(System.Type))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="258" endline="262"><![CDATA[
 		}
 
 		internal Type System_Array
 		{
 			get { return typeof_System_Array ?? (typeof_System_Array = ImportMscorlibType(typeof(System.Array))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="263" endline="267"><![CDATA[
 		}
 
 		internal Type System_DateTime
 		{
 			get { return typeof_System_DateTime ?? (typeof_System_DateTime = ImportMscorlibType(typeof(System.DateTime))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="268" endline="272"><![CDATA[
 		}
 
 		internal Type System_DBNull
 		{
 			get { return typeof_System_DBNull ?? (typeof_System_DBNull = ImportMscorlibType(typeof(System.DBNull))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="273" endline="277"><![CDATA[
 		}
 
 		internal Type System_Decimal
 		{
 			get { return typeof_System_Decimal ?? (typeof_System_Decimal = ImportMscorlibType(typeof(System.Decimal))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="278" endline="282"><![CDATA[
 		}
 
 		internal Type System_NonSerializedAttribute
 		{
 			get { return typeof_System_NonSerializedAttribute ?? (typeof_System_NonSerializedAttribute = ImportMscorlibType(typeof(System.NonSerializedAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="283" endline="287"><![CDATA[
 		}
 
 		internal Type System_SerializableAttribute
 		{
 			get { return typeof_System_SerializableAttribute ?? (typeof_System_SerializableAttribute = ImportMscorlibType(typeof(System.SerializableAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="288" endline="292"><![CDATA[
 		}
 
 		internal Type System_AttributeUsageAttribute
 		{
 			get { return typeof_System_AttributeUsageAttribute ?? (typeof_System_AttributeUsageAttribute = ImportMscorlibType(typeof(System.AttributeUsageAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="293" endline="297"><![CDATA[
 		}
 
 		internal Type System_Reflection_AssemblyCultureAttribute
 		{
 			get { return typeof_System_Reflection_AssemblyCultureAttribute ?? (typeof_System_Reflection_AssemblyCultureAttribute = ImportMscorlibType(typeof(System.Reflection.AssemblyCultureAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="298" endline="302"><![CDATA[
 		}
 
 		internal Type System_Runtime_InteropServices_DllImportAttribute
 		{
 			get { return typeof_System_Runtime_InteropServices_DllImportAttribute ?? (typeof_System_Runtime_InteropServices_DllImportAttribute = ImportMscorlibType(typeof(System.Runtime.InteropServices.DllImportAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="303" endline="307"><![CDATA[
 		}
 
 		internal Type System_Runtime_InteropServices_FieldOffsetAttribute
 		{
 			get { return typeof_System_Runtime_InteropServices_FieldOffsetAttribute ?? (typeof_System_Runtime_InteropServices_FieldOffsetAttribute = ImportMscorlibType(typeof(System.Runtime.InteropServices.FieldOffsetAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="308" endline="312"><![CDATA[
 		}
 
 		internal Type System_Runtime_InteropServices_InAttribute
 		{
 			get { return typeof_System_Runtime_InteropServices_InAttribute ?? (typeof_System_Runtime_InteropServices_InAttribute = ImportMscorlibType(typeof(System.Runtime.InteropServices.InAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="313" endline="317"><![CDATA[
 		}
 
 		internal Type System_Runtime_InteropServices_MarshalAsAttribute
 		{
 			get { return typeof_System_Runtime_InteropServices_MarshalAsAttribute ?? (typeof_System_Runtime_InteropServices_MarshalAsAttribute = ImportMscorlibType(typeof(System.Runtime.InteropServices.MarshalAsAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="318" endline="322"><![CDATA[
 		}
 
 		internal Type System_Runtime_InteropServices_UnmanagedType
 		{
 			get { return typeof_System_Runtime_InteropServices_UnmanagedType ?? (typeof_System_Runtime_InteropServices_UnmanagedType = ImportMscorlibType(typeof(System.Runtime.InteropServices.UnmanagedType))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="323" endline="327"><![CDATA[
 		}
 
 		internal Type System_Runtime_InteropServices_VarEnum
 		{
 			get { return typeof_System_Runtime_InteropServices_VarEnum ?? (typeof_System_Runtime_InteropServices_VarEnum = ImportMscorlibType(typeof(System.Runtime.InteropServices.VarEnum))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="328" endline="332"><![CDATA[
 		}
 
 		internal Type System_Runtime_InteropServices_OutAttribute
 		{
 			get { return typeof_System_Runtime_InteropServices_OutAttribute ?? (typeof_System_Runtime_InteropServices_OutAttribute = ImportMscorlibType(typeof(System.Runtime.InteropServices.OutAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="333" endline="337"><![CDATA[
 		}
 
 		internal Type System_Runtime_InteropServices_StructLayoutAttribute
 		{
 			get { return typeof_System_Runtime_InteropServices_StructLayoutAttribute ?? (typeof_System_Runtime_InteropServices_StructLayoutAttribute = ImportMscorlibType(typeof(System.Runtime.InteropServices.StructLayoutAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="338" endline="342"><![CDATA[
 		}
 
 		internal Type System_Runtime_InteropServices_OptionalAttribute
 		{
 			get { return typeof_System_Runtime_InteropServices_OptionalAttribute ?? (typeof_System_Runtime_InteropServices_OptionalAttribute = ImportMscorlibType(typeof(System.Runtime.InteropServices.OptionalAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="343" endline="347"><![CDATA[
 		}
 
 		internal Type System_Runtime_InteropServices_PreserveSigAttribute
 		{
 			get { return typeof_System_Runtime_InteropServices_PreserveSigAttribute ?? (typeof_System_Runtime_InteropServices_PreserveSigAttribute = ImportMscorlibType(typeof(System.Runtime.InteropServices.PreserveSigAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="348" endline="352"><![CDATA[
 		}
 
 		internal Type System_Runtime_InteropServices_ComImportAttribute
 		{
 			get { return typeof_System_Runtime_InteropServices_ComImportAttribute ?? (typeof_System_Runtime_InteropServices_ComImportAttribute = ImportMscorlibType(typeof(System.Runtime.InteropServices.ComImportAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="353" endline="357"><![CDATA[
 		}
 
 		internal Type System_Runtime_CompilerServices_DecimalConstantAttribute
 		{
 			get { return typeof_System_Runtime_CompilerServices_DecimalConstantAttribute ?? (typeof_System_Runtime_CompilerServices_DecimalConstantAttribute = ImportMscorlibType(typeof(System.Runtime.CompilerServices.DecimalConstantAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="358" endline="362"><![CDATA[
 		}
 
 		internal Type System_Runtime_CompilerServices_SpecialNameAttribute
 		{
 			get { return typeof_System_Runtime_CompilerServices_SpecialNameAttribute ?? (typeof_System_Runtime_CompilerServices_SpecialNameAttribute = ImportMscorlibType(typeof(System.Runtime.CompilerServices.SpecialNameAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="363" endline="367"><![CDATA[
 		}
 
 		internal Type System_Runtime_CompilerServices_MethodImplAttribute
 		{
 			get { return typeof_System_Runtime_CompilerServices_MethodImplAttribute ?? (typeof_System_Runtime_CompilerServices_MethodImplAttribute = ImportMscorlibType(typeof(System.Runtime.CompilerServices.MethodImplAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="368" endline="372"><![CDATA[
 		}
 
 		internal Type System_Security_SuppressUnmanagedCodeSecurityAttribute
 		{
 			get { return typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute ?? (typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute = ImportMscorlibType(typeof(System.Security.SuppressUnmanagedCodeSecurityAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="373" endline="377"><![CDATA[
 		}
 
 		internal Type System_Reflection_AssemblyCopyrightAttribute
 		{
 			get { return typeof_System_Reflection_AssemblyCopyrightAttribute ?? (typeof_System_Reflection_AssemblyCopyrightAttribute = ImportMscorlibType(typeof(System.Reflection.AssemblyCopyrightAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="378" endline="382"><![CDATA[
 		}
 
 		internal Type System_Reflection_AssemblyTrademarkAttribute
 		{
 			get { return typeof_System_Reflection_AssemblyTrademarkAttribute ?? (typeof_System_Reflection_AssemblyTrademarkAttribute = ImportMscorlibType(typeof(System.Reflection.AssemblyTrademarkAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="383" endline="387"><![CDATA[
 		}
 
 		internal Type System_Reflection_AssemblyProductAttribute
 		{
 			get { return typeof_System_Reflection_AssemblyProductAttribute ?? (typeof_System_Reflection_AssemblyProductAttribute = ImportMscorlibType(typeof(System.Reflection.AssemblyProductAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="388" endline="392"><![CDATA[
 		}
 
 		internal Type System_Reflection_AssemblyCompanyAttribute
 		{
 			get { return typeof_System_Reflection_AssemblyCompanyAttribute ?? (typeof_System_Reflection_AssemblyCompanyAttribute = ImportMscorlibType(typeof(System.Reflection.AssemblyCompanyAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="393" endline="397"><![CDATA[
 		}
 
 		internal Type System_Reflection_AssemblyDescriptionAttribute
 		{
 			get { return typeof_System_Reflection_AssemblyDescriptionAttribute ?? (typeof_System_Reflection_AssemblyDescriptionAttribute = ImportMscorlibType(typeof(System.Reflection.AssemblyDescriptionAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="398" endline="402"><![CDATA[
 		}
 
 		internal Type System_Reflection_AssemblyTitleAttribute
 		{
 			get { return typeof_System_Reflection_AssemblyTitleAttribute ?? (typeof_System_Reflection_AssemblyTitleAttribute = ImportMscorlibType(typeof(System.Reflection.AssemblyTitleAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="403" endline="407"><![CDATA[
 		}
 
 		internal Type System_Reflection_AssemblyInformationalVersionAttribute
 		{
 			get { return typeof_System_Reflection_AssemblyInformationalVersionAttribute ?? (typeof_System_Reflection_AssemblyInformationalVersionAttribute = ImportMscorlibType(typeof(System.Reflection.AssemblyInformationalVersionAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="408" endline="412"><![CDATA[
 		}
 
 		internal Type System_Reflection_AssemblyFileVersionAttribute
 		{
 			get { return typeof_System_Reflection_AssemblyFileVersionAttribute ?? (typeof_System_Reflection_AssemblyFileVersionAttribute = ImportMscorlibType(typeof(System.Reflection.AssemblyFileVersionAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="413" endline="417"><![CDATA[
 		}
 
 		internal Type System_Security_Permissions_CodeAccessSecurityAttribute
 		{
 			get { return typeof_System_Security_Permissions_CodeAccessSecurityAttribute ?? (typeof_System_Security_Permissions_CodeAccessSecurityAttribute = ImportMscorlibType(typeof(System.Security.Permissions.CodeAccessSecurityAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="418" endline="422"><![CDATA[
 		}
 
 		internal Type System_Security_Permissions_HostProtectionAttribute
 		{
 			get { return typeof_System_Security_Permissions_HostProtectionAttribute ?? (typeof_System_Security_Permissions_HostProtectionAttribute = ImportMscorlibType(typeof(System.Security.Permissions.HostProtectionAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="423" endline="427"><![CDATA[
 		}
 
 		internal Type System_Security_Permissions_PermissionSetAttribute
 		{
 			get { return typeof_System_Security_Permissions_PermissionSetAttribute ?? (typeof_System_Security_Permissions_PermissionSetAttribute = ImportMscorlibType(typeof(System.Security.Permissions.PermissionSetAttribute))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="428" endline="432"><![CDATA[
 		}
 
 		internal Type System_Security_Permissions_SecurityAction
 		{
 			get { return typeof_System_Security_Permissions_SecurityAction ?? (typeof_System_Security_Permissions_SecurityAction = ImportMscorlibType(typeof(System.Security.Permissions.SecurityAction))); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="433" endline="437"><![CDATA[
 		}
 
 		internal bool HasMscorlib
 		{
 			get { return GetLoadedAssembly("mscorlib") != null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="438" endline="442"><![CDATA[
 		}
 
 		public event ResolveEventHandler AssemblyResolve
 		{
 			add { resolvers.Add(value); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="443" endline="443"><![CDATA[
 			remove { resolvers.Remove(value); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="444" endline="458"><![CDATA[
 		}
 
 		public Type Import(System.Type type)
 		{
 			Type imported;
 			if (!importedTypes.TryGetValue(type, out imported))
 			{
 				imported = ImportImpl(type);
 				if (imported != null)
 				{
 					importedTypes.Add(type, imported);
 				}
 			}
 			return imported;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="459" endline="517"><![CDATA[
 
 		private Type ImportImpl(System.Type type)
 		{
 			if (type.Assembly == typeof(IKVM.Reflection.Type).Assembly)
 			{
 				throw new ArgumentException("Did you really want to import " + type.FullName + "?");
 			}
 			if (type.HasElementType)
 			{
 				if (type.IsArray)
 				{
 					if (type.Name.EndsWith("[]"))
 					{
 						return Import(type.GetElementType()).MakeArrayType();
 					}
 					else
 					{
 						return Import(type.GetElementType()).MakeArrayType(type.GetArrayRank());
 					}
 				}
 				else if (type.IsByRef)
 				{
 					return Import(type.GetElementType()).MakeByRefType();
 				}
 				else if (type.IsPointer)
 				{
 					return Import(type.GetElementType()).MakePointerType();
 				}
 				else
 				{
 					throw new InvalidOperationException();
 				}
 			}
 			else if (type.IsGenericParameter)
 			{
 				if (type.DeclaringMethod != null)
 				{
 					throw new NotImplementedException();
 				}
 				else
 				{
 					return Import(type.DeclaringType).GetGenericArguments()[type.GenericParameterPosition];
 				}
 			}
 			else if (type.IsGenericType && !type.IsGenericTypeDefinition)
 			{
 				System.Type[] args = type.GetGenericArguments();
 				Type[] importedArgs = new Type[args.Length];
 				for (int i = 0; i < args.Length; i++)
 				{
 					importedArgs[i] = Import(args[i]);
 				}
 				for (int i = 0; i < args.Length; i++)
 				{
 					importedArgs[i] = Import(args[i]);
 				}
 				return Import(type.GetGenericTypeDefinition()).MakeGenericType(importedArgs);
 			}
 			else
 			{
 				return Import(type.Assembly).GetType(type.FullName);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="518" endline="522"><![CDATA[
 
 		private Assembly Import(System.Reflection.Assembly asm)
 		{
 			return Load(asm.FullName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="523" endline="528"><![CDATA[
 
 		public RawModule OpenRawModule(string path)
 		{
 			path = Path.GetFullPath(path);
 			return OpenRawModule(new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read), path);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="529" endline="537"><![CDATA[
 
 		public RawModule OpenRawModule(Stream stream, string location)
 		{
 			if (!stream.CanRead || !stream.CanSeek)
 			{
 				throw new NotSupportedException();
 			}
 			return new RawModule(new ModuleReader(null, this, stream, location));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="538" endline="549"><![CDATA[
 
 		public Assembly LoadAssembly(RawModule module)
 		{
 			string refname = module.GetAssemblyName().FullName;
 			Assembly asm = GetLoadedAssembly(refname);
 			if (asm == null)
 			{
 				asm = module.ToAssembly();
 				assemblies.Add(asm);
 			}
 			return asm;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="550" endline="568"><![CDATA[
 
 		public Assembly LoadFile(string path)
 		{
 			try
 			{
 				using (RawModule module = OpenRawModule(path))
 				{
 					return LoadAssembly(module);
 				}
 			}
 			catch (IOException x)
 			{
 				throw new FileNotFoundException(x.Message, x);
 			}
 			catch (UnauthorizedAccessException x)
 			{
 				throw new FileNotFoundException(x.Message, x);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="569" endline="589"><![CDATA[
 
 		private Assembly GetLoadedAssembly(string refname)
 		{
 			Assembly asm;
 			if (!assembliesByName.TryGetValue(refname, out asm))
 			{
 				for (int i = 0; i < assemblies.Count; i++)
 				{
 					AssemblyComparisonResult result;
 					// We won't allow FX unification here, because our own (non-Fusion) implementation of CompareAssemblyIdentity doesn't support it and
 					// we don't want to create a fundamental functional difference based on that.
 					if (CompareAssemblyIdentity(refname, false, assemblies[i].FullName, false, out result) && result != AssemblyComparisonResult.EquivalentFXUnified)
 					{
 						asm = assemblies[i];
 						assembliesByName.Add(refname, asm);
 						break;
 					}
 				}
 				for (int i = 0; i < assemblies.Count; i++)
 				{
 					AssemblyComparisonResult result;
 					// We won't allow FX unification here, because our own (non-Fusion) implementation of CompareAssemblyIdentity doesn't support it and
 					// we don't want to create a fundamental functional difference based on that.
 					if (CompareAssemblyIdentity(refname, false, assemblies[i].FullName, false, out result) && result != AssemblyComparisonResult.EquivalentFXUnified)
 					{
 						asm = assemblies[i];
 						assembliesByName.Add(refname, asm);
 						break;
 					}
 				}
 			}
 			return asm;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="590" endline="604"><![CDATA[
 
 		private Assembly GetDynamicAssembly(string refname)
 		{
 			foreach (AssemblyBuilder asm in dynamicAssemblies)
 			{
 				AssemblyComparisonResult result;
 				// We won't allow FX unification here, because our own (non-Fusion) implementation of CompareAssemblyIdentity doesn't support it and
 				// we don't want to create a fundamental functional difference based on that.
 				if (CompareAssemblyIdentity(refname, false, asm.FullName, false, out result) && result != AssemblyComparisonResult.EquivalentFXUnified)
 				{
 					return asm;
 				}
 			}
 			foreach (AssemblyBuilder asm in dynamicAssemblies)
 			{
 				AssemblyComparisonResult result;
 				// We won't allow FX unification here, because our own (non-Fusion) implementation of CompareAssemblyIdentity doesn't support it and
 				// we don't want to create a fundamental functional difference based on that.
 				if (CompareAssemblyIdentity(refname, false, asm.FullName, false, out result) && result != AssemblyComparisonResult.EquivalentFXUnified)
 				{
 					return asm;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="605" endline="609"><![CDATA[
 
 		public Assembly Load(string refname)
 		{
 			return Load(refname, null, true);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="610" endline="652"><![CDATA[
 
 		internal Assembly Load(string refname, Assembly requestingAssembly, bool throwOnError)
 		{
 			Assembly asm = GetLoadedAssembly(refname);
 			if (asm != null)
 			{
 				return asm;
 			}
 			if (resolvers.Count == 0)
 			{
 				asm = DefaultResolver(refname, throwOnError);
 			}
 			else
 			{
 				ResolveEventArgs args = new ResolveEventArgs(refname, requestingAssembly);
 				foreach (ResolveEventHandler evt in resolvers)
 				{
 					asm = evt(this, args);
 					if (asm != null)
 					{
 						break;
 					}
 				}
 				foreach (ResolveEventHandler evt in resolvers)
 				{
 					asm = evt(this, args);
 					if (asm != null)
 					{
 						break;
 					}
 				}
 				if (asm == null)
 				{
 					asm = GetDynamicAssembly(refname);
 				}
 			}
 			if (asm != null)
 			{
 				string defname = asm.FullName;
 				if (refname != defname)
 				{
 					assembliesByName.Add(refname, asm);
 				}
 				return asm;
 			}
 			if (throwOnError)
 			{
 				throw new FileNotFoundException(refname);
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="653" endline="691"><![CDATA[
 
 		private Assembly DefaultResolver(string refname, bool throwOnError)
 		{
 			Assembly asm = GetDynamicAssembly(refname);
 			if (asm != null)
 			{
 				return asm;
 			}
 			string fileName;
 			if (throwOnError)
 			{
 				try
 				{
 					fileName = System.Reflection.Assembly.ReflectionOnlyLoad(refname).Location;
 				}
 				catch (System.BadImageFormatException x)
 				{
 					throw new BadImageFormatException(x.Message, x);
 				}
 			}
 			else
 			{
 				try
 				{
 					fileName = System.Reflection.Assembly.ReflectionOnlyLoad(refname).Location;
 				}
 				catch (System.BadImageFormatException x)
 				{
 					throw new BadImageFormatException(x.Message, x);
 				}
 				catch (FileNotFoundException)
 				{
 					// we intentionally only swallow the FileNotFoundException, if the file exists but isn't a valid assembly,
 					// we should throw an exception
 					return null;
 				}
 			}
 			return LoadFile(fileName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="692" endline="698"><![CDATA[
 
 		public Type GetType(string assemblyQualifiedTypeName)
 		{
 			// to be more compatible with Type.GetType(), we could call Assembly.GetCallingAssembly(),
 			// import that assembly and pass it as the context, but implicitly importing is considered evil
 			return GetType(null, assemblyQualifiedTypeName, false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="699" endline="705"><![CDATA[
 
 		public Type GetType(string assemblyQualifiedTypeName, bool throwOnError)
 		{
 			// to be more compatible with Type.GetType(), we could call Assembly.GetCallingAssembly(),
 			// import that assembly and pass it as the context, but implicitly importing is considered evil
 			return GetType(null, assemblyQualifiedTypeName, throwOnError);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="706" endline="717"><![CDATA[
 
 		// note that context is slightly different from the calling assembly (System.Type.GetType),
 		// because context is passed to the AssemblyResolve event as the RequestingAssembly
 		public Type GetType(Assembly context, string assemblyQualifiedTypeName, bool throwOnError)
 		{
 			TypeNameParser parser = TypeNameParser.Parse(assemblyQualifiedTypeName, throwOnError);
 			if (parser.Error)
 			{
 				return null;
 			}
 			return parser.GetType(this, context, throwOnError, assemblyQualifiedTypeName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="718" endline="728"><![CDATA[
 
 		public Assembly[] GetAssemblies()
 		{
 			Assembly[] array = new Assembly[assemblies.Count + dynamicAssemblies.Count];
 			assemblies.CopyTo(array);
 			for (int i = 0, j = assemblies.Count; j < array.Length; i++, j++)
 			{
 				array[j] = dynamicAssemblies[i];
 			}
 			for (int i = 0, j = assemblies.Count; j < array.Length; i++, j++)
 			{
 				array[j] = dynamicAssemblies[i];
 			}
 			return array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="729" endline="734"><![CDATA[
 
 		// this is equivalent to the Fusion CompareAssemblyIdentity API
 		public bool CompareAssemblyIdentity(string assemblyIdentity1, bool unified1, string assemblyIdentity2, bool unified2, out AssemblyComparisonResult result)
 		{
 			return Fusion.CompareAssemblyIdentity(assemblyIdentity1, unified1, assemblyIdentity2, unified2, out result);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="735" endline="739"><![CDATA[
 
 		public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access)
 		{
 			return DefineDynamicAssemblyImpl(name, access, null, null, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="740" endline="744"><![CDATA[
 
 		public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir)
 		{
 			return DefineDynamicAssemblyImpl(name, access, dir, null, null, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="745" endline="752"><![CDATA[
 
 #if NET_4_0
 		[Obsolete]
 #endif
 		public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
 		{
 			return DefineDynamicAssemblyImpl(name, access, dir, requiredPermissions, optionalPermissions, refusedPermissions);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="753" endline="759"><![CDATA[
 
 		private AssemblyBuilder DefineDynamicAssemblyImpl(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
 		{
 			AssemblyBuilder asm = new AssemblyBuilder(this, name, dir, requiredPermissions, optionalPermissions, refusedPermissions);
 			dynamicAssemblies.Add(asm);
 			return asm;
  		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="760" endline="775"><![CDATA[
 
 		internal void RenameAssembly(Assembly assembly, AssemblyName oldName)
 		{
 			List<string> remove = new List<string>();
 			foreach (KeyValuePair<string, Assembly> kv in assembliesByName)
 			{
 				if (kv.Value == assembly)
 				{
 					remove.Add(kv.Key);
 				}
 			}
 			foreach (KeyValuePair<string, Assembly> kv in assembliesByName)
 			{
 				if (kv.Value == assembly)
 				{
 					remove.Add(kv.Key);
 				}
 			}
 			foreach (string key in remove)
 			{
 				assembliesByName.Remove(key);
 			}
 			foreach (string key in remove)
 			{
 				assembliesByName.Remove(key);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="776" endline="793"><![CDATA[
 
 		public void Dispose()
 		{
 			foreach (Assembly asm in assemblies)
 			{
 				foreach (Module mod in asm.GetLoadedModules())
 				{
 					mod.Dispose();
 				}
 				foreach (Module mod in asm.GetLoadedModules())
 				{
 					mod.Dispose();
 				}
 			}
 			foreach (Assembly asm in assemblies)
 			{
 				foreach (Module mod in asm.GetLoadedModules())
 				{
 					mod.Dispose();
 				}
 			}
 			foreach (AssemblyBuilder asm in dynamicAssemblies)
 			{
 				foreach (Module mod in asm.GetLoadedModules())
 				{
 					mod.Dispose();
 				}
 				foreach (Module mod in asm.GetLoadedModules())
 				{
 					mod.Dispose();
 				}
 			}
 			foreach (AssemblyBuilder asm in dynamicAssemblies)
 			{
 				foreach (Module mod in asm.GetLoadedModules())
 				{
 					mod.Dispose();
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Universe.cs" startline="82" endline="143"><![CDATA[
 		internal readonly Dictionary<Type, Type> canonicalizedTypes = new Dictionary<Type, Type>();
 		private readonly List<Assembly> assemblies = new List<Assembly>();
 		private readonly List<AssemblyBuilder> dynamicAssemblies = new List<AssemblyBuilder>();
 		private readonly Dictionary<string, Assembly> assembliesByName = new Dictionary<string, Assembly>();
 		private readonly Dictionary<System.Type, Type> importedTypes = new Dictionary<System.Type, Type>();
 		private Type typeof_System_Object;
 		private Type typeof_System_ValueType;
 		private Type typeof_System_Enum;
 		private Type typeof_System_Void;
 		private Type typeof_System_Boolean;
 		private Type typeof_System_Char;
 		private Type typeof_System_SByte;
 		private Type typeof_System_Byte;
 		private Type typeof_System_Int16;
 		private Type typeof_System_UInt16;
 		private Type typeof_System_Int32;
 		private Type typeof_System_UInt32;
 		private Type typeof_System_Int64;
 		private Type typeof_System_UInt64;
 		private Type typeof_System_Single;
 		private Type typeof_System_Double;
 		private Type typeof_System_String;
 		private Type typeof_System_IntPtr;
 		private Type typeof_System_UIntPtr;
 		private Type typeof_System_TypedReference;
 		private Type typeof_System_Type;
 		private Type typeof_System_Array;
 		private Type typeof_System_DateTime;
 		private Type typeof_System_DBNull;
 		private Type typeof_System_Decimal;
 		private Type typeof_System_NonSerializedAttribute;
 		private Type typeof_System_SerializableAttribute;
 		private Type typeof_System_AttributeUsageAttribute;
 		private Type typeof_System_Reflection_AssemblyCultureAttribute;
 		private Type typeof_System_Runtime_InteropServices_DllImportAttribute;
 		private Type typeof_System_Runtime_InteropServices_FieldOffsetAttribute;
 		private Type typeof_System_Runtime_InteropServices_InAttribute;
 		private Type typeof_System_Runtime_InteropServices_MarshalAsAttribute;
 		private Type typeof_System_Runtime_InteropServices_UnmanagedType;
 		private Type typeof_System_Runtime_InteropServices_VarEnum;
 		private Type typeof_System_Runtime_InteropServices_OutAttribute;
 		private Type typeof_System_Runtime_InteropServices_StructLayoutAttribute;
 		private Type typeof_System_Runtime_InteropServices_OptionalAttribute;
 		private Type typeof_System_Runtime_InteropServices_PreserveSigAttribute;
 		private Type typeof_System_Runtime_InteropServices_ComImportAttribute;
 		private Type typeof_System_Runtime_CompilerServices_DecimalConstantAttribute;
 		private Type typeof_System_Runtime_CompilerServices_SpecialNameAttribute;
 		private Type typeof_System_Runtime_CompilerServices_MethodImplAttribute;
 		private Type typeof_System_Security_SuppressUnmanagedCodeSecurityAttribute;
 		private Type typeof_System_Reflection_AssemblyCopyrightAttribute;
 		private Type typeof_System_Reflection_AssemblyTrademarkAttribute;
 		private Type typeof_System_Reflection_AssemblyProductAttribute;
 		private Type typeof_System_Reflection_AssemblyCompanyAttribute;
 		private Type typeof_System_Reflection_AssemblyDescriptionAttribute;
 		private Type typeof_System_Reflection_AssemblyTitleAttribute;
 		private Type typeof_System_Reflection_AssemblyInformationalVersionAttribute;
 		private Type typeof_System_Reflection_AssemblyFileVersionAttribute;
 		private Type typeof_System_Security_Permissions_CodeAccessSecurityAttribute;
 		private Type typeof_System_Security_Permissions_HostProtectionAttribute;
 		private Type typeof_System_Security_Permissions_PermissionSetAttribute;
 		private Type typeof_System_Security_Permissions_SecurityAction;
 		private List<ResolveEventHandler> resolvers = new List<ResolveEventHandler>();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="43" endline="47"><![CDATA[
 		internal CustomAttributeData(Module module, int index)
 		{
 			this.module = module;
 			this.index = index;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="48" endline="67"><![CDATA[
 
 		internal CustomAttributeData(ConstructorInfo constructor, object[] args, List<CustomAttributeNamedArgument> namedArguments)
 		{
 			this.lazyConstructor = constructor;
 			MethodSignature sig = constructor.MethodSignature;
 			List<CustomAttributeTypedArgument> list = new List<CustomAttributeTypedArgument>();
 			for (int i = 0; i < args.Length; i++)
 			{
 				list.Add(new CustomAttributeTypedArgument(sig.GetParameterType(i), args[i]));
 			}
 			for (int i = 0; i < args.Length; i++)
 			{
 				list.Add(new CustomAttributeTypedArgument(sig.GetParameterType(i), args[i]));
 			}
 			lazyConstructorArguments = list.AsReadOnly();
 			if (namedArguments == null)
 			{
 				this.lazyNamedArguments = Empty<CustomAttributeNamedArgument>.Array;
 			}
 			else
 			{
 				this.lazyNamedArguments = namedArguments.AsReadOnly();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="68" endline="87"><![CDATA[
 
 		internal CustomAttributeData(Assembly asm, ConstructorInfo constructor, ByteReader br)
 		{
 			this.lazyConstructor = constructor;
 			if (br.Length == 0)
 			{
 				// it's legal to have an empty blob
 				lazyConstructorArguments = Empty<CustomAttributeTypedArgument>.Array;
 				lazyNamedArguments = Empty<CustomAttributeNamedArgument>.Array;
 			}
 			else
 			{
 				if (br.ReadUInt16() != 1)
 				{
 					throw new BadImageFormatException();
 				}
 				lazyConstructorArguments = ReadConstructorArguments(asm, br, constructor);
 				lazyNamedArguments = ReadNamedArguments(asm, br, br.ReadUInt16(), constructor.DeclaringType);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="88" endline="113"><![CDATA[
 
 		public override string ToString()
 		{
 			StringBuilder sb = new StringBuilder();
 			sb.Append('[');
 			sb.Append(Constructor.DeclaringType.FullName);
 			sb.Append('(');
 			string sep = "";
 			foreach (CustomAttributeTypedArgument arg in ConstructorArguments)
 			{
 				sb.Append(sep);
 				sep = ", ";
 				AppendValue(sb, arg);
 			}
 			foreach (CustomAttributeTypedArgument arg in ConstructorArguments)
 			{
 				sb.Append(sep);
 				sep = ", ";
 				AppendValue(sb, arg);
 			}
 			foreach (CustomAttributeNamedArgument named in NamedArguments)
 			{
 				sb.Append(sep);
 				sep = ", ";
 				sb.Append(named.MemberInfo.Name);
 				sb.Append(" = ");
 				AppendValue(sb, named.TypedValue);
 			}
 			foreach (CustomAttributeNamedArgument named in NamedArguments)
 			{
 				sb.Append(sep);
 				sep = ", ";
 				sb.Append(named.MemberInfo.Name);
 				sb.Append(" = ");
 				AppendValue(sb, named.TypedValue);
 			}
 			sb.Append(')');
 			sb.Append(']');
 			return sb.ToString();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="114" endline="131"><![CDATA[
 
 		private static void AppendValue(StringBuilder sb, CustomAttributeTypedArgument arg)
 		{
 			if (arg.ArgumentType == arg.ArgumentType.Module.universe.System_String)
 			{
 				sb.Append('"').Append(arg.Value).Append('"');
 			}
 			else
 			{
 				if (arg.ArgumentType.IsEnum)
 				{
 					sb.Append('(');
 					sb.Append(arg.ArgumentType.FullName);
 					sb.Append(')');
 				}
 				sb.Append(arg.Value);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="132" endline="173"><![CDATA[
 
 		internal static void ReadDeclarativeSecurity(Assembly asm, List<CustomAttributeData> list, int action, ByteReader br)
 		{
 			Universe u = asm.universe;
 			if (br.PeekByte() == '.')
 			{
 				br.ReadByte();
 				int count = br.ReadCompressedInt();
 				for (int j = 0; j < count; j++)
 				{
 					Type type = ReadType(asm, br);
 					ConstructorInfo constructor;
 					if (type == u.System_Security_Permissions_HostProtectionAttribute && action == (int)System.Security.Permissions.SecurityAction.LinkDemand)
 					{
 						constructor = type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, Type.EmptyTypes, null);
 					}
 					else
 					{
 						constructor = type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[] { u.System_Security_Permissions_SecurityAction }, null);
 					}
 					// LAMESPEC there is an additional length here (probably of the named argument list)
 					ByteReader slice = br.Slice(br.ReadCompressedInt());
 					// LAMESPEC the count of named arguments is a compressed integer (instead of UInt16 as NumNamed in custom attributes)
 					list.Add(new CustomAttributeData(constructor, action, ReadNamedArguments(asm, slice, slice.ReadCompressedInt(), type)));
 				}
 				for (int j = 0; j < count; j++)
 				{
 					Type type = ReadType(asm, br);
 					ConstructorInfo constructor;
 					if (type == u.System_Security_Permissions_HostProtectionAttribute && action == (int)System.Security.Permissions.SecurityAction.LinkDemand)
 					{
 						constructor = type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, Type.EmptyTypes, null);
 					}
 					else
 					{
 						constructor = type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[] { u.System_Security_Permissions_SecurityAction }, null);
 					}
 					// LAMESPEC there is an additional length here (probably of the named argument list)
 					ByteReader slice = br.Slice(br.ReadCompressedInt());
 					// LAMESPEC the count of named arguments is a compressed integer (instead of UInt16 as NumNamed in custom attributes)
 					list.Add(new CustomAttributeData(constructor, action, ReadNamedArguments(asm, slice, slice.ReadCompressedInt(), type)));
 				}
 			}
 			else
 			{
 				// .NET 1.x format (xml)
 				char[] buf = new char[br.Length / 2];
 				for (int i = 0; i < buf.Length; i++)
 				{
 					buf[i] = br.ReadChar();
 				}
 				for (int i = 0; i < buf.Length; i++)
 				{
 					buf[i] = br.ReadChar();
 				}
 				string xml = new String(buf);
 				ConstructorInfo constructor = u.System_Security_Permissions_PermissionSetAttribute.GetConstructor(new Type[] { u.System_Security_Permissions_SecurityAction });
 				List<CustomAttributeNamedArgument> args = new List<CustomAttributeNamedArgument>();
 				args.Add(new CustomAttributeNamedArgument(u.System_Security_Permissions_PermissionSetAttribute.GetProperty("XML"),
 					new CustomAttributeTypedArgument(u.System_String, xml)));
 				list.Add(new CustomAttributeData(constructor, action, args));
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="174" endline="183"><![CDATA[
 
 		private CustomAttributeData(ConstructorInfo constructor, int securityAction, IList<CustomAttributeNamedArgument> namedArguments)
 		{
 			Universe u = constructor.Module.universe;
 			this.lazyConstructor = constructor;
 			List<CustomAttributeTypedArgument> list = new List<CustomAttributeTypedArgument>();
 			list.Add(new CustomAttributeTypedArgument(u.System_Security_Permissions_SecurityAction, securityAction));
 			this.lazyConstructorArguments =  list.AsReadOnly();
 			this.lazyNamedArguments = namedArguments;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="184" endline="227"><![CDATA[
 
 		private static Type ReadFieldOrPropType(Assembly asm, ByteReader br)
 		{
 			Universe u = asm.universe;
 			switch (br.ReadByte())
 			{
 				case Signature.ELEMENT_TYPE_BOOLEAN
 					return u.System_Boolean;
 				case Signature.ELEMENT_TYPE_CHAR
 					return u.System_Char;
 				case Signature.ELEMENT_TYPE_I1
 					return u.System_SByte;
 				case Signature.ELEMENT_TYPE_U1
 					return u.System_Byte;
 				case Signature.ELEMENT_TYPE_I2
 					return u.System_Int16;
 				case Signature.ELEMENT_TYPE_U2
 					return u.System_UInt16;
 				case Signature.ELEMENT_TYPE_I4
 					return u.System_Int32;
 				case Signature.ELEMENT_TYPE_U4
 					return u.System_UInt32;
 				case Signature.ELEMENT_TYPE_I8
 					return u.System_Int64;
 				case Signature.ELEMENT_TYPE_U8
 					return u.System_UInt64;
 				case Signature.ELEMENT_TYPE_R4
 					return u.System_Single;
 				case Signature.ELEMENT_TYPE_R8
 					return u.System_Double;
 				case Signature.ELEMENT_TYPE_STRING
 					return u.System_String;
 				case Signature.ELEMENT_TYPE_SZARRAY
 					return ReadFieldOrPropType(asm, br).MakeArrayType();
 				case 0x55
 					return ReadType(asm, br);
 				case 0x50
 					return u.System_Type;
 				case 0x51
 					return u.System_Object;
 				default
 					throw new InvalidOperationException();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="228" endline="295"><![CDATA[
 
 		private static CustomAttributeTypedArgument ReadFixedArg(Assembly asm, ByteReader br, Type type)
 		{
 			Universe u = asm.universe;
 			if (type == u.System_String)
 			{
 				return new CustomAttributeTypedArgument(type, br.ReadString());
 			}
 			else if (type == u.System_Type)
 			{
 				return new CustomAttributeTypedArgument(type, ReadType(asm, br));
 			}
 			else if (type == u.System_Object)
 			{
 				return ReadFixedArg(asm, br, ReadFieldOrPropType(asm, br));
 			}
 			else if (type.IsArray)
 			{
 				int length = br.ReadInt32();
 				if (length == -1)
 				{
 					return new CustomAttributeTypedArgument(type, null);
 				}
 				Type elementType = type.GetElementType();
 				CustomAttributeTypedArgument[] array = new CustomAttributeTypedArgument[length];
 				for (int i = 0; i < length; i++)
 				{
 					array[i] = ReadFixedArg(asm, br, elementType);
 				}
 				for (int i = 0; i < length; i++)
 				{
 					array[i] = ReadFixedArg(asm, br, elementType);
 				}
 				return new CustomAttributeTypedArgument(type, array);
 			}
 			else if (type.IsEnum)
 			{
 				return new CustomAttributeTypedArgument(type, ReadFixedArg(asm, br, type.GetEnumUnderlyingTypeImpl()).Value);
 			}
 			else
 			{
 				switch (Type.GetTypeCode(type))
 				{
 					case TypeCode.Boolean
 						return new CustomAttributeTypedArgument(type, br.ReadByte() != 0);
 					case TypeCode.Char
 						return new CustomAttributeTypedArgument(type, br.ReadChar());
 					case TypeCode.Single
 						return new CustomAttributeTypedArgument(type, br.ReadSingle());
 					case TypeCode.Double
 						return new CustomAttributeTypedArgument(type, br.ReadDouble());
 					case TypeCode.SByte
 						return new CustomAttributeTypedArgument(type, br.ReadSByte());
 					case TypeCode.Int16
 						return new CustomAttributeTypedArgument(type, br.ReadInt16());
 					case TypeCode.Int32
 						return new CustomAttributeTypedArgument(type, br.ReadInt32());
 					case TypeCode.Int64
 						return new CustomAttributeTypedArgument(type, br.ReadInt64());
 					case TypeCode.Byte
 						return new CustomAttributeTypedArgument(type, br.ReadByte());
 					case TypeCode.UInt16
 						return new CustomAttributeTypedArgument(type, br.ReadUInt16());
 					case TypeCode.UInt32
 						return new CustomAttributeTypedArgument(type, br.ReadUInt32());
 					case TypeCode.UInt64
 						return new CustomAttributeTypedArgument(type, br.ReadUInt64());
 					default
 						throw new InvalidOperationException();
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="296" endline="310"><![CDATA[
 
 		private static Type ReadType(Assembly asm, ByteReader br)
 		{
 			string typeName = br.ReadString();
 			if (typeName == null)
 			{
 				return null;
 			}
 			if (typeName.Length > 0 && typeName[typeName.Length - 1] == 0)
 			{
 				// there are broken compilers that emit an extra NUL character after the type name
 				typeName = typeName.Substring(0, typeName.Length - 1);
 			}
 			return asm.universe.GetType(asm, typeName, true);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="311" endline="322"><![CDATA[
 
 		private static IList<CustomAttributeTypedArgument> ReadConstructorArguments(Assembly asm, ByteReader br, ConstructorInfo constructor)
 		{
 			MethodSignature sig = constructor.MethodSignature;
 			int count = sig.GetParameterCount();
 			List<CustomAttributeTypedArgument> list = new List<CustomAttributeTypedArgument>(count);
 			for (int i = 0; i < count; i++)
 			{
 				list.Add(ReadFixedArg(asm, br, sig.GetParameterType(i)));
 			}
 			for (int i = 0; i < count; i++)
 			{
 				list.Add(ReadFixedArg(asm, br, sig.GetParameterType(i)));
 			}
 			return list.AsReadOnly();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="323" endline="352"><![CDATA[
 
 		private static IList<CustomAttributeNamedArgument> ReadNamedArguments(Assembly asm, ByteReader br, int named, Type type)
 		{
 			List<CustomAttributeNamedArgument> list = new List<CustomAttributeNamedArgument>(named);
 			for (int i = 0; i < named; i++)
 			{
 				byte fieldOrProperty = br.ReadByte();
 				Type fieldOrPropertyType = ReadFieldOrPropType(asm, br);
 				string name = br.ReadString();
 				CustomAttributeTypedArgument value = ReadFixedArg(asm, br, fieldOrPropertyType);
 				MemberInfo member;
 				switch (fieldOrProperty)
 				{
 					case 0x53
 						member = GetField(type, name);
 						break;
 					case 0x54
 						member = GetProperty(type, name);
 						break;
 					default
 						throw new BadImageFormatException();
 				}
 				if (member == null)
 				{
 					throw new BadImageFormatException();
 				}
 				list.Add(new CustomAttributeNamedArgument(member, value));
 			}
 			for (int i = 0; i < named; i++)
 			{
 				byte fieldOrProperty = br.ReadByte();
 				Type fieldOrPropertyType = ReadFieldOrPropType(asm, br);
 				string name = br.ReadString();
 				CustomAttributeTypedArgument value = ReadFixedArg(asm, br, fieldOrPropertyType);
 				MemberInfo member;
 				switch (fieldOrProperty)
 				{
 					case 0x53
 						member = GetField(type, name);
 						break;
 					case 0x54
 						member = GetProperty(type, name);
 						break;
 					default
 						throw new BadImageFormatException();
 				}
 				if (member == null)
 				{
 					throw new BadImageFormatException();
 				}
 				list.Add(new CustomAttributeNamedArgument(member, value));
 			}
 			return list.AsReadOnly();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="353" endline="367"><![CDATA[
 
 		private static FieldInfo GetField(Type type, string name)
 		{
 			for (; type != null; type = type.BaseType)
 			{
 				foreach (FieldInfo field in type.__GetDeclaredFields())
 				{
 					if (field.IsPublic && !field.IsStatic && field.Name == name)
 					{
 						return field;
 					}
 				}
 				foreach (FieldInfo field in type.__GetDeclaredFields())
 				{
 					if (field.IsPublic && !field.IsStatic && field.Name == name)
 					{
 						return field;
 					}
 				}
 			}
 			for (; type != null; type = type.BaseType)
 			{
 				foreach (FieldInfo field in type.__GetDeclaredFields())
 				{
 					if (field.IsPublic && !field.IsStatic && field.Name == name)
 					{
 						return field;
 					}
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="368" endline="382"><![CDATA[
 
 		private static PropertyInfo GetProperty(Type type, string name)
 		{
 			for (; type != null; type = type.BaseType)
 			{
 				foreach (PropertyInfo property in type.__GetDeclaredProperties())
 				{
 					if (property.IsPublic && !property.IsStatic && property.Name == name)
 					{
 						return property;
 					}
 				}
 				foreach (PropertyInfo property in type.__GetDeclaredProperties())
 				{
 					if (property.IsPublic && !property.IsStatic && property.Name == name)
 					{
 						return property;
 					}
 				}
 			}
 			for (; type != null; type = type.BaseType)
 			{
 				foreach (PropertyInfo property in type.__GetDeclaredProperties())
 				{
 					if (property.IsPublic && !property.IsStatic && property.Name == name)
 					{
 						return property;
 					}
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="383" endline="409"><![CDATA[
 
 		public void __ReadTypeName(out string ns, out string name)
 		{
 			if (lazyConstructor == null)
 			{
 				ModuleReader mod = module as ModuleReader;
 				if (mod != null)
 				{
 					int methodToken = mod.CustomAttribute.records[index].Type;
 					if ((methodToken >> 24) == MemberRefTable.Index)
 					{
 						int methodIndex = (methodToken & 0xFFFFFF) - 1;
 						int typeToken = mod.MemberRef.records[methodIndex].Class;
 						if ((typeToken >> 24) == TypeRefTable.Index)
 						{
 							int typeIndex = (typeToken & 0xFFFFFF) - 1;
 							int typeNameSpace = mod.TypeRef.records[typeIndex].TypeNameSpace;
 							ns = typeNameSpace == 0 ? null 
 							name = mod.GetString(mod.TypeRef.records[typeIndex].TypeName);
 							return;
 						}
 					}
 				}
 			}
 			ns = Constructor.DeclaringType.Namespace;
 			name = Constructor.DeclaringType.Name;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="410" endline="420"><![CDATA[
 
 		public ConstructorInfo Constructor
 		{
 			get
 			{
 				if (lazyConstructor == null)
 				{
 					lazyConstructor = (ConstructorInfo)module.ResolveMethod(module.CustomAttribute.records[index].Type);
 				}
 				return lazyConstructor;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="421" endline="432"><![CDATA[
 		}
 
 		public IList<CustomAttributeTypedArgument> ConstructorArguments
 		{
 			get
 			{
 				if (lazyConstructorArguments == null)
 				{
 					LazyParseArguments();
 				}
 				return lazyConstructorArguments;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="433" endline="444"><![CDATA[
 		}
 
 		public IList<CustomAttributeNamedArgument> NamedArguments
 		{
 			get
 			{
 				if (lazyNamedArguments == null)
 				{
 					LazyParseArguments();
 				}
 				return lazyNamedArguments;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="445" endline="465"><![CDATA[
 		}
 
 		private void LazyParseArguments()
 		{
 			ByteReader br = module.GetBlob(module.CustomAttribute.records[index].Value);
 			if (br.Length == 0)
 			{
 				// it's legal to have an empty blob
 				lazyConstructorArguments = Empty<CustomAttributeTypedArgument>.Array;
 				lazyNamedArguments = Empty<CustomAttributeNamedArgument>.Array;
 			}
 			else
 			{
 				if (br.ReadUInt16() != 1)
 				{
 					throw new BadImageFormatException();
 				}
 				lazyConstructorArguments = ReadConstructorArguments(module.Assembly, br, Constructor);
 				lazyNamedArguments = ReadNamedArguments(module.Assembly, br, br.ReadUInt16(), Constructor.DeclaringType);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="466" endline="492"><![CDATA[
 
 		public CustomAttributeBuilder __ToBuilder()
 		{
 			object[] args = new object[ConstructorArguments.Count];
 			for (int i = 0; i < args.Length; i++)
 			{
 				args[i] = ConstructorArguments[i].Value;
 			}
 			for (int i = 0; i < args.Length; i++)
 			{
 				args[i] = ConstructorArguments[i].Value;
 			}
 			List<PropertyInfo> namedProperties = new List<PropertyInfo>();
 			List<object> propertyValues = new List<object>();
 			List<FieldInfo> namedFields = new List<FieldInfo>();
 			List<object> fieldValues = new List<object>();
 			foreach (CustomAttributeNamedArgument named in NamedArguments)
 			{
 				if (named.MemberInfo is PropertyInfo)
 				{
 					namedProperties.Add((PropertyInfo)named.MemberInfo);
 					propertyValues.Add(named.TypedValue.Value);
 				}
 				else
 				{
 					namedFields.Add((FieldInfo)named.MemberInfo);
 					fieldValues.Add(named.TypedValue.Value);
 				}
 			}
 			foreach (CustomAttributeNamedArgument named in NamedArguments)
 			{
 				if (named.MemberInfo is PropertyInfo)
 				{
 					namedProperties.Add((PropertyInfo)named.MemberInfo);
 					propertyValues.Add(named.TypedValue.Value);
 				}
 				else
 				{
 					namedFields.Add((FieldInfo)named.MemberInfo);
 					fieldValues.Add(named.TypedValue.Value);
 				}
 			}
 			return new CustomAttributeBuilder(Constructor, args, namedProperties.ToArray(), propertyValues.ToArray(), namedFields.ToArray(), fieldValues.ToArray());
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="493" endline="497"><![CDATA[
 
 		public static IList<CustomAttributeData> GetCustomAttributes(MemberInfo member)
 		{
 			return member.GetCustomAttributesData(null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="498" endline="502"><![CDATA[
 
 		public static IList<CustomAttributeData> GetCustomAttributes(Assembly assembly)
 		{
 			return assembly.GetCustomAttributesData(null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="503" endline="507"><![CDATA[
 
 		public static IList<CustomAttributeData> GetCustomAttributes(Module module)
 		{
 			return module.GetCustomAttributesData(null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="508" endline="512"><![CDATA[
 
 		public static IList<CustomAttributeData> GetCustomAttributes(ParameterInfo parameter)
 		{
 			return parameter.GetCustomAttributesData(null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="513" endline="517"><![CDATA[
 
 		public static IList<CustomAttributeData> __GetCustomAttributes(Assembly assembly, Type attributeType, bool inherit)
 		{
 			return assembly.GetCustomAttributesData(attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="518" endline="522"><![CDATA[
 
 		public static IList<CustomAttributeData> __GetCustomAttributes(Module module, Type attributeType, bool inherit)
 		{
 			return module.GetCustomAttributesData(attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="523" endline="527"><![CDATA[
 
 		public static IList<CustomAttributeData> __GetCustomAttributes(ParameterInfo parameter, Type attributeType, bool inherit)
 		{
 			return parameter.GetCustomAttributesData(attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="528" endline="564"><![CDATA[
 
 		public static IList<CustomAttributeData> __GetCustomAttributes(MemberInfo member, Type attributeType, bool inherit)
 		{
 			if (!inherit || !IsInheritableAttribute(attributeType))
 			{
 				return member.GetCustomAttributesData(attributeType);
 			}
 			List<CustomAttributeData> list = new List<CustomAttributeData>();
 			for (; ; )
 			{
 				list.AddRange(member.GetCustomAttributesData(attributeType));
 				Type type = member as Type;
 				if (type != null)
 				{
 					type = type.BaseType;
 					if (type == null)
 					{
 						return list;
 					}
 					member = type;
 					continue;
 				}
 				MethodInfo method = member as MethodInfo;
 				if (method != null)
 				{
 					MemberInfo prev = member;
 					method = method.GetBaseDefinition();
 					if (method == null || method == prev)
 					{
 						return list;
 					}
 					member = method;
 					continue;
 				}
 				return list;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="565" endline="569"><![CDATA[
 
 		public static IList<CustomAttributeData> __GetDeclarativeSecurity(Assembly assembly)
 		{
 			return assembly.ManifestModule.GetDeclarativeSecurity(0x20000001);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="570" endline="581"><![CDATA[
 
 		public static IList<CustomAttributeData> __GetDeclarativeSecurity(Type type)
 		{
 			if ((type.Attributes & TypeAttributes.HasSecurity) != 0)
 			{
 				return type.Module.GetDeclarativeSecurity(type.MetadataToken);
 			}
 			else
 			{
 				return EmptyList;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="582" endline="593"><![CDATA[
 
 		public static IList<CustomAttributeData> __GetDeclarativeSecurity(MethodBase method)
 		{
 			if ((method.Attributes & MethodAttributes.HasSecurity) != 0)
 			{
 				return method.Module.GetDeclarativeSecurity(method.MetadataToken);
 			}
 			else
 			{
 				return EmptyList;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="594" endline="610"><![CDATA[
 
 		private static bool IsInheritableAttribute(Type attribute)
 		{
 			Type attributeUsageAttribute = attribute.Module.universe.System_AttributeUsageAttribute;
 			IList<CustomAttributeData> attr = attribute.GetCustomAttributesData(attributeUsageAttribute);
 			if (attr.Count != 0)
 			{
 				foreach (CustomAttributeNamedArgument named in attr[0].NamedArguments)
 				{
 					if (named.MemberInfo.Name == "Inherited")
 					{
 						return (bool)named.TypedValue.Value;
 					}
 				}
 				foreach (CustomAttributeNamedArgument named in attr[0].NamedArguments)
 				{
 					if (named.MemberInfo.Name == "Inherited")
 					{
 						return (bool)named.TypedValue.Value;
 					}
 				}
 			}
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\CustomAttributeData.cs" startline="36" endline="36"><![CDATA[
 		internal static readonly IList<CustomAttributeData> EmptyList = new List<CustomAttributeData>(0).AsReadOnly();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\pending.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\pending.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\pending.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\pending.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\pending.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\pending.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\pending.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\pending.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\pending.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\pending.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\pending.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\iterators.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\dynamic.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="42" endline="46"><![CDATA[
 		internal CustomAttributeBuilder(ConstructorInfo con, byte[] blob)
 		{
 			this.con = con;
 			this.blob = blob;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="47" endline="51"><![CDATA[
 
 		public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="52" endline="56"><![CDATA[
 
 		public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, FieldInfo[] namedFields, object[] fieldValues)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="57" endline="61"><![CDATA[
 
 		public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="62" endline="71"><![CDATA[
 
 		public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues)
 		{
 			this.con = con;
 			this.constructorArgs = constructorArgs;
 			this.namedProperties = namedProperties;
 			this.propertyValues = propertyValues;
 			this.namedFields = namedFields;
 			this.fieldValues = fieldValues;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="72" endline="368"><![CDATA[
 
 		private sealed class BlobWriter
 		{
 			private readonly ModuleBuilder moduleBuilder;
 			private readonly CustomAttributeBuilder cab;
 			private readonly ByteBuffer bb;
 
 			internal BlobWriter(ModuleBuilder moduleBuilder, CustomAttributeBuilder cab, ByteBuffer bb)
 			{
 				this.moduleBuilder = moduleBuilder;
 				this.cab = cab;
 				this.bb = bb;
 			}
 
 			internal void WriteCustomAttributeBlob()
 			{
 				// prolog
 				WriteUInt16(1);
 				ParameterInfo[] pi = cab.con.GetParameters();
 				for (int i = 0; i < pi.Length; i++)
 				{
 					WriteFixedArg(pi[i].ParameterType, cab.constructorArgs[i]);
 				}
 				WriteNamedArguments(false);
 			}
 
 			internal void WriteNamedArguments(bool forDeclSecurity)
 			{
 				// NumNamed
 				int named = 0;
 				if (cab.namedFields != null)
 				{
 					named += cab.namedFields.Length;
 				}
 				if (cab.namedProperties != null)
 				{
 					named += cab.namedProperties.Length;
 				}
 				if (forDeclSecurity)
 				{
 					WritePackedLen(named);
 				}
 				else
 				{
 					WriteUInt16((ushort)named);
 				}
 				if (cab.namedFields != null)
 				{
 					for (int i = 0; i < cab.namedFields.Length; i++)
 					{
 						WriteNamedArg(0x53, cab.namedFields[i].FieldType, cab.namedFields[i].Name, cab.fieldValues[i]);
 					}
 				}
 				if (cab.namedProperties != null)
 				{
 					for (int i = 0; i < cab.namedProperties.Length; i++)
 					{
 						WriteNamedArg(0x54, cab.namedProperties[i].PropertyType, cab.namedProperties[i].Name, cab.propertyValues[i]);
 					}
 				}
 			}
 
 			private void WriteNamedArg(byte fieldOrProperty, Type type, string name, object value)
 			{
 				WriteByte(fieldOrProperty);
 				WriteFieldOrPropType(type);
 				WriteString(name);
 				WriteFixedArg(type, value);
 			}
 
 			private void WriteByte(byte value)
 			{
 				bb.Write(value);
 			}
 
 			private void WriteUInt16(ushort value)
 			{
 				bb.Write(value);
 			}
 
 			private void WriteInt32(int value)
 			{
 				bb.Write(value);
 			}
 
 			private void WriteFixedArg(Type type, object value)
 			{
 				Universe u = moduleBuilder.universe;
 				if (type == u.System_String)
 				{
 					WriteString((string)value);
 				}
 				else if (type == u.System_Type)
 				{
 					WriteTypeName((Type)value);
 				}
 				else if (type == u.System_Object)
 				{
 					if (value == null)
 					{
 						type = u.System_String;
 					}
 					else if (value is Type)
 					{
 						// value.GetType() would return a subclass of Type, but we don't want to deal with that
 						type = u.System_Type;
 					}
 					else
 					{
 						type = u.Import(value.GetType());
 					}
 					WriteFieldOrPropType(type);
 					WriteFixedArg(type, value);
 				}
 				else if (type.IsArray)
 				{
 					if (value == null)
 					{
 						WriteInt32(-1);
 					}
 					else
 					{
 						Array array = (Array)value;
 						Type elemType = type.GetElementType();
 						WriteInt32(array.Length);
 						foreach (object val in array)
 						{
 							WriteFixedArg(elemType, val);
 						}
 					}
 				}
 				else if (type.IsEnum)
 				{
 					WriteFixedArg(type.GetEnumUnderlyingTypeImpl(), value);
 				}
 				else
 				{
 					switch (Type.GetTypeCode(type))
 					{
 						case TypeCode.Boolean
 							WriteByte((bool)value ? (byte)1 
 							break;
 						case TypeCode.Char
 							WriteUInt16((char)value);
 							break;
 						case TypeCode.SByte
 							WriteByte((byte)(sbyte)value);
 							break;
 						case TypeCode.Byte
 							WriteByte((byte)value);
 							break;
 						case TypeCode.Int16
 							WriteUInt16((ushort)(short)value);
 							break;
 						case TypeCode.UInt16
 							WriteUInt16((ushort)value);
 							break;
 						case TypeCode.Int32
 							WriteInt32((int)value);
 							break;
 						case TypeCode.UInt32
 							WriteInt32((int)(uint)value);
 							break;
 						case TypeCode.Int64
 							WriteInt64((long)value);
 							break;
 						case TypeCode.UInt64
 							WriteInt64((long)(ulong)value);
 							break;
 						case TypeCode.Single
 							WriteSingle((float)value);
 							break;
 						case TypeCode.Double
 							WriteDouble((double)value);
 							break;
 						default
 							throw new ArgumentException();
 					}
 				}
 			}
 
 			private void WriteInt64(long value)
 			{
 				bb.Write(value);
 			}
 
 			private void WriteSingle(float value)
 			{
 				bb.Write(value);
 			}
 
 			private void WriteDouble(double value)
 			{
 				bb.Write(value);
 			}
 
 			private void WriteTypeName(Type type)
 			{
 				string name = null;
 				if (type != null)
 				{
 					if (type.Assembly == moduleBuilder.Assembly)
 					{
 						name = type.FullName;
 					}
 					else
 					{
 						name = type.AssemblyQualifiedName;
 					}
 				}
 				WriteString(name);
 			}
 
 			private void WriteString(string val)
 			{
 				bb.Write(val);
 			}
 
 			private void WritePackedLen(int len)
 			{
 				bb.WriteCompressedInt(len);
 			}
 
 			private void WriteFieldOrPropType(Type type)
 			{
 				Universe u = type.Module.universe;
 				if (type == u.System_Type)
 				{
 					WriteByte(0x50);
 				}
 				else if (type == u.System_Object)
 				{
 					WriteByte(0x51);
 				}
 				else if (type.IsArray)
 				{
 					WriteByte(0x1D);
 					WriteFieldOrPropType(type.GetElementType());
 				}
 				else if (type.IsEnum)
 				{
 					WriteByte(0x55);
 					WriteTypeName(type);
 				}
 				else
 				{
 					switch (Type.GetTypeCode(type))
 					{
 						case TypeCode.Boolean
 							WriteByte(0x02);
 							break;
 						case TypeCode.Char
 							WriteByte(0x03);
 							break;
 						case TypeCode.SByte
 							WriteByte(0x04);
 							break;
 						case TypeCode.Byte
 							WriteByte(0x05);
 							break;
 						case TypeCode.Int16
 							WriteByte(0x06);
 							break;
 						case TypeCode.UInt16
 							WriteByte(0x07);
 							break;
 						case TypeCode.Int32
 							WriteByte(0x08);
 							break;
 						case TypeCode.UInt32
 							WriteByte(0x09);
 							break;
 						case TypeCode.Int64
 							WriteByte(0x0A);
 							break;
 						case TypeCode.UInt64
 							WriteByte(0x0B);
 							break;
 						case TypeCode.Single
 							WriteByte(0x0C);
 							break;
 						case TypeCode.Double
 							WriteByte(0x0D);
 							break;
 						case TypeCode.String
 							WriteByte(0x0E);
 							break;
 						default
 							throw new ArgumentException();
 					}
 				}
 			}
 		}
 
 		internal bool IsPseudoCustomAttribute
 		{
 			get { return con.DeclaringType.IsPseudoCustomAttribute; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="369" endline="373"><![CDATA[
 		}
 
 		internal ConstructorInfo Constructor
 		{
 			get { return con; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="374" endline="389"><![CDATA[
 		}
 
 		internal int WriteBlob(ModuleBuilder moduleBuilder)
 		{
 			ByteBuffer bb = new ByteBuffer(100);
 			if (blob != null)
 			{
 				bb.Write(blob);
 			}
 			else
 			{
 				BlobWriter bw = new BlobWriter(moduleBuilder, this, bb);
 				bw.WriteCustomAttributeBlob();
 			}
 			return moduleBuilder.Blobs.Add(bb);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="390" endline="394"><![CDATA[
 
 		internal object GetConstructorArgument(int pos)
 		{
 			return constructorArgs[pos];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="395" endline="398"><![CDATA[
 
 		internal int ConstructorArgumentCount
 		{
 			get { return constructorArgs == null ? 0 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="399" endline="425"><![CDATA[
 		}
 
 		internal T? GetFieldValue<T>(string name) where T 
 		{
 			object val = GetFieldValue(name);
 			if (val is T)
 			{
 				return (T)val;
 			}
 			else if (val != null)
 			{
 				if (typeof(T).IsEnum)
 				{
 					Debug.Assert(Enum.GetUnderlyingType(typeof(T)) == val.GetType());
 					return (T)Enum.ToObject(typeof(T), val);
 				}
 				else
 				{
 					Debug.Assert(Enum.GetUnderlyingType(val.GetType()) == typeof(T));
 					return (T)Convert.ChangeType(val, typeof(T));
 				}
 			}
 			else
 			{
 				return null;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="426" endline="440"><![CDATA[
 
 		internal object GetFieldValue(string name)
 		{
 			if (namedFields != null)
 			{
 				for (int i = 0; i < namedFields.Length; i++)
 				{
 					if (namedFields[i].Name == name)
 					{
 						return fieldValues[i];
 					}
 				}
 				for (int i = 0; i < namedFields.Length; i++)
 				{
 					if (namedFields[i].Name == name)
 					{
 						return fieldValues[i];
 					}
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="441" endline="446"><![CDATA[
 
 		internal void WriteNamedArgumentsForDeclSecurity(ModuleBuilder moduleBuilder, ByteBuffer bb)
 		{
 			BlobWriter bw = new BlobWriter(moduleBuilder, this, bb);
 			bw.WriteNamedArguments(true);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="447" endline="473"><![CDATA[
 
 		internal CustomAttributeData ToData(Assembly asm)
 		{
 			if (blob != null)
 			{
 				return new CustomAttributeData(asm, con, new IKVM.Reflection.Reader.ByteReader(blob, 0, blob.Length));
 			}
 			else
 			{
 				List<CustomAttributeNamedArgument> namedArgs = new List<CustomAttributeNamedArgument>();
 				if (namedProperties != null)
 				{
 					for (int i = 0; i < namedProperties.Length; i++)
 					{
 						namedArgs.Add(new CustomAttributeNamedArgument(namedProperties[i], new CustomAttributeTypedArgument(namedProperties[i].PropertyType, propertyValues[i])));
 					}
 					for (int i = 0; i < namedProperties.Length; i++)
 					{
 						namedArgs.Add(new CustomAttributeNamedArgument(namedProperties[i], new CustomAttributeTypedArgument(namedProperties[i].PropertyType, propertyValues[i])));
 					}
 				}
 				if (namedFields != null)
 				{
 					for (int i = 0; i < namedFields.Length; i++)
 					{
 						namedArgs.Add(new CustomAttributeNamedArgument(namedFields[i], new CustomAttributeTypedArgument(namedFields[i].FieldType, fieldValues[i])));
 					}
 					for (int i = 0; i < namedFields.Length; i++)
 					{
 						namedArgs.Add(new CustomAttributeNamedArgument(namedFields[i], new CustomAttributeTypedArgument(namedFields[i].FieldType, fieldValues[i])));
 					}
 				}
 				return new CustomAttributeData(con, constructorArgs, namedArgs);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="474" endline="477"><![CDATA[
 
 		internal bool HasBlob
 		{
 			get { return blob != null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\CustomAttributeBuilder.cs" startline="478" endline="490"><![CDATA[
 		}
 
 		internal CustomAttributeBuilder DecodeBlob(Assembly asm)
 		{
 			if (blob == null)
 			{
 				return this;
 			}
 			else
 			{
 				return ToData(asm).__ToBuilder();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StrongNameKeyPair.cs" startline="34" endline="37"><![CDATA[
 		internal StrongNameKeyPair(System.Reflection.StrongNameKeyPair keyPair)
 		{
 			this.keyPair = keyPair;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StrongNameKeyPair.cs" startline="38" endline="42"><![CDATA[
 
 		public StrongNameKeyPair(string keyPairContainer)
 		{
 			this.keyPair = new System.Reflection.StrongNameKeyPair(keyPairContainer);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StrongNameKeyPair.cs" startline="43" endline="47"><![CDATA[
 
 		public StrongNameKeyPair(byte[] keyPairArray)
 		{
 			this.keyPair = new System.Reflection.StrongNameKeyPair(keyPairArray);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StrongNameKeyPair.cs" startline="48" endline="52"><![CDATA[
 
 		public StrongNameKeyPair(System.IO.FileStream fs)
 		{
 			this.keyPair = new System.Reflection.StrongNameKeyPair(fs);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\StrongNameKeyPair.cs" startline="53" endline="56"><![CDATA[
 
 		public byte[] PublicKey
 		{
 			get { return keyPair.PublicKey; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="45" endline="47"><![CDATA[
 		{
 			return new PropertySignature(callingConvention, propertyType, Util.Copy(optionalCustomModifiers), Util.Copy(requiredCustomModifiers), Util.Copy(parameterTypes), Util.Copy(parameterTypeOptionalCustomModifiers), Util.Copy(parameterTypeRequiredCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="48" endline="58"><![CDATA[
 
 		private PropertySignature(CallingConventions callingConvention, Type propertyType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeOptionalCustomModifiers, Type[][] parameterTypeRequiredCustomModifiers)
 		{
 			this.callingConvention = callingConvention;
 			this.propertyType = propertyType;
 			this.optionalCustomModifiers = optionalCustomModifiers;
 			this.requiredCustomModifiers = requiredCustomModifiers;
 			this.parameterTypes = parameterTypes;
 			this.parameterOptionalCustomModifiers = parameterTypeOptionalCustomModifiers;
 			this.parameterRequiredCustomModifiers = parameterTypeRequiredCustomModifiers;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="59" endline="67"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			PropertySignature other = obj as PropertySignature;
 			return other != null
 				&& other.propertyType.Equals(propertyType)
 				&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers)
 				&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="68" endline="72"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return propertyType.GetHashCode() ^ Util.GetHashCode(optionalCustomModifiers) ^ Util.GetHashCode(requiredCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="73" endline="76"><![CDATA[
 
 		internal int ParameterCount
 		{
 			get { return parameterTypes.Length; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="77" endline="91"><![CDATA[
 		}
 
 		internal bool HasThis
 		{
 			set
 			{
 				if (value)
 				{
 					callingConvention |= CallingConventions.HasThis;
 				}
 				else
 				{
 					callingConvention &= ~CallingConventions.HasThis;
 				}
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="92" endline="96"><![CDATA[
 		}
 
 		internal Type PropertyType
 		{
 			get { return propertyType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="97" endline="102"><![CDATA[
 		}
 
 		internal Type[] GetOptionalCustomModifiers()
 		{
 			return Util.Copy(optionalCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="103" endline="107"><![CDATA[
 
 		internal Type[] GetRequiredCustomModifiers()
 		{
 			return Util.Copy(requiredCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="108" endline="119"><![CDATA[
 
 		internal PropertySignature ExpandTypeParameters(Type declaringType)
 		{
 			return new PropertySignature(
 				callingConvention,
 				propertyType.BindTypeParameters(declaringType),
 				BindTypeParameters(declaringType, optionalCustomModifiers),
 				BindTypeParameters(declaringType, requiredCustomModifiers),
 				BindTypeParameters(declaringType, parameterTypes),
 				BindTypeParameters(declaringType, parameterOptionalCustomModifiers),
 				BindTypeParameters(declaringType, parameterRequiredCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="120" endline="156"><![CDATA[
 
 		internal override void WriteSig(ModuleBuilder module, ByteBuffer bb)
 		{
 			byte flags = PROPERTY;
 			if ((callingConvention & CallingConventions.HasThis) != 0)
 			{
 				flags |= HASTHIS;
 			}
 			if ((callingConvention & CallingConventions.ExplicitThis) != 0)
 			{
 				flags |= EXPLICITTHIS;
 			}
 			if ((callingConvention & CallingConventions.VarArgs) != 0)
 			{
 				flags |= VARARG;
 			}
 			bb.Write(flags);
 			bb.WriteCompressedInt(parameterTypes == null ? 0 
 			WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, requiredCustomModifiers);
 			WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, optionalCustomModifiers);
 			WriteType(module, bb, propertyType);
 			if (parameterTypes != null)
 			{
 				for (int i = 0; i < parameterTypes.Length; i++)
 				{
 					if (parameterRequiredCustomModifiers != null)
 					{
 						WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, parameterRequiredCustomModifiers[i]);
 					}
 					if (parameterOptionalCustomModifiers != null)
 					{
 						WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, parameterOptionalCustomModifiers[i]);
 					}
 					WriteType(module, bb, parameterTypes[i]);
 				}
 				for (int i = 0; i < parameterTypes.Length; i++)
 				{
 					if (parameterRequiredCustomModifiers != null)
 					{
 						WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, parameterRequiredCustomModifiers[i]);
 					}
 					if (parameterOptionalCustomModifiers != null)
 					{
 						WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, parameterOptionalCustomModifiers[i]);
 					}
 					WriteType(module, bb, parameterTypes[i]);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="157" endline="161"><![CDATA[
 
 		internal Type GetParameter(int parameter)
 		{
 			return parameterTypes[parameter];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="162" endline="166"><![CDATA[
 
 		internal Type[] GetOptionalCustomModifiers(int parameter)
 		{
 			return parameterOptionalCustomModifiers == null ? Type.EmptyTypes 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="167" endline="171"><![CDATA[
 
 		internal Type[] GetRequiredCustomModifiers(int parameter)
 		{
 			return parameterRequiredCustomModifiers == null ? Type.EmptyTypes 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\PropertySignature.cs" startline="172" endline="216"><![CDATA[
 
 		internal static PropertySignature ReadSig(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			byte flags = br.ReadByte();
 			if ((flags & PROPERTY) == 0)
 			{
 				throw new BadImageFormatException();
 			}
 			CallingConventions callingConvention = CallingConventions.Standard;
 			if ((flags & HASTHIS) != 0)
 			{
 				callingConvention |= CallingConventions.HasThis;
 			}
 			if ((flags & EXPLICITTHIS) != 0)
 			{
 				callingConvention |= CallingConventions.ExplicitThis;
 			}
 			Type returnType;
 			Type[] returnTypeRequiredCustomModifiers;
 			Type[] returnTypeOptionalCustomModifiers;
 			Type[] parameterTypes;
 			Type[][] parameterRequiredCustomModifiers;
 			Type[][] parameterOptionalCustomModifiers;
 			int paramCount = br.ReadCompressedInt();
 			ReadCustomModifiers(module, br, context, out returnTypeRequiredCustomModifiers, out returnTypeOptionalCustomModifiers);
 			returnType = ReadRetType(module, br, context);
 			parameterTypes = new Type[paramCount];
 			parameterRequiredCustomModifiers = null;
 			parameterOptionalCustomModifiers = null;
 			for (int i = 0; i < parameterTypes.Length; i++)
 			{
 				if (IsCustomModifier(br.PeekByte()))
 				{
 					if (parameterOptionalCustomModifiers == null)
 					{
 						parameterOptionalCustomModifiers = new Type[parameterTypes.Length][];
 						parameterRequiredCustomModifiers = new Type[parameterTypes.Length][];
 					}
 					ReadCustomModifiers(module, br, context, out parameterRequiredCustomModifiers[i], out parameterOptionalCustomModifiers[i]);
 				}
 				parameterTypes[i] = ReadParam(module, br, context);
 			}
 			for (int i = 0; i < parameterTypes.Length; i++)
 			{
 				if (IsCustomModifier(br.PeekByte()))
 				{
 					if (parameterOptionalCustomModifiers == null)
 					{
 						parameterOptionalCustomModifiers = new Type[parameterTypes.Length][];
 						parameterRequiredCustomModifiers = new Type[parameterTypes.Length][];
 					}
 					ReadCustomModifiers(module, br, context, out parameterRequiredCustomModifiers[i], out parameterOptionalCustomModifiers[i]);
 				}
 				parameterTypes[i] = ReadParam(module, br, context);
 			}
 			return new PropertySignature(callingConvention, returnType, returnTypeOptionalCustomModifiers, returnTypeRequiredCustomModifiers,
 				parameterTypes, parameterOptionalCustomModifiers, parameterRequiredCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\parameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="35" endline="35"><![CDATA[
 			get { return null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="36" endline="40"><![CDATA[
 		}
 
 		public sealed override bool IsValueType
 		{
 			get { return (this.GenericParameterAttributes & GenericParameterAttributes.NotNullableValueTypeConstraint) != 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="41" endline="55"><![CDATA[
 		}
 
 		public sealed override Type BaseType
 		{
 			get
 			{
 				foreach (Type type in GetGenericParameterConstraints())
 				{
 					if (!type.IsInterface && !type.IsGenericParameter)
 					{
 						return type;
 					}
 				}
 				foreach (Type type in GetGenericParameterConstraints())
 				{
 					if (!type.IsInterface && !type.IsGenericParameter)
 					{
 						return type;
 					}
 				}
 				return this.IsValueType ? this.Module.universe.System_ValueType 
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="56" endline="69"><![CDATA[
 		}
 
 		public override Type[] __GetDeclaredInterfaces()
 		{
 			List<Type> list = new List<Type>();
 			foreach (Type type in GetGenericParameterConstraints())
 			{
 				if (type.IsInterface)
 				{
 					list.Add(type);
 				}
 			}
 			foreach (Type type in GetGenericParameterConstraints())
 			{
 				if (type.IsInterface)
 				{
 					list.Add(type);
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="70" endline="73"><![CDATA[
 
 		public sealed override TypeAttributes Attributes
 		{
 			get { return TypeAttributes.Public; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="74" endline="78"><![CDATA[
 		}
 
 		public sealed override Type UnderlyingSystemType
 		{
 			get { return this; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="79" endline="83"><![CDATA[
 		}
 
 		public sealed override string FullName
 		{
 			get { return null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="84" endline="89"><![CDATA[
 		}
 
 		public sealed override string ToString()
 		{
 			return this.Name;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="90" endline="93"><![CDATA[
 
 		public sealed override bool IsGenericParameter
 		{
 			get { return true; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="207" endline="213"><![CDATA[
 			}
 		}
 
 		internal static Type Make(int position)
 		{
 			return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="214" endline="218"><![CDATA[
 
 		private UnboundGenericMethodParameter(int position)
 		{
 			this.position = position;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="219" endline="224"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
 			return other != null && other.position == position;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="225" endline="229"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return position;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="230" endline="233"><![CDATA[
 
 		public override string Namespace
 		{
 			get { throw new InvalidOperationException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="234" endline="238"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { throw new InvalidOperationException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="239" endline="243"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { throw new InvalidOperationException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="244" endline="248"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="249" endline="253"><![CDATA[
 		}
 
 		public override int GenericParameterPosition
 		{
 			get { return position; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="254" endline="258"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return null; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="259" endline="263"><![CDATA[
 		}
 
 		public override MethodBase DeclaringMethod
 		{
 			get { throw new InvalidOperationException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="264" endline="268"><![CDATA[
 		}
 
 		public override Type[] GetGenericParameterConstraints()
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="269" endline="273"><![CDATA[
 		}
 
 		public override GenericParameterAttributes GenericParameterAttributes
 		{
 			get { throw new InvalidOperationException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="274" endline="279"><![CDATA[
 		}
 
 		internal override Type BindTypeParameters(IGenericBinder binder)
 		{
 			return binder.BindMethodParameter(this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="99" endline="99"><![CDATA[
 		private static readonly DummyModule module = new DummyModule();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="100" endline="291"><![CDATA[
 		private readonly int position;
 
 		private sealed class DummyModule 
 		{
 			internal DummyModule()
 				
 			{
 			}
 
 			public override bool Equals(object obj)
 			{
 				throw new InvalidOperationException();
 			}
 
 			public override int GetHashCode()
 			{
 				throw new InvalidOperationException();
 			}
 
 			public override string ToString()
 			{
 				throw new InvalidOperationException();
 			}
 
 			public override int MDStreamVersion
 			{
 				get { throw new InvalidOperationException(); }
 			}
 
 			public override Assembly Assembly
 			{
 				get { throw new InvalidOperationException(); }
 			}
 
 			internal override Type GetTypeImpl(string typeName)
 			{
 				throw new InvalidOperationException();
 			}
 
 			internal override void GetTypesImpl(List<Type> list)
 			{
 				throw new InvalidOperationException();
 			}
 
 			public override string FullyQualifiedName
 			{
 				get { throw new InvalidOperationException(); }
 			}
 
 			public override string Name
 			{
 				get { throw new InvalidOperationException(); }
 			}
 
 			public override Guid ModuleVersionId
 			{
 				get { throw new InvalidOperationException(); }
 			}
 
 			public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 			{
 				throw new InvalidOperationException();
 			}
 
 			public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 			{
 				throw new InvalidOperationException();
 			}
 
 			public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 			{
 				throw new InvalidOperationException();
 			}
 
 			public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 			{
 				throw new InvalidOperationException();
 			}
 
 			public override string ResolveString(int metadataToken)
 			{
 				throw new InvalidOperationException();
 			}
 
 			public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
 			{
 				throw new InvalidOperationException();
 			}
 
 			public override string ScopeName
 			{
 				get { throw new InvalidOperationException(); }
 			}
 
 			public override AssemblyName[] __GetReferencedAssemblies()
 			{
 				throw new InvalidOperationException();
 			}
 
 			internal override Type GetModuleType()
 			{
 				throw new InvalidOperationException();
 			}
 
 			internal override ByteReader GetBlob(int blobIndex)
 			{
 				throw new InvalidOperationException();
 			}
 		}
 
 		internal static Type Make(int position)
 		{
 			return module.CanonicalizeType(new UnboundGenericMethodParameter(position));
 		}
 
 		private UnboundGenericMethodParameter(int position)
 		{
 			this.position = position;
 		}
 
 		public override bool Equals(object obj)
 		{
 			UnboundGenericMethodParameter other = obj as UnboundGenericMethodParameter;
 			return other != null && other.position == position;
 		}
 
 		public override int GetHashCode()
 		{
 			return position;
 		}
 
 		public override string Namespace
 		{
 			get { throw new InvalidOperationException(); }
 		}
 
 		public override string Name
 		{
 			get { throw new InvalidOperationException(); }
 		}
 
 		public override int MetadataToken
 		{
 			get { throw new InvalidOperationException(); }
 		}
 
 		public override Module Module
 		{
 			get { return module; }
 		}
 
 		public override int GenericParameterPosition
 		{
 			get { return position; }
 		}
 
 		public override Type DeclaringType
 		{
 			get { return null; }
 		}
 
 		public override MethodBase DeclaringMethod
 		{
 			get { throw new InvalidOperationException(); }
 		}
 
 		public override Type[] GetGenericParameterConstraints()
 		{
 			throw new InvalidOperationException();
 		}
 
 		public override GenericParameterAttributes GenericParameterAttributes
 		{
 			get { throw new InvalidOperationException(); }
 		}
 
 		internal override Type BindTypeParameters(IGenericBinder binder)
 		{
 			return binder.BindMethodParameter(this);
 		}
 	}
 
 	sealed class GenericTypeParameter 
 	{
 		private readonly ModuleReader module;
 		private readonly int index;
 
 		internal GenericTypeParameter(ModuleReader module, int index)
 		{
 			this.module = module;
 			this.index = index;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="292" endline="296"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			return base.Equals(obj);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="297" endline="301"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return base.GetHashCode();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="302" endline="305"><![CDATA[
 
 		public override string Namespace
 		{
 			get { return DeclaringType.Namespace; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="306" endline="310"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return module.GetString(module.GenericParam.records[index].Name); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="311" endline="315"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="316" endline="320"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return (GenericParamTable.Index << 24) + index + 1; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="321" endline="325"><![CDATA[
 		}
 
 		public override int GenericParameterPosition
 		{
 			get { return module.GenericParam.records[index].Number; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="326" endline="334"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get
 			{
 				int owner = module.GenericParam.records[index].Owner;
 				return (owner >> 24) == TypeDefTable.Index ? module.ResolveType(owner) 
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="335" endline="343"><![CDATA[
 		}
 
 		public override MethodBase DeclaringMethod
 		{
 			get
 			{
 				int owner = module.GenericParam.records[index].Owner;
 				return (owner >> 24) == MethodDefTable.Index ? module.ResolveMethod(owner) 
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="344" endline="360"><![CDATA[
 		}
 
 		public override Type[] GetGenericParameterConstraints()
 		{
 			IGenericContext context = (this.DeclaringMethod as IGenericContext) ?? this.DeclaringType;
 			List<Type> list = new List<Type>();
 			int token = this.MetadataToken;
 			// TODO use binary search
 			for (int i = 0; i < module.GenericParamConstraint.records.Length; i++)
 			{
 				if (module.GenericParamConstraint.records[i].Owner == token)
 				{
 					list.Add(module.ResolveType(module.GenericParamConstraint.records[i].Constraint, context));
 				}
 			}
 			for (int i = 0; i < module.GenericParamConstraint.records.Length; i++)
 			{
 				if (module.GenericParamConstraint.records[i].Owner == token)
 				{
 					list.Add(module.ResolveType(module.GenericParamConstraint.records[i].Constraint, context));
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="361" endline="364"><![CDATA[
 
 		public override GenericParameterAttributes GenericParameterAttributes
 		{
 			get { return (GenericParameterAttributes)module.GenericParam.records[index].Flags; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\GenericTypeParameter.cs" startline="365" endline="378"><![CDATA[
 		}
 
 		internal override Type BindTypeParameters(IGenericBinder binder)
 		{
 			int owner = module.GenericParam.records[index].Owner;
 			if ((owner >> 24) == MethodDefTable.Index)
 			{
 				return binder.BindMethodParameter(this);
 			}
 			else
 			{
 				return binder.BindTypeParameter(this);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="39" endline="44"><![CDATA[
 		internal FieldDefImpl(ModuleReader module, TypeDefImpl declaringType, int index)
 		{
 			this.module = module;
 			this.declaringType = declaringType;
 			this.index = index;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="45" endline="48"><![CDATA[
 
 		public override FieldAttributes Attributes
 		{
 			get { return (FieldAttributes)module.Field.records[index].Flags; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="49" endline="53"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return declaringType.IsModulePseudoType ? null 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="54" endline="58"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return module.GetString(module.Field.records[index].Name); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="59" endline="64"><![CDATA[
 		}
 
 		public override string ToString()
 		{
 			return this.FieldType.Name + " " + this.Name;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="65" endline="68"><![CDATA[
 
 		public override Module Module
 		{
 			get { return module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="69" endline="73"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return (FieldTable.Index << 24) + index + 1; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="74" endline="79"><![CDATA[
 		}
 
 		public override object GetRawConstantValue()
 		{
 			return module.Constant.GetRawConstantValue(module, this.MetadataToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="80" endline="112"><![CDATA[
 
 		public override void __GetDataFromRVA(byte[] data, int offset, int length)
 		{
 			int rid = index + 1;
 			// TODO binary search?
 			for (int i = 0; i < module.FieldRVA.records.Length; i++)
 			{
 				if (module.FieldRVA.records[i].Field == rid)
 				{
 					int rva = module.FieldRVA.records[i].RVA;
 					if (rva == 0)
 					{
 						// C++ assemblies can have fields that have an RVA that is zero
 						Array.Clear(data, offset, length);
 						return;
 					}
 					module.SeekRVA(rva);
 					while (length > 0)
 					{
 						int read = module.stream.Read(data, offset, length);
 						if (read == 0)
 						{
 							// C++ assemblies can have fields that have an RVA that lies outside of the file
 							break;
 						}
 						offset += read;
 						length -= read;
 					}
 					while (length > 0)
 					{
 						int read = module.stream.Read(data, offset, length);
 						if (read == 0)
 						{
 							// C++ assemblies can have fields that have an RVA that lies outside of the file
 							break;
 						}
 						offset += read;
 						length -= read;
 					}
 					return;
 				}
 			}
 			for (int i = 0; i < module.FieldRVA.records.Length; i++)
 			{
 				if (module.FieldRVA.records[i].Field == rid)
 				{
 					int rva = module.FieldRVA.records[i].RVA;
 					if (rva == 0)
 					{
 						// C++ assemblies can have fields that have an RVA that is zero
 						Array.Clear(data, offset, length);
 						return;
 					}
 					module.SeekRVA(rva);
 					while (length > 0)
 					{
 						int read = module.stream.Read(data, offset, length);
 						if (read == 0)
 						{
 							// C++ assemblies can have fields that have an RVA that lies outside of the file
 							break;
 						}
 						offset += read;
 						length -= read;
 					}
 					return;
 				}
 			}
 			throw new InvalidOperationException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="113" endline="140"><![CDATA[
 
 		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			List<CustomAttributeData> list = module.GetCustomAttributes(this.MetadataToken, attributeType);
 			if ((this.Attributes & FieldAttributes.HasFieldMarshal) != 0
 				&& (attributeType == null || attributeType.IsAssignableFrom(module.universe.System_Runtime_InteropServices_MarshalAsAttribute)))
 			{
 				list.Add(MarshalSpec.GetMarshalAsAttribute(module, this.MetadataToken));
 			}
 			if (declaringType.IsExplicitLayout
 				&& (attributeType == null || attributeType.IsAssignableFrom(module.universe.System_Runtime_InteropServices_FieldOffsetAttribute)))
 			{
 				int rid = index + 1;
 				// TODO use binary search?
 				for (int i = 0; i < module.FieldLayout.records.Length; i++)
 				{
 					if (module.FieldLayout.records[i].Field == rid)
 					{
 						ConstructorInfo constructor = module.universe.System_Runtime_InteropServices_FieldOffsetAttribute.GetConstructor(new Type[] { module.universe.System_Int32 });
 						list.Add(new CustomAttributeData(constructor,
 							new object[] { module.FieldLayout.records[i].Offset },
 							null));
 						break;
 					}
 				}
 				for (int i = 0; i < module.FieldLayout.records.Length; i++)
 				{
 					if (module.FieldLayout.records[i].Field == rid)
 					{
 						ConstructorInfo constructor = module.universe.System_Runtime_InteropServices_FieldOffsetAttribute.GetConstructor(new Type[] { module.universe.System_Int32 });
 						list.Add(new CustomAttributeData(constructor,
 							new object[] { module.FieldLayout.records[i].Offset },
 							null));
 						break;
 					}
 				}
 			}
 			return list;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="141" endline="144"><![CDATA[
 
 		internal override FieldSignature FieldSignature
 		{
 			get { return lazyFieldSig ?? (lazyFieldSig = FieldSignature.ReadSig(module, module.GetBlob(module.Field.records[index].Signature), declaringType)); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\Field.cs" startline="145" endline="150"><![CDATA[
 		}
 
 		internal override int ImportTo(Emit.ModuleBuilder module)
 		{
 			return module.ImportMethodOrField(declaringType, this.Name, this.FieldSignature);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="40" endline="42"><![CDATA[
 		{
 			this.index1 = index + 1;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="43" endline="46"><![CDATA[
 
 		internal int Index
 		{
 			get { return index1 - 1; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="47" endline="52"><![CDATA[
 		}
 
 		public bool Equals(Label other)
 		{
 			return other.index1 == index1;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="53" endline="57"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			return this == obj as Label?;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="58" endline="62"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return index1;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="63" endline="67"><![CDATA[
 
 		public static bool operator ==(Label arg1, Label arg2)
 		{
 			return arg1.index1 == arg2.index1;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="68" endline="72"><![CDATA[
 
 		public static bool operator !=(Label arg1, Label arg2)
 		{
 			return !(arg1 == arg2);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="73" endline="89"><![CDATA[
 	}
 
 	public sealed class LocalBuilder
 	{
 		private readonly Type localType;
 		private readonly int index;
 		private readonly bool pinned;
 		internal string name;
 		internal int startOffset;
 		internal int endOffset;
 
 		internal LocalBuilder(Type localType, int index, bool pinned)
 		{
 			this.localType = localType;
 			this.index = index;
 			this.pinned = pinned;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="90" endline="94"><![CDATA[
 
 		public void SetLocalSymInfo(string name)
 		{
 			this.name = name;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="95" endline="101"><![CDATA[
 
 		public void SetLocalSymInfo(string name, int startOffset, int endOffset)
 		{
 			this.name = name;
 			this.startOffset = startOffset;
 			this.endOffset = endOffset;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="102" endline="105"><![CDATA[
 
 		public Type LocalType
 		{
 			get { return localType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="106" endline="110"><![CDATA[
 		}
 
 		public int LocalIndex
 		{
 			get { return index; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="111" endline="115"><![CDATA[
 		}
 
 		public bool IsPinned
 		{
 			get { return pinned; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="124" endline="232"><![CDATA[
 		private readonly List<LocalBuilder> locals = new List<LocalBuilder>();
 		private readonly List<int> tokenFixups = new List<int>();
 		private readonly List<int> labels = new List<int>();
 		private readonly List<int> labelStackHeight = new List<int>();
 		private readonly List<LabelFixup> labelFixups = new List<LabelFixup>();
 		private readonly List<SequencePoint> sequencePoints = new List<SequencePoint>();
 		private readonly List<ExceptionBlock> exceptions = new List<ExceptionBlock>();
 		private readonly Stack<ExceptionBlock> exceptionStack = new Stack<ExceptionBlock>();
 		private ushort maxStack;
 		private int stackHeight;
 		private Scope scope;
 		private byte exceptionBlockAssistanceMode = EBAM_COMPAT;
 		private const byte EBAM_COMPAT = 0;
 		private const byte EBAM_DISABLE = 1;
 		private const byte EBAM_CLEVER = 2;
 
 		private struct LabelFixup
 		{
 			internal int label;
 			internal int offset;
 		}
 
 		private sealed class ExceptionBlock 
 		{
 			internal readonly int ordinal;
 			internal Label labelEnd;
 			internal int tryOffset;
 			internal int tryLength;
 			internal int handlerOffset;
 			internal int handlerLength;
 			internal Type exceptionType;	// null = finally block or handler with filter, FAULT = fault block
 			internal int filterOffset;
 
 			internal ExceptionBlock(int ordinal)
 			{
 				this.ordinal = ordinal;
 			}
 
 			int IComparer<ExceptionBlock>.Compare(ExceptionBlock x, ExceptionBlock y)
 			{
 				// Mono's sort insists on doing unnecessary comparisons
 				if (x == y)
 				{
 					return 0;
 				}
 				if (x.tryOffset >= y.handlerOffset && x.tryOffset + x.tryLength <= y.handlerOffset + y.handlerLength)
 				{
 					return -1;
 				}
 				if (y.tryOffset >= x.handlerOffset && y.tryOffset + y.tryLength <= x.handlerOffset + x.handlerLength)
 				{
 					return 1;
 				}
 				if (x.tryOffset == y.tryOffset && x.tryLength == y.tryLength)
 				{
 					return x.ordinal < y.ordinal ? -1 
 				}
 				if (x.tryOffset + x.tryLength <= y.tryOffset)
 				{
 					return -1;
 				}
 				if (y.tryOffset + y.tryLength <= x.tryOffset)
 				{
 					return 1;
 				}
 				if (x.tryOffset > y.tryOffset || (x.tryOffset == y.tryOffset && x.tryLength < y.tryLength))
 				{
 					return -1;
 				}
 				else
 				{
 					return 1;
 				}
 			}
 		}
 
 		private struct SequencePoint
 		{
 			internal ISymbolDocumentWriter document;
 			internal int offset;
 			internal int startLine;
 			internal int startColumn;
 			internal int endLine;
 			internal int endColumn;
 		}
 
 		private sealed class Scope
 		{
 			internal readonly Scope parent;
 			internal readonly List<Scope> children = new List<Scope>();
 			internal readonly List<LocalBuilder> locals = new List<LocalBuilder>();
 			internal int startOffset;
 			internal int endOffset;
 
 			internal Scope(Scope parent)
 			{
 				this.parent = parent;
 			}
 		}
 
 		internal ILGenerator(ModuleBuilder moduleBuilder, int initialCapacity)
 		{
 			this.code = new ByteBuffer(initialCapacity);
 			this.moduleBuilder = moduleBuilder;
 			if (moduleBuilder.symbolWriter != null)
 			{
 				scope = new Scope(null);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="233" endline="237"><![CDATA[
 
 		private bool IsLabelReachable(Label label)
 		{
 			return labelStackHeight[label.Index] != -1;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="238" endline="243"><![CDATA[
 
 		// non-standard API
 		public void __DisableExceptionBlockAssistance()
 		{
 			exceptionBlockAssistanceMode = EBAM_DISABLE;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="244" endline="249"><![CDATA[
 
 		// non-standard API
 		public void __CleverExceptionBlockAssistance()
 		{
 			exceptionBlockAssistanceMode = EBAM_CLEVER;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="250" endline="254"><![CDATA[
 
 		// new in .NET 4.0
 		public int ILOffset
 		{
 			get { return code.Position; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="255" endline="291"><![CDATA[
 		}
 
 		public void BeginCatchBlock(Type exceptionType)
 		{
 			ExceptionBlock block = exceptionStack.Peek();
 			if (exceptionBlockAssistanceMode == EBAM_COMPAT || (exceptionBlockAssistanceMode == EBAM_CLEVER && stackHeight != -1))
 			{
 				if (exceptionType == null)
 				{
 					Emit(OpCodes.Endfilter);
 				}
 				else
 				{
 					Emit(OpCodes.Leave, block.labelEnd);
 				}
 			}
 			stackHeight = 0;
 			UpdateStack(1);
 			if (block.tryLength == 0)
 			{
 				block.tryLength = code.Position - block.tryOffset;
 			}
 			else if (exceptionType != null)
 			{
 				block.handlerLength = code.Position - block.handlerOffset;
 				exceptionStack.Pop();
 				ExceptionBlock newBlock = new ExceptionBlock(exceptions.Count);
 				newBlock.labelEnd = block.labelEnd;
 				newBlock.tryOffset = block.tryOffset;
 				newBlock.tryLength = block.tryLength;
 				block = newBlock;
 				exceptions.Add(block);
 				exceptionStack.Push(block);
 			}
 			block.handlerOffset = code.Position;
 			block.exceptionType = exceptionType;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="292" endline="302"><![CDATA[
 
 		public Label BeginExceptionBlock()
 		{
 			ExceptionBlock block = new ExceptionBlock(exceptions.Count);
 			block.labelEnd = DefineLabel();
 			block.tryOffset = code.Position;
 			exceptionStack.Push(block);
 			exceptions.Add(block);
 			stackHeight = 0;
 			return block.labelEnd;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="303" endline="309"><![CDATA[
 
 		public void BeginExceptFilterBlock()
 		{
 			ExceptionBlock block = BeginFinallyFilterFaultBlock();
 			block.filterOffset = code.Position;
 			UpdateStack(1);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="310" endline="316"><![CDATA[
 
 		public void BeginFaultBlock()
 		{
 			ExceptionBlock block = BeginFinallyFilterFaultBlock();
 			block.handlerOffset = code.Position;
 			block.exceptionType = FAULT;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="317" endline="322"><![CDATA[
 
 		public void BeginFinallyBlock()
 		{
 			ExceptionBlock block = BeginFinallyFilterFaultBlock();
 			block.handlerOffset = code.Position;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="323" endline="360"><![CDATA[
 
 		private ExceptionBlock BeginFinallyFilterFaultBlock()
 		{
 			ExceptionBlock block = exceptionStack.Peek();
 			if (exceptionBlockAssistanceMode == EBAM_COMPAT || (exceptionBlockAssistanceMode == EBAM_CLEVER && stackHeight != -1))
 			{
 				Emit(OpCodes.Leave, block.labelEnd);
 			}
 			if (block.handlerOffset == 0)
 			{
 				block.tryLength = code.Position - block.tryOffset;
 			}
 			else
 			{
 				block.handlerLength = code.Position - block.handlerOffset;
 				Label labelEnd;
 				if (exceptionBlockAssistanceMode != EBAM_COMPAT)
 				{
 					labelEnd = block.labelEnd;
 				}
 				else
 				{
 					MarkLabel(block.labelEnd);
 					labelEnd = DefineLabel();
 					Emit(OpCodes.Leave, labelEnd);
 				}
 				exceptionStack.Pop();
 				ExceptionBlock newBlock = new ExceptionBlock(exceptions.Count);
 				newBlock.labelEnd = labelEnd;
 				newBlock.tryOffset = block.tryOffset;
 				newBlock.tryLength = code.Position - block.tryOffset;
 				block = newBlock;
 				exceptions.Add(block);
 				exceptionStack.Push(block);
 			}
 			stackHeight = 0;
 			return block;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="361" endline="378"><![CDATA[
 
 		public void EndExceptionBlock()
 		{
 			ExceptionBlock block = exceptionStack.Pop();
 			if (exceptionBlockAssistanceMode == EBAM_COMPAT || (exceptionBlockAssistanceMode == EBAM_CLEVER && stackHeight != -1))
 			{
 				if (block.filterOffset != 0 || (block.exceptionType != null && block.exceptionType != FAULT))
 				{
 					Emit(OpCodes.Leave, block.labelEnd);
 				}
 				else
 				{
 					Emit(OpCodes.Endfinally);
 				}
 			}
 			MarkLabel(block.labelEnd);
 			block.handlerLength = code.Position - block.handlerOffset;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="379" endline="386"><![CDATA[
 
 		public void BeginScope()
 		{
 			Scope newScope = new Scope(scope);
 			scope.children.Add(newScope);
 			scope = newScope;
 			scope.startOffset = code.Position;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="387" endline="394"><![CDATA[
 
 		public void UsingNamespace(string usingNamespace)
 		{
 			if (moduleBuilder.symbolWriter != null)
 			{
 				moduleBuilder.symbolWriter.UsingNamespace(usingNamespace);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="395" endline="399"><![CDATA[
 
 		public LocalBuilder DeclareLocal(Type localType)
 		{
 			return DeclareLocal(localType, false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="400" endline="410"><![CDATA[
 
 		public LocalBuilder DeclareLocal(Type localType, bool pinned)
 		{
 			LocalBuilder local = new LocalBuilder(localType, locals.Count, pinned);
 			locals.Add(local);
 			if (scope != null)
 			{
 				scope.locals.Add(local);
 			}
 			return local;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="411" endline="418"><![CDATA[
 
 		public Label DefineLabel()
 		{
 			Label label = new Label(labels.Count);
 			labels.Add(-1);
 			labelStackHeight.Add(-1);
 			return label;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="419" endline="440"><![CDATA[
 
 		public void Emit(OpCode opc)
 		{
 			Debug.Assert(opc != OpCodes.Ret || (opc == OpCodes.Ret && stackHeight <= 1));
 			if (opc.Value < 0)
 			{
 				code.Write((byte)(opc.Value >> 8));
 			}
 			code.Write((byte)opc.Value);
 			switch (opc.FlowControl)
 			{
 				case FlowControl.Branch
 				case FlowControl.Break
 				case FlowControl.Return
 				case FlowControl.Throw
 					stackHeight = -1;
 					break;
 				default
 					UpdateStack(opc.StackDiff);
 					break;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="441" endline="453"><![CDATA[
 
 		private void UpdateStack(int stackdiff)
 		{
 			if (stackHeight == -1)
 			{
 				// we're about to emit code that is either unreachable or reachable only via a backward branch
 				stackHeight = 0;
 			}
 			Debug.Assert(stackHeight >= 0 && stackHeight <= ushort.MaxValue);
 			stackHeight += stackdiff;
 			Debug.Assert(stackHeight >= 0 && stackHeight <= ushort.MaxValue);
 			maxStack = Math.Max(maxStack, (ushort)stackHeight);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="454" endline="459"><![CDATA[
 
 		public void Emit(OpCode opc, byte arg)
 		{
 			Emit(opc);
 			code.Write(arg);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="460" endline="465"><![CDATA[
 
 		public void Emit(OpCode opc, double arg)
 		{
 			Emit(opc);
 			code.Write(arg);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="466" endline="471"><![CDATA[
 
 		public void Emit(OpCode opc, FieldInfo field)
 		{
 			Emit(opc);
 			WriteToken(moduleBuilder.GetFieldToken(field));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="472" endline="477"><![CDATA[
 
 		public void Emit(OpCode opc, short arg)
 		{
 			Emit(opc);
 			code.Write(arg);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="478" endline="483"><![CDATA[
 
 		public void Emit(OpCode opc, int arg)
 		{
 			Emit(opc);
 			code.Write(arg);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="484" endline="489"><![CDATA[
 
 		public void Emit(OpCode opc, long arg)
 		{
 			Emit(opc);
 			code.Write(arg);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="490" endline="540"><![CDATA[
 
 		public void Emit(OpCode opc, Label label)
 		{
 			// We need special stackHeight handling for unconditional branches,
 			// because the branch and next flows have differing stack heights.
 			// Note that this assumes that unconditional branches do not push/pop.
 			int flowStackHeight = this.stackHeight;
 			Emit(opc);
 			if (opc == OpCodes.Leave || opc == OpCodes.Leave_S)
 			{
 				flowStackHeight = 0;
 			}
 			else if (opc.FlowControl != FlowControl.Branch)
 			{
 				flowStackHeight = this.stackHeight;
 			}
 			// if the label has already been marked, we can emit the branch offset directly
 			if (labels[label.Index] != -1)
 			{
 				if (labelStackHeight[label.Index] != flowStackHeight && (labelStackHeight[label.Index] != 0 || flowStackHeight != -1))
 				{
 					// the "backward branch constraint" prohibits this, so we don't need to support it
 					throw new NotSupportedException("'Backward branch constraints' violated");
 				}
 				if (opc.OperandType == OperandType.ShortInlineBrTarget)
 				{
 					WriteByteBranchOffset(labels[label.Index] - (code.Position + 1));
 				}
 				else
 				{
 					code.Write(labels[label.Index] - (code.Position + 4));
 				}
 			}
 			else
 			{
 				Debug.Assert(labelStackHeight[label.Index] == -1 || labelStackHeight[label.Index] == flowStackHeight || (flowStackHeight == -1 && labelStackHeight[label.Index] == 0));
 				labelStackHeight[label.Index] = flowStackHeight;
 				LabelFixup fix = new LabelFixup();
 				fix.label = label.Index;
 				fix.offset = code.Position;
 				labelFixups.Add(fix);
 				if (opc.OperandType == OperandType.ShortInlineBrTarget)
 				{
 					code.Write((byte)1);
 				}
 				else
 				{
 					code.Write(4);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="541" endline="549"><![CDATA[
 
 		private void WriteByteBranchOffset(int offset)
 		{
 			if (offset < -128 || offset > 127)
 			{
 				throw new NotSupportedException("Branch offset of " + offset + " does not fit in one-byte branch target at position " + code.Position);
 			}
 			code.Write((byte)offset);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="550" endline="576"><![CDATA[
 
 		public void Emit(OpCode opc, Label[] labels)
 		{
 			Emit(opc);
 			LabelFixup fix = new LabelFixup();
 			fix.label = -1;
 			fix.offset = code.Position;
 			labelFixups.Add(fix);
 			code.Write(labels.Length);
 			foreach (Label label in labels)
 			{
 				code.Write(label.Index);
 				if (this.labels[label.Index] != -1)
 				{
 					if (labelStackHeight[label.Index] != stackHeight)
 					{
 						// the "backward branch constraint" prohibits this, so we don't need to support it
 						throw new NotSupportedException();
 					}
 				}
 				else
 				{
 					Debug.Assert(labelStackHeight[label.Index] == -1 || labelStackHeight[label.Index] == stackHeight);
 					labelStackHeight[label.Index] = stackHeight;
 				}
 			}
 			foreach (Label label in labels)
 			{
 				code.Write(label.Index);
 				if (this.labels[label.Index] != -1)
 				{
 					if (labelStackHeight[label.Index] != stackHeight)
 					{
 						// the "backward branch constraint" prohibits this, so we don't need to support it
 						throw new NotSupportedException();
 					}
 				}
 				else
 				{
 					Debug.Assert(labelStackHeight[label.Index] == -1 || labelStackHeight[label.Index] == stackHeight);
 					labelStackHeight[label.Index] = stackHeight;
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="577" endline="645"><![CDATA[
 
 		public void Emit(OpCode opc, LocalBuilder local)
 		{
 			if ((opc == OpCodes.Ldloc || opc == OpCodes.Ldloca || opc == OpCodes.Stloc) && local.LocalIndex < 256)
 			{
 				if (opc == OpCodes.Ldloc)
 				{
 					switch (local.LocalIndex)
 					{
 						case 0
 							Emit(OpCodes.Ldloc_0);
 							break;
 						case 1
 							Emit(OpCodes.Ldloc_1);
 							break;
 						case 2
 							Emit(OpCodes.Ldloc_2);
 							break;
 						case 3
 							Emit(OpCodes.Ldloc_3);
 							break;
 						default
 							Emit(OpCodes.Ldloc_S);
 							code.Write((byte)local.LocalIndex);
 							break;
 					}
 				}
 				else if (opc == OpCodes.Ldloca)
 				{
 					Emit(OpCodes.Ldloca_S);
 					code.Write((byte)local.LocalIndex);
 				}
 				else if (opc == OpCodes.Stloc)
 				{
 					switch (local.LocalIndex)
 					{
 						case 0
 							Emit(OpCodes.Stloc_0);
 							break;
 						case 1
 							Emit(OpCodes.Stloc_1);
 							break;
 						case 2
 							Emit(OpCodes.Stloc_2);
 							break;
 						case 3
 							Emit(OpCodes.Stloc_3);
 							break;
 						default
 							Emit(OpCodes.Stloc_S);
 							code.Write((byte)local.LocalIndex);
 							break;
 					}
 				}
 			}
 			else
 			{
 				Emit(opc);
 				switch (opc.OperandType)
 				{
 					case OperandType.InlineVar
 						code.Write((ushort)local.LocalIndex);
 						break;
 					case OperandType.ShortInlineVar
 						code.Write((byte)local.LocalIndex);
 						break;
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="646" endline="654"><![CDATA[
 
 		private void WriteToken(FieldToken token)
 		{
 			if (token.IsPseudoToken)
 			{
 				tokenFixups.Add(code.Position);
 			}
 			code.Write(token.Token);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="655" endline="663"><![CDATA[
 
 		private void WriteToken(MethodToken token)
 		{
 			if (token.IsPseudoToken)
 			{
 				tokenFixups.Add(code.Position);
 			}
 			code.Write(token.Token);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="664" endline="688"><![CDATA[
 
 		private void UpdateStack(OpCode opc, bool hasthis, Type returnType, int parameterCount)
 		{
 			if (opc == OpCodes.Jmp)
 			{
 				stackHeight = -1;
 			}
 			else if (opc.FlowControl == FlowControl.Call)
 			{
 				int stackdiff = 0;
 				if ((hasthis && opc != OpCodes.Newobj) || opc == OpCodes.Calli)
 				{
 					// pop this
 					stackdiff--;
 				}
 				// pop parameters
 				stackdiff -= parameterCount;
 				if (returnType != moduleBuilder.universe.System_Void)
 				{
 					// push return value
 					stackdiff++;
 				}
 				UpdateStack(stackdiff);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="689" endline="695"><![CDATA[
 
 		public void Emit(OpCode opc, MethodInfo method)
 		{
 			Emit(opc);
 			WriteToken(moduleBuilder.GetMethodTokenForIL(method));
 			UpdateStack(opc, method.HasThis, method.ReturnType, method.ParameterCount);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="696" endline="700"><![CDATA[
 
 		public void Emit(OpCode opc, ConstructorInfo constructor)
 		{
 			Emit(opc, constructor.GetMethodInfo());
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="701" endline="706"><![CDATA[
 
 		public void Emit(OpCode opc, sbyte arg)
 		{
 			Emit(opc);
 			code.Write(arg);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="707" endline="712"><![CDATA[
 
 		public void Emit(OpCode opc, float arg)
 		{
 			Emit(opc);
 			code.Write(arg);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="713" endline="718"><![CDATA[
 
 		public void Emit(OpCode opc, string str)
 		{
 			Emit(opc);
 			code.Write(0x70000000 | moduleBuilder.UserStrings.Add(str));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="719" endline="731"><![CDATA[
 
 		public void Emit(OpCode opc, Type type)
 		{
 			Emit(opc);
 			if (opc == OpCodes.Ldtoken)
 			{
 				code.Write(moduleBuilder.GetTypeToken(type).Token);
 			}
 			else
 			{
 				code.Write(moduleBuilder.GetTypeTokenForMemberRef(type));
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="732" endline="738"><![CDATA[
 
 		public void Emit(OpCode opcode, SignatureHelper signature)
 		{
 			Emit(opcode);
 			UpdateStack(opcode, signature.HasThis, signature.ReturnType, signature.ParameterCount);
 			code.Write(0x11000000 | moduleBuilder.StandAloneSig.FindOrAddRecord(moduleBuilder.Blobs.Add(signature.GetSignature(moduleBuilder))));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="739" endline="765"><![CDATA[
 
 		public void EmitCall(OpCode opc, MethodInfo method, Type[] optionalParameterTypes)
 		{
 			if (optionalParameterTypes == null || optionalParameterTypes.Length == 0)
 			{
 				Emit(opc, method);
 			}
 			else
 			{
 				Emit(opc);
 				UpdateStack(opc, method.HasThis, method.ReturnType, method.ParameterCount + optionalParameterTypes.Length);
 				ByteBuffer sig = new ByteBuffer(16);
 				method.MethodSignature.WriteMethodRefSig(moduleBuilder, sig, optionalParameterTypes);
 				MemberRefTable.Record record = new MemberRefTable.Record();
 				if (method.Module == moduleBuilder)
 				{
 					record.Class = method.MetadataToken;
 				}
 				else
 				{
 					record.Class = moduleBuilder.GetTypeTokenForMemberRef(method.DeclaringType ?? method.Module.GetModuleType());
 				}
 				record.Name = moduleBuilder.Strings.Add(method.Name);
 				record.Signature = moduleBuilder.Blobs.Add(sig);
 				code.Write(0x0A000000 | moduleBuilder.MemberRef.FindOrAddRecord(record));
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="766" endline="770"><![CDATA[
 
 		public void __EmitCall(OpCode opc, ConstructorInfo constructor, Type[] optionalParameterTypes)
 		{
 			EmitCall(opc, constructor.GetMethodInfo(), optionalParameterTypes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="771" endline="780"><![CDATA[
 
 		public void EmitCalli(OpCode opc, CallingConvention callingConvention, Type returnType, Type[] parameterTypes)
 		{
 			returnType = returnType ?? moduleBuilder.universe.System_Void;
 			Emit(opc);
 			UpdateStack(opc, false, returnType, parameterTypes.Length);
 			ByteBuffer sig = new ByteBuffer(16);
 			Signature.WriteStandAloneMethodSig(moduleBuilder, sig, callingConvention, returnType, parameterTypes);
 			code.Write(0x11000000 | moduleBuilder.StandAloneSig.FindOrAddRecord(moduleBuilder.Blobs.Add(sig)));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="781" endline="791"><![CDATA[
 
 		public void EmitCalli(OpCode opc, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
 		{
 			returnType = returnType ?? moduleBuilder.universe.System_Void;
 			optionalParameterTypes = optionalParameterTypes ?? Type.EmptyTypes;
 			Emit(opc);
 			UpdateStack(opc, (callingConvention & CallingConventions.HasThis | CallingConventions.ExplicitThis) == CallingConventions.HasThis, returnType, parameterTypes.Length + optionalParameterTypes.Length);
 			ByteBuffer sig = new ByteBuffer(16);
 			Signature.WriteStandAloneMethodSig(moduleBuilder, sig, callingConvention, returnType, parameterTypes, optionalParameterTypes);
 			code.Write(0x11000000 | moduleBuilder.StandAloneSig.FindOrAddRecord(moduleBuilder.Blobs.Add(sig)));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="792" endline="798"><![CDATA[
 
 		public void EmitWriteLine(string text)
 		{
 			Universe u = moduleBuilder.universe;
 			Emit(OpCodes.Ldstr, text);
 			Emit(OpCodes.Call, u.Import(typeof(Console)).GetMethod("WriteLine", new Type[] { u.System_String }));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="799" endline="814"><![CDATA[
 
 		public void EmitWriteLine(FieldInfo field)
 		{
 			Universe u = moduleBuilder.universe;
 			Emit(OpCodes.Call, u.Import(typeof(Console)).GetMethod("get_Out"));
 			if (field.IsStatic)
 			{
 				Emit(OpCodes.Ldsfld, field);
 			}
 			else
 			{
 				Emit(OpCodes.Ldarg_0);
 				Emit(OpCodes.Ldfld, field);
 			}
 			Emit(OpCodes.Callvirt, u.Import(typeof(System.IO.TextWriter)).GetMethod("WriteLine", new Type[] { field.FieldType }));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="815" endline="822"><![CDATA[
 
 		public void EmitWriteLine(LocalBuilder local)
 		{
 			Universe u = moduleBuilder.universe;
 			Emit(OpCodes.Call, u.Import(typeof(Console)).GetMethod("get_Out"));
 			Emit(OpCodes.Ldloc, local);
 			Emit(OpCodes.Callvirt, u.Import(typeof(System.IO.TextWriter)).GetMethod("WriteLine", new Type[] { local.LocalType }));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="823" endline="828"><![CDATA[
 
 		public void EndScope()
 		{
 			scope.endOffset = code.Position;
 			scope = scope.parent;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="829" endline="854"><![CDATA[
 
 		public void MarkLabel(Label loc)
 		{
 			Debug.Assert(stackHeight == -1 || labelStackHeight[loc.Index] == -1 || stackHeight == labelStackHeight[loc.Index]);
 			labels[loc.Index] = code.Position;
 			if (labelStackHeight[loc.Index] == -1)
 			{
 				if (stackHeight == -1)
 				{
 					// We're at a location that can only be reached by a backward branch,
 					// so according to the "backward branch constraint" that must mean the stack is empty,
 					// but note that this may be an unused label followed by another label that is used and
 					// that does have a non-zero stack height, so we don't yet set stackHeight here.
 					labelStackHeight[loc.Index] = 0;
 				}
 				else
 				{
 					labelStackHeight[loc.Index] = stackHeight;
 				}
 			}
 			else
 			{
 				Debug.Assert(stackHeight == -1 || stackHeight == labelStackHeight[loc.Index]);
 				stackHeight = labelStackHeight[loc.Index];
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="855" endline="866"><![CDATA[
 
 		public void MarkSequencePoint(ISymbolDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn)
 		{
 			SequencePoint sp = new SequencePoint();
 			sp.document = document;
 			sp.offset = code.Position;
 			sp.startLine = startLine;
 			sp.startColumn = startColumn;
 			sp.endLine = endLine;
 			sp.endColumn = endColumn;
 			sequencePoints.Add(sp);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="867" endline="872"><![CDATA[
 
 		public void ThrowException(Type excType)
 		{
 			Emit(OpCodes.Newobj, excType.GetConstructor(Type.EmptyTypes));
 			Emit(OpCodes.Throw);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="873" endline="926"><![CDATA[
 
 		internal int WriteBody(bool initLocals)
 		{
 			if (moduleBuilder.symbolWriter != null)
 			{
 				Debug.Assert(scope != null && scope.parent == null);
 				scope.endOffset = code.Position;
 			}
 
 			ResolveBranches();
 
 			ByteBuffer bb = moduleBuilder.methodBodies;
 
 			int localVarSigTok = 0;
 
 			int rva;
 			if (locals.Count == 0 && exceptions.Count == 0 && maxStack <= 8 && code.Length < 64)
 			{
 				rva = WriteTinyHeaderAndCode(bb);
 			}
 			else
 			{
 				rva = WriteFatHeaderAndCode(bb, ref localVarSigTok, initLocals);
 			}
 
 			if (moduleBuilder.symbolWriter != null)
 			{
 				if (sequencePoints.Count != 0)
 				{
 					ISymbolDocumentWriter document = sequencePoints[0].document;
 					int[] offsets = new int[sequencePoints.Count];
 					int[] lines = new int[sequencePoints.Count];
 					int[] columns = new int[sequencePoints.Count];
 					int[] endLines = new int[sequencePoints.Count];
 					int[] endColumns = new int[sequencePoints.Count];
 					for (int i = 0; i < sequencePoints.Count; i++)
 					{
 						if (sequencePoints[i].document != document)
 						{
 							throw new NotImplementedException();
 						}
 						offsets[i] = sequencePoints[i].offset;
 						lines[i] = sequencePoints[i].startLine;
 						columns[i] = sequencePoints[i].startColumn;
 						endLines[i] = sequencePoints[i].endLine;
 						endColumns[i] = sequencePoints[i].endColumn;
 					}
 					for (int i = 0; i < sequencePoints.Count; i++)
 					{
 						if (sequencePoints[i].document != document)
 						{
 							throw new NotImplementedException();
 						}
 						offsets[i] = sequencePoints[i].offset;
 						lines[i] = sequencePoints[i].startLine;
 						columns[i] = sequencePoints[i].startColumn;
 						endLines[i] = sequencePoints[i].endLine;
 						endColumns[i] = sequencePoints[i].endColumn;
 					}
 					moduleBuilder.symbolWriter.DefineSequencePoints(document, offsets, lines, columns, endLines, endColumns);
 				}
 
 				WriteScope(scope, localVarSigTok);
 			}
 			return rva;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="927" endline="960"><![CDATA[
 
 		private void ResolveBranches()
 		{
 			foreach (LabelFixup fixup in labelFixups)
 			{
 				// is it a switch?
 				if (fixup.label == -1)
 				{
 					code.Position = fixup.offset;
 					int count = code.GetInt32AtCurrentPosition();
 					int offset = fixup.offset + 4 + 4 * count;
 					code.Position += 4;
 					for (int i = 0; i < count; i++)
 					{
 						int index = code.GetInt32AtCurrentPosition();
 						code.Write(labels[index] - offset);
 					}
 					for (int i = 0; i < count; i++)
 					{
 						int index = code.GetInt32AtCurrentPosition();
 						code.Write(labels[index] - offset);
 					}
 				}
 				else
 				{
 					code.Position = fixup.offset;
 					byte size = code.GetByteAtCurrentPosition();
 					int branchOffset = labels[fixup.label] - (code.Position + size);
 					if (size == 1)
 					{
 						WriteByteBranchOffset(branchOffset);
 					}
 					else
 					{
 						code.Write(branchOffset);
 					}
 				}
 			}
 			foreach (LabelFixup fixup in labelFixups)
 			{
 				// is it a switch?
 				if (fixup.label == -1)
 				{
 					code.Position = fixup.offset;
 					int count = code.GetInt32AtCurrentPosition();
 					int offset = fixup.offset + 4 + 4 * count;
 					code.Position += 4;
 					for (int i = 0; i < count; i++)
 					{
 						int index = code.GetInt32AtCurrentPosition();
 						code.Write(labels[index] - offset);
 					}
 				}
 				else
 				{
 					code.Position = fixup.offset;
 					byte size = code.GetByteAtCurrentPosition();
 					int branchOffset = labels[fixup.label] - (code.Position + size);
 					if (size == 1)
 					{
 						WriteByteBranchOffset(branchOffset);
 					}
 					else
 					{
 						code.Write(branchOffset);
 					}
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="961" endline="969"><![CDATA[
 
 		private int WriteTinyHeaderAndCode(ByteBuffer bb)
 		{
 			int rva = bb.Position;
 			const byte CorILMethod_TinyFormat = 0x2;
 			bb.Write((byte)(CorILMethod_TinyFormat | (code.Length << 2)));
 			WriteCode(bb);
 			return rva;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="970" endline="1108"><![CDATA[
 
 		private int WriteFatHeaderAndCode(ByteBuffer bb, ref int localVarSigTok, bool initLocals)
 		{
 			// fat headers require 4-byte alignment
 			bb.Align(4);
 			int rva = bb.Position;
 
 			if (locals.Count != 0)
 			{
 				ByteBuffer localVarSig = new ByteBuffer(locals.Count + 2);
 				Signature.WriteLocalVarSig(moduleBuilder, localVarSig, locals);
 				localVarSigTok = 0x11000000 | moduleBuilder.StandAloneSig.FindOrAddRecord(moduleBuilder.Blobs.Add(localVarSig));
 			}
 
 			const byte CorILMethod_FatFormat = 0x03;
 			const byte CorILMethod_MoreSects = 0x08;
 			const byte CorILMethod_InitLocals = 0x10;
 
 			short flagsAndSize = (short)(CorILMethod_FatFormat | (3 << 12));
 			if (initLocals)
 			{
 				flagsAndSize |= CorILMethod_InitLocals;
 			}
 
 			if (exceptions.Count > 0)
 			{
 				flagsAndSize |= CorILMethod_MoreSects;
 			}
 
 			bb.Write(flagsAndSize);
 			bb.Write(maxStack);
 			bb.Write(code.Length);
 			bb.Write(localVarSigTok);
 
 			WriteCode(bb);
 
 			if (exceptions.Count > 0)
 			{
 				bb.Align(4);
 
 				bool fat = false;
 				foreach (ExceptionBlock block in exceptions)
 				{
 					if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255)
 					{
 						fat = true;
 						break;
 					}
 				}
 				foreach (ExceptionBlock block in exceptions)
 				{
 					if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255)
 					{
 						fat = true;
 						break;
 					}
 				}
 				exceptions.Sort(exceptions[0]);
 				if (exceptions.Count * 12 + 4 > 255)
 				{
 					fat = true;
 				}
 				const byte CorILMethod_Sect_EHTable = 0x1;
 				const byte CorILMethod_Sect_FatFormat = 0x40;
 				const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;
 				const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;
 				const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;
 				const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;
 
 				if (fat)
 				{
 					bb.Write((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));
 					int dataSize = exceptions.Count * 24 + 4;
 					bb.Write((byte)dataSize);
 					bb.Write((short)(dataSize >> 8));
 					foreach (ExceptionBlock block in exceptions)
 					{
 						if (block.exceptionType == FAULT)
 						{
 							bb.Write((int)COR_ILEXCEPTION_CLAUSE_FAULT);
 						}
 						else if (block.filterOffset != 0)
 						{
 							bb.Write((int)COR_ILEXCEPTION_CLAUSE_FILTER);
 						}
 						else if (block.exceptionType != null)
 						{
 							bb.Write((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);
 						}
 						else
 						{
 							bb.Write((int)COR_ILEXCEPTION_CLAUSE_FINALLY);
 						}
 						bb.Write(block.tryOffset);
 						bb.Write(block.tryLength);
 						bb.Write(block.handlerOffset);
 						bb.Write(block.handlerLength);
 						if (block.exceptionType != null && block.exceptionType != FAULT)
 						{
 							bb.Write(moduleBuilder.GetTypeTokenForMemberRef(block.exceptionType));
 						}
 						else
 						{
 							bb.Write(block.filterOffset);
 						}
 					}
 					foreach (ExceptionBlock block in exceptions)
 					{
 						if (block.exceptionType == FAULT)
 						{
 							bb.Write((int)COR_ILEXCEPTION_CLAUSE_FAULT);
 						}
 						else if (block.filterOffset != 0)
 						{
 							bb.Write((int)COR_ILEXCEPTION_CLAUSE_FILTER);
 						}
 						else if (block.exceptionType != null)
 						{
 							bb.Write((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);
 						}
 						else
 						{
 							bb.Write((int)COR_ILEXCEPTION_CLAUSE_FINALLY);
 						}
 						bb.Write(block.tryOffset);
 						bb.Write(block.tryLength);
 						bb.Write(block.handlerOffset);
 						bb.Write(block.handlerLength);
 						if (block.exceptionType != null && block.exceptionType != FAULT)
 						{
 							bb.Write(moduleBuilder.GetTypeTokenForMemberRef(block.exceptionType));
 						}
 						else
 						{
 							bb.Write(block.filterOffset);
 						}
 					}
 				}
 				else
 				{
 					bb.Write(CorILMethod_Sect_EHTable);
 					bb.Write((byte)(exceptions.Count * 12 + 4));
 					bb.Write((short)0);
 					foreach (ExceptionBlock block in exceptions)
 					{
 						if (block.exceptionType == FAULT)
 						{
 							bb.Write(COR_ILEXCEPTION_CLAUSE_FAULT);
 						}
 						else if (block.filterOffset != 0)
 						{
 							bb.Write(COR_ILEXCEPTION_CLAUSE_FILTER);
 						}
 						else if (block.exceptionType != null)
 						{
 							bb.Write(COR_ILEXCEPTION_CLAUSE_EXCEPTION);
 						}
 						else
 						{
 							bb.Write(COR_ILEXCEPTION_CLAUSE_FINALLY);
 						}
 						bb.Write((short)block.tryOffset);
 						bb.Write((byte)block.tryLength);
 						bb.Write((short)block.handlerOffset);
 						bb.Write((byte)block.handlerLength);
 						if (block.exceptionType != null && block.exceptionType != FAULT)
 						{
 							bb.Write(moduleBuilder.GetTypeTokenForMemberRef(block.exceptionType));
 						}
 						else
 						{
 							bb.Write(block.filterOffset);
 						}
 					}
 					foreach (ExceptionBlock block in exceptions)
 					{
 						if (block.exceptionType == FAULT)
 						{
 							bb.Write(COR_ILEXCEPTION_CLAUSE_FAULT);
 						}
 						else if (block.filterOffset != 0)
 						{
 							bb.Write(COR_ILEXCEPTION_CLAUSE_FILTER);
 						}
 						else if (block.exceptionType != null)
 						{
 							bb.Write(COR_ILEXCEPTION_CLAUSE_EXCEPTION);
 						}
 						else
 						{
 							bb.Write(COR_ILEXCEPTION_CLAUSE_FINALLY);
 						}
 						bb.Write((short)block.tryOffset);
 						bb.Write((byte)block.tryLength);
 						bb.Write((short)block.handlerOffset);
 						bb.Write((byte)block.handlerLength);
 						if (block.exceptionType != null && block.exceptionType != FAULT)
 						{
 							bb.Write(moduleBuilder.GetTypeTokenForMemberRef(block.exceptionType));
 						}
 						else
 						{
 							bb.Write(block.filterOffset);
 						}
 					}
 				}
 			}
 			return rva;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="1109" endline="1118"><![CDATA[
 
 		private void WriteCode(ByteBuffer bb)
 		{
 			int codeOffset = bb.Position;
 			foreach (int fixup in this.tokenFixups)
 			{
 				moduleBuilder.tokenFixupOffsets.Add(fixup + codeOffset);
 			}
 			foreach (int fixup in this.tokenFixups)
 			{
 				moduleBuilder.tokenFixupOffsets.Add(fixup + codeOffset);
 			}
 			bb.Write(code);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="1119" endline="1142"><![CDATA[
 
 		private void WriteScope(Scope scope, int localVarSigTok)
 		{
 			moduleBuilder.symbolWriter.OpenScope(scope.startOffset);
 			foreach (LocalBuilder local in scope.locals)
 			{
 				if (local.name != null)
 				{
 					int startOffset = local.startOffset;
 					int endOffset = local.endOffset;
 					if (startOffset == 0 && endOffset == 0)
 					{
 						startOffset = scope.startOffset;
 						endOffset = scope.endOffset;
 					}
 					moduleBuilder.symbolWriter.DefineLocalVariable2(local.name, 0, localVarSigTok, SymAddressKind.ILOffset, local.LocalIndex, 0, 0, startOffset, endOffset);
 				}
 			}
 			foreach (LocalBuilder local in scope.locals)
 			{
 				if (local.name != null)
 				{
 					int startOffset = local.startOffset;
 					int endOffset = local.endOffset;
 					if (startOffset == 0 && endOffset == 0)
 					{
 						startOffset = scope.startOffset;
 						endOffset = scope.endOffset;
 					}
 					moduleBuilder.symbolWriter.DefineLocalVariable2(local.name, 0, localVarSigTok, SymAddressKind.ILOffset, local.LocalIndex, 0, 0, startOffset, endOffset);
 				}
 			}
 			foreach (Scope child in scope.children)
 			{
 				WriteScope(child, localVarSigTok);
 			}
 			foreach (Scope child in scope.children)
 			{
 				WriteScope(child, localVarSigTok);
 			}
 			moduleBuilder.symbolWriter.CloseScope(scope.endOffset);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ILGenerator.cs" startline="121" endline="121"><![CDATA[
 		private static readonly Type FAULT = new BakedType(null); // the type we use here doesn't matter, as long as it can never be used as a real exception type
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="32" endline="35"><![CDATA[
 		internal ConstructorBuilder(MethodBuilder mb)
 		{
 			this.methodBuilder = mb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="36" endline="41"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			ConstructorBuilder other = obj as ConstructorBuilder;
 			return other != null && other.methodBuilder.Equals(methodBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="42" endline="46"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return methodBuilder.GetHashCode();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="47" endline="51"><![CDATA[
 
 		public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string strParamName)
 		{
 			return methodBuilder.DefineParameter(position, attributes, strParamName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="52" endline="56"><![CDATA[
 
 		public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
 		{
 			methodBuilder.SetCustomAttribute(customBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="57" endline="61"><![CDATA[
 
 		public void SetCustomAttribute(ConstructorInfo con,	byte[] binaryAttribute)
 		{
 			methodBuilder.SetCustomAttribute(con, binaryAttribute);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="62" endline="66"><![CDATA[
 
 		public void __AddDeclarativeSecurity(CustomAttributeBuilder customBuilder)
 		{
 			methodBuilder.__AddDeclarativeSecurity(customBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="67" endline="71"><![CDATA[
 
 		public void AddDeclarativeSecurity(System.Security.Permissions.SecurityAction securityAction, System.Security.PermissionSet permissionSet)
 		{
 			methodBuilder.AddDeclarativeSecurity(securityAction, permissionSet);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="72" endline="76"><![CDATA[
 
 		public void SetImplementationFlags(MethodImplAttributes attributes)
 		{
 			methodBuilder.SetImplementationFlags(attributes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="77" endline="81"><![CDATA[
 
 		public ILGenerator GetILGenerator()
 		{
 			return methodBuilder.GetILGenerator();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="82" endline="86"><![CDATA[
 
 		public ILGenerator GetILGenerator(int streamSize)
 		{
 			return methodBuilder.GetILGenerator(streamSize);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="87" endline="90"><![CDATA[
 
 		public override CallingConventions CallingConvention
 		{
 			get { return methodBuilder.CallingConvention; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="91" endline="95"><![CDATA[
 		}
 
 		public override MethodAttributes Attributes
 		{
 			get { return methodBuilder.Attributes; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="96" endline="101"><![CDATA[
 		}
 
 		public override MethodImplAttributes GetMethodImplementationFlags()
 		{
 			return methodBuilder.GetMethodImplementationFlags();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="102" endline="105"><![CDATA[
 
 		public Type ReturnType
 		{
 			get { return methodBuilder.ReturnType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="106" endline="110"><![CDATA[
 		}
 
 		internal override int ParameterCount
 		{
 			get { return methodBuilder.ParameterCount; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="111" endline="115"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return methodBuilder.DeclaringType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="116" endline="120"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return methodBuilder.Name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="121" endline="125"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return methodBuilder.MetadataToken; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="126" endline="130"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return methodBuilder.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="131" endline="136"><![CDATA[
 		}
 
 		public Module GetModule()
 		{
 			return methodBuilder.GetModule();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="137" endline="141"><![CDATA[
 
 		public MethodToken GetToken()
 		{
 			return methodBuilder.GetToken();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="142" endline="146"><![CDATA[
 
 		public override MethodBody GetMethodBody()
 		{
 			return methodBuilder.GetMethodBody();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="147" endline="150"><![CDATA[
 
 		public bool InitLocals
 		{
 			get { return methodBuilder.InitLocals; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="151" endline="151"><![CDATA[
 			set { methodBuilder.InitLocals = value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="152" endline="157"><![CDATA[
 		}
 
 		internal override MethodInfo GetMethodInfo()
 		{
 			return methodBuilder;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="158" endline="162"><![CDATA[
 
 		internal override MethodInfo GetMethodOnTypeDefinition()
 		{
 			return methodBuilder;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="163" endline="166"><![CDATA[
 
 		internal override MethodSignature MethodSignature
 		{
 			get { return methodBuilder.MethodSignature; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ConstructorBuilder.cs" startline="167" endline="172"><![CDATA[
 		}
 
 		internal override int ImportTo(ModuleBuilder module)
 		{
 			return module.ImportMember(methodBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="54" endline="115"><![CDATA[
 		private PEFileKinds fileKind = PEFileKinds.Dll;
 		private MethodInfo entryPoint;
 		private VersionInfo versionInfo;
 		private ResourceSection unmanagedResources;
 		private string imageRuntimeVersion;
 		internal int mdStreamVersion = 0x20000;
 		private Module pseudoManifestModule;
 		private readonly List<ResourceFile> resourceFiles = new List<ResourceFile>();
 		private readonly List<ModuleBuilder> modules = new List<ModuleBuilder>();
 		private readonly List<Module> addedModules = new List<Module>();
 		private readonly List<CustomAttributeBuilder> customAttributes = new List<CustomAttributeBuilder>();
 		private readonly List<CustomAttributeBuilder> declarativeSecurity = new List<CustomAttributeBuilder>();
 		private readonly List<Type> typeForwarders = new List<Type>();
 
 		private struct ResourceFile
 		{
 			internal string Name;
 			internal string FileName;
 			internal ResourceAttributes Attributes;
 		}
 
 		internal AssemblyBuilder(Universe universe, AssemblyName name, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
 			
 		{
 			this.name = name.Name;
 			SetVersionHelper(name.Version);
 			if (name.CultureInfo != null && !string.IsNullOrEmpty(name.CultureInfo.Name))
 			{
 				this.culture = name.CultureInfo.Name;
 			}
 			this.flags = name.Flags;
 			this.hashAlgorithm = name.HashAlgorithm;
 			if (this.hashAlgorithm == AssemblyHashAlgorithm.None)
 			{
 				this.hashAlgorithm = AssemblyHashAlgorithm.SHA1;
 			}
 			this.keyPair = name.KeyPair;
 			if (this.keyPair != null)
 			{
 				this.publicKey = this.keyPair.PublicKey;
 			}
 			else
 			{
 				byte[] publicKey = name.GetPublicKey();
 				if (publicKey != null && publicKey.Length != 0)
 				{
 					this.publicKey = (byte[])publicKey.Clone();
 				}
 			}
 			this.dir = dir ?? ".";
 			this.requiredPermissions = requiredPermissions;
 			this.optionalPermissions = optionalPermissions;
 			this.refusedPermissions = refusedPermissions;
 			if (universe.HasMscorlib && universe.Mscorlib.ImageRuntimeVersion != null)
 			{
 				this.imageRuntimeVersion = universe.Mscorlib.ImageRuntimeVersion;
 			}
 			else
 			{
 				this.imageRuntimeVersion = typeof(object).Assembly.ImageRuntimeVersion;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="116" endline="133"><![CDATA[
 
 		private void SetVersionHelper(Version version)
 		{
 			if (version == null)
 			{
 				majorVersion = 0;
 				minorVersion = 0;
 				buildVersion = 0;
 				revisionVersion = 0;
 			}
 			else
 			{
 				majorVersion = (ushort)version.Major;
 				minorVersion = (ushort)version.Minor;
 				buildVersion = version.Build == -1 ? (ushort)0 
 				revisionVersion = version.Revision == -1 ? (ushort)0 
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="134" endline="140"><![CDATA[
 
 		public void __SetAssemblyVersion(Version version)
 		{
 			AssemblyName oldName = GetName();
 			SetVersionHelper(version);
 			universe.RenameAssembly(this, oldName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="141" endline="147"><![CDATA[
 
 		public void __SetAssemblyCulture(string cultureName)
 		{
 			AssemblyName oldName = GetName();
 			this.culture = cultureName;
 			universe.RenameAssembly(this, oldName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="148" endline="158"><![CDATA[
 
 		public void __SetAssemblyKeyPair(StrongNameKeyPair keyPair)
 		{
 			AssemblyName oldName = GetName();
 			this.keyPair = keyPair;
 			if (keyPair != null)
 			{
 				this.publicKey = keyPair.PublicKey;
 			}
 			universe.RenameAssembly(this, oldName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="159" endline="166"><![CDATA[
 
 		// this is used in combination with delay signing
 		public void __SetAssemblyPublicKey(byte[] publicKey)
 		{
 			AssemblyName oldName = GetName();
 			this.publicKey = publicKey == null ? null 
 			universe.RenameAssembly(this, oldName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="167" endline="171"><![CDATA[
 
 		public void __SetAssemblyAlgorithmId(AssemblyHashAlgorithm hashAlgorithm)
 		{
 			this.hashAlgorithm = hashAlgorithm;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="172" endline="176"><![CDATA[
 
 		public void __SetAssemblyFlags(AssemblyNameFlags flags)
 		{
 			this.flags = flags;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="177" endline="189"><![CDATA[
 
 		public override AssemblyName GetName()
 		{
 			AssemblyName n = new AssemblyName();
 			n.Name = name;
 			n.Version = new Version(majorVersion, minorVersion, buildVersion, revisionVersion);
 			n.Culture = culture;
 			n.HashAlgorithm = hashAlgorithm;
 			n.Flags = flags;
 			n.SetPublicKey(publicKey != null ? (byte[])publicKey.Clone() 
 			n.KeyPair = keyPair;
 			return n;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="190" endline="193"><![CDATA[
 
 		public override string FullName
 		{
 			get { return GetName().FullName; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="194" endline="198"><![CDATA[
 		}
 
 		public override string Location
 		{
 			get { throw new NotSupportedException(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="199" endline="204"><![CDATA[
 		}
 
 		public ModuleBuilder DefineDynamicModule(string name, string fileName)
 		{
 			return DefineDynamicModule(name, fileName, false);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="205" endline="211"><![CDATA[
 
 		public ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo)
 		{
 			ModuleBuilder module = new ModuleBuilder(this, name, fileName, emitSymbolInfo);
 			modules.Add(module);
 			return module;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="212" endline="223"><![CDATA[
 
 		public ModuleBuilder GetDynamicModule(string name)
 		{
 			foreach (ModuleBuilder module in modules)
 			{
 				if (module.Name == name)
 				{
 					return module;
 				}
 			}
 			foreach (ModuleBuilder module in modules)
 			{
 				if (module.Name == name)
 				{
 					return module;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="224" endline="228"><![CDATA[
 
 		public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
 		{
 			SetCustomAttribute(new CustomAttributeBuilder(con, binaryAttribute));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="229" endline="233"><![CDATA[
 
 		public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
 		{
 			customAttributes.Add(customBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="234" endline="238"><![CDATA[
 
 		public void __AddDeclarativeSecurity(CustomAttributeBuilder customBuilder)
 		{
 			declarativeSecurity.Add(customBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="239" endline="243"><![CDATA[
 
 		public void __AddTypeForwarder(Type type)
 		{
 			typeForwarders.Add(type);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="244" endline="248"><![CDATA[
 
 		public void SetEntryPoint(MethodInfo entryMethod)
 		{
 			SetEntryPoint(entryMethod, PEFileKinds.ConsoleApplication);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="249" endline="254"><![CDATA[
 
 		public void SetEntryPoint(MethodInfo entryMethod, PEFileKinds fileKind)
 		{
 			this.entryPoint = entryMethod;
 			this.fileKind = fileKind;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="255" endline="259"><![CDATA[
 
 		public void Save(string assemblyFileName)
 		{
 			Save(assemblyFileName, PortableExecutableKinds.ILOnly, ImageFileMachine.I386);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="260" endline="402"><![CDATA[
 
 		public void Save(string assemblyFileName, PortableExecutableKinds portableExecutableKind, ImageFileMachine imageFileMachine)
 		{
 			ModuleBuilder manifestModule = null;
 
 			foreach (ModuleBuilder moduleBuilder in modules)
 			{
 				moduleBuilder.PopulatePropertyAndEventTables();
 
 				if (manifestModule == null
 					&& string.Compare(moduleBuilder.fileName, assemblyFileName, StringComparison.OrdinalIgnoreCase) == 0)
 				{
 					manifestModule = moduleBuilder;
 				}
 			}
 			foreach (ModuleBuilder moduleBuilder in modules)
 			{
 				moduleBuilder.PopulatePropertyAndEventTables();
 
 				if (manifestModule == null
 					&& string.Compare(moduleBuilder.fileName, assemblyFileName, StringComparison.OrdinalIgnoreCase) == 0)
 				{
 					manifestModule = moduleBuilder;
 				}
 			}
 
 			if (manifestModule == null)
 			{
 				manifestModule = DefineDynamicModule("RefEmit_OnDiskManifestModule", assemblyFileName, false);
 			}
 
 			AssemblyTable.Record assemblyRecord = new AssemblyTable.Record();
 			assemblyRecord.HashAlgId = (int)hashAlgorithm;
 			assemblyRecord.Name = manifestModule.Strings.Add(name);
 			assemblyRecord.MajorVersion = majorVersion;
 			assemblyRecord.MinorVersion = minorVersion;
 			assemblyRecord.BuildNumber = buildVersion;
 			assemblyRecord.RevisionNumber = revisionVersion;
 			if (publicKey != null)
 			{
 				assemblyRecord.PublicKey = manifestModule.Blobs.Add(ByteBuffer.Wrap(publicKey));
 				assemblyRecord.Flags = (int)(flags | AssemblyNameFlags.PublicKey);
 			}
 			else
 			{
 				assemblyRecord.Flags = (int)(flags & ~AssemblyNameFlags.PublicKey);
 			}
 			if (culture != null)
 			{
 				assemblyRecord.Culture = manifestModule.Strings.Add(culture);
 			}
 			int token = 0x20000000 + manifestModule.AssemblyTable.AddRecord(assemblyRecord);
 
 #pragma warning disable 618
 			// this values are obsolete, but we already know that so we disable the warning
 			System.Security.Permissions.SecurityAction requestMinimum = System.Security.Permissions.SecurityAction.RequestMinimum;
 			System.Security.Permissions.SecurityAction requestOptional = System.Security.Permissions.SecurityAction.RequestOptional;
 			System.Security.Permissions.SecurityAction requestRefuse = System.Security.Permissions.SecurityAction.RequestRefuse;
 #pragma warning restore 618
 			if (requiredPermissions != null)
 			{
 				manifestModule.AddDeclarativeSecurity(token, requestMinimum, requiredPermissions);
 			}
 			if (optionalPermissions != null)
 			{
 				manifestModule.AddDeclarativeSecurity(token, requestOptional, optionalPermissions);
 			}
 			if (refusedPermissions != null)
 			{
 				manifestModule.AddDeclarativeSecurity(token, requestRefuse, refusedPermissions);
 			}
 
 			if (versionInfo != null)
 			{
 				versionInfo.SetName(GetName());
 				versionInfo.SetFileName(assemblyFileName);
 				foreach (CustomAttributeBuilder cab in customAttributes)
 				{
 					// .NET doesn't support copying blob custom attributes into the version info
 					if (!cab.HasBlob)
 					{
 						versionInfo.SetAttribute(cab);
 					}
 				}
 				foreach (CustomAttributeBuilder cab in customAttributes)
 				{
 					// .NET doesn't support copying blob custom attributes into the version info
 					if (!cab.HasBlob)
 					{
 						versionInfo.SetAttribute(cab);
 					}
 				}
 				ByteBuffer versionInfoData = new ByteBuffer(512);
 				versionInfo.Write(versionInfoData);
 				if (unmanagedResources == null)
 				{
 					unmanagedResources = new ResourceSection();
 				}
 				unmanagedResources.AddVersionInfo(versionInfoData);
 			}
 
 			foreach (CustomAttributeBuilder cab in customAttributes)
 			{
 				// we intentionally don't filter out the version info (pseudo) custom attributes (to be compatible with .NET)
 				manifestModule.SetCustomAttribute(0x20000001, cab);
 			}
 			foreach (CustomAttributeBuilder cab in customAttributes)
 			{
 				// we intentionally don't filter out the version info (pseudo) custom attributes (to be compatible with .NET)
 				manifestModule.SetCustomAttribute(0x20000001, cab);
 			}
 
 			manifestModule.AddDeclarativeSecurity(0x20000001, declarativeSecurity);
 
 			foreach (Type type in typeForwarders)
 			{
 				manifestModule.AddTypeForwarder(type);
 			}
 			foreach (Type type in typeForwarders)
 			{
 				manifestModule.AddTypeForwarder(type);
 			}
 
 			foreach (ResourceFile resfile in resourceFiles)
 			{
 				int fileToken = AddFile(manifestModule, resfile.FileName, 1 /*ContainsNoMetaData*/);
 				ManifestResourceTable.Record rec = new ManifestResourceTable.Record();
 				rec.Offset = 0;
 				rec.Flags = (int)resfile.Attributes;
 				rec.Name = manifestModule.Strings.Add(resfile.Name);
 				rec.Implementation = fileToken;
 				manifestModule.ManifestResource.AddRecord(rec);
 			}
 			foreach (ResourceFile resfile in resourceFiles)
 			{
 				int fileToken = AddFile(manifestModule, resfile.FileName, 1 /*ContainsNoMetaData*/);
 				ManifestResourceTable.Record rec = new ManifestResourceTable.Record();
 				rec.Offset = 0;
 				rec.Flags = (int)resfile.Attributes;
 				rec.Name = manifestModule.Strings.Add(resfile.Name);
 				rec.Implementation = fileToken;
 				manifestModule.ManifestResource.AddRecord(rec);
 			}
 
 			int entryPointToken = 0;
 
 			foreach (ModuleBuilder moduleBuilder in modules)
 			{
 				moduleBuilder.FillAssemblyRefTable();
 				if (moduleBuilder != manifestModule)
 				{
 					int fileToken;
 					if (entryPoint != null && entryPoint.Module == moduleBuilder)
 					{
 						ModuleWriter.WriteModule(null, null, moduleBuilder, fileKind, portableExecutableKind, imageFileMachine, moduleBuilder.unmanagedResources, entryPoint.MetadataToken);
 						entryPointToken = fileToken = AddFile(manifestModule, moduleBuilder.fileName, 0 /*ContainsMetaData*/);
 					}
 					else
 					{
 						ModuleWriter.WriteModule(null, null, moduleBuilder, fileKind, portableExecutableKind, imageFileMachine, moduleBuilder.unmanagedResources, 0);
 						fileToken = AddFile(manifestModule, moduleBuilder.fileName, 0 /*ContainsMetaData*/);
 					}
 					moduleBuilder.ExportTypes(fileToken, manifestModule);
 				}
 			}
 			foreach (ModuleBuilder moduleBuilder in modules)
 			{
 				moduleBuilder.FillAssemblyRefTable();
 				if (moduleBuilder != manifestModule)
 				{
 					int fileToken;
 					if (entryPoint != null && entryPoint.Module == moduleBuilder)
 					{
 						ModuleWriter.WriteModule(null, null, moduleBuilder, fileKind, portableExecutableKind, imageFileMachine, moduleBuilder.unmanagedResources, entryPoint.MetadataToken);
 						entryPointToken = fileToken = AddFile(manifestModule, moduleBuilder.fileName, 0 /*ContainsMetaData*/);
 					}
 					else
 					{
 						ModuleWriter.WriteModule(null, null, moduleBuilder, fileKind, portableExecutableKind, imageFileMachine, moduleBuilder.unmanagedResources, 0);
 						fileToken = AddFile(manifestModule, moduleBuilder.fileName, 0 /*ContainsMetaData*/);
 					}
 					moduleBuilder.ExportTypes(fileToken, manifestModule);
 				}
 			}
 
 			foreach (Module module in addedModules)
 			{
 				int fileToken = AddFile(manifestModule, module.FullyQualifiedName, 0 /*ContainsMetaData*/);
 				module.ExportTypes(fileToken, manifestModule);
 			}
 			foreach (Module module in addedModules)
 			{
 				int fileToken = AddFile(manifestModule, module.FullyQualifiedName, 0 /*ContainsMetaData*/);
 				module.ExportTypes(fileToken, manifestModule);
 			}
 
 			if (entryPointToken == 0 && entryPoint != null)
 			{
 				entryPointToken = entryPoint.MetadataToken;
 			}
 
 			// finally, write the manifest module
 			ModuleWriter.WriteModule(keyPair, publicKey, manifestModule, fileKind, portableExecutableKind, imageFileMachine, unmanagedResources ?? manifestModule.unmanagedResources, entryPointToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="403" endline="425"><![CDATA[
 
 		private int AddFile(ModuleBuilder manifestModule, string fileName, int flags)
 		{
 			SHA1Managed hash = new SHA1Managed();
 			string fullPath = fileName;
 			if (dir != null)
 			{
 				fullPath = Path.Combine(dir, fileName);
 			}
 			using (FileStream fs = new FileStream(fullPath, FileMode.Open, FileAccess.Read))
 			{
 				using (CryptoStream cs = new CryptoStream(Stream.Null, hash, CryptoStreamMode.Write))
 				{
 					byte[] buf = new byte[8192];
 					ModuleWriter.HashChunk(fs, cs, buf, (int)fs.Length);
 				}
 			}
 			FileTable.Record file = new FileTable.Record();
 			file.Flags = flags;
 			file.Name = manifestModule.Strings.Add(Path.GetFileName(fileName));
 			file.HashValue = manifestModule.Blobs.Add(ByteBuffer.Wrap(hash.Hash));
 			return 0x26000000 + manifestModule.File.AddRecord(file);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="426" endline="430"><![CDATA[
 
 		public void AddResourceFile(string name, string fileName)
 		{
 			AddResourceFile(name, fileName, ResourceAttributes.Public);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="431" endline="439"><![CDATA[
 
 		public void AddResourceFile(string name, string fileName, ResourceAttributes attribs)
 		{
 			ResourceFile resfile = new ResourceFile();
 			resfile.Name = name;
 			resfile.FileName = fileName;
 			resfile.Attributes = attribs;
 			resourceFiles.Add(resfile);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="440" endline="444"><![CDATA[
 
 		public void DefineVersionInfoResource()
 		{
 			versionInfo = new VersionInfo();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="445" endline="454"><![CDATA[
 
 		public void DefineVersionInfoResource(string product, string productVersion, string company, string copyright, string trademark)
 		{
 			versionInfo = new VersionInfo();
 			versionInfo.product = product;
 			versionInfo.informationalVersion = productVersion;
 			versionInfo.company = company;
 			versionInfo.copyright = copyright;
 			versionInfo.trademark = trademark;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="455" endline="460"><![CDATA[
 
 		public void __DefineIconResource(byte[] iconFile)
 		{
 			unmanagedResources = new ResourceSection();
 			unmanagedResources.AddIcon(iconFile);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="461" endline="469"><![CDATA[
 
 		public void __DefineUnmanagedResource(byte[] resource)
 		{
 			// The standard .NET DefineUnmanagedResource(byte[]) is useless, because it embeds "resource" (as-is) as the .rsrc section,
 			// but it doesn't set the PE file Resource Directory entry to point to it. That's why we have a renamed version, which behaves
 			// like DefineUnmanagedResource(string).
 			unmanagedResources = new ResourceSection();
 			unmanagedResources.ExtractResources(resource);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="470" endline="476"><![CDATA[
 
 		public void DefineUnmanagedResource(string resourceFileName)
 		{
 			// This method reads the specified resource file (Win32 .res file) and converts it into the appropriate format and embeds it in the .rsrc section,
 			// also setting the Resource Directory entry.
 			__DefineUnmanagedResource(File.ReadAllBytes(resourceFileName));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="477" endline="490"><![CDATA[
 
 		public override Type[] GetTypes()
 		{
 			List<Type> list = new List<Type>();
 			foreach (ModuleBuilder module in modules)
 			{
 				module.GetTypesImpl(list);
 			}
 			foreach (ModuleBuilder module in modules)
 			{
 				module.GetTypesImpl(list);
 			}
 			foreach (Module module in addedModules)
 			{
 				module.GetTypesImpl(list);
 			}
 			foreach (Module module in addedModules)
 			{
 				module.GetTypesImpl(list);
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="491" endline="511"><![CDATA[
 
 		internal override Type GetTypeImpl(string typeName)
 		{
 			foreach (ModuleBuilder mb in modules)
 			{
 				Type type = mb.GetTypeImpl(typeName);
 				if (type != null)
 				{
 					return type;
 				}
 			}
 			foreach (ModuleBuilder mb in modules)
 			{
 				Type type = mb.GetTypeImpl(typeName);
 				if (type != null)
 				{
 					return type;
 				}
 			}
 			foreach (Module module in addedModules)
 			{
 				Type type = module.GetTypeImpl(typeName);
 				if (type != null)
 				{
 					return type;
 				}
 			}
 			foreach (Module module in addedModules)
 			{
 				Type type = module.GetTypeImpl(typeName);
 				if (type != null)
 				{
 					return type;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="512" endline="515"><![CDATA[
 
 		public override string ImageRuntimeVersion
 		{
 			get { return imageRuntimeVersion; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="516" endline="522"><![CDATA[
 		}
 
 		public void __SetImageRuntimeVersion(string imageRuntimeVersion, int mdStreamVersion)
 		{
 			this.imageRuntimeVersion = imageRuntimeVersion;
 			this.mdStreamVersion = mdStreamVersion;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="523" endline="533"><![CDATA[
 
 		public override Module ManifestModule
 		{
 			get
 			{
 				if (pseudoManifestModule == null)
 				{
 					pseudoManifestModule = new ManifestModule(this);
 				}
 				return pseudoManifestModule;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="534" endline="538"><![CDATA[
 		}
 
 		public override MethodInfo EntryPoint
 		{
 			get { return entryPoint; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="539" endline="544"><![CDATA[
 		}
 
 		public override AssemblyName[] GetReferencedAssemblies()
 		{
 			return Empty<AssemblyName>.Array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="545" endline="549"><![CDATA[
 
 		public override Module[] GetLoadedModules(bool getResourceModules)
 		{
 			return GetModules(getResourceModules);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="550" endline="569"><![CDATA[
 
 		public override Module[] GetModules(bool getResourceModules)
 		{
 			List<Module> list = new List<Module>();
 			foreach (ModuleBuilder module in modules)
 			{
 				if (getResourceModules || !module.IsResource())
 				{
 					list.Add(module);
 				}
 			}
 			foreach (ModuleBuilder module in modules)
 			{
 				if (getResourceModules || !module.IsResource())
 				{
 					list.Add(module);
 				}
 			}
 			foreach (Module module in addedModules)
 			{
 				if (getResourceModules || !module.IsResource())
 				{
 					list.Add(module);
 				}
 			}
 			foreach (Module module in addedModules)
 			{
 				if (getResourceModules || !module.IsResource())
 				{
 					list.Add(module);
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="570" endline="588"><![CDATA[
 
 		public override Module GetModule(string name)
 		{
 			foreach (ModuleBuilder module in modules)
 			{
 				if (module.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
 				{
 					return module;
 				}
 			}
 			foreach (ModuleBuilder module in modules)
 			{
 				if (module.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
 				{
 					return module;
 				}
 			}
 			foreach (Module module in addedModules)
 			{
 				if (module.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
 				{
 					return module;
 				}
 			}
 			foreach (Module module in addedModules)
 			{
 				if (module.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
 				{
 					return module;
 				}
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="589" endline="595"><![CDATA[
 
 		public Module __AddModule(RawModule module)
 		{
 			Module mod = module.ToModule(this);
 			addedModules.Add(mod);
 			return mod;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="596" endline="599"><![CDATA[
 
 		public override ManifestResourceInfo GetManifestResourceInfo(string resourceName)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="600" endline="604"><![CDATA[
 		}
 
 		public override string[] GetManifestResourceNames()
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="605" endline="609"><![CDATA[
 		}
 
 		public override Stream GetManifestResourceStream(string resourceName)
 		{
 			throw new NotSupportedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="610" endline="623"><![CDATA[
 		}
 
 		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			List<CustomAttributeData> list = new List<CustomAttributeData>();
 			foreach (CustomAttributeBuilder cab in customAttributes)
 			{
 				if (attributeType == null || attributeType.IsAssignableFrom(cab.Constructor.DeclaringType))
 				{
 					list.Add(cab.ToData(this));
 				}
 			}
 			foreach (CustomAttributeBuilder cab in customAttributes)
 			{
 				if (attributeType == null || attributeType.IsAssignableFrom(cab.Constructor.DeclaringType))
 				{
 					list.Add(cab.ToData(this));
 				}
 			}
 			return list;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="624" endline="635"><![CDATA[
 	}
 
 	sealed class ManifestModule 
 	{
 		private readonly AssemblyBuilder assembly;
 		private readonly Guid guid = Guid.NewGuid();
 
 		internal ManifestModule(AssemblyBuilder assembly)
 			
 		{
 			this.assembly = assembly;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="636" endline="639"><![CDATA[
 
 		public override int MDStreamVersion
 		{
 			get { return assembly.mdStreamVersion; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="640" endline="644"><![CDATA[
 		}
 
 		public override Assembly Assembly
 		{
 			get { return assembly; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="645" endline="650"><![CDATA[
 		}
 
 		internal override Type GetTypeImpl(string typeName)
 		{
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="651" endline="654"><![CDATA[
 
 		internal override void  GetTypesImpl(List<Type> list)
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="655" endline="658"><![CDATA[
 
 		public override string FullyQualifiedName
 		{
 			get { return Path.Combine(assembly.dir, "RefEmit_InMemoryManifestModule"); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="659" endline="663"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return "<In Memory Module>"; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="664" endline="668"><![CDATA[
 		}
 
 		public override Guid ModuleVersionId
 		{
 			get { return guid; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="669" endline="673"><![CDATA[
 		}
 
 		public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			throw new ArgumentException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="674" endline="678"><![CDATA[
 		}
 
 		public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			throw new ArgumentException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="679" endline="683"><![CDATA[
 		}
 
 		public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			throw new ArgumentException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="684" endline="688"><![CDATA[
 		}
 
 		public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			throw new ArgumentException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="689" endline="693"><![CDATA[
 		}
 
 		public override string ResolveString(int metadataToken)
 		{
 			throw new ArgumentException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="694" endline="698"><![CDATA[
 		}
 
 		public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
 		{
 			throw new ArgumentException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="699" endline="703"><![CDATA[
 		}
 
 		public override string ScopeName
 		{
 			get { return "RefEmit_InMemoryManifestModule"; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="704" endline="708"><![CDATA[
 		}
 
 		public override AssemblyName[] __GetReferencedAssemblies()
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="709" endline="713"><![CDATA[
 		}
 
 		internal override Type GetModuleType()
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\AssemblyBuilder.cs" startline="714" endline="718"><![CDATA[
 		}
 
 		internal override IKVM.Reflection.Reader.ByteReader GetBlob(int blobIndex)
 		{
 			throw new InvalidOperationException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="41" endline="43"><![CDATA[
 		{
 			return new FieldSignature(fieldType, Util.Copy(optionalCustomModifiers), Util.Copy(requiredCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="44" endline="50"><![CDATA[
 
 		private FieldSignature(Type fieldType, Type[] optionalCustomModifiers, Type[] requiredCustomModifiers)
 		{
 			this.fieldType = fieldType;
 			this.optionalCustomModifiers = optionalCustomModifiers;
 			this.requiredCustomModifiers = requiredCustomModifiers;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="51" endline="59"><![CDATA[
 
 		public override bool Equals(object obj)
 		{
 			FieldSignature other = obj as FieldSignature;
 			return other != null
 				&& other.fieldType.Equals(fieldType)
 				&& Util.ArrayEquals(other.optionalCustomModifiers, optionalCustomModifiers)
 				&& Util.ArrayEquals(other.requiredCustomModifiers, requiredCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="60" endline="64"><![CDATA[
 
 		public override int GetHashCode()
 		{
 			return fieldType.GetHashCode() ^ Util.GetHashCode(optionalCustomModifiers) ^ Util.GetHashCode(requiredCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="65" endline="68"><![CDATA[
 
 		internal Type FieldType
 		{
 			get { return fieldType; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="69" endline="74"><![CDATA[
 		}
 
 		internal Type[] GetOptionalCustomModifiers()
 		{
 			return Util.Copy(optionalCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="75" endline="79"><![CDATA[
 
 		internal Type[] GetRequiredCustomModifiers()
 		{
 			return Util.Copy(requiredCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="80" endline="87"><![CDATA[
 
 		internal FieldSignature ExpandTypeParameters(Type declaringType)
 		{
 			return new FieldSignature(
 				fieldType.BindTypeParameters(declaringType),
 				BindTypeParameters(declaringType, optionalCustomModifiers),
 				BindTypeParameters(declaringType, requiredCustomModifiers));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="88" endline="101"><![CDATA[
 
 		internal static FieldSignature ReadSig(ModuleReader module, ByteReader br, IGenericContext context)
 		{
 			if (br.ReadByte() != FIELD)
 			{
 				throw new BadImageFormatException();
 			}
 			Type fieldType;
 			Type[] optionalCustomModifiers;
 			Type[] requiredCustomModifiers;
 			ReadCustomModifiers(module, br, context, out requiredCustomModifiers, out optionalCustomModifiers);
 			fieldType = ReadType(module, br, context);
 			return new FieldSignature(fieldType, optionalCustomModifiers, requiredCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\FieldSignature.cs" startline="102" endline="109"><![CDATA[
 
 		internal override void WriteSig(ModuleBuilder module, ByteBuffer bb)
 		{
 			bb.Write(FIELD);
 			WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_OPT, optionalCustomModifiers);
 			WriteCustomModifiers(module, bb, ELEMENT_TYPE_CMOD_REQD, requiredCustomModifiers);
 			WriteType(module, bb, fieldType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="40" endline="46"><![CDATA[
 		internal TypeDefImpl(ModuleReader module, int index)
 		{
 			this.module = module;
 			this.index = index;
 			this.typeName = TypeNameParser.Escape(module.GetString(module.TypeDef.records[index].TypeName));
 			this.typeNamespace = TypeNameParser.Escape(module.GetString(module.TypeDef.records[index].TypeNamespace));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="47" endline="58"><![CDATA[
 
 		public override Type BaseType
 		{
 			get
 			{
 				int extends = module.TypeDef.records[index].Extends;
 				if ((extends & 0xFFFFFF) == 0)
 				{
 					return null;
 				}
 				return module.ResolveType(extends, this);
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="59" endline="63"><![CDATA[
 		}
 
 		public override TypeAttributes Attributes
 		{
 			get { return (TypeAttributes)module.TypeDef.records[index].Flags; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="64" endline="85"><![CDATA[
 		}
 
 		public override EventInfo[] __GetDeclaredEvents()
 		{
 			int token = this.MetadataToken;
 			// TODO use binary search?
 			for (int i = 0; i < module.EventMap.records.Length; i++)
 			{
 				if (module.EventMap.records[i].Parent == token)
 				{
 					int evt = module.EventMap.records[i].EventList - 1;
 					int end = module.EventMap.records.Length > i + 1 ? module.EventMap.records[i + 1].EventList - 1 
 					EventInfo[] events = new EventInfo[end - evt];
 					for (int j = 0; evt < end; evt++, j++)
 					{
 						events[j] = new EventInfoImpl(module, this, evt);
 					}
 					for (int j = 0; evt < end; evt++, j++)
 					{
 						events[j] = new EventInfoImpl(module, this, evt);
 					}
 					return events;
 				}
 			}
 			for (int i = 0; i < module.EventMap.records.Length; i++)
 			{
 				if (module.EventMap.records[i].Parent == token)
 				{
 					int evt = module.EventMap.records[i].EventList - 1;
 					int end = module.EventMap.records.Length > i + 1 ? module.EventMap.records[i + 1].EventList - 1 
 					EventInfo[] events = new EventInfo[end - evt];
 					for (int j = 0; evt < end; evt++, j++)
 					{
 						events[j] = new EventInfoImpl(module, this, evt);
 					}
 					return events;
 				}
 			}
 			return Empty<EventInfo>.Array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="86" endline="97"><![CDATA[
 
 		public override FieldInfo[] __GetDeclaredFields()
 		{
 			int field = module.TypeDef.records[index].FieldList - 1;
 			int end = module.TypeDef.records.Length > index + 1 ? module.TypeDef.records[index + 1].FieldList - 1 
 			FieldInfo[] fields = new FieldInfo[end - field];
 			for (int i = 0; field < end; i++, field++)
 			{
 				fields[i] = module.GetFieldAt(this, field);
 			}
 			for (int i = 0; field < end; i++, field++)
 			{
 				fields[i] = module.GetFieldAt(this, field);
 			}
 			return fields;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="98" endline="112"><![CDATA[
 
 		public override Type[] __GetDeclaredInterfaces()
 		{
 			int token = this.MetadataToken;
 			List<Type> list = new List<Type>();
 			// TODO use binary search?
 			for (int i = 0; i < module.InterfaceImpl.records.Length; i++)
 			{
 				if (module.InterfaceImpl.records[i].Class == token)
 				{
 					list.Add(module.ResolveType(module.InterfaceImpl.records[i].Interface, this));
 				}
 			}
 			for (int i = 0; i < module.InterfaceImpl.records.Length; i++)
 			{
 				if (module.InterfaceImpl.records[i].Class == token)
 				{
 					list.Add(module.ResolveType(module.InterfaceImpl.records[i].Interface, this));
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="113" endline="124"><![CDATA[
 
 		public override MethodBase[] __GetDeclaredMethods()
 		{
 			int method = module.TypeDef.records[index].MethodList - 1;
 			int end = module.TypeDef.records.Length > index + 1 ? module.TypeDef.records[index + 1].MethodList - 1 
 			MethodBase[] methods = new MethodBase[end - method];
 			for (int i = 0; method < end; method++, i++)
 			{
 				methods[i] = module.GetMethodAt(this, method);
 			}
 			for (int i = 0; method < end; method++, i++)
 			{
 				methods[i] = module.GetMethodAt(this, method);
 			}
 			return methods;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="125" endline="157"><![CDATA[
 
 		public override __MethodImplMap __GetMethodImplMap()
 		{
 			List<MethodInfo> bodies = new List<MethodInfo>();
 			List<List<MethodInfo>> declarations = new List<List<MethodInfo>>();
 			int token = this.MetadataToken;
 			// TODO use binary search?
 			for (int i = 0; i < module.MethodImpl.records.Length; i++)
 			{
 				if (module.MethodImpl.records[i].Class == token)
 				{
 					MethodInfo body = (MethodInfo)module.ResolveMethod(module.MethodImpl.records[i].MethodBody, typeArgs, null);
 					int index = bodies.IndexOf(body);
 					if (index == -1)
 					{
 						index = bodies.Count;
 						bodies.Add(body);
 						declarations.Add(new List<MethodInfo>());
 					}
 					MethodInfo declaration = (MethodInfo)module.ResolveMethod(module.MethodImpl.records[i].MethodDeclaration, typeArgs, null);
 					declarations[index].Add(declaration);
 				}
 			}
 			for (int i = 0; i < module.MethodImpl.records.Length; i++)
 			{
 				if (module.MethodImpl.records[i].Class == token)
 				{
 					MethodInfo body = (MethodInfo)module.ResolveMethod(module.MethodImpl.records[i].MethodBody, typeArgs, null);
 					int index = bodies.IndexOf(body);
 					if (index == -1)
 					{
 						index = bodies.Count;
 						bodies.Add(body);
 						declarations.Add(new List<MethodInfo>());
 					}
 					MethodInfo declaration = (MethodInfo)module.ResolveMethod(module.MethodImpl.records[i].MethodDeclaration, typeArgs, null);
 					declarations[index].Add(declaration);
 				}
 			}
 			__MethodImplMap map = new __MethodImplMap();
 			map.TargetType = this;
 			map.MethodBodies = bodies.ToArray();
 			map.MethodDeclarations = new MethodInfo[declarations.Count][];
 			for (int i = 0; i < map.MethodDeclarations.Length; i++)
 			{
 				map.MethodDeclarations[i] = declarations[i].ToArray();
 			}
 			for (int i = 0; i < map.MethodDeclarations.Length; i++)
 			{
 				map.MethodDeclarations[i] = declarations[i].ToArray();
 			}
 			return map;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="158" endline="172"><![CDATA[
 
 		public override Type[] __GetDeclaredTypes()
 		{
 			int token = this.MetadataToken;
 			List<Type> list = new List<Type>();
 			// TODO use binary search?
 			for (int i = 0; i < module.NestedClass.records.Length; i++)
 			{
 				if (module.NestedClass.records[i].EnclosingClass == token)
 				{
 					list.Add(module.ResolveType(module.NestedClass.records[i].NestedClass));
 				}
 			}
 			for (int i = 0; i < module.NestedClass.records.Length; i++)
 			{
 				if (module.NestedClass.records[i].EnclosingClass == token)
 				{
 					list.Add(module.ResolveType(module.NestedClass.records[i].NestedClass));
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="173" endline="193"><![CDATA[
 
 		public override PropertyInfo[] __GetDeclaredProperties()
 		{
 			int token = this.MetadataToken;
 			// TODO use binary search?
 			for (int i = 0; i < module.PropertyMap.records.Length; i++)
 			{
 				if (module.PropertyMap.records[i].Parent == token)
 				{
 					int property = module.PropertyMap.records[i].PropertyList - 1;
 					int end = module.PropertyMap.records.Length > i + 1 ? module.PropertyMap.records[i + 1].PropertyList - 1 
 					PropertyInfo[] properties = new PropertyInfo[end - property];
 					for (int j = 0; property < end; property++, j++)
 					{
 						properties[j] = new PropertyInfoImpl(module, this, property);
 					}
 					for (int j = 0; property < end; property++, j++)
 					{
 						properties[j] = new PropertyInfoImpl(module, this, property);
 					}
 					return properties;
 				}
 			}
 			for (int i = 0; i < module.PropertyMap.records.Length; i++)
 			{
 				if (module.PropertyMap.records[i].Parent == token)
 				{
 					int property = module.PropertyMap.records[i].PropertyList - 1;
 					int end = module.PropertyMap.records.Length > i + 1 ? module.PropertyMap.records[i + 1].PropertyList - 1 
 					PropertyInfo[] properties = new PropertyInfo[end - property];
 					for (int j = 0; property < end; property++, j++)
 					{
 						properties[j] = new PropertyInfoImpl(module, this, property);
 					}
 					return properties;
 				}
 			}
 			return Empty<PropertyInfo>.Array;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="194" endline="197"><![CDATA[
 
 		public override string Name
 		{
 			get { return typeName; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="198" endline="202"><![CDATA[
 		}
 
 		public override string Namespace
 		{
 			get { return typeNamespace; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="203" endline="207"><![CDATA[
 		}
 
 		public override Type UnderlyingSystemType
 		{
 			get { return this; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="208" endline="212"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return (TypeDefTable.Index << 24) + index + 1; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="213" endline="219"><![CDATA[
 		}
 
 		public override Type[] GetGenericArguments()
 		{
 			PopulateGenericArguments();
 			return Util.Copy(typeArgs);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="220" endline="242"><![CDATA[
 
 		private void PopulateGenericArguments()
 		{
 			if (typeArgs == null)
 			{
 				int token = this.MetadataToken;
 				int first = module.GenericParam.FindFirstByOwner(token);
 				if (first == -1)
 				{
 					typeArgs = Type.EmptyTypes;
 				}
 				else
 				{
 					List<Type> list = new List<Type>();
 					int len = module.GenericParam.records.Length;
 					for (int i = first; i < len && module.GenericParam.records[i].Owner == token; i++)
 					{
 						list.Add(new GenericTypeParameter(module, i));
 					}
 					for (int i = first; i < len && module.GenericParam.records[i].Owner == token; i++)
 					{
 						list.Add(new GenericTypeParameter(module, i));
 					}
 					typeArgs = list.ToArray();
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="243" endline="248"><![CDATA[
 
 		internal override Type GetGenericTypeArgument(int index)
 		{
 			PopulateGenericArguments();
 			return typeArgs[index];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="249" endline="254"><![CDATA[
 
 		public override Type[][] __GetGenericArgumentsOptionalCustomModifiers()
 		{
 			PopulateGenericArguments();
 			return Util.Copy(new Type[typeArgs.Length][]);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="255" endline="260"><![CDATA[
 
 		public override Type[][] __GetGenericArgumentsRequiredCustomModifiers()
 		{
 			PopulateGenericArguments();
 			return Util.Copy(new Type[typeArgs.Length][]);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="261" endline="264"><![CDATA[
 
 		public override bool IsGenericType
 		{
 			get { return IsGenericTypeDefinition; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="265" endline="269"><![CDATA[
 		}
 
 		public override bool IsGenericTypeDefinition
 		{
 			get { return module.GenericParam.FindFirstByOwner(this.MetadataToken) != -1; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="270" endline="279"><![CDATA[
 		}
 
 		public override Type GetGenericTypeDefinition()
 		{
 			if (IsGenericTypeDefinition)
 			{
 				return this;
 			}
 			throw new InvalidOperationException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="280" endline="296"><![CDATA[
 
 		public override string ToString()
 		{
 			StringBuilder sb = new StringBuilder(this.FullName);
 			string sep = "[";
 			foreach (Type arg in GetGenericArguments())
 			{
 				sb.Append(sep);
 				sb.Append(arg);
 				sep = ",";
 			}
 			foreach (Type arg in GetGenericArguments())
 			{
 				sb.Append(sep);
 				sb.Append(arg);
 				sep = ",";
 			}
 			if (sep != "[")
 			{
 				sb.Append(']');
 			}
 			return sb.ToString();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="297" endline="317"><![CDATA[
 
 		public override Type DeclaringType
 		{
 			get
 			{
 				// note that we cannot use Type.IsNested for this, because that calls DeclaringType
 				if ((this.Attributes & TypeAttributes.VisibilityMask & ~TypeAttributes.Public) == 0)
 				{
 					return null;
 				}
 				// TODO use binary search (if sorted)
 				int token = this.MetadataToken;
 				for (int i = 0; i < module.NestedClass.records.Length; i++)
 				{
 					if (module.NestedClass.records[i].NestedClass == token)
 					{
 						return module.ResolveType(module.NestedClass.records[i].EnclosingClass, null, null);
 					}
 				}
 				for (int i = 0; i < module.NestedClass.records.Length; i++)
 				{
 					if (module.NestedClass.records[i].NestedClass == token)
 					{
 						return module.ResolveType(module.NestedClass.records[i].EnclosingClass, null, null);
 					}
 				}
 				throw new InvalidOperationException();
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="318" endline="365"><![CDATA[
 		}
 
 		public override StructLayoutAttribute StructLayoutAttribute
 		{
 			get
 			{
 				StructLayoutAttribute layout;
 				switch (this.Attributes & TypeAttributes.LayoutMask)
 				{
 					case TypeAttributes.AutoLayout
 						return null;
 					case TypeAttributes.SequentialLayout
 						layout = new StructLayoutAttribute(LayoutKind.Sequential);
 						break;
 					case TypeAttributes.ExplicitLayout
 						layout = new StructLayoutAttribute(LayoutKind.Explicit);
 						break;
 					default
 						throw new BadImageFormatException();
 				}
 				int token = this.MetadataToken;
 				// TODO use binary search?
 				for (int i = 0; i < module.ClassLayout.records.Length; i++)
 				{
 					if (module.ClassLayout.records[i].Parent == token)
 					{
 						layout.Pack = module.ClassLayout.records[i].PackingSize;
 						layout.Size = module.ClassLayout.records[i].ClassSize;
 						switch (this.Attributes & TypeAttributes.StringFormatMask)
 						{
 							case TypeAttributes.AnsiClass
 								layout.CharSet = CharSet.Ansi;
 								break;
 							case TypeAttributes.UnicodeClass
 								layout.CharSet = CharSet.Unicode;
 								break;
 							case TypeAttributes.AutoClass
 								layout.CharSet = CharSet.Auto;
 								break;
 							default
 								layout.CharSet = CharSet.None;
 								break;
 						}
 						return layout;
 					}
 				}
 				for (int i = 0; i < module.ClassLayout.records.Length; i++)
 				{
 					if (module.ClassLayout.records[i].Parent == token)
 					{
 						layout.Pack = module.ClassLayout.records[i].PackingSize;
 						layout.Size = module.ClassLayout.records[i].ClassSize;
 						switch (this.Attributes & TypeAttributes.StringFormatMask)
 						{
 							case TypeAttributes.AnsiClass
 								layout.CharSet = CharSet.Ansi;
 								break;
 							case TypeAttributes.UnicodeClass
 								layout.CharSet = CharSet.Unicode;
 								break;
 							case TypeAttributes.AutoClass
 								layout.CharSet = CharSet.Auto;
 								break;
 							default
 								layout.CharSet = CharSet.None;
 								break;
 						}
 						return layout;
 					}
 				}
 				return null;
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="366" endline="370"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\TypeDefImpl.cs" startline="371" endline="375"><![CDATA[
 		}
 
 		internal override bool IsModulePseudoType
 		{
 			get { return index == 0; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="39" endline="45"><![CDATA[
 		internal AssemblyReader(string location, ModuleReader manifestModule)
 			
 		{
 			this.location = location;
 			this.manifestModule = manifestModule;
 			externalModules = new Module[manifestModule.File.records.Length];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="46" endline="49"><![CDATA[
 
 		public override string Location
 		{
 			get { return location; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="50" endline="54"><![CDATA[
 		}
 
 		public override string FullName
 		{
 			get { return GetName().FullName; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="55" endline="60"><![CDATA[
 		}
 
 		public override AssemblyName GetName()
 		{
 			return GetNameImpl(ref manifestModule.AssemblyTable.records[0]);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="61" endline="87"><![CDATA[
 
 		private AssemblyName GetNameImpl(ref AssemblyTable.Record rec)
 		{
 			AssemblyName name = new AssemblyName();
 			name.Name = manifestModule.GetString(rec.Name);
 			name.Version = new Version(rec.MajorVersion, rec.MinorVersion, rec.BuildNumber, rec.RevisionNumber);
 			if (rec.PublicKey != 0)
 			{
 				name.SetPublicKey(manifestModule.GetBlobCopy(rec.PublicKey));
 			}
 			else
 			{
 				name.SetPublicKey(Empty<byte>.Array);
 			}
 			if (rec.Culture != 0)
 			{
 				name.CultureInfo = new System.Globalization.CultureInfo(manifestModule.GetString(rec.Culture));
 			}
 			else
 			{
 				name.CultureInfo = System.Globalization.CultureInfo.InvariantCulture;
 			}
 			name.HashAlgorithm = (AssemblyHashAlgorithm)rec.HashAlgId;
 			name.CodeBase = this.CodeBase;
 			name.Flags = (AssemblyNameFlags)rec.Flags;
 			return name;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="88" endline="102"><![CDATA[
 
 		public override Type[] GetTypes()
 		{
 			if (externalModules.Length == 0)
 			{
 				return manifestModule.GetTypes();
 			}
 
 			List<Type> list = new List<Type>();
 			foreach (Module module in GetModules(false))
 			{
 				list.AddRange(module.GetTypes());
 			}
 			foreach (Module module in GetModules(false))
 			{
 				list.AddRange(module.GetTypes());
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="103" endline="115"><![CDATA[
 
 		internal override Type GetTypeImpl(string typeName)
 		{
 			Type type = manifestModule.GetType(typeName);
 			for (int i = 0; type == null && i < externalModules.Length; i++)
 			{
 				if ((manifestModule.File.records[i].Flags & ContainsNoMetaData) == 0)
 				{
 					type = GetModule(i).GetType(typeName);
 				}
 			}
 			for (int i = 0; type == null && i < externalModules.Length; i++)
 			{
 				if ((manifestModule.File.records[i].Flags & ContainsNoMetaData) == 0)
 				{
 					type = GetModule(i).GetType(typeName);
 				}
 			}
 			return type;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="116" endline="119"><![CDATA[
 
 		public override string ImageRuntimeVersion
 		{
 			get { return manifestModule.ImageRuntimeVersion; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="120" endline="124"><![CDATA[
 		}
 
 		public override Module ManifestModule
 		{
 			get { return manifestModule; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="125" endline="139"><![CDATA[
 		}
 
 		public override Module[] GetLoadedModules(bool getResourceModules)
 		{
 			List<Module> list = new List<Module>();
 			list.Add(manifestModule);
 			foreach (Module m in externalModules)
 			{
 				if (m != null)
 				{
 					list.Add(m);
 				}
 			}
 			foreach (Module m in externalModules)
 			{
 				if (m != null)
 				{
 					list.Add(m);
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="140" endline="160"><![CDATA[
 
 		public override Module[] GetModules(bool getResourceModules)
 		{
 			if (externalModules.Length == 0)
 			{
 				return new Module[] { manifestModule };
 			}
 			else
 			{
 				List<Module> list = new List<Module>();
 				list.Add(manifestModule);
 				for (int i = 0; i < manifestModule.File.records.Length; i++)
 				{
 					if (getResourceModules || (manifestModule.File.records[i].Flags & ContainsNoMetaData) == 0)
 					{
 						list.Add(GetModule(i));
 					}
 				}
 				for (int i = 0; i < manifestModule.File.records.Length; i++)
 				{
 					if (getResourceModules || (manifestModule.File.records[i].Flags & ContainsNoMetaData) == 0)
 					{
 						list.Add(GetModule(i));
 					}
 				}
 				return list.ToArray();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="161" endline="174"><![CDATA[
 
 		public override Module GetModule(string name)
 		{
 			if (name.Equals(manifestModule.ScopeName, StringComparison.InvariantCultureIgnoreCase))
 			{
 				return manifestModule;
 			}
 			int index = GetModuleIndex(name);
 			if (index != -1)
 			{
 				return GetModule(index);
 			}
 			return null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="175" endline="186"><![CDATA[
 
 		private int GetModuleIndex(string name)
 		{
 			for (int i = 0; i < manifestModule.File.records.Length; i++)
 			{
 				if (name.Equals(manifestModule.GetString(manifestModule.File.records[i].Name), StringComparison.InvariantCultureIgnoreCase))
 				{
 					return i;
 				}
 			}
 			for (int i = 0; i < manifestModule.File.records.Length; i++)
 			{
 				if (name.Equals(manifestModule.GetString(manifestModule.File.records[i].Name), StringComparison.InvariantCultureIgnoreCase))
 				{
 					return i;
 				}
 			}
 			return -1;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="187" endline="197"><![CDATA[
 
 		private Module GetModule(int index)
 		{
 			if (externalModules[index] != null)
 			{
 				return externalModules[index];
 			}
 			// TODO add ModuleResolve event
 			string location = Path.Combine(Path.GetDirectoryName(this.location), manifestModule.GetString(manifestModule.File.records[index].Name));
 			return LoadModule(index, File.ReadAllBytes(location), location);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="198" endline="209"><![CDATA[
 
 		private Module LoadModule(int index, byte[] rawModule, string location)
 		{
 			if ((manifestModule.File.records[index].Flags & ContainsNoMetaData) != 0)
 			{
 				return externalModules[index] = new ResourceModule(this, manifestModule.GetString(manifestModule.File.records[index].Name), location);
 			}
 			else
 			{
 				return externalModules[index] = new ModuleReader(this, manifestModule.universe, new MemoryStream(rawModule), location);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="210" endline="223"><![CDATA[
 
 		public override Module LoadModule(string moduleName, byte[] rawModule)
 		{
 			int index = GetModuleIndex(moduleName);
 			if (index == -1)
 			{
 				throw new ArgumentException();
 			}
 			if (externalModules[index] != null)
 			{
 				return externalModules[index];
 			}
 			return LoadModule(index, rawModule, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="224" endline="227"><![CDATA[
 
 		public override MethodInfo EntryPoint
 		{
 			get { return manifestModule.GetEntryPoint(); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="228" endline="233"><![CDATA[
 		}
 
 		public override string[] GetManifestResourceNames()
 		{
 			return manifestModule.GetManifestResourceNames();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="234" endline="238"><![CDATA[
 
 		public override ManifestResourceInfo GetManifestResourceInfo(string resourceName)
 		{
 			return manifestModule.GetManifestResourceInfo(resourceName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="239" endline="243"><![CDATA[
 
 		public override Stream GetManifestResourceStream(string resourceName)
 		{
 			return manifestModule.GetManifestResourceStream(resourceName);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="244" endline="248"><![CDATA[
 
 		public override AssemblyName[] GetReferencedAssemblies()
 		{
 			return manifestModule.__GetReferencedAssemblies();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Reader\AssemblyReader.cs" startline="249" endline="253"><![CDATA[
 
 		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
 		{
 			return manifestModule.GetCustomAttributes(0x20000001, attributeType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCodes.cs" startline="258" endline="715"><![CDATA[
 		{
 			switch (value)
 			{
 				case 0
 					return "nop";
 				case 1
 					return "break";
 				case 2
 					return "ldarg.0";
 				case 3
 					return "ldarg.1";
 				case 4
 					return "ldarg.2";
 				case 5
 					return "ldarg.3";
 				case 6
 					return "ldloc.0";
 				case 7
 					return "ldloc.1";
 				case 8
 					return "ldloc.2";
 				case 9
 					return "ldloc.3";
 				case 10
 					return "stloc.0";
 				case 11
 					return "stloc.1";
 				case 12
 					return "stloc.2";
 				case 13
 					return "stloc.3";
 				case 14
 					return "ldarg.s";
 				case 15
 					return "ldarga.s";
 				case 16
 					return "starg.s";
 				case 17
 					return "ldloc.s";
 				case 18
 					return "ldloca.s";
 				case 19
 					return "stloc.s";
 				case 20
 					return "ldnull";
 				case 21
 					return "ldc.i4.m1";
 				case 22
 					return "ldc.i4.0";
 				case 23
 					return "ldc.i4.1";
 				case 24
 					return "ldc.i4.2";
 				case 25
 					return "ldc.i4.3";
 				case 26
 					return "ldc.i4.4";
 				case 27
 					return "ldc.i4.5";
 				case 28
 					return "ldc.i4.6";
 				case 29
 					return "ldc.i4.7";
 				case 30
 					return "ldc.i4.8";
 				case 31
 					return "ldc.i4.s";
 				case 32
 					return "ldc.i4";
 				case 33
 					return "ldc.i8";
 				case 34
 					return "ldc.r4";
 				case 35
 					return "ldc.r8";
 				case 37
 					return "dup";
 				case 38
 					return "pop";
 				case 39
 					return "jmp";
 				case 40
 					return "call";
 				case 41
 					return "calli";
 				case 42
 					return "ret";
 				case 43
 					return "br.s";
 				case 44
 					return "brfalse.s";
 				case 45
 					return "brtrue.s";
 				case 46
 					return "beq.s";
 				case 47
 					return "bge.s";
 				case 48
 					return "bgt.s";
 				case 49
 					return "ble.s";
 				case 50
 					return "blt.s";
 				case 51
 					return "bne.un.s";
 				case 52
 					return "bge.un.s";
 				case 53
 					return "bgt.un.s";
 				case 54
 					return "ble.un.s";
 				case 55
 					return "blt.un.s";
 				case 56
 					return "br";
 				case 57
 					return "brfalse";
 				case 58
 					return "brtrue";
 				case 59
 					return "beq";
 				case 60
 					return "bge";
 				case 61
 					return "bgt";
 				case 62
 					return "ble";
 				case 63
 					return "blt";
 				case 64
 					return "bne.un";
 				case 65
 					return "bge.un";
 				case 66
 					return "bgt.un";
 				case 67
 					return "ble.un";
 				case 68
 					return "blt.un";
 				case 69
 					return "switch";
 				case 70
 					return "ldind.i1";
 				case 71
 					return "ldind.u1";
 				case 72
 					return "ldind.i2";
 				case 73
 					return "ldind.u2";
 				case 74
 					return "ldind.i4";
 				case 75
 					return "ldind.u4";
 				case 76
 					return "ldind.i8";
 				case 77
 					return "ldind.i";
 				case 78
 					return "ldind.r4";
 				case 79
 					return "ldind.r8";
 				case 80
 					return "ldind.ref";
 				case 81
 					return "stind.ref";
 				case 82
 					return "stind.i1";
 				case 83
 					return "stind.i2";
 				case 84
 					return "stind.i4";
 				case 85
 					return "stind.i8";
 				case 86
 					return "stind.r4";
 				case 87
 					return "stind.r8";
 				case 88
 					return "add";
 				case 89
 					return "sub";
 				case 90
 					return "mul";
 				case 91
 					return "div";
 				case 92
 					return "div.un";
 				case 93
 					return "rem";
 				case 94
 					return "rem.un";
 				case 95
 					return "and";
 				case 96
 					return "or";
 				case 97
 					return "xor";
 				case 98
 					return "shl";
 				case 99
 					return "shr";
 				case 100
 					return "shr.un";
 				case 101
 					return "neg";
 				case 102
 					return "not";
 				case 103
 					return "conv.i1";
 				case 104
 					return "conv.i2";
 				case 105
 					return "conv.i4";
 				case 106
 					return "conv.i8";
 				case 107
 					return "conv.r4";
 				case 108
 					return "conv.r8";
 				case 109
 					return "conv.u4";
 				case 110
 					return "conv.u8";
 				case 111
 					return "callvirt";
 				case 112
 					return "cpobj";
 				case 113
 					return "ldobj";
 				case 114
 					return "ldstr";
 				case 115
 					return "newobj";
 				case 116
 					return "castclass";
 				case 117
 					return "isinst";
 				case 118
 					return "conv.r.un";
 				case 121
 					return "unbox";
 				case 122
 					return "throw";
 				case 123
 					return "ldfld";
 				case 124
 					return "ldflda";
 				case 125
 					return "stfld";
 				case 126
 					return "ldsfld";
 				case 127
 					return "ldsflda";
 				case 128
 					return "stsfld";
 				case 129
 					return "stobj";
 				case 130
 					return "conv.ovf.i1.un";
 				case 131
 					return "conv.ovf.i2.un";
 				case 132
 					return "conv.ovf.i4.un";
 				case 133
 					return "conv.ovf.i8.un";
 				case 134
 					return "conv.ovf.u1.un";
 				case 135
 					return "conv.ovf.u2.un";
 				case 136
 					return "conv.ovf.u4.un";
 				case 137
 					return "conv.ovf.u8.un";
 				case 138
 					return "conv.ovf.i.un";
 				case 139
 					return "conv.ovf.u.un";
 				case 140
 					return "box";
 				case 141
 					return "newarr";
 				case 142
 					return "ldlen";
 				case 143
 					return "ldelema";
 				case 144
 					return "ldelem.i1";
 				case 145
 					return "ldelem.u1";
 				case 146
 					return "ldelem.i2";
 				case 147
 					return "ldelem.u2";
 				case 148
 					return "ldelem.i4";
 				case 149
 					return "ldelem.u4";
 				case 150
 					return "ldelem.i8";
 				case 151
 					return "ldelem.i";
 				case 152
 					return "ldelem.r4";
 				case 153
 					return "ldelem.r8";
 				case 154
 					return "ldelem.ref";
 				case 155
 					return "stelem.i";
 				case 156
 					return "stelem.i1";
 				case 157
 					return "stelem.i2";
 				case 158
 					return "stelem.i4";
 				case 159
 					return "stelem.i8";
 				case 160
 					return "stelem.r4";
 				case 161
 					return "stelem.r8";
 				case 162
 					return "stelem.ref";
 				case 163
 					return "ldelem";
 				case 164
 					return "stelem";
 				case 165
 					return "unbox.any";
 				case 179
 					return "conv.ovf.i1";
 				case 180
 					return "conv.ovf.u1";
 				case 181
 					return "conv.ovf.i2";
 				case 182
 					return "conv.ovf.u2";
 				case 183
 					return "conv.ovf.i4";
 				case 184
 					return "conv.ovf.u4";
 				case 185
 					return "conv.ovf.i8";
 				case 186
 					return "conv.ovf.u8";
 				case 194
 					return "refanyval";
 				case 195
 					return "ckfinite";
 				case 198
 					return "mkrefany";
 				case 208
 					return "ldtoken";
 				case 209
 					return "conv.u2";
 				case 210
 					return "conv.u1";
 				case 211
 					return "conv.i";
 				case 212
 					return "conv.ovf.i";
 				case 213
 					return "conv.ovf.u";
 				case 214
 					return "add.ovf";
 				case 215
 					return "add.ovf.un";
 				case 216
 					return "mul.ovf";
 				case 217
 					return "mul.ovf.un";
 				case 218
 					return "sub.ovf";
 				case 219
 					return "sub.ovf.un";
 				case 220
 					return "endfinally";
 				case 221
 					return "leave";
 				case 222
 					return "leave.s";
 				case 223
 					return "stind.i";
 				case 224
 					return "conv.u";
 				case 248
 					return "prefix7";
 				case 249
 					return "prefix6";
 				case 250
 					return "prefix5";
 				case 251
 					return "prefix4";
 				case 252
 					return "prefix3";
 				case 253
 					return "prefix2";
 				case 254
 					return "prefix1";
 				case 255
 					return "prefixref";
 				case -512
 					return "arglist";
 				case -511
 					return "ceq";
 				case -510
 					return "cgt";
 				case -509
 					return "cgt.un";
 				case -508
 					return "clt";
 				case -507
 					return "clt.un";
 				case -506
 					return "ldftn";
 				case -505
 					return "ldvirtftn";
 				case -503
 					return "ldarg";
 				case -502
 					return "ldarga";
 				case -501
 					return "starg";
 				case -500
 					return "ldloc";
 				case -499
 					return "ldloca";
 				case -498
 					return "stloc";
 				case -497
 					return "localloc";
 				case -495
 					return "endfilter";
 				case -494
 					return "unaligned.";
 				case -493
 					return "volatile.";
 				case -492
 					return "tail.";
 				case -491
 					return "initobj";
 				case -490
 					return "constrained.";
 				case -489
 					return "cpblk";
 				case -488
 					return "initblk";
 				case -486
 					return "rethrow";
 				case -484
 					return "sizeof";
 				case -483
 					return "refanytype";
 				case -482
 					return "readonly.";
 			}
 			throw new ArgumentOutOfRangeException();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCodes.cs" startline="716" endline="747"><![CDATA[
 
 		public static bool TakesSingleByteArgument(OpCode inst)
 		{
 			switch (inst.Value)
 			{
 				case 14
 				case 15
 				case 16
 				case 17
 				case 18
 				case 19
 				case 31
 				case 43
 				case 44
 				case 45
 				case 46
 				case 47
 				case 48
 				case 49
 				case 50
 				case 51
 				case 52
 				case 53
 				case 54
 				case 55
 				case 222
 				case -494
 					return true;
 				default
 					return false;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCodes.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\OpCodes.cs" startline="30" endline="255"><![CDATA[
 		public static readonly OpCode Nop = new OpCode(4888);
 		public static readonly OpCode Break = new OpCode(4199116);
 		public static readonly OpCode Ldarg_0 = new OpCode(8492847);
 		public static readonly OpCode Ldarg_1 = new OpCode(12687151);
 		public static readonly OpCode Ldarg_2 = new OpCode(16881455);
 		public static readonly OpCode Ldarg_3 = new OpCode(21075759);
 		public static readonly OpCode Ldloc_0 = new OpCode(25270063);
 		public static readonly OpCode Ldloc_1 = new OpCode(29464367);
 		public static readonly OpCode Ldloc_2 = new OpCode(33658671);
 		public static readonly OpCode Ldloc_3 = new OpCode(37852975);
 		public static readonly OpCode Stloc_0 = new OpCode(41949467);
 		public static readonly OpCode Stloc_1 = new OpCode(46143771);
 		public static readonly OpCode Stloc_2 = new OpCode(50338075);
 		public static readonly OpCode Stloc_3 = new OpCode(54532379);
 		public static readonly OpCode Ldarg_S = new OpCode(58824508);
 		public static readonly OpCode Ldarga_S = new OpCode(63224012);
 		public static readonly OpCode Starg_S = new OpCode(67115304);
 		public static readonly OpCode Ldloc_S = new OpCode(71407420);
 		public static readonly OpCode Ldloca_S = new OpCode(75806924);
 		public static readonly OpCode Stloc_S = new OpCode(79698216);
 		public static readonly OpCode Ldnull = new OpCode(84609339);
 		public static readonly OpCode Ldc_I4_M1 = new OpCode(88389823);
 		public static readonly OpCode Ldc_I4_0 = new OpCode(92584127);
 		public static readonly OpCode Ldc_I4_1 = new OpCode(96778431);
 		public static readonly OpCode Ldc_I4_2 = new OpCode(100972735);
 		public static readonly OpCode Ldc_I4_3 = new OpCode(105167039);
 		public static readonly OpCode Ldc_I4_4 = new OpCode(109361343);
 		public static readonly OpCode Ldc_I4_5 = new OpCode(113555647);
 		public static readonly OpCode Ldc_I4_6 = new OpCode(117749951);
 		public static readonly OpCode Ldc_I4_7 = new OpCode(121944255);
 		public static readonly OpCode Ldc_I4_8 = new OpCode(126138559);
 		public static readonly OpCode Ldc_I4_S = new OpCode(130332874);
 		public static readonly OpCode Ldc_I4 = new OpCode(134530584);
 		public static readonly OpCode Ldc_I8 = new OpCode(138827489);
 		public static readonly OpCode Ldc_R4 = new OpCode(143124407);
 		public static readonly OpCode Ldc_R8 = new OpCode(147421301);
 		public static readonly OpCode Dup = new OpCode(155404637);
 		public static readonly OpCode Pop = new OpCode(159393399);
 		public static readonly OpCode Jmp = new OpCode(163582686);
 		public static readonly OpCode Call = new OpCode(168690130);
 		public static readonly OpCode Calli = new OpCode(172884439);
 		public static readonly OpCode Ret = new OpCode(176258034);
 		public static readonly OpCode Br_S = new OpCode(180356455);
 		public static readonly OpCode Brfalse_S = new OpCode(184566035);
 		public static readonly OpCode Brtrue_S = new OpCode(188760339);
 		public static readonly OpCode Beq_S = new OpCode(192949342);
 		public static readonly OpCode Bge_S = new OpCode(197143646);
 		public static readonly OpCode Bgt_S = new OpCode(201337950);
 		public static readonly OpCode Ble_S = new OpCode(205532254);
 		public static readonly OpCode Blt_S = new OpCode(209726558);
 		public static readonly OpCode Bne_Un_S = new OpCode(213920862);
 		public static readonly OpCode Bge_Un_S = new OpCode(218115166);
 		public static readonly OpCode Bgt_Un_S = new OpCode(222309470);
 		public static readonly OpCode Ble_Un_S = new OpCode(226503774);
 		public static readonly OpCode Blt_Un_S = new OpCode(230698078);
 		public static readonly OpCode Br = new OpCode(234885812);
 		public static readonly OpCode Brfalse = new OpCode(239095392);
 		public static readonly OpCode Brtrue = new OpCode(243289696);
 		public static readonly OpCode Beq = new OpCode(247475279);
 		public static readonly OpCode Bge = new OpCode(251669583);
 		public static readonly OpCode Bgt = new OpCode(255863887);
 		public static readonly OpCode Ble = new OpCode(260058191);
 		public static readonly OpCode Blt = new OpCode(264252495);
 		public static readonly OpCode Bne_Un = new OpCode(268446799);
 		public static readonly OpCode Bge_Un = new OpCode(272641103);
 		public static readonly OpCode Bgt_Un = new OpCode(276835407);
 		public static readonly OpCode Ble_Un = new OpCode(281029711);
 		public static readonly OpCode Blt_Un = new OpCode(285224015);
 		public static readonly OpCode Switch = new OpCode(289427051);
 		public static readonly OpCode Ldind_I1 = new OpCode(293929358);
 		public static readonly OpCode Ldind_U1 = new OpCode(298123662);
 		public static readonly OpCode Ldind_I2 = new OpCode(302317966);
 		public static readonly OpCode Ldind_U2 = new OpCode(306512270);
 		public static readonly OpCode Ldind_I4 = new OpCode(310706574);
 		public static readonly OpCode Ldind_U4 = new OpCode(314900878);
 		public static readonly OpCode Ldind_I8 = new OpCode(319197782);
 		public static readonly OpCode Ldind_I = new OpCode(323289486);
 		public static readonly OpCode Ldind_R4 = new OpCode(327688990);
 		public static readonly OpCode Ldind_R8 = new OpCode(331985894);
 		public static readonly OpCode Ldind_Ref = new OpCode(336282798);
 		public static readonly OpCode Stind_Ref = new OpCode(339768820);
 		public static readonly OpCode Stind_I1 = new OpCode(343963124);
 		public static readonly OpCode Stind_I2 = new OpCode(348157428);
 		public static readonly OpCode Stind_I4 = new OpCode(352351732);
 		public static readonly OpCode Stind_I8 = new OpCode(356551166);
 		public static readonly OpCode Stind_R4 = new OpCode(360755730);
 		public static readonly OpCode Stind_R8 = new OpCode(364955164);
 		public static readonly OpCode Add = new OpCode(369216329);
 		public static readonly OpCode Sub = new OpCode(373410633);
 		public static readonly OpCode Mul = new OpCode(377604937);
 		public static readonly OpCode Div = new OpCode(381799241);
 		public static readonly OpCode Div_Un = new OpCode(385993545);
 		public static readonly OpCode Rem = new OpCode(390187849);
 		public static readonly OpCode Rem_Un = new OpCode(394382153);
 		public static readonly OpCode And = new OpCode(398576457);
 		public static readonly OpCode Or = new OpCode(402770761);
 		public static readonly OpCode Xor = new OpCode(406965065);
 		public static readonly OpCode Shl = new OpCode(411159369);
 		public static readonly OpCode Shr = new OpCode(415353673);
 		public static readonly OpCode Shr_Un = new OpCode(419547977);
 		public static readonly OpCode Neg = new OpCode(423737322);
 		public static readonly OpCode Not = new OpCode(427931626);
 		public static readonly OpCode Conv_I1 = new OpCode(432331130);
 		public static readonly OpCode Conv_I2 = new OpCode(436525434);
 		public static readonly OpCode Conv_I4 = new OpCode(440719738);
 		public static readonly OpCode Conv_I8 = new OpCode(445016642);
 		public static readonly OpCode Conv_R4 = new OpCode(449313546);
 		public static readonly OpCode Conv_R8 = new OpCode(453610450);
 		public static readonly OpCode Conv_U4 = new OpCode(457496954);
 		public static readonly OpCode Conv_U8 = new OpCode(461793858);
 		public static readonly OpCode Callvirt = new OpCode(466484004);
 		public static readonly OpCode Cpobj = new OpCode(469790542);
 		public static readonly OpCode Ldobj = new OpCode(474077528);
 		public static readonly OpCode Ldstr = new OpCode(478872210);
 		public static readonly OpCode Newobj = new OpCode(483158791);
 		public static readonly OpCode Castclass = new OpCode(487311950);
 		public static readonly OpCode Isinst = new OpCode(491095854);
 		public static readonly OpCode Conv_R_Un = new OpCode(495553490);
 		public static readonly OpCode Unbox = new OpCode(507874780);
 		public static readonly OpCode Throw = new OpCode(511759452);
 		public static readonly OpCode Ldfld = new OpCode(516056466);
 		public static readonly OpCode Ldflda = new OpCode(520455970);
 		public static readonly OpCode Stfld = new OpCode(524347262);
 		public static readonly OpCode Ldsfld = new OpCode(528588249);
 		public static readonly OpCode Ldsflda = new OpCode(532987753);
 		public static readonly OpCode Stsfld = new OpCode(536879045);
 		public static readonly OpCode Stobj = new OpCode(541090290);
 		public static readonly OpCode Conv_Ovf_I1_Un = new OpCode(545577338);
 		public static readonly OpCode Conv_Ovf_I2_Un = new OpCode(549771642);
 		public static readonly OpCode Conv_Ovf_I4_Un = new OpCode(553965946);
 		public static readonly OpCode Conv_Ovf_I8_Un = new OpCode(558262850);
 		public static readonly OpCode Conv_Ovf_U1_Un = new OpCode(562354554);
 		public static readonly OpCode Conv_Ovf_U2_Un = new OpCode(566548858);
 		public static readonly OpCode Conv_Ovf_U4_Un = new OpCode(570743162);
 		public static readonly OpCode Conv_Ovf_U8_Un = new OpCode(575040066);
 		public static readonly OpCode Conv_Ovf_I_Un = new OpCode(579131770);
 		public static readonly OpCode Conv_Ovf_U_Un = new OpCode(583326074);
 		public static readonly OpCode Box = new OpCode(587930786);
 		public static readonly OpCode Newarr = new OpCode(592133640);
 		public static readonly OpCode Ldlen = new OpCode(595953446);
 		public static readonly OpCode Ldelema = new OpCode(600157847);
 		public static readonly OpCode Ldelem_I1 = new OpCode(604352143);
 		public static readonly OpCode Ldelem_U1 = new OpCode(608546447);
 		public static readonly OpCode Ldelem_I2 = new OpCode(612740751);
 		public static readonly OpCode Ldelem_U2 = new OpCode(616935055);
 		public static readonly OpCode Ldelem_I4 = new OpCode(621129359);
 		public static readonly OpCode Ldelem_U4 = new OpCode(625323663);
 		public static readonly OpCode Ldelem_I8 = new OpCode(629620567);
 		public static readonly OpCode Ldelem_I = new OpCode(633712271);
 		public static readonly OpCode Ldelem_R4 = new OpCode(638111775);
 		public static readonly OpCode Ldelem_R8 = new OpCode(642408679);
 		public static readonly OpCode Ldelem_Ref = new OpCode(646705583);
 		public static readonly OpCode Stelem_I = new OpCode(650186475);
 		public static readonly OpCode Stelem_I1 = new OpCode(654380779);
 		public static readonly OpCode Stelem_I2 = new OpCode(658575083);
 		public static readonly OpCode Stelem_I4 = new OpCode(662769387);
 		public static readonly OpCode Stelem_I8 = new OpCode(666968821);
 		public static readonly OpCode Stelem_R4 = new OpCode(671168255);
 		public static readonly OpCode Stelem_R8 = new OpCode(675367689);
 		public static readonly OpCode Stelem_Ref = new OpCode(679567123);
 		public static readonly OpCode Ldelem = new OpCode(683838727);
 		public static readonly OpCode Stelem = new OpCode(687965999);
 		public static readonly OpCode Unbox_Any = new OpCode(692217246);
 		public static readonly OpCode Conv_Ovf_I1 = new OpCode(751098234);
 		public static readonly OpCode Conv_Ovf_U1 = new OpCode(755292538);
 		public static readonly OpCode Conv_Ovf_I2 = new OpCode(759486842);
 		public static readonly OpCode Conv_Ovf_U2 = new OpCode(763681146);
 		public static readonly OpCode Conv_Ovf_I4 = new OpCode(767875450);
 		public static readonly OpCode Conv_Ovf_U4 = new OpCode(772069754);
 		public static readonly OpCode Conv_Ovf_I8 = new OpCode(776366658);
 		public static readonly OpCode Conv_Ovf_U8 = new OpCode(780560962);
 		public static readonly OpCode Refanyval = new OpCode(814012802);
 		public static readonly OpCode Ckfinite = new OpCode(818514898);
 		public static readonly OpCode Mkrefany = new OpCode(830595078);
 		public static readonly OpCode Ldtoken = new OpCode(872728098);
 		public static readonly OpCode Conv_U2 = new OpCode(876927354);
 		public static readonly OpCode Conv_U1 = new OpCode(881121658);
 		public static readonly OpCode Conv_I = new OpCode(885315962);
 		public static readonly OpCode Conv_Ovf_I = new OpCode(889510266);
 		public static readonly OpCode Conv_Ovf_U = new OpCode(893704570);
 		public static readonly OpCode Add_Ovf = new OpCode(897698633);
 		public static readonly OpCode Add_Ovf_Un = new OpCode(901892937);
 		public static readonly OpCode Mul_Ovf = new OpCode(906087241);
 		public static readonly OpCode Mul_Ovf_Un = new OpCode(910281545);
 		public static readonly OpCode Sub_Ovf = new OpCode(914475849);
 		public static readonly OpCode Sub_Ovf_Un = new OpCode(918670153);
 		public static readonly OpCode Endfinally = new OpCode(922751806);
 		public static readonly OpCode Leave = new OpCode(926945972);
 		public static readonly OpCode Leave_S = new OpCode(931140291);
 		public static readonly OpCode Stind_I = new OpCode(935359988);
 		public static readonly OpCode Conv_U = new OpCode(939841914);
 		public static readonly OpCode Prefix7 = new OpCode(1040189696);
 		public static readonly OpCode Prefix6 = new OpCode(1044384000);
 		public static readonly OpCode Prefix5 = new OpCode(1048578304);
 		public static readonly OpCode Prefix4 = new OpCode(1052772608);
 		public static readonly OpCode Prefix3 = new OpCode(1056966912);
 		public static readonly OpCode Prefix2 = new OpCode(1061161216);
 		public static readonly OpCode Prefix1 = new OpCode(1065355520);
 		public static readonly OpCode Prefixref = new OpCode(1069549824);
 		public static readonly OpCode Arglist = new OpCode(-2147170789);
 		public static readonly OpCode Ceq = new OpCode(-2142966567);
 		public static readonly OpCode Cgt = new OpCode(-2138772263);
 		public static readonly OpCode Cgt_Un = new OpCode(-2134577959);
 		public static readonly OpCode Clt = new OpCode(-2130383655);
 		public static readonly OpCode Clt_Un = new OpCode(-2126189351);
 		public static readonly OpCode Ldftn = new OpCode(-2122004966);
 		public static readonly OpCode Ldvirtftn = new OpCode(-2117759533);
 		public static readonly OpCode Ldarg = new OpCode(-2109627244);
 		public static readonly OpCode Ldarga = new OpCode(-2105227740);
 		public static readonly OpCode Starg = new OpCode(-2101336448);
 		public static readonly OpCode Ldloc = new OpCode(-2097044332);
 		public static readonly OpCode Ldloca = new OpCode(-2092644828);
 		public static readonly OpCode Stloc = new OpCode(-2088753536);
 		public static readonly OpCode Localloc = new OpCode(-2084241010);
 		public static readonly OpCode Endfilter = new OpCode(-2076160335);
 		public static readonly OpCode Unaligned = new OpCode(-2071982151);
 		public static readonly OpCode Volatile = new OpCode(-2067787858);
 		public static readonly OpCode Tailcall = new OpCode(-2063593554);
 		public static readonly OpCode Initobj = new OpCode(-2059384859);
 		public static readonly OpCode Constrained = new OpCode(-2055204938);
 		public static readonly OpCode Cpblk = new OpCode(-2050974371);
 		public static readonly OpCode Initblk = new OpCode(-2046780067);
 		public static readonly OpCode Rethrow = new OpCode(-2038428509);
 		public static readonly OpCode Sizeof = new OpCode(-2029730269);
 		public static readonly OpCode Refanytype = new OpCode(-2025531014);
 		public static readonly OpCode Readonly = new OpCode(-2021650514);
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="41" endline="114"><![CDATA[
 		private readonly Guid mvid = Guid.NewGuid();
 		private long imageBaseAddress = 0x00400000;
 		private readonly AssemblyBuilder asm;
 		internal readonly string moduleName;
 		internal readonly string fileName;
 		internal readonly ISymbolWriterImpl symbolWriter;
 		private readonly TypeBuilder moduleType;
 		private readonly List<TypeBuilder> types = new List<TypeBuilder>();
 		private readonly Dictionary<Type, int> typeTokens = new Dictionary<Type, int>();
 		private readonly Dictionary<Type, int> memberRefTypeTokens = new Dictionary<Type, int>();
 		private readonly Dictionary<string, TypeBuilder> fullNameToType = new Dictionary<string, TypeBuilder>();
 		internal readonly ByteBuffer methodBodies = new ByteBuffer(128 * 1024);
 		internal readonly List<int> tokenFixupOffsets = new List<int>();
 		internal readonly ByteBuffer initializedData = new ByteBuffer(512);
 		internal readonly ByteBuffer manifestResources = new ByteBuffer(512);
 		internal ResourceSection unmanagedResources;
 		private readonly Dictionary<MemberInfo, int> importedMembers = new Dictionary<MemberInfo, int>();
 		private readonly Dictionary<MemberRefKey, int> importedMemberRefs = new Dictionary<MemberRefKey, int>();
 		private readonly Dictionary<Assembly, int> referencedAssemblies = new Dictionary<Assembly, int>();
 		private List<AssemblyName> referencedAssemblyNames;
 		private int nextPseudoToken = -1;
 		private readonly List<int> resolvedTokens = new List<int>();
 		internal readonly TableHeap Tables = new TableHeap();
 		internal readonly StringHeap Strings = new StringHeap();
 		internal readonly UserStringHeap UserStrings = new UserStringHeap();
 		internal readonly GuidHeap Guids = new GuidHeap();
 		internal readonly BlobHeap Blobs = new BlobHeap();
 
 		struct MemberRefKey 
 		{
 			private readonly Type type;
 			private readonly string name;
 			private readonly Signature signature;
 
 			internal MemberRefKey(Type type, string name, Signature signature)
 			{
 				this.type = type;
 				this.name = name;
 				this.signature = signature;
 			}
 
 			public bool Equals(MemberRefKey other)
 			{
 				return other.type.Equals(type)
 					&& other.name == name
 					&& other.signature.Equals(signature);
 			}
 
 			public override bool Equals(object obj)
 			{
 				MemberRefKey? other = obj as MemberRefKey?;
 				return other != null && Equals(other);
 			}
 
 			public override int GetHashCode()
 			{
 				return type.GetHashCode() + name.GetHashCode() + signature.GetHashCode();
 			}
 		}
 
 		internal ModuleBuilder(AssemblyBuilder asm, string moduleName, string fileName, bool emitSymbolInfo)
 			
 		{
 			this.asm = asm;
 			this.moduleName = moduleName;
 			this.fileName = fileName;
 			if (emitSymbolInfo)
 			{
 				symbolWriter = SymbolSupport.CreateSymbolWriterFor(this);
 			}
 			// <Module> must be the first record in the TypeDef table
 			moduleType = new TypeBuilder(this, "<Module>", null, 0);
 			types.Add(moduleType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="115" endline="125"><![CDATA[
 
 		internal void PopulatePropertyAndEventTables()
 		{
 			// LAMESPEC the PropertyMap and EventMap tables are not required to be sorted by the CLI spec,
 			// but .NET sorts them and Mono requires them to be sorted, so we have to populate the
 			// tables in the right order
 			foreach (TypeBuilder type in types)
 			{
 				type.PopulatePropertyAndEventTables();
 			}
 			foreach (TypeBuilder type in types)
 			{
 				type.PopulatePropertyAndEventTables();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="126" endline="135"><![CDATA[
 
 		internal void WriteTypeDefTable(MetadataWriter mw)
 		{
 			int fieldList = 1;
 			int methodList = 1;
 			foreach (TypeBuilder type in types)
 			{
 				type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
 			}
 			foreach (TypeBuilder type in types)
 			{
 				type.WriteTypeDefRecord(mw, ref fieldList, ref methodList);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="136" endline="144"><![CDATA[
 
 		internal void WriteMethodDefTable(int baseRVA, MetadataWriter mw)
 		{
 			int paramList = 1;
 			foreach (TypeBuilder type in types)
 			{
 				type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
 			}
 			foreach (TypeBuilder type in types)
 			{
 				type.WriteMethodDefRecords(baseRVA, mw, ref paramList);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="145" endline="152"><![CDATA[
 
 		internal void WriteParamTable(MetadataWriter mw)
 		{
 			foreach (TypeBuilder type in types)
 			{
 				type.WriteParamRecords(mw);
 			}
 			foreach (TypeBuilder type in types)
 			{
 				type.WriteParamRecords(mw);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="153" endline="160"><![CDATA[
 
 		internal void WriteFieldTable(MetadataWriter mw)
 		{
 			foreach (TypeBuilder type in types)
 			{
 				type.WriteFieldRecords(mw);
 			}
 			foreach (TypeBuilder type in types)
 			{
 				type.WriteFieldRecords(mw);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="161" endline="165"><![CDATA[
 
 		internal int AllocPseudoToken()
 		{
 			return nextPseudoToken--;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="166" endline="170"><![CDATA[
 
 		public TypeBuilder DefineType(string name)
 		{
 			return DefineType(name, TypeAttributes.Class);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="171" endline="175"><![CDATA[
 
 		public TypeBuilder DefineType(string name, TypeAttributes attr)
 		{
 			return DefineType(name, attr, null);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="176" endline="180"><![CDATA[
 
 		public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent)
 		{
 			return DefineType(name, attr, parent, PackingSize.Unspecified, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="181" endline="185"><![CDATA[
 
 		public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, int typesize)
 		{
 			return DefineType(name, attr, parent, PackingSize.Unspecified, typesize);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="186" endline="190"><![CDATA[
 
 		public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packsize)
 		{
 			return DefineType(name, attr, parent, packsize, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="191" endline="200"><![CDATA[
 
 		public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
 		{
 			TypeBuilder tb = DefineType(name, attr, parent);
 			foreach (Type iface in interfaces)
 			{
 				tb.AddInterfaceImplementation(iface);
 			}
 			foreach (Type iface in interfaces)
 			{
 				tb.AddInterfaceImplementation(iface);
 			}
 			return tb;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="201" endline="211"><![CDATA[
 
 		public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packingSize, int typesize)
 		{
 			if (parent == null && (attr & TypeAttributes.Interface) == 0)
 			{
 				parent = universe.System_Object;
 			}
 			TypeBuilder typeBuilder = new TypeBuilder(this, name, parent, attr);
 			PostDefineType(typeBuilder, packingSize, typesize);
 			return typeBuilder;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="212" endline="218"><![CDATA[
 
 		public EnumBuilder DefineEnum(string name, TypeAttributes visibility, Type underlyingType)
 		{
 			TypeBuilder tb = DefineType(name, (visibility & TypeAttributes.VisibilityMask) | TypeAttributes.Sealed, universe.System_Enum);
 			FieldBuilder fb = tb.DefineField("value__", underlyingType, FieldAttributes.Public | FieldAttributes.SpecialName | FieldAttributes.RTSpecialName);
 			return new EnumBuilder(tb, fb);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="219" endline="236"><![CDATA[
 
 		internal TypeBuilder DefineNestedTypeHelper(TypeBuilder enclosingType, string name, TypeAttributes attr, Type parent, PackingSize packingSize, int typesize)
 		{
 			if (parent == null && (attr & TypeAttributes.Interface) == 0)
 			{
 				parent = universe.System_Object;
 			}
 			TypeBuilder typeBuilder = new TypeBuilder(enclosingType, name, parent, attr);
 			PostDefineType(typeBuilder, packingSize, typesize);
 			if (enclosingType != null)
 			{
 				NestedClassTable.Record rec = new NestedClassTable.Record();
 				rec.NestedClass = typeBuilder.MetadataToken;
 				rec.EnclosingClass = enclosingType.MetadataToken;
 				this.NestedClass.AddRecord(rec);
 			}
 			return typeBuilder;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="237" endline="250"><![CDATA[
 
 		private void PostDefineType(TypeBuilder typeBuilder, PackingSize packingSize, int typesize)
 		{
 			types.Add(typeBuilder);
 			fullNameToType.Add(typeBuilder.FullName, typeBuilder);
 			if (packingSize != PackingSize.Unspecified || typesize != 0)
 			{
 				ClassLayoutTable.Record rec = new ClassLayoutTable.Record();
 				rec.PackingSize = (short)packingSize;
 				rec.ClassSize = typesize;
 				rec.Parent = typeBuilder.MetadataToken;
 				this.ClassLayout.AddRecord(rec);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="251" endline="255"><![CDATA[
 
 		public FieldBuilder __DefineField(string name, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes)
 		{
 			return moduleType.DefineField(name, type, requiredCustomModifiers, optionalCustomModifiers, attributes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="256" endline="260"><![CDATA[
 
 		public ConstructorBuilder __DefineModuleInitializer(MethodAttributes visibility)
 		{
 			return moduleType.DefineConstructor(visibility | MethodAttributes.Static | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName, CallingConventions.Standard, Type.EmptyTypes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="261" endline="265"><![CDATA[
 
 		public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes)
 		{
 			return moduleType.DefineUninitializedData(name, size, attributes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="266" endline="270"><![CDATA[
 
 		public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes)
 		{
 			return moduleType.DefineInitializedData(name, data, attributes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="271" endline="275"><![CDATA[
 
 		public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes)
 		{
 			return moduleType.DefineMethod(name, attributes, returnType, parameterTypes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="276" endline="280"><![CDATA[
 
 		public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
 		{
 			return moduleType.DefineMethod(name, attributes, callingConvention, returnType, parameterTypes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="281" endline="285"><![CDATA[
 
 		public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)
 		{
 			return moduleType.DefineMethod(name, attributes, callingConvention, returnType, requiredReturnTypeCustomModifiers, optionalReturnTypeCustomModifiers, parameterTypes, requiredParameterTypeCustomModifiers, optionalParameterTypeCustomModifiers);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="286" endline="290"><![CDATA[
 
 		public MethodBuilder DefinePInvokeMethod(string name, string dllName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet)
 		{
 			return moduleType.DefinePInvokeMethod(name, dllName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="291" endline="295"><![CDATA[
 
 		public MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet)
 		{
 			return moduleType.DefinePInvokeMethod(name, dllName, entryName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="296" endline="300"><![CDATA[
 
 		public void CreateGlobalFunctions()
 		{
 			moduleType.CreateType();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="301" endline="311"><![CDATA[
 
 		internal void AddTypeForwarder(Type type)
 		{
 			ExportType(type);
 			foreach (Type nested in type.GetNestedTypes(BindingFlags.Public | BindingFlags.NonPublic))
 			{
 				// we export all nested types (i.e. even the private ones)
 				// (this behavior is the same as the C# compiler)
 				AddTypeForwarder(nested);
 			}
 			foreach (Type nested in type.GetNestedTypes(BindingFlags.Public | BindingFlags.NonPublic))
 			{
 				// we export all nested types (i.e. even the private ones)
 				// (this behavior is the same as the C# compiler)
 				AddTypeForwarder(nested);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="312" endline="332"><![CDATA[
 
 		private int ExportType(Type type)
 		{
 			ExportedTypeTable.Record rec = new ExportedTypeTable.Record();
 			rec.TypeDefId = type.MetadataToken;
 			rec.TypeName = this.Strings.Add(TypeNameParser.Unescape(type.Name));
 			if (type.IsNested)
 			{
 				rec.Flags = 0;
 				rec.TypeNamespace = 0;
 				rec.Implementation = ExportType(type.DeclaringType);
 			}
 			else
 			{
 				rec.Flags = 0x00200000;	// CorTypeAttr.tdForwarder
 				string ns = type.Namespace;
 				rec.TypeNamespace = ns == null ? 0 
 				rec.Implementation = ImportAssemblyRef(type.Assembly);
 			}
 			return 0x27000000 | this.ExportedType.FindOrAddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="333" endline="337"><![CDATA[
 
 		public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
 		{
 			SetCustomAttribute(new CustomAttributeBuilder(con, binaryAttribute));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="338" endline="342"><![CDATA[
 
 		public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
 		{
 			SetCustomAttribute(0x00000001, customBuilder);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="343" endline="352"><![CDATA[
 
 		internal void SetCustomAttribute(int token, CustomAttributeBuilder customBuilder)
 		{
 			Debug.Assert(!customBuilder.IsPseudoCustomAttribute);
 			CustomAttributeTable.Record rec = new CustomAttributeTable.Record();
 			rec.Parent = token;
 			rec.Type = this.GetConstructorToken(customBuilder.Constructor).Token;
 			rec.Value = customBuilder.WriteBlob(this);
 			this.CustomAttribute.AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="353" endline="362"><![CDATA[
 
 		internal void AddDeclarativeSecurity(int token, System.Security.Permissions.SecurityAction securityAction, System.Security.PermissionSet permissionSet)
 		{
 			DeclSecurityTable.Record rec = new DeclSecurityTable.Record();
 			rec.Action = (short)securityAction;
 			rec.Parent = token;
 			// like Ref.Emit, we're using the .NET 1.x xml format
 			rec.PermissionSet = this.Blobs.Add(ByteBuffer.Wrap(System.Text.Encoding.Unicode.GetBytes(permissionSet.ToXml().ToString())));
 			this.DeclSecurity.AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="363" endline="395"><![CDATA[
 
 		internal void AddDeclarativeSecurity(int token, List<CustomAttributeBuilder> declarativeSecurity)
 		{
 			Dictionary<int, List<CustomAttributeBuilder>> ordered = new Dictionary<int, List<CustomAttributeBuilder>>();
 			foreach (CustomAttributeBuilder cab in declarativeSecurity)
 			{
 				int action;
 				// check for HostProtectionAttribute without SecurityAction
 				if (cab.ConstructorArgumentCount == 0)
 				{
 					action = (int)System.Security.Permissions.SecurityAction.LinkDemand;
 				}
 				else
 				{
 					action = (int)cab.GetConstructorArgument(0);
 				}
 				List<CustomAttributeBuilder> list;
 				if (!ordered.TryGetValue(action, out list))
 				{
 					list = new List<CustomAttributeBuilder>();
 					ordered.Add(action, list);
 				}
 				list.Add(cab);
 			}
 			foreach (CustomAttributeBuilder cab in declarativeSecurity)
 			{
 				int action;
 				// check for HostProtectionAttribute without SecurityAction
 				if (cab.ConstructorArgumentCount == 0)
 				{
 					action = (int)System.Security.Permissions.SecurityAction.LinkDemand;
 				}
 				else
 				{
 					action = (int)cab.GetConstructorArgument(0);
 				}
 				List<CustomAttributeBuilder> list;
 				if (!ordered.TryGetValue(action, out list))
 				{
 					list = new List<CustomAttributeBuilder>();
 					ordered.Add(action, list);
 				}
 				list.Add(cab);
 			}
 			foreach (KeyValuePair<int, List<CustomAttributeBuilder>> kv in ordered)
 			{
 				DeclSecurityTable.Record rec = new DeclSecurityTable.Record();
 				rec.Action = (short)kv.Key;
 				rec.Parent = token;
 				rec.PermissionSet = WriteDeclSecurityBlob(kv.Value);
 				this.DeclSecurity.AddRecord(rec);
 			}
 			foreach (KeyValuePair<int, List<CustomAttributeBuilder>> kv in ordered)
 			{
 				DeclSecurityTable.Record rec = new DeclSecurityTable.Record();
 				rec.Action = (short)kv.Key;
 				rec.Parent = token;
 				rec.PermissionSet = WriteDeclSecurityBlob(kv.Value);
 				this.DeclSecurity.AddRecord(rec);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="396" endline="412"><![CDATA[
 
 		private int WriteDeclSecurityBlob(List<CustomAttributeBuilder> list)
 		{
 			ByteBuffer namedArgs = new ByteBuffer(100);
 			ByteBuffer bb = new ByteBuffer(list.Count * 100);
 			bb.Write((byte)'.');
 			bb.WriteCompressedInt(list.Count);
 			foreach (CustomAttributeBuilder cab in list)
 			{
 				bb.Write(cab.Constructor.DeclaringType.AssemblyQualifiedName);
 				namedArgs.Clear();
 				cab.WriteNamedArgumentsForDeclSecurity(this, namedArgs);
 				bb.WriteCompressedInt(namedArgs.Length);
 				bb.Write(namedArgs);
 			}
 			foreach (CustomAttributeBuilder cab in list)
 			{
 				bb.Write(cab.Constructor.DeclaringType.AssemblyQualifiedName);
 				namedArgs.Clear();
 				cab.WriteNamedArgumentsForDeclSecurity(this, namedArgs);
 				bb.WriteCompressedInt(namedArgs.Length);
 				bb.Write(namedArgs);
 			}
 			return this.Blobs.Add(bb);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="413" endline="428"><![CDATA[
 
 		public void DefineManifestResource(string name, Stream stream, ResourceAttributes attribute)
 		{
 			ManifestResourceTable.Record rec = new ManifestResourceTable.Record();
 			rec.Offset = manifestResources.Position;
 			rec.Flags = (int)attribute;
 			rec.Name = this.Strings.Add(name);
 			rec.Implementation = 0;
 			this.ManifestResource.AddRecord(rec);
 			manifestResources.Write(0);	// placeholder for the length
 			manifestResources.Write(stream);
 			int savePosition = manifestResources.Position;
 			manifestResources.Position = rec.Offset;
 			manifestResources.Write(savePosition - (manifestResources.Position + 4));
 			manifestResources.Position = savePosition;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="429" endline="432"><![CDATA[
 
 		public override Assembly Assembly
 		{
 			get { return asm; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="433" endline="440"><![CDATA[
 		}
 
 		internal override Type GetTypeImpl(string typeName)
 		{
 			TypeBuilder type;
 			fullNameToType.TryGetValue(typeName, out type);
 			return type;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="441" endline="451"><![CDATA[
 
 		internal override void GetTypesImpl(List<Type> list)
 		{
 			foreach (Type type in types)
 			{
 				if (type != moduleType)
 				{
 					list.Add(type);
 				}
 			}
 			foreach (Type type in types)
 			{
 				if (type != moduleType)
 				{
 					list.Add(type);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="452" endline="456"><![CDATA[
 
 		public ISymbolDocumentWriter DefineDocument(string url, Guid language, Guid languageVendor, Guid documentType)
 		{
 			return symbolWriter.DefineDocument(url, language, languageVendor, documentType);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="457" endline="461"><![CDATA[
 
 		public TypeToken GetTypeToken(string name)
 		{
 			return new TypeToken(GetType(name, true, false).MetadataToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="462" endline="473"><![CDATA[
 
 		public TypeToken GetTypeToken(Type type)
 		{
 			if (type.Module == this)
 			{
 				return new TypeToken(type.GetModuleBuilderToken());
 			}
 			else
 			{
 				return new TypeToken(ImportType(type));
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="474" endline="497"><![CDATA[
 
 		internal int GetTypeTokenForMemberRef(Type type)
 		{
 			if (type.IsGenericTypeDefinition)
 			{
 				int token;
 				if (!memberRefTypeTokens.TryGetValue(type, out token))
 				{
 					ByteBuffer spec = new ByteBuffer(5);
 					Signature.WriteTypeSpec(this, spec, type);
 					token = 0x1B000000 | this.TypeSpec.AddRecord(this.Blobs.Add(spec));
 					memberRefTypeTokens.Add(type, token);
 				}
 				return token;
 			}
 			else if (type.IsModulePseudoType)
 			{
 				return 0x1A000000 | this.ModuleRef.FindOrAddRecord(this.Strings.Add(type.Module.ScopeName));
 			}
 			else
 			{
 				return GetTypeToken(type).Token;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="498" endline="503"><![CDATA[
 
 		private static bool IsFromGenericTypeDefinition(MemberInfo member)
 		{
 			Type decl = member.DeclaringType;
 			return decl != null && decl.IsGenericTypeDefinition;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="504" endline="519"><![CDATA[
 
 		public FieldToken GetFieldToken(FieldInfo field)
 		{
 			// NOTE for some reason, when TypeBuilder.GetFieldToken() is used on a field in a generic type definition,
 			// a memberref token is returned (confirmed on .NET) unlike for Get(Method|Constructor)Token which always
 			// simply returns the MethodDef token (if the method is from the same module).
 			FieldBuilder fb = field as FieldBuilder;
 			if (fb != null && fb.Module == this && !IsFromGenericTypeDefinition(fb))
 			{
 				return new FieldToken(fb.MetadataToken);
 			}
 			else
 			{
 				return new FieldToken(ImportMember(field));
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="520" endline="532"><![CDATA[
 
 		public MethodToken GetMethodToken(MethodInfo method)
 		{
 			MethodBuilder mb = method as MethodBuilder;
 			if (mb != null && mb.ModuleBuilder == this)
 			{
 				return new MethodToken(mb.MetadataToken);
 			}
 			else
 			{
 				return new MethodToken(ImportMember(method));
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="533" endline="550"><![CDATA[
 
 		// when we refer to a method on a generic type definition in the IL stream,
 		// we need to use a MemberRef (even if the method is in the same module)
 		internal MethodToken GetMethodTokenForIL(MethodInfo method)
 		{
 			if (method.IsGenericMethodDefinition)
 			{
 				method = method.MakeGenericMethod(method.GetGenericArguments());
 			}
 			if (IsFromGenericTypeDefinition(method))
 			{
 				return new MethodToken(ImportMember(method));
 			}
 			else
 			{
 				return GetMethodToken(method);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="551" endline="562"><![CDATA[
 
 		public MethodToken GetConstructorToken(ConstructorInfo constructor)
 		{
 			if (constructor.Module == this && constructor.GetMethodInfo() is MethodBuilder)
 			{
 				return new MethodToken(constructor.MetadataToken);
 			}
 			else
 			{
 				return new MethodToken(ImportMember(constructor));
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="563" endline="573"><![CDATA[
 
 		internal int ImportMember(MethodBase member)
 		{
 			int token;
 			if (!importedMembers.TryGetValue(member, out token))
 			{
 				token = member.ImportTo(this);
 				importedMembers.Add(member, token);
 			}
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="574" endline="584"><![CDATA[
 
 		internal int ImportMember(FieldInfo member)
 		{
 			int token;
 			if (!importedMembers.TryGetValue(member, out token))
 			{
 				token = member.ImportTo(this);
 				importedMembers.Add(member, token);
 			}
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="585" endline="601"><![CDATA[
 
 		internal int ImportMethodOrField(Type declaringType, string name, Signature sig)
 		{
 			int token;
 			if (!importedMemberRefs.TryGetValue(new MemberRefKey(declaringType, name, sig), out token))
 			{
 				MemberRefTable.Record rec = new MemberRefTable.Record();
 				rec.Class = GetTypeTokenForMemberRef(declaringType);
 				rec.Name = this.Strings.Add(name);
 				ByteBuffer bb = new ByteBuffer(16);
 				sig.WriteSig(this, bb);
 				rec.Signature = this.Blobs.Add(bb);
 				token = 0x0A000000 | this.MemberRef.AddRecord(rec);
 				importedMemberRefs.Add(new MemberRefKey(declaringType, name, sig), token);
 			}
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="602" endline="635"><![CDATA[
 
 		internal int ImportType(Type type)
 		{
 			int token;
 			if (!typeTokens.TryGetValue(type, out token))
 			{
 				if (type.HasElementType || (type.IsGenericType && !type.IsGenericTypeDefinition))
 				{
 					ByteBuffer spec = new ByteBuffer(5);
 					Signature.WriteTypeSpec(this, spec, type);
 					token = 0x1B000000 | this.TypeSpec.AddRecord(this.Blobs.Add(spec));
 				}
 				else
 				{
 					TypeRefTable.Record rec = new TypeRefTable.Record();
 					if (type.IsNested)
 					{
 						rec.ResolutionScope = GetTypeToken(type.DeclaringType).Token;
 						rec.TypeName = this.Strings.Add(TypeNameParser.Unescape(type.Name));
 						rec.TypeNameSpace = 0;
 					}
 					else
 					{
 						rec.ResolutionScope = ImportAssemblyRef(type.Assembly);
 						rec.TypeName = this.Strings.Add(TypeNameParser.Unescape(type.Name));
 						string ns = type.Namespace;
 						rec.TypeNameSpace = ns == null ? 0 
 					}
 					token = 0x01000000 | this.TypeRef.AddRecord(rec);
 				}
 				typeTokens.Add(type, token);
 			}
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="636" endline="650"><![CDATA[
 
 		private int ImportAssemblyRef(Assembly asm)
 		{
 			int token;
 			if (!referencedAssemblies.TryGetValue(asm, out token))
 			{
 				// We can't write the AssemblyRef record here yet, because the identity of the assembly can still change
 				// (if it's an AssemblyBuilder).
 				// We set the high bit of rid in the token to make sure we emit obviously broken metadata,
 				// if we forget to patch up the token somewhere.
 				token = 0x23800001 + referencedAssemblies.Count;
 				referencedAssemblies.Add(asm, token);
 			}
 			return token;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="651" endline="677"><![CDATA[
 
 		internal void FillAssemblyRefTable()
 		{
 			int[] realtokens = new int[referencedAssemblies.Count];
 			foreach (KeyValuePair<Assembly, int> kv in referencedAssemblies)
 			{
 				realtokens[(kv.Value & 0x7FFFFF) - 1] = FindOrAddAssemblyRef(kv.Key.GetName());
 			}
 			foreach (KeyValuePair<Assembly, int> kv in referencedAssemblies)
 			{
 				realtokens[(kv.Value & 0x7FFFFF) - 1] = FindOrAddAssemblyRef(kv.Key.GetName());
 			}
 			// now fixup the resolution scopes in TypeRef
 			for (int i = 0; i < this.TypeRef.records.Length; i++)
 			{
 				int resolutionScope = this.TypeRef.records[i].ResolutionScope;
 				if ((resolutionScope >> 24) == AssemblyRefTable.Index)
 				{
 					this.TypeRef.records[i].ResolutionScope = realtokens[(resolutionScope & 0x7FFFFF) - 1];
 				}
 			}
 			for (int i = 0; i < this.TypeRef.records.Length; i++)
 			{
 				int resolutionScope = this.TypeRef.records[i].ResolutionScope;
 				if ((resolutionScope >> 24) == AssemblyRefTable.Index)
 				{
 					this.TypeRef.records[i].ResolutionScope = realtokens[(resolutionScope & 0x7FFFFF) - 1];
 				}
 			}
 			// and implementation in ExportedType
 			for (int i = 0; i < this.ExportedType.records.Length; i++)
 			{
 				int implementation = this.ExportedType.records[i].Implementation;
 				if ((implementation >> 24) == AssemblyRefTable.Index)
 				{
 					this.ExportedType.records[i].Implementation = realtokens[(implementation & 0x7FFFFF) - 1];
 				}
 			}
 			for (int i = 0; i < this.ExportedType.records.Length; i++)
 			{
 				int implementation = this.ExportedType.records[i].Implementation;
 				if ((implementation >> 24) == AssemblyRefTable.Index)
 				{
 					this.ExportedType.records[i].Implementation = realtokens[(implementation & 0x7FFFFF) - 1];
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="678" endline="714"><![CDATA[
 
 		private int FindOrAddAssemblyRef(AssemblyName name)
 		{
 			AssemblyRefTable.Record rec = new AssemblyRefTable.Record();
 			Version ver = name.Version;
 			rec.MajorVersion = (ushort)ver.Major;
 			rec.MinorVersion = (ushort)ver.Minor;
 			rec.BuildNumber = (ushort)ver.Build;
 			rec.RevisionNumber = (ushort)ver.Revision;
 			rec.Flags = (int)(name.Flags & AssemblyNameFlags.Retargetable);
 			byte[] publicKeyOrToken = null;
 			if (usePublicKeyAssemblyReference)
 			{
 				publicKeyOrToken = name.GetPublicKey();
 			}
 			if (publicKeyOrToken == null || publicKeyOrToken.Length == 0)
 			{
 				publicKeyOrToken = name.GetPublicKeyToken();
 			}
 			else
 			{
 				const int PublicKey = 0x0001;
 				rec.Flags |= PublicKey;
 			}
 			rec.PublicKeyOrToken = this.Blobs.Add(ByteBuffer.Wrap(publicKeyOrToken));
 			rec.Name = this.Strings.Add(name.Name);
 			if (name.CultureInfo != null)
 			{
 				rec.Culture = this.Strings.Add(name.CultureInfo.Name);
 			}
 			else
 			{
 				rec.Culture = 0;
 			}
 			rec.HashValue = 0;
 			return 0x23000000 | this.AssemblyRef.FindOrAddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="715" endline="727"><![CDATA[
 
 		internal void WriteSymbolTokenMap()
 		{
 			for (int i = 0; i < resolvedTokens.Count; i++)
 			{
 				int newToken = resolvedTokens[i];
 				// The symbol API doesn't support remapping arbitrary integers, the types have to be the same,
 				// so we copy the type from the newToken, because our pseudo tokens don't have a type.
 				// (see MethodToken.SymbolToken)
 				int oldToken = (i + 1) | (newToken & ~0xFFFFFF);
 				SymbolSupport.RemapToken(symbolWriter, oldToken, newToken);
 			}
 			for (int i = 0; i < resolvedTokens.Count; i++)
 			{
 				int newToken = resolvedTokens[i];
 				// The symbol API doesn't support remapping arbitrary integers, the types have to be the same,
 				// so we copy the type from the newToken, because our pseudo tokens don't have a type.
 				// (see MethodToken.SymbolToken)
 				int oldToken = (i + 1) | (newToken & ~0xFFFFFF);
 				SymbolSupport.RemapToken(symbolWriter, oldToken, newToken);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="728" endline="737"><![CDATA[
 
 		internal void RegisterTokenFixup(int pseudoToken, int realToken)
 		{
 			int index = -(pseudoToken + 1);
 			while (resolvedTokens.Count <= index)
 			{
 				resolvedTokens.Add(0);
 			}
 			while (resolvedTokens.Count <= index)
 			{
 				resolvedTokens.Add(0);
 			}
 			resolvedTokens[index] = realToken;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="738" endline="742"><![CDATA[
 
 		internal bool IsPseudoToken(int token)
 		{
 			return token < 0;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="743" endline="748"><![CDATA[
 
 		internal int ResolvePseudoToken(int pseudoToken)
 		{
 			int index = -(pseudoToken + 1);
 			return resolvedTokens[index];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="749" endline="765"><![CDATA[
 
 		internal void FixupMethodBodyTokens()
 		{
 			int methodToken = 0x06000001;
 			int fieldToken = 0x04000001;
 			int parameterToken = 0x08000001;
 			foreach (TypeBuilder type in types)
 			{
 				type.ResolveMethodAndFieldTokens(ref methodToken, ref fieldToken, ref parameterToken);
 			}
 			foreach (TypeBuilder type in types)
 			{
 				type.ResolveMethodAndFieldTokens(ref methodToken, ref fieldToken, ref parameterToken);
 			}
 			foreach (int offset in tokenFixupOffsets)
 			{
 				methodBodies.Position = offset;
 				int pseudoToken = methodBodies.GetInt32AtCurrentPosition();
 				methodBodies.Write(ResolvePseudoToken(pseudoToken));
 			}
 			foreach (int offset in tokenFixupOffsets)
 			{
 				methodBodies.Position = offset;
 				int pseudoToken = methodBodies.GetInt32AtCurrentPosition();
 				methodBodies.Write(ResolvePseudoToken(pseudoToken));
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="766" endline="796"><![CDATA[
 
 		private int GetHeaderLength()
 		{
 			return
 				4 + // Signature
 				2 + // MajorVersion
 				2 + // MinorVersion
 				4 + // Reserved
 				4 + // ImageRuntimeVersion Length
 				StringToPaddedUTF8Length(asm.ImageRuntimeVersion) +
 				2 + // Flags
 				2 + // Streams
 				4 + // #~ Offset
 				4 + // #~ Size
 				4 + // StringToPaddedUTF8Length("#~")
 				4 + // #Strings Offset
 				4 + // #Strings Size
 				12 + // StringToPaddedUTF8Length("#Strings")
 				4 + // #US Offset
 				4 + // #US Size
 				4 + // StringToPaddedUTF8Length("#US")
 				4 + // #GUID Offset
 				4 + // #GUID Size
 				8 + // StringToPaddedUTF8Length("#GUID")
 				(Blobs.IsEmpty ? 0 
 				(
 				4 + // #Blob Offset
 				4 + // #Blob Size
 				8   // StringToPaddedUTF8Length("#Blob")
 				));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="797" endline="803"><![CDATA[
 
 		internal int MetadataLength
 		{
 			get
 			{
 				return GetHeaderLength() + (Blobs.IsEmpty ? 0 
 			}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="804" endline="864"><![CDATA[
 		}
 
 		internal void WriteMetadata(MetadataWriter mw)
 		{
 			mw.Write(0x424A5342);			// Signature ("BSJB")
 			mw.Write((ushort)1);			// MajorVersion
 			mw.Write((ushort)1);			// MinorVersion
 			mw.Write(0);					// Reserved
 			byte[] version = StringToPaddedUTF8(asm.ImageRuntimeVersion);
 			mw.Write(version.Length);		// Length
 			mw.Write(version);
 			mw.Write((ushort)0);			// Flags
 			// #Blob is the only optional heap
 			if (Blobs.IsEmpty)
 			{
 				mw.Write((ushort)4);		// Streams
 			}
 			else
 			{
 				mw.Write((ushort)5);		// Streams
 			}
 
 			int offset = GetHeaderLength();
 
 			// Streams
 			mw.Write(offset);				// Offset
 			mw.Write(Tables.Length);		// Size
 			mw.Write(StringToPaddedUTF8("#~"));
 			offset += Tables.Length;
 
 			mw.Write(offset);				// Offset
 			mw.Write(Strings.Length);		// Size
 			mw.Write(StringToPaddedUTF8("#Strings"));
 			offset += Strings.Length;
 
 			mw.Write(offset);				// Offset
 			mw.Write(UserStrings.Length);	// Size
 			mw.Write(StringToPaddedUTF8("#US"));
 			offset += UserStrings.Length;
 
 			mw.Write(offset);				// Offset
 			mw.Write(Guids.Length);			// Size
 			mw.Write(StringToPaddedUTF8("#GUID"));
 			offset += Guids.Length;
 
 			if (!Blobs.IsEmpty)
 			{
 				mw.Write(offset);				// Offset
 				mw.Write(Blobs.Length);			// Size
 				mw.Write(StringToPaddedUTF8("#Blob"));
 			}
 
 			Tables.Write(mw);
 			Strings.Write(mw);
 			UserStrings.Write(mw);
 			Guids.Write(mw);
 			if (!Blobs.IsEmpty)
 			{
 				Blobs.Write(mw);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="865" endline="869"><![CDATA[
 
 		private static int StringToPaddedUTF8Length(string str)
 		{
 			return (System.Text.Encoding.UTF8.GetByteCount(str) + 4) & ~3;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="870" endline="876"><![CDATA[
 
 		private static byte[] StringToPaddedUTF8(string str)
 		{
 			byte[] buf = new byte[(System.Text.Encoding.UTF8.GetByteCount(str) + 4) & ~3];
 			System.Text.Encoding.UTF8.GetBytes(str, 0, str.Length, buf, 0);
 			return buf;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="877" endline="881"><![CDATA[
 
 		internal override void ExportTypes(int fileToken, ModuleBuilder manifestModule)
 		{
 			manifestModule.ExportTypes(types.ToArray(), fileToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="882" endline="908"><![CDATA[
 
 		internal void ExportTypes(Type[] types, int fileToken)
 		{
 			Dictionary<Type, int> declaringTypes = new Dictionary<Type, int>();
 			foreach (Type type in types)
 			{
 				if (!type.IsModulePseudoType && IsVisible(type))
 				{
 					ExportedTypeTable.Record rec = new ExportedTypeTable.Record();
 					rec.Flags = (int)type.Attributes;
 					rec.TypeDefId = type.MetadataToken & 0xFFFFFF;
 					rec.TypeName = this.Strings.Add(TypeNameParser.Unescape(type.Name));
 					string ns = type.Namespace;
 					rec.TypeNamespace = ns == null ? 0 
 					if (type.IsNested)
 					{
 						rec.Implementation = declaringTypes[type.DeclaringType];
 					}
 					else
 					{
 						rec.Implementation = fileToken;
 					}
 					int exportTypeToken = 0x27000000 | this.ExportedType.AddRecord(rec);
 					declaringTypes.Add(type, exportTypeToken);
 				}
 			}
 			foreach (Type type in types)
 			{
 				if (!type.IsModulePseudoType && IsVisible(type))
 				{
 					ExportedTypeTable.Record rec = new ExportedTypeTable.Record();
 					rec.Flags = (int)type.Attributes;
 					rec.TypeDefId = type.MetadataToken & 0xFFFFFF;
 					rec.TypeName = this.Strings.Add(TypeNameParser.Unescape(type.Name));
 					string ns = type.Namespace;
 					rec.TypeNamespace = ns == null ? 0 
 					if (type.IsNested)
 					{
 						rec.Implementation = declaringTypes[type.DeclaringType];
 					}
 					else
 					{
 						rec.Implementation = fileToken;
 					}
 					int exportTypeToken = 0x27000000 | this.ExportedType.AddRecord(rec);
 					declaringTypes.Add(type, exportTypeToken);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="909" endline="914"><![CDATA[
 
 		private static bool IsVisible(Type type)
 		{
 			// NOTE this is not the same as Type.IsVisible, because that doesn't take into account family access
 			return type.IsPublic || ((type.IsNestedFamily || type.IsNestedFamORAssem || type.IsNestedPublic) && IsVisible(type.DeclaringType));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="915" endline="1005"><![CDATA[
 
 		internal void AddConstant(int parentToken, object defaultValue)
 		{
 			ConstantTable.Record rec = new ConstantTable.Record();
 			rec.Parent = parentToken;
 			ByteBuffer val = new ByteBuffer(16);
 			if (defaultValue == null)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_CLASS;
 				val.Write((int)0);
 			}
 			else if (defaultValue is bool)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_BOOLEAN;
 				val.Write((bool)defaultValue ? (byte)1 
 			}
 			else if (defaultValue is char)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_CHAR;
 				val.Write((char)defaultValue);
 			}
 			else if (defaultValue is sbyte)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_I1;
 				val.Write((sbyte)defaultValue);
 			}
 			else if (defaultValue is byte)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_U1;
 				val.Write((byte)defaultValue);
 			}
 			else if (defaultValue is short)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_I2;
 				val.Write((short)defaultValue);
 			}
 			else if (defaultValue is ushort)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_U2;
 				val.Write((ushort)defaultValue);
 			}
 			else if (defaultValue is int)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_I4;
 				val.Write((int)defaultValue);
 			}
 			else if (defaultValue is uint)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_U4;
 				val.Write((uint)defaultValue);
 			}
 			else if (defaultValue is long)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_I8;
 				val.Write((long)defaultValue);
 			}
 			else if (defaultValue is ulong)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_U8;
 				val.Write((ulong)defaultValue);
 			}
 			else if (defaultValue is float)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_R4;
 				val.Write((float)defaultValue);
 			}
 			else if (defaultValue is double)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_R8;
 				val.Write((double)defaultValue);
 			}
 			else if (defaultValue is string)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_STRING;
 				foreach (char c in (string)defaultValue)
 				{
 					val.Write(c);
 				}
 				foreach (char c in (string)defaultValue)
 				{
 					val.Write(c);
 				}
 			}
 			else if (defaultValue is DateTime)
 			{
 				rec.Type = Signature.ELEMENT_TYPE_I8;
 				val.Write(((DateTime)defaultValue).Ticks);
 			}
 			else
 			{
 				throw new ArgumentException();
 			}
 			rec.Value = this.Blobs.Add(val);
 			this.Constant.AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1006" endline="1009"><![CDATA[
 
 		ModuleBuilder ITypeOwner.ModuleBuilder
 		{
 			get { return this; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1010" endline="1019"><![CDATA[
 		}
 
 		public override Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			if (genericTypeArguments != null || genericMethodArguments != null)
 			{
 				throw new NotImplementedException();
 			}
 			return types[(metadataToken & 0xFFFFFF) - 1];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1020" endline="1052"><![CDATA[
 
 		public override MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			if (genericTypeArguments != null || genericMethodArguments != null)
 			{
 				throw new NotImplementedException();
 			}
 			// this method is inefficient, but since it isn't used we don't care
 			if ((metadataToken >> 24) == MemberRefTable.Index)
 			{
 				foreach (KeyValuePair<MemberInfo, int> kv in importedMembers)
 				{
 					if (kv.Value == metadataToken)
 					{
 						return (MethodBase)kv.Key;
 					}
 				}
 				foreach (KeyValuePair<MemberInfo, int> kv in importedMembers)
 				{
 					if (kv.Value == metadataToken)
 					{
 						return (MethodBase)kv.Key;
 					}
 				}
 			}
 			// HACK if we're given a SymbolToken, we need to convert back
 			if ((metadataToken & 0xFF000000) == 0x06000000)
 			{
 				metadataToken = -(metadataToken & 0x00FFFFFF);
 			}
 			foreach (Type type in types)
 			{
 				MethodBase method = ((TypeBuilder)type).LookupMethod(metadataToken);
 				if (method != null)
 				{
 					return method;
 				}
 			}
 			foreach (Type type in types)
 			{
 				MethodBase method = ((TypeBuilder)type).LookupMethod(metadataToken);
 				if (method != null)
 				{
 					return method;
 				}
 			}
 			return ((TypeBuilder)moduleType).LookupMethod(metadataToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1053" endline="1056"><![CDATA[
 
 		public override FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			throw new NotImplementedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1057" endline="1061"><![CDATA[
 		}
 
 		public override MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
 		{
 			throw new NotImplementedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1062" endline="1066"><![CDATA[
 		}
 
 		public override string ResolveString(int metadataToken)
 		{
 			throw new NotImplementedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1067" endline="1071"><![CDATA[
 		}
 
 		public override string FullyQualifiedName
 		{
 			get { return Path.GetFullPath(Path.Combine(asm.dir, fileName)); }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1072" endline="1076"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return fileName; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1077" endline="1081"><![CDATA[
 		}
 
 		public override Guid ModuleVersionId
 		{
 			get { return mvid; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1082" endline="1086"><![CDATA[
 		}
 
 		public override Type[] __ResolveOptionalParameterTypes(int metadataToken)
 		{
 			throw new NotImplementedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1087" endline="1091"><![CDATA[
 		}
 
 		public override string ScopeName
 		{
 			get { return moduleName; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1092" endline="1097"><![CDATA[
 		}
 
 		public ISymbolWriter GetSymWriter()
 		{
 			return symbolWriter;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1098" endline="1105"><![CDATA[
 
 		public void DefineUnmanagedResource(string resourceFileName)
 		{
 			// This method reads the specified resource file (Win32 .res file) and converts it into the appropriate format and embeds it in the .rsrc section,
 			// also setting the Resource Directory entry.
 			unmanagedResources = new ResourceSection();
 			unmanagedResources.ExtractResources(System.IO.File.ReadAllBytes(resourceFileName));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1106" endline="1110"><![CDATA[
 
 		public bool IsTransient()
 		{
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1111" endline="1123"><![CDATA[
 
 		public void SetUserEntryPoint(MethodInfo entryPoint)
 		{
 			int token = entryPoint.MetadataToken;
 			if (token < 0)
 			{
 				token = -token | 0x06000000;
 			}
 			if (symbolWriter != null)
 			{
 				symbolWriter.SetUserEntryPoint(new SymbolToken(token));
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1124" endline="1128"><![CDATA[
 
 		public StringToken GetStringConstant(string str)
 		{
 			return new StringToken(this.UserStrings.Add(str) | (0x70 << 24));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1129" endline="1133"><![CDATA[
 
 		public SignatureToken GetSignatureToken(SignatureHelper sigHelper)
 		{
 			return new SignatureToken(this.StandAloneSig.FindOrAddRecord(this.Blobs.Add(sigHelper.GetSignature(this))) | (StandAloneSigTable.Index << 24));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1134" endline="1138"><![CDATA[
 
 		public SignatureToken GetSignatureToken(byte[] sigBytes, int sigLength)
 		{
 			return new SignatureToken(this.StandAloneSig.FindOrAddRecord(this.Blobs.Add(ByteBuffer.Wrap(sigBytes, sigLength))) | (StandAloneSigTable.Index << 24));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1139" endline="1143"><![CDATA[
 
 		public MethodInfo GetArrayMethod(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
 		{
 			return new ArrayMethod(this, arrayClass, methodName, callingConvention, returnType, parameterTypes);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1144" endline="1148"><![CDATA[
 
 		public MethodToken GetArrayMethodToken(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
 		{
 			return GetMethodToken(GetArrayMethod(arrayClass, methodName, callingConvention, returnType, parameterTypes));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1149" endline="1153"><![CDATA[
 
 		internal override Type GetModuleType()
 		{
 			return moduleType;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1154" endline="1158"><![CDATA[
 
 		internal override IKVM.Reflection.Reader.ByteReader GetBlob(int blobIndex)
 		{
 			return Blobs.GetBlob(blobIndex);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1159" endline="1165"><![CDATA[
 
 		internal int GetSignatureBlobIndex(Signature sig)
 		{
 			ByteBuffer bb = new ByteBuffer(16);
 			sig.WriteSig(this, bb);
 			return this.Blobs.Add(bb);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1166" endline="1170"><![CDATA[
 
 		// non-standard API
 		public long __ImageBase
 		{
 			get { return imageBaseAddress; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1171" endline="1171"><![CDATA[
 			set { imageBaseAddress = value; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1172" endline="1176"><![CDATA[
 		}
 
 		public override int MDStreamVersion
 		{
 			get { return asm.mdStreamVersion; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1177" endline="1186"><![CDATA[
 		}
 
 		private int AddTypeRefByName(int resolutionScope, string ns, string name)
 		{
 			TypeRefTable.Record rec = new TypeRefTable.Record();
 			rec.ResolutionScope = resolutionScope;
 			rec.TypeName = this.Strings.Add(name);
 			rec.TypeNameSpace = ns == null ? 0 
 			return 0x01000000 | this.TypeRef.AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1187" endline="1229"><![CDATA[
 
 		public void __Save(PortableExecutableKinds portableExecutableKind, ImageFileMachine imageFileMachine)
 		{
 			PopulatePropertyAndEventTables();
 			IList<CustomAttributeData> attributes = asm.GetCustomAttributesData(null);
 			if (attributes.Count > 0)
 			{
 				int mscorlib = ImportAssemblyRef(universe.Mscorlib);
 				int[] placeholderTokens = new int[4];
 				string[] placeholderTypeNames = new string[] { "AssemblyAttributesGoHere", "AssemblyAttributesGoHereM", "AssemblyAttributesGoHereS", "AssemblyAttributesGoHereSM" };
 				foreach (CustomAttributeData cad in attributes)
 				{
 					int index;
 					if (cad.Constructor.DeclaringType.BaseType == universe.System_Security_Permissions_CodeAccessSecurityAttribute)
 					{
 						if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute)
 						{
 							index = 3;
 						}
 						else
 						{
 							index = 2;
 						}
 					}
 					else if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute)
 					{
 						index = 1;
 					}
 					else
 					{
 						index = 0;
 					}
 					if (placeholderTokens[index] == 0)
 					{
 						// we manually add a TypeRef without looking it up in mscorlib, because Mono and Silverlight's mscorlib don't have these types
 						placeholderTokens[index] = AddTypeRefByName(mscorlib, "System.Runtime.CompilerServices", placeholderTypeNames[index]);
 					}
 					SetCustomAttribute(placeholderTokens[index], cad.__ToBuilder());
 				}
 				foreach (CustomAttributeData cad in attributes)
 				{
 					int index;
 					if (cad.Constructor.DeclaringType.BaseType == universe.System_Security_Permissions_CodeAccessSecurityAttribute)
 					{
 						if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute)
 						{
 							index = 3;
 						}
 						else
 						{
 							index = 2;
 						}
 					}
 					else if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute)
 					{
 						index = 1;
 					}
 					else
 					{
 						index = 0;
 					}
 					if (placeholderTokens[index] == 0)
 					{
 						// we manually add a TypeRef without looking it up in mscorlib, because Mono and Silverlight's mscorlib don't have these types
 						placeholderTokens[index] = AddTypeRefByName(mscorlib, "System.Runtime.CompilerServices", placeholderTypeNames[index]);
 					}
 					SetCustomAttribute(placeholderTokens[index], cad.__ToBuilder());
 				}
 			}
 			FillAssemblyRefTable();
 			ModuleWriter.WriteModule(null, null, this, PEFileKinds.Dll, portableExecutableKind, imageFileMachine, unmanagedResources, 0);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1230" endline="1239"><![CDATA[
 
 		public void __AddAssemblyReference(AssemblyName assemblyName)
 		{
 			if (referencedAssemblyNames == null)
 			{
 				referencedAssemblyNames = new List<AssemblyName>();
 			}
 			FindOrAddAssemblyRef(assemblyName);
 			referencedAssemblyNames.Add((AssemblyName)assemblyName.Clone());
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="1240" endline="1263"><![CDATA[
 
 		public override AssemblyName[] __GetReferencedAssemblies()
 		{
 			List<AssemblyName> list = new List<AssemblyName>();
 			if (referencedAssemblyNames != null)
 			{
 				foreach (AssemblyName name in referencedAssemblyNames)
 				{
 					if (!list.Contains(name))
 					{
 						list.Add(name);
 					}
 				}
 				foreach (AssemblyName name in referencedAssemblyNames)
 				{
 					if (!list.Contains(name))
 					{
 						list.Add(name);
 					}
 				}
 			}
 			foreach (Assembly asm in referencedAssemblies.Keys)
 			{
 				AssemblyName name = asm.GetName();
 				if (!list.Contains(name))
 				{
 					list.Add(name);
 				}
 			}
 			foreach (Assembly asm in referencedAssemblies.Keys)
 			{
 				AssemblyName name = asm.GetName();
 				if (!list.Contains(name))
 				{
 					list.Add(name);
 				}
 			}
 			return list.ToArray();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\ModuleBuilder.cs" startline="40" endline="40"><![CDATA[
 		private static readonly bool usePublicKeyAssemblyReference = false;
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="41" endline="53"><![CDATA[
 		internal FieldBuilder(TypeBuilder type, string name, Type fieldType, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attribs)
 		{
 			this.typeBuilder = type;
 			this.name = name;
 			this.pseudoToken = type.ModuleBuilder.AllocPseudoToken();
 			this.nameIndex = type.ModuleBuilder.Strings.Add(name);
 			this.fieldSig = FieldSignature.Create(fieldType, optionalCustomModifiers, requiredCustomModifiers);
 			ByteBuffer sig = new ByteBuffer(5);
 			fieldSig.WriteSig(this.typeBuilder.ModuleBuilder, sig);
 			this.signature = this.typeBuilder.ModuleBuilder.Blobs.Add(sig);
 			this.attribs = attribs;
 			this.typeBuilder.ModuleBuilder.Field.AddVirtualRecord();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="54" endline="59"><![CDATA[
 
 		public void SetConstant(object defaultValue)
 		{
 			attribs |= FieldAttributes.HasDefault;
 			typeBuilder.ModuleBuilder.AddConstant(pseudoToken, defaultValue);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="60" endline="64"><![CDATA[
 
 		public override object GetRawConstantValue()
 		{
 			return typeBuilder.Module.Constant.GetRawConstantValue(typeBuilder.Module, this.MetadataToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="65" endline="74"><![CDATA[
 
 		public void __SetDataAndRVA(byte[] data)
 		{
 			attribs |= FieldAttributes.HasFieldRVA;
 			FieldRVATable.Record rec = new FieldRVATable.Record();
 			rec.RVA = typeBuilder.ModuleBuilder.initializedData.Position;
 			rec.Field = pseudoToken;
 			typeBuilder.ModuleBuilder.FieldRVA.AddRecord(rec);
 			typeBuilder.ModuleBuilder.initializedData.Write(data);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="75" endline="78"><![CDATA[
 
 		public override void __GetDataFromRVA(byte[] data, int offset, int length)
 		{
 			throw new NotImplementedException();
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="79" endline="84"><![CDATA[
 		}
 
 		public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
 		{
 			SetCustomAttribute(new CustomAttributeBuilder(con, binaryAttribute));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="85" endline="111"><![CDATA[
 
 		public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
 		{
 			Universe u = this.Module.universe;
 			if (customBuilder.Constructor.DeclaringType == u.System_Runtime_InteropServices_FieldOffsetAttribute)
 			{
 				customBuilder = customBuilder.DecodeBlob(this.Module.Assembly);
 				SetOffset((int)customBuilder.GetConstructorArgument(0));
 			}
 			else if (customBuilder.Constructor.DeclaringType == u.System_Runtime_InteropServices_MarshalAsAttribute)
 			{
 				MarshalSpec.SetMarshalAsAttribute(typeBuilder.ModuleBuilder, pseudoToken, customBuilder);
 				attribs |= FieldAttributes.HasFieldMarshal;
 			}
 			else if (customBuilder.Constructor.DeclaringType == u.System_NonSerializedAttribute)
 			{
 				attribs |= FieldAttributes.NotSerialized;
 			}
 			else if (customBuilder.Constructor.DeclaringType == u.System_Runtime_CompilerServices_SpecialNameAttribute)
 			{
 				attribs |= FieldAttributes.SpecialName;
 			}
 			else
 			{
 				typeBuilder.ModuleBuilder.SetCustomAttribute(pseudoToken, customBuilder);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="112" endline="119"><![CDATA[
 
 		public void SetOffset(int iOffset)
 		{
 			FieldLayoutTable.Record rec = new FieldLayoutTable.Record();
 			rec.Offset = iOffset;
 			rec.Field = pseudoToken;
 			typeBuilder.ModuleBuilder.FieldLayout.AddRecord(rec);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="120" endline="123"><![CDATA[
 
 		public override FieldAttributes Attributes
 		{
 			get { return attribs; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="124" endline="128"><![CDATA[
 		}
 
 		public override Type DeclaringType
 		{
 			get { return typeBuilder.IsModulePseudoType ? null 
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="129" endline="133"><![CDATA[
 		}
 
 		public override string Name
 		{
 			get { return name; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="134" endline="138"><![CDATA[
 		}
 
 		public override int MetadataToken
 		{
 			get { return pseudoToken; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="139" endline="143"><![CDATA[
 		}
 
 		public override Module Module
 		{
 			get { return typeBuilder.Module; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="144" endline="149"><![CDATA[
 		}
 
 		public FieldToken GetToken()
 		{
 			return new FieldToken(pseudoToken);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="150" endline="156"><![CDATA[
 
 		internal void WriteFieldRecords(MetadataWriter mw)
 		{
 			mw.Write((short)attribs);
 			mw.WriteStringIndex(nameIndex);
 			mw.WriteBlobIndex(signature);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="157" endline="161"><![CDATA[
 
 		internal void FixupToken(int token)
 		{
 			typeBuilder.ModuleBuilder.RegisterTokenFixup(this.pseudoToken, token);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="162" endline="165"><![CDATA[
 
 		internal override FieldSignature FieldSignature
 		{
 			get { return fieldSig; }
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\Emit\FieldBuilder.cs" startline="166" endline="182"><![CDATA[
 		}
 
 		internal override int ImportTo(ModuleBuilder other)
 		{
 			if (typeBuilder.IsGenericTypeDefinition)
 			{
 				return other.ImportMember(TypeBuilder.GetField(typeBuilder, this));
 			}
 			else if (other == typeBuilder.ModuleBuilder)
 			{
 				return pseudoToken;
 			}
 			else
 			{
 				return other.ImportMethodOrField(typeBuilder, name, fieldSig);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AmbiguousMatchException.cs" startline="32" endline="34"><![CDATA[
 		public AmbiguousMatchException()
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AmbiguousMatchException.cs" startline="35" endline="39"><![CDATA[
 
 		public AmbiguousMatchException(string message)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AmbiguousMatchException.cs" startline="40" endline="44"><![CDATA[
 
 		public AmbiguousMatchException(string message, Exception inner)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\class\IKVM.Reflection\AmbiguousMatchException.cs" startline="45" endline="49"><![CDATA[
 
 		private AmbiguousMatchException(SerializationInfo info, StreamingContext context)
 			
 		{
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\rootcontext.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\rootcontext.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\rootcontext.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\rootcontext.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\rootcontext.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\rootcontext.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\rootcontext.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\rootcontext.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\rootcontext.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\rootcontext.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\rootcontext.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\mono\mono-2.10\mcs\mcs\class.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
</source_elements></project>
